
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
(function () {
  'use strict';

  var camelToDashMap = new Map();
  function camelToDash(str) {
    var result = camelToDashMap.get(str);

    if (result === undefined) {
      result = str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
      camelToDashMap.set(str, result);
    }

    return result;
  }
  function pascalToDash(str) {
    return camelToDash(str.replace(/((?!([A-Z]{2}|^))[A-Z])/g, '-$1'));
  }
  function shadyCSS(fn, fallback) {
    var shady = window.ShadyCSS;
    /* istanbul ignore next */

    if (shady && !shady.nativeShadow) {
      return fn(shady);
    }

    return fallback;
  }
  function stringifyElement(element) {
    var tagName = String(element.tagName).toLowerCase();
    return "<".concat(tagName, ">");
  }
  var IS_IE = 'ActiveXObject' in window;
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaE1hcCIsIk1hcCIsImNhbWVsVG9EYXNoIiwic3RyIiwicmVzdWx0IiwiZ2V0IiwidW5kZWZpbmVkIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwic2V0IiwicGFzY2FsVG9EYXNoIiwiZGlzcGF0Y2giLCJob3N0IiwiZXZlbnRUeXBlIiwib3B0aW9ucyIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJzaGFkeUNTUyIsImZuIiwiZmFsbGJhY2siLCJzaGFkeSIsIndpbmRvdyIsIlNoYWR5Q1NTIiwibmF0aXZlU2hhZG93Iiwic3RyaW5naWZ5RWxlbWVudCIsImVsZW1lbnQiLCJ0YWdOYW1lIiwiU3RyaW5nIiwiSVNfSUUiLCJkZWZlcnJlZCIsIlByb21pc2UiLCJyZXNvbHZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxjQUFjLEdBQUcsSUFBSUMsR0FBSixFQUF2QjtBQUNBLE9BQU8sU0FBU0MsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEI7QUFDL0IsTUFBSUMsTUFBTSxHQUFHSixjQUFjLENBQUNLLEdBQWYsQ0FBbUJGLEdBQW5CLENBQWI7O0FBQ0EsTUFBSUMsTUFBTSxLQUFLRSxTQUFmLEVBQTBCO0FBQ3hCRixJQUFBQSxNQUFNLEdBQUdELEdBQUcsQ0FBQ0ksT0FBSixDQUFZLGlCQUFaLEVBQStCLE9BQS9CLEVBQXdDQyxXQUF4QyxFQUFUO0FBQ0FSLElBQUFBLGNBQWMsQ0FBQ1MsR0FBZixDQUFtQk4sR0FBbkIsRUFBd0JDLE1BQXhCO0FBQ0Q7O0FBQ0QsU0FBT0EsTUFBUDtBQUNEO0FBRUQsT0FBTyxTQUFTTSxZQUFULENBQXNCUCxHQUF0QixFQUEyQjtBQUNoQyxTQUFPRCxXQUFXLENBQUNDLEdBQUcsQ0FBQ0ksT0FBSixDQUFZLDBCQUFaLEVBQXdDLEtBQXhDLENBQUQsQ0FBbEI7QUFDRDtBQUVELE9BQU8sU0FBU0ksUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLFNBQXhCLEVBQWlEO0FBQUEsTUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQ3RELFNBQU9GLElBQUksQ0FBQ0csYUFBTCxDQUFtQixJQUFJQyxXQUFKLENBQWdCSCxTQUFoQjtBQUE2QkksSUFBQUEsT0FBTyxFQUFFO0FBQXRDLEtBQWdESCxPQUFoRCxFQUFuQixDQUFQO0FBQ0Q7QUFFRCxPQUFPLFNBQVNJLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQXNCQyxRQUF0QixFQUFnQztBQUNyQyxNQUFNQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsUUFBckI7QUFFQTs7QUFDQSxNQUFJRixLQUFLLElBQUksQ0FBQ0EsS0FBSyxDQUFDRyxZQUFwQixFQUFrQztBQUNoQyxXQUFPTCxFQUFFLENBQUNFLEtBQUQsQ0FBVDtBQUNEOztBQUVELFNBQU9ELFFBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0ssZ0JBQVQsQ0FBMEJDLE9BQTFCLEVBQW1DO0FBQ3hDLE1BQU1DLE9BQU8sR0FBR0MsTUFBTSxDQUFDRixPQUFPLENBQUNDLE9BQVQsQ0FBTixDQUF3Qm5CLFdBQXhCLEVBQWhCO0FBQ0Esb0JBQVdtQixPQUFYO0FBQ0Q7QUFFRCxPQUFPLElBQU1FLEtBQUssR0FBRyxtQkFBbUJQLE1BQWpDO0FBQ1AsT0FBTyxJQUFNUSxRQUFRLEdBQUdDLE9BQU8sQ0FBQ0MsT0FBUixFQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNhbWVsVG9EYXNoTWFwID0gbmV3IE1hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsVG9EYXNoKHN0cikge1xuICBsZXQgcmVzdWx0ID0gY2FtZWxUb0Rhc2hNYXAuZ2V0KHN0cik7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlc3VsdCA9IHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNhbWVsVG9EYXNoTWFwLnNldChzdHIsIHJlc3VsdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbFRvRGFzaChzdHIpIHtcbiAgcmV0dXJuIGNhbWVsVG9EYXNoKHN0ci5yZXBsYWNlKC8oKD8hKFtBLVpdezJ9fF4pKVtBLVpdKS9nLCAnLSQxJykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2goaG9zdCwgZXZlbnRUeXBlLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIGhvc3QuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnRUeXBlLCB7IGJ1YmJsZXM6IGZhbHNlLCAuLi5vcHRpb25zIH0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWR5Q1NTKGZuLCBmYWxsYmFjaykge1xuICBjb25zdCBzaGFkeSA9IHdpbmRvdy5TaGFkeUNTUztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoc2hhZHkgJiYgIXNoYWR5Lm5hdGl2ZVNoYWRvdykge1xuICAgIHJldHVybiBmbihzaGFkeSk7XG4gIH1cblxuICByZXR1cm4gZmFsbGJhY2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgY29uc3QgdGFnTmFtZSA9IFN0cmluZyhlbGVtZW50LnRhZ05hbWUpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBgPCR7dGFnTmFtZX0+YDtcbn1cblxuZXhwb3J0IGNvbnN0IElTX0lFID0gJ0FjdGl2ZVhPYmplY3QnIGluIHdpbmRvdztcbmV4cG9ydCBjb25zdCBkZWZlcnJlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuIl19

  function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  var defaultTransform = function defaultTransform(v) {
    return v;
  };

  var objectTransform = function objectTransform(value) {
    if (_typeof(value) !== 'object') {
      throw TypeError("Assigned value must be an object: ".concat(_typeof(value)));
    }

    return value && Object.freeze(value);
  };

  function property(value, connect) {
    var type = _typeof(value);

    var transform = defaultTransform;

    switch (type) {
      case 'string':
        transform = String;
        break;

      case 'number':
        transform = Number;
        break;

      case 'boolean':
        transform = Boolean;
        break;

      case 'function':
        transform = value;
        value = transform();
        break;

      case 'object':
        if (value) Object.freeze(value);
        transform = objectTransform;
        break;
    }

    return {
      get: function get(host) {
        var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : value;
        return val;
      },
      set: function set(host, val, oldValue) {
        return transform(val, oldValue);
      },
      connect: type !== 'object' && type !== 'undefined' ? function (host, key, invalidate) {
        if (host[key] === value) {
          var attrName = camelToDash(key);

          if (host.hasAttribute(attrName)) {
            var attrValue = host.getAttribute(attrName);
            host[key] = attrValue === '' && transform === Boolean ? true : attrValue;
          }
        }

        return connect && connect(host, key, invalidate);
      } : connect
    };
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9wZXJ0eS5qcyJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJ2Iiwib2JqZWN0VHJhbnNmb3JtIiwidmFsdWUiLCJUeXBlRXJyb3IiLCJPYmplY3QiLCJmcmVlemUiLCJwcm9wZXJ0eSIsImNvbm5lY3QiLCJ0eXBlIiwidHJhbnNmb3JtIiwiU3RyaW5nIiwiTnVtYmVyIiwiQm9vbGVhbiIsImdldCIsImhvc3QiLCJ2YWwiLCJzZXQiLCJvbGRWYWx1ZSIsImtleSIsImludmFsaWRhdGUiLCJhdHRyTmFtZSIsImhhc0F0dHJpYnV0ZSIsImF0dHJWYWx1ZSIsImdldEF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxXQUFULFFBQTRCLFNBQTVCOztBQUVBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsQ0FBRDtBQUFBLFNBQU9BLENBQVA7QUFBQSxDQUF6Qjs7QUFFQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNDLEtBQUQsRUFBVztBQUNqQyxNQUFJLFFBQU9BLEtBQVAsTUFBaUIsUUFBckIsRUFBK0I7QUFDN0IsVUFBTUMsU0FBUyxxREFBNkNELEtBQTdDLEdBQWY7QUFDRDs7QUFDRCxTQUFPQSxLQUFLLElBQUlFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxLQUFkLENBQWhCO0FBQ0QsQ0FMRDs7QUFPQSxlQUFlLFNBQVNJLFFBQVQsQ0FBa0JKLEtBQWxCLEVBQXlCSyxPQUF6QixFQUFrQztBQUMvQyxNQUFNQyxJQUFJLFdBQVVOLEtBQVYsQ0FBVjs7QUFDQSxNQUFJTyxTQUFTLEdBQUdWLGdCQUFoQjs7QUFFQSxVQUFRUyxJQUFSO0FBQ0UsU0FBSyxRQUFMO0FBQ0VDLE1BQUFBLFNBQVMsR0FBR0MsTUFBWjtBQUNBOztBQUNGLFNBQUssUUFBTDtBQUNFRCxNQUFBQSxTQUFTLEdBQUdFLE1BQVo7QUFDQTs7QUFDRixTQUFLLFNBQUw7QUFDRUYsTUFBQUEsU0FBUyxHQUFHRyxPQUFaO0FBQ0E7O0FBQ0YsU0FBSyxVQUFMO0FBQ0VILE1BQUFBLFNBQVMsR0FBR1AsS0FBWjtBQUNBQSxNQUFBQSxLQUFLLEdBQUdPLFNBQVMsRUFBakI7QUFDQTs7QUFDRixTQUFLLFFBQUw7QUFDRSxVQUFJUCxLQUFKLEVBQVdFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxLQUFkO0FBQ1hPLE1BQUFBLFNBQVMsR0FBR1IsZUFBWjtBQUNBOztBQUNGO0FBQVM7QUFsQlg7O0FBcUJBLFNBQU87QUFDTFksSUFBQUEsR0FBRyxFQUFFLGFBQUNDLElBQUQ7QUFBQSxVQUFPQyxHQUFQLHVFQUFhYixLQUFiO0FBQUEsYUFBdUJhLEdBQXZCO0FBQUEsS0FEQTtBQUVMQyxJQUFBQSxHQUFHLEVBQUUsYUFBQ0YsSUFBRCxFQUFPQyxHQUFQLEVBQVlFLFFBQVo7QUFBQSxhQUF5QlIsU0FBUyxDQUFDTSxHQUFELEVBQU1FLFFBQU4sQ0FBbEM7QUFBQSxLQUZBO0FBR0xWLElBQUFBLE9BQU8sRUFBRUMsSUFBSSxLQUFLLFFBQVQsSUFBcUJBLElBQUksS0FBSyxXQUE5QixHQUNMLFVBQUNNLElBQUQsRUFBT0ksR0FBUCxFQUFZQyxVQUFaLEVBQTJCO0FBQzNCLFVBQUlMLElBQUksQ0FBQ0ksR0FBRCxDQUFKLEtBQWNoQixLQUFsQixFQUF5QjtBQUN2QixZQUFNa0IsUUFBUSxHQUFHdEIsV0FBVyxDQUFDb0IsR0FBRCxDQUE1Qjs7QUFFQSxZQUFJSixJQUFJLENBQUNPLFlBQUwsQ0FBa0JELFFBQWxCLENBQUosRUFBaUM7QUFDL0IsY0FBTUUsU0FBUyxHQUFHUixJQUFJLENBQUNTLFlBQUwsQ0FBa0JILFFBQWxCLENBQWxCO0FBQ0FOLFVBQUFBLElBQUksQ0FBQ0ksR0FBRCxDQUFKLEdBQVlJLFNBQVMsS0FBSyxFQUFkLElBQW9CYixTQUFTLEtBQUtHLE9BQWxDLEdBQTRDLElBQTVDLEdBQW1EVSxTQUEvRDtBQUNEO0FBQ0Y7O0FBRUQsYUFBT2YsT0FBTyxJQUFJQSxPQUFPLENBQUNPLElBQUQsRUFBT0ksR0FBUCxFQUFZQyxVQUFaLENBQXpCO0FBQ0QsS0FaTSxHQWFMWjtBQWhCQyxHQUFQO0FBa0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgZGVmYXVsdFRyYW5zZm9ybSA9ICh2KSA9PiB2O1xuXG5jb25zdCBvYmplY3RUcmFuc2Zvcm0gPSAodmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoYEFzc2lnbmVkIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0OiAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgJiYgT2JqZWN0LmZyZWV6ZSh2YWx1ZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9wZXJ0eSh2YWx1ZSwgY29ubmVjdCkge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZXQgdHJhbnNmb3JtID0gZGVmYXVsdFRyYW5zZm9ybTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgdHJhbnNmb3JtID0gU3RyaW5nO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHRyYW5zZm9ybSA9IE51bWJlcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgdHJhbnNmb3JtID0gQm9vbGVhbjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHRyYW5zZm9ybSA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSB0cmFuc2Zvcm0oKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAodmFsdWUpIE9iamVjdC5mcmVlemUodmFsdWUpO1xuICAgICAgdHJhbnNmb3JtID0gb2JqZWN0VHJhbnNmb3JtO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDogYnJlYWs7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogKGhvc3QsIHZhbCA9IHZhbHVlKSA9PiB2YWwsXG4gICAgc2V0OiAoaG9zdCwgdmFsLCBvbGRWYWx1ZSkgPT4gdHJhbnNmb3JtKHZhbCwgb2xkVmFsdWUpLFxuICAgIGNvbm5lY3Q6IHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGUgIT09ICd1bmRlZmluZWQnXG4gICAgICA/IChob3N0LCBrZXksIGludmFsaWRhdGUpID0+IHtcbiAgICAgICAgaWYgKGhvc3Rba2V5XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBhdHRyTmFtZSA9IGNhbWVsVG9EYXNoKGtleSk7XG5cbiAgICAgICAgICBpZiAoaG9zdC5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSBob3N0LmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgICAgICAgICBob3N0W2tleV0gPSBhdHRyVmFsdWUgPT09ICcnICYmIHRyYW5zZm9ybSA9PT0gQm9vbGVhbiA/IHRydWUgOiBhdHRyVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbm5lY3QgJiYgY29ubmVjdChob3N0LCBrZXksIGludmFsaWRhdGUpO1xuICAgICAgfVxuICAgICAgOiBjb25uZWN0LFxuICB9O1xufVxuIl19

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

  function render(fn) {
    var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (typeof fn !== 'function') {
      throw TypeError("The first argument must be a function: ".concat(_typeof$1(fn)));
    }

    var options = _objectSpread({
      shadowRoot: true
    }, customOptions);

    var shadowRootInit = {
      mode: 'open'
    };

    if (_typeof$1(options.shadowRoot) === 'object') {
      Object.assign(shadowRootInit, options.shadowRoot);
    }

    return {
      get: function get(host) {
        var update = fn(host);
        var target = host;

        if (options.shadowRoot) {
          if (!host.shadowRoot) host.attachShadow(shadowRootInit);
          target = host.shadowRoot;
        }

        return function flush() {
          update(host, target);
          return target;
        };
      },
      observe: function observe(host, flush) {
        flush();
      }
    };
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXIuanMiXSwibmFtZXMiOlsicmVuZGVyIiwiZm4iLCJjdXN0b21PcHRpb25zIiwiVHlwZUVycm9yIiwib3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJzaGFkb3dSb290SW5pdCIsIm1vZGUiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXQiLCJob3N0IiwidXBkYXRlIiwidGFyZ2V0IiwiYXR0YWNoU2hhZG93IiwiZmx1c2giLCJvYnNlcnZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGVBQWUsU0FBU0EsTUFBVCxDQUFnQkMsRUFBaEIsRUFBd0M7QUFBQSxNQUFwQkMsYUFBb0IsdUVBQUosRUFBSTs7QUFDckQsTUFBSSxPQUFPRCxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUIsVUFBTUUsU0FBUywwREFBa0RGLEVBQWxELEdBQWY7QUFDRDs7QUFFRCxNQUFNRyxPQUFPO0FBQUtDLElBQUFBLFVBQVUsRUFBRTtBQUFqQixLQUEwQkgsYUFBMUIsQ0FBYjs7QUFDQSxNQUFNSSxjQUFjLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBdkI7O0FBRUEsTUFBSSxRQUFPSCxPQUFPLENBQUNDLFVBQWYsTUFBOEIsUUFBbEMsRUFBNEM7QUFDMUNHLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxjQUFkLEVBQThCRixPQUFPLENBQUNDLFVBQXRDO0FBQ0Q7O0FBRUQsU0FBTztBQUNMSyxJQUFBQSxHQURLLGVBQ0RDLElBREMsRUFDSztBQUNSLFVBQU1DLE1BQU0sR0FBR1gsRUFBRSxDQUFDVSxJQUFELENBQWpCO0FBQ0EsVUFBSUUsTUFBTSxHQUFHRixJQUFiOztBQUVBLFVBQUlQLE9BQU8sQ0FBQ0MsVUFBWixFQUF3QjtBQUN0QixZQUFJLENBQUNNLElBQUksQ0FBQ04sVUFBVixFQUFzQk0sSUFBSSxDQUFDRyxZQUFMLENBQWtCUixjQUFsQjtBQUN0Qk8sUUFBQUEsTUFBTSxHQUFHRixJQUFJLENBQUNOLFVBQWQ7QUFDRDs7QUFFRCxhQUFPLFNBQVNVLEtBQVQsR0FBaUI7QUFDdEJILFFBQUFBLE1BQU0sQ0FBQ0QsSUFBRCxFQUFPRSxNQUFQLENBQU47QUFDQSxlQUFPQSxNQUFQO0FBQ0QsT0FIRDtBQUlELEtBZEk7QUFlTEcsSUFBQUEsT0FmSyxtQkFlR0wsSUFmSCxFQWVTSSxLQWZULEVBZWdCO0FBQ25CQSxNQUFBQSxLQUFLO0FBQ047QUFqQkksR0FBUDtBQW1CRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihmbiwgY3VzdG9tT3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoYFRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb246ICR7dHlwZW9mIGZufWApO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHsgc2hhZG93Um9vdDogdHJ1ZSwgLi4uY3VzdG9tT3B0aW9ucyB9O1xuICBjb25zdCBzaGFkb3dSb290SW5pdCA9IHsgbW9kZTogJ29wZW4nIH07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLnNoYWRvd1Jvb3QgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzaGFkb3dSb290SW5pdCwgb3B0aW9ucy5zaGFkb3dSb290KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0KGhvc3QpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IGZuKGhvc3QpO1xuICAgICAgbGV0IHRhcmdldCA9IGhvc3Q7XG5cbiAgICAgIGlmIChvcHRpb25zLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgaWYgKCFob3N0LnNoYWRvd1Jvb3QpIGhvc3QuYXR0YWNoU2hhZG93KHNoYWRvd1Jvb3RJbml0KTtcbiAgICAgICAgdGFyZ2V0ID0gaG9zdC5zaGFkb3dSb290O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHVwZGF0ZShob3N0LCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9ic2VydmUoaG9zdCwgZmx1c2gpIHtcbiAgICAgIGZsdXNoKCk7XG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==

  var callbacks = new WeakMap();
  var queue = new Set();

  function execute() {
    try {
      queue.forEach(function (target) {
        try {
          callbacks.get(target)();
          queue.delete(target);
        } catch (e) {
          queue.delete(target);
          throw e;
        }
      });
    } catch (e) {
      if (queue.size) execute();
      throw e;
    }
  }

  function dispatch(target) {
    if (!queue.size) {
      requestAnimationFrame(execute);
    }

    queue.add(target);
  }
  function subscribe(target, cb) {
    callbacks.set(target, cb);
    dispatch(target);
    return function unsubscribe() {
      queue.delete(target);
      callbacks.delete(target);
    };
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbWl0dGVyLmpzIl0sIm5hbWVzIjpbImNhbGxiYWNrcyIsIldlYWtNYXAiLCJxdWV1ZSIsIlNldCIsImV4ZWN1dGUiLCJmb3JFYWNoIiwidGFyZ2V0IiwiZ2V0IiwiZGVsZXRlIiwiZSIsInNpemUiLCJkaXNwYXRjaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFkZCIsInN1YnNjcmliZSIsImNiIiwic2V0IiwidW5zdWJzY3JpYmUiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLFNBQVMsR0FBRyxJQUFJQyxPQUFKLEVBQWxCO0FBQ0EsSUFBTUMsS0FBSyxHQUFHLElBQUlDLEdBQUosRUFBZDs7QUFFQSxTQUFTQyxPQUFULEdBQW1CO0FBQ2pCLE1BQUk7QUFDRkYsSUFBQUEsS0FBSyxDQUFDRyxPQUFOLENBQWMsVUFBQ0MsTUFBRCxFQUFZO0FBQ3hCLFVBQUk7QUFDRk4sUUFBQUEsU0FBUyxDQUFDTyxHQUFWLENBQWNELE1BQWQ7QUFDQUosUUFBQUEsS0FBSyxDQUFDTSxNQUFOLENBQWFGLE1BQWI7QUFDRCxPQUhELENBR0UsT0FBT0csQ0FBUCxFQUFVO0FBQ1ZQLFFBQUFBLEtBQUssQ0FBQ00sTUFBTixDQUFhRixNQUFiO0FBQ0EsY0FBTUcsQ0FBTjtBQUNEO0FBQ0YsS0FSRDtBQVNELEdBVkQsQ0FVRSxPQUFPQSxDQUFQLEVBQVU7QUFDVixRQUFJUCxLQUFLLENBQUNRLElBQVYsRUFBZ0JOLE9BQU87QUFDdkIsVUFBTUssQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsT0FBTyxTQUFTRSxRQUFULENBQWtCTCxNQUFsQixFQUEwQjtBQUMvQixNQUFJLENBQUNKLEtBQUssQ0FBQ1EsSUFBWCxFQUFpQjtBQUNmRSxJQUFBQSxxQkFBcUIsQ0FBQ1IsT0FBRCxDQUFyQjtBQUNEOztBQUNERixFQUFBQSxLQUFLLENBQUNXLEdBQU4sQ0FBVVAsTUFBVjtBQUNEO0FBRUQsT0FBTyxTQUFTUSxTQUFULENBQW1CUixNQUFuQixFQUEyQlMsRUFBM0IsRUFBK0I7QUFDcENmLEVBQUFBLFNBQVMsQ0FBQ2dCLEdBQVYsQ0FBY1YsTUFBZCxFQUFzQlMsRUFBdEI7QUFDQUosRUFBQUEsUUFBUSxDQUFDTCxNQUFELENBQVI7QUFFQSxTQUFPLFNBQVNXLFdBQVQsR0FBdUI7QUFDNUJmLElBQUFBLEtBQUssQ0FBQ00sTUFBTixDQUFhRixNQUFiO0FBQ0FOLElBQUFBLFNBQVMsQ0FBQ1EsTUFBVixDQUFpQkYsTUFBakI7QUFDRCxHQUhEO0FBSUQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcXVldWUgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gIHRyeSB7XG4gICAgcXVldWUuZm9yRWFjaCgodGFyZ2V0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjYWxsYmFja3MuZ2V0KHRhcmdldCkoKTtcbiAgICAgICAgcXVldWUuZGVsZXRlKHRhcmdldCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHF1ZXVlLmRlbGV0ZSh0YXJnZXQpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHF1ZXVlLnNpemUpIGV4ZWN1dGUoKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwYXRjaCh0YXJnZXQpIHtcbiAgaWYgKCFxdWV1ZS5zaXplKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGV4ZWN1dGUpO1xuICB9XG4gIHF1ZXVlLmFkZCh0YXJnZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlKHRhcmdldCwgY2IpIHtcbiAgY2FsbGJhY2tzLnNldCh0YXJnZXQsIGNiKTtcbiAgZGlzcGF0Y2godGFyZ2V0KTtcblxuICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgcXVldWUuZGVsZXRlKHRhcmdldCk7XG4gICAgY2FsbGJhY2tzLmRlbGV0ZSh0YXJnZXQpO1xuICB9O1xufVxuIl19

  var entries = new WeakMap();
  function getEntry(target, key) {
    var targetMap = entries.get(target);

    if (!targetMap) {
      targetMap = new Map();
      entries.set(target, targetMap);
    }

    var entry = targetMap.get(key);

    if (!entry) {
      entry = {
        target: target,
        key: key,
        value: undefined,
        contexts: undefined,
        deps: undefined,
        state: 0,
        checksum: 0,
        observed: false
      };
      targetMap.set(key, entry);
    }

    return entry;
  }

  function calculateChecksum(entry) {
    var checksum = entry.state;

    if (entry.deps) {
      entry.deps.forEach(function (depEntry) {
        checksum += depEntry.state;
      });
    }

    return checksum;
  }

  function dispatchDeep(entry) {
    if (entry.observed) dispatch(entry);
    if (entry.contexts) entry.contexts.forEach(dispatchDeep);
  }

  var contextStack = new Set();
  function get(target, key, getter) {
    var entry = getEntry(target, key);

    if (contextStack.size && contextStack.has(entry)) {
      throw Error("Circular get invocation of the '".concat(key, "' property in '").concat(stringifyElement(target), "'"));
    }

    contextStack.forEach(function (context) {
      context.deps = context.deps || new Set();
      context.deps.add(entry);

      if (context.observed) {
        entry.contexts = entry.contexts || new Set();
        entry.contexts.add(context);
      }
    });

    if (entry.checksum && entry.checksum === calculateChecksum(entry)) {
      return entry.value;
    }

    try {
      contextStack.add(entry);

      if (entry.observed && entry.deps && entry.deps.size) {
        entry.deps.forEach(function (depEntry) {
          if (depEntry.contexts) depEntry.contexts.delete(entry);
        });
      }

      entry.deps = undefined;
      var nextValue = getter(target, entry.value);

      if (nextValue !== entry.value) {
        entry.state += 1;
        entry.value = nextValue;
        dispatchDeep(entry);
      }

      entry.checksum = calculateChecksum(entry);
      contextStack.delete(entry);
    } catch (e) {
      entry.checksum = 0;
      contextStack.delete(entry);
      contextStack.forEach(function (context) {
        context.deps.delete(entry);
        if (context.observed) entry.contexts.delete(context);
      });
      throw e;
    }

    return entry.value;
  }
  function set(target, key, setter, value, force) {
    if (contextStack.size && !force) {
      throw Error("Try to set '".concat(key, "' of '").concat(stringifyElement(target), "' in get call"));
    }

    var entry = getEntry(target, key);
    var newValue = setter(target, value, entry.value);

    if (newValue !== entry.value) {
      entry.checksum = 0;
      entry.state += 1;
      entry.value = newValue;
      dispatchDeep(entry);
    }
  }
  function invalidate(target, key, clearValue) {
    if (contextStack.size) {
      throw Error("Try to invalidate '".concat(key, "' in '").concat(stringifyElement(target), "' get call"));
    }

    var entry = getEntry(target, key);
    entry.checksum = 0;
    entry.state += 1;
    dispatchDeep(entry);

    if (clearValue) {
      entry.value = undefined;
    }
  }
  function observe(target, key, getter, fn) {
    var entry = getEntry(target, key);
    entry.observed = true;
    var lastValue;
    var unsubscribe = subscribe(entry, function () {
      var value = get(target, key, getter);

      if (value !== lastValue) {
        fn(target, value, lastValue);
        lastValue = value;
      }
    });
    return function unobserve() {
      unsubscribe();
      entry.observed = false;

      if (entry.deps && entry.deps.size) {
        entry.deps.forEach(function (depEntry) {
          if (depEntry.contexts) depEntry.contexts.delete(entry);
        });
      }
    };
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

  function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

  function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _typeof$2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }
  /* istanbul ignore next */

  try {
    process.env.NODE_ENV;
  } catch (e) {
    var process = {
      env: {
        NODE_ENV: 'production'
      }
    };
  } // eslint-disable-line


  var defaultMethod = function defaultMethod(host, value) {
    return value;
  };

  function compile(Hybrid, descriptors) {
    Hybrid.hybrids = descriptors;
    Hybrid.callbacks = [];
    Object.keys(descriptors).forEach(function (key) {
      var desc = descriptors[key];

      var type = _typeof$2(desc);

      var config;

      if (type === 'function') {
        config = key === 'render' ? render(desc) : {
          get: desc
        };
      } else if (type !== 'object' || desc === null || Array.isArray(desc)) {
        config = property(desc);
      } else {
        config = {
          get: desc.get || defaultMethod,
          set: desc.set || !desc.get && defaultMethod || undefined,
          connect: desc.connect,
          observe: desc.observe
        };
      }

      Object.defineProperty(Hybrid.prototype, key, {
        get: function get$1() {
          return get(this, key, config.get);
        },
        set: config.set && function set$1(newValue) {
          set(this, key, config.set, newValue);
        },
        enumerable: true,
        configurable: process.env.NODE_ENV !== 'production'
      });

      if (config.observe) {
        Hybrid.callbacks.unshift(function (host) {
          return observe(host, key, config.get, config.observe);
        });
      }

      if (config.connect) {
        Hybrid.callbacks.push(function (host) {
          return config.connect(host, key, function () {
            invalidate(host, key);
          });
        });
      }
    });
  }

  var disconnects = new WeakMap();

  function defineElement(tagName, hybridsOrConstructor) {
    var type = _typeof$2(hybridsOrConstructor);

    if (type !== 'object' && type !== 'function') {
      throw TypeError("Second argument must be an object or a function: ".concat(type));
    }

    var CustomElement = window.customElements.get(tagName);

    if (type === 'function') {
      if (CustomElement !== hybridsOrConstructor) {
        return window.customElements.define(tagName, hybridsOrConstructor);
      }

      return CustomElement;
    }

    if (CustomElement) {
      if (CustomElement.hybrids === hybridsOrConstructor) {
        return CustomElement;
      }

      throw Error("Element '".concat(tagName, "' already defined"));
    }

    var Hybrid =
    /*#__PURE__*/
    function (_HTMLElement) {
      _inherits(Hybrid, _HTMLElement);

      function Hybrid() {
        _classCallCheck(this, Hybrid);

        return _possibleConstructorReturn(this, _getPrototypeOf(Hybrid).apply(this, arguments));
      }

      _createClass(Hybrid, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          var callbacks = this.constructor.callbacks;
          var list = [];

          for (var index = 0; index < callbacks.length; index += 1) {
            var cb = callbacks[index](this);
            if (cb) list.push(cb);
          }

          disconnects.set(this, list);
        }
      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          var list = disconnects.get(this);

          for (var index = 0; index < list.length; index += 1) {
            list[index]();
          }
        }
      }], [{
        key: "name",
        get: function get() {
          return tagName;
        }
      }]);

      return Hybrid;
    }(_wrapNativeSuper(HTMLElement));

    compile(Hybrid, hybridsOrConstructor);
    customElements.define(tagName, Hybrid);
    return Hybrid;
  }

  function defineMap(elements) {
    return Object.keys(elements).reduce(function (acc, key) {
      var tagName = pascalToDash(key);
      acc[key] = defineElement(tagName, elements[key]);
      return acc;
    }, {});
  }

  function define() {
    if (_typeof$2(arguments.length <= 0 ? undefined : arguments[0]) === 'object') {
      return defineMap(arguments.length <= 0 ? undefined : arguments[0]);
    }

    return defineElement.apply(void 0, arguments);
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,

  var map = new WeakMap();
  var dataMap = {
    get: function get(key, defaultValue) {
      var value = map.get(key);
      if (value) return value;

      if (defaultValue) {
        map.set(key, defaultValue);
      }

      return defaultValue;
    },
    set: function set(key, value) {
      map.set(key, value);
      return value;
    }
  };
  function getTemplateEnd(node) {
    var data; // eslint-disable-next-line no-cond-assign

    while (node && (data = dataMap.get(node)) && data.endNode) {
      node = data.endNode;
    }

    return node;
  }
  function removeTemplate(target) {
    if (target.nodeType !== Node.TEXT_NODE) {
      var child = target.childNodes[0];

      while (child) {
        target.removeChild(child);
        child = target.childNodes[0];
      }
    } else {
      var data = dataMap.get(target);

      if (data.startNode) {
        var endNode = getTemplateEnd(data.endNode);
        var node = data.startNode;
        var lastNextSibling = endNode.nextSibling;

        while (node) {
          var nextSibling = node.nextSibling;
          node.parentNode.removeChild(node);
          node = nextSibling !== lastNextSibling && nextSibling;
        }
      }
    }
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS91dGlscy5qcyJdLCJuYW1lcyI6WyJtYXAiLCJXZWFrTWFwIiwiZGF0YU1hcCIsImdldCIsImtleSIsImRlZmF1bHRWYWx1ZSIsInZhbHVlIiwic2V0IiwiZ2V0VGVtcGxhdGVFbmQiLCJub2RlIiwiZGF0YSIsImVuZE5vZGUiLCJyZW1vdmVUZW1wbGF0ZSIsInRhcmdldCIsIm5vZGVUeXBlIiwiTm9kZSIsIlRFWFRfTk9ERSIsImNoaWxkIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwic3RhcnROb2RlIiwibGFzdE5leHRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxHQUFHLEdBQUcsSUFBSUMsT0FBSixFQUFaO0FBQ0EsT0FBTyxJQUFNQyxPQUFPLEdBQUc7QUFDckJDLEVBQUFBLEdBRHFCLGVBQ2pCQyxHQURpQixFQUNaQyxZQURZLEVBQ0U7QUFDckIsUUFBTUMsS0FBSyxHQUFHTixHQUFHLENBQUNHLEdBQUosQ0FBUUMsR0FBUixDQUFkO0FBQ0EsUUFBSUUsS0FBSixFQUFXLE9BQU9BLEtBQVA7O0FBRVgsUUFBSUQsWUFBSixFQUFrQjtBQUNoQkwsTUFBQUEsR0FBRyxDQUFDTyxHQUFKLENBQVFILEdBQVIsRUFBYUMsWUFBYjtBQUNEOztBQUVELFdBQU9BLFlBQVA7QUFDRCxHQVZvQjtBQVdyQkUsRUFBQUEsR0FYcUIsZUFXakJILEdBWGlCLEVBV1pFLEtBWFksRUFXTDtBQUNkTixJQUFBQSxHQUFHLENBQUNPLEdBQUosQ0FBUUgsR0FBUixFQUFhRSxLQUFiO0FBQ0EsV0FBT0EsS0FBUDtBQUNEO0FBZG9CLENBQWhCO0FBaUJQLE9BQU8sU0FBU0UsY0FBVCxDQUF3QkMsSUFBeEIsRUFBOEI7QUFDbkMsTUFBSUMsSUFBSixDQURtQyxDQUVuQzs7QUFDQSxTQUFPRCxJQUFJLEtBQUtDLElBQUksR0FBR1IsT0FBTyxDQUFDQyxHQUFSLENBQVlNLElBQVosQ0FBWixDQUFKLElBQXNDQyxJQUFJLENBQUNDLE9BQWxELEVBQTJEO0FBQ3pERixJQUFBQSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsT0FBWjtBQUNEOztBQUVELFNBQU9GLElBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0csY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0M7QUFDckMsTUFBSUEsTUFBTSxDQUFDQyxRQUFQLEtBQW9CQyxJQUFJLENBQUNDLFNBQTdCLEVBQXdDO0FBQ3RDLFFBQUlDLEtBQUssR0FBR0osTUFBTSxDQUFDSyxVQUFQLENBQWtCLENBQWxCLENBQVo7O0FBQ0EsV0FBT0QsS0FBUCxFQUFjO0FBQ1pKLE1BQUFBLE1BQU0sQ0FBQ00sV0FBUCxDQUFtQkYsS0FBbkI7QUFDQUEsTUFBQUEsS0FBSyxHQUFHSixNQUFNLENBQUNLLFVBQVAsQ0FBa0IsQ0FBbEIsQ0FBUjtBQUNEO0FBQ0YsR0FORCxNQU1PO0FBQ0wsUUFBTVIsSUFBSSxHQUFHUixPQUFPLENBQUNDLEdBQVIsQ0FBWVUsTUFBWixDQUFiOztBQUVBLFFBQUlILElBQUksQ0FBQ1UsU0FBVCxFQUFvQjtBQUNsQixVQUFNVCxPQUFPLEdBQUdILGNBQWMsQ0FBQ0UsSUFBSSxDQUFDQyxPQUFOLENBQTlCO0FBRUEsVUFBSUYsSUFBSSxHQUFHQyxJQUFJLENBQUNVLFNBQWhCO0FBQ0EsVUFBTUMsZUFBZSxHQUFHVixPQUFPLENBQUNXLFdBQWhDOztBQUVBLGFBQU9iLElBQVAsRUFBYTtBQUNYLFlBQU1hLFdBQVcsR0FBR2IsSUFBSSxDQUFDYSxXQUF6QjtBQUNBYixRQUFBQSxJQUFJLENBQUNjLFVBQUwsQ0FBZ0JKLFdBQWhCLENBQTRCVixJQUE1QjtBQUNBQSxRQUFBQSxJQUFJLEdBQUdhLFdBQVcsS0FBS0QsZUFBaEIsSUFBbUNDLFdBQTFDO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGNvbnN0IGRhdGFNYXAgPSB7XG4gIGdldChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gbWFwLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgbWFwLnNldChrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfSxcbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW1wbGF0ZUVuZChub2RlKSB7XG4gIGxldCBkYXRhO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgd2hpbGUgKG5vZGUgJiYgKGRhdGEgPSBkYXRhTWFwLmdldChub2RlKSkgJiYgZGF0YS5lbmROb2RlKSB7XG4gICAgbm9kZSA9IGRhdGEuZW5kTm9kZTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVGVtcGxhdGUodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgbGV0IGNoaWxkID0gdGFyZ2V0LmNoaWxkTm9kZXNbMF07XG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQgPSB0YXJnZXQuY2hpbGROb2Rlc1swXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFNYXAuZ2V0KHRhcmdldCk7XG5cbiAgICBpZiAoZGF0YS5zdGFydE5vZGUpIHtcbiAgICAgIGNvbnN0IGVuZE5vZGUgPSBnZXRUZW1wbGF0ZUVuZChkYXRhLmVuZE5vZGUpO1xuXG4gICAgICBsZXQgbm9kZSA9IGRhdGEuc3RhcnROb2RlO1xuICAgICAgY29uc3QgbGFzdE5leHRTaWJsaW5nID0gZW5kTm9kZS5uZXh0U2libGluZztcblxuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgY29uc3QgbmV4dFNpYmxpbmcgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgIG5vZGUgPSBuZXh0U2libGluZyAhPT0gbGFzdE5leHRTaWJsaW5nICYmIG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19

  var arrayMap = new WeakMap();

  function movePlaceholder(target, previousSibling) {
    var data = dataMap.get(target);
    var startNode = data.startNode;
    var endNode = getTemplateEnd(data.endNode);
    previousSibling.parentNode.insertBefore(target, previousSibling.nextSibling);
    var prevNode = target;
    var node = startNode;

    while (node) {
      var nextNode = node.nextSibling;
      prevNode.parentNode.insertBefore(node, prevNode.nextSibling);
      prevNode = node;
      node = nextNode !== endNode.nextSibling && nextNode;
    }
  }

  function resolveArray(host, target, value) {
    var lastEntries = arrayMap.get(target);
    var entries = value.map(function (item, index) {
      return {
        id: Object.prototype.hasOwnProperty.call(item, 'id') ? item.id : index,
        value: item,
        placeholder: null,
        available: true
      };
    });
    arrayMap.set(target, entries);

    if (lastEntries) {
      var ids = new Set();
      entries.forEach(function (entry) {
        return ids.add(entry.id);
      });
      lastEntries = lastEntries.filter(function (entry) {
        if (!ids.has(entry.id)) {
          removeTemplate(entry.placeholder);
          entry.placeholder.parentNode.removeChild(entry.placeholder);
          return false;
        }

        return true;
      });
    }

    var previousSibling = target;
    var lastIndex = value.length - 1;
    var data = dataMap.get(target);

    for (var index = 0; index < entries.length; index += 1) {
      var entry = entries[index];
      var matchedEntry = void 0;

      if (lastEntries) {
        for (var i = 0; i < lastEntries.length; i += 1) {
          if (lastEntries[i].available && lastEntries[i].id === entry.id) {
            matchedEntry = lastEntries[i];
            break;
          }
        }
      }

      var placeholder = void 0;

      if (matchedEntry) {
        matchedEntry.available = false;
        placeholder = matchedEntry.placeholder;

        if (placeholder.previousSibling !== previousSibling) {
          movePlaceholder(placeholder, previousSibling);
        }

        if (matchedEntry.value !== entry.value) {
          resolveValue(host, placeholder, entry.value);
        }
      } else {
        placeholder = document.createTextNode('');
        previousSibling.parentNode.insertBefore(placeholder, previousSibling.nextSibling);
        resolveValue(host, placeholder, entry.value);
      }

      previousSibling = getTemplateEnd(dataMap.get(placeholder).endNode || placeholder);
      if (index === 0) data.startNode = placeholder;
      if (index === lastIndex) data.endNode = previousSibling;
      entry.placeholder = placeholder;
    }

    if (lastEntries) {
      lastEntries.forEach(function (entry) {
        if (entry.available) {
          removeTemplate(entry.placeholder);
          entry.placeholder.parentNode.removeChild(entry.placeholder);
        }
      });
    }
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,

  function _typeof$3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }
  function resolveValue(host, target, value) {
    var type = Array.isArray(value) ? 'array' : _typeof$3(value);
    var data = dataMap.get(target, {});

    if (data.type !== type) {
      removeTemplate(target);
      if (type === 'array') arrayMap.delete(target);
      data = dataMap.set(target, {
        type: type
      });

      if (target.textContent !== '') {
        target.textContent = '';
      }
    }

    switch (type) {
      case 'function':
        value(host, target);
        break;

      case 'array':
        resolveArray(host, target, value);
        break;

      default:
        target.textContent = type === 'number' || value ? value : '';
    }
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvdmFsdWUuanMiXSwibmFtZXMiOlsiZGF0YU1hcCIsInJlbW92ZVRlbXBsYXRlIiwicmVzb2x2ZUFycmF5IiwiYXJyYXlNYXAiLCJyZXNvbHZlVmFsdWUiLCJob3N0IiwidGFyZ2V0IiwidmFsdWUiLCJ0eXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiZGF0YSIsImdldCIsImRlbGV0ZSIsInNldCIsInRleHRDb250ZW50Il0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLE9BQVQsRUFBa0JDLGNBQWxCLFFBQXdDLFVBQXhDLEMsQ0FDQTs7QUFDQSxPQUFPQyxZQUFQLElBQXVCQyxRQUF2QixRQUF1QyxTQUF2QztBQUVBLGVBQWUsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLE1BQTVCLEVBQW9DQyxLQUFwQyxFQUEyQztBQUN4RCxNQUFNQyxJQUFJLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxLQUFkLElBQXVCLE9BQXZCLFdBQXdDQSxLQUF4QyxDQUFiO0FBQ0EsTUFBSUksSUFBSSxHQUFHWCxPQUFPLENBQUNZLEdBQVIsQ0FBWU4sTUFBWixFQUFvQixFQUFwQixDQUFYOztBQUVBLE1BQUlLLElBQUksQ0FBQ0gsSUFBTCxLQUFjQSxJQUFsQixFQUF3QjtBQUN0QlAsSUFBQUEsY0FBYyxDQUFDSyxNQUFELENBQWQ7QUFDQSxRQUFJRSxJQUFJLEtBQUssT0FBYixFQUFzQkwsUUFBUSxDQUFDVSxNQUFULENBQWdCUCxNQUFoQjtBQUV0QkssSUFBQUEsSUFBSSxHQUFHWCxPQUFPLENBQUNjLEdBQVIsQ0FBWVIsTUFBWixFQUFvQjtBQUFFRSxNQUFBQSxJQUFJLEVBQUpBO0FBQUYsS0FBcEIsQ0FBUDs7QUFFQSxRQUFJRixNQUFNLENBQUNTLFdBQVAsS0FBdUIsRUFBM0IsRUFBK0I7QUFDN0JULE1BQUFBLE1BQU0sQ0FBQ1MsV0FBUCxHQUFxQixFQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsVUFBUVAsSUFBUjtBQUNFLFNBQUssVUFBTDtBQUNFRCxNQUFBQSxLQUFLLENBQUNGLElBQUQsRUFBT0MsTUFBUCxDQUFMO0FBQ0E7O0FBQ0YsU0FBSyxPQUFMO0FBQ0VKLE1BQUFBLFlBQVksQ0FBQ0csSUFBRCxFQUFPQyxNQUFQLEVBQWVDLEtBQWYsQ0FBWjtBQUNBOztBQUNGO0FBQ0VELE1BQUFBLE1BQU0sQ0FBQ1MsV0FBUCxHQUFxQlAsSUFBSSxLQUFLLFFBQVQsSUFBcUJELEtBQXJCLEdBQTZCQSxLQUE3QixHQUFxQyxFQUExRDtBQVJKO0FBVUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkYXRhTWFwLCByZW1vdmVUZW1wbGF0ZSB9IGZyb20gJy4uL3V0aWxzJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmltcG9ydCByZXNvbHZlQXJyYXksIHsgYXJyYXlNYXAgfSBmcm9tICcuL2FycmF5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgY29uc3QgdHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gJ2FycmF5JyA6IHR5cGVvZiB2YWx1ZTtcbiAgbGV0IGRhdGEgPSBkYXRhTWFwLmdldCh0YXJnZXQsIHt9KTtcblxuICBpZiAoZGF0YS50eXBlICE9PSB0eXBlKSB7XG4gICAgcmVtb3ZlVGVtcGxhdGUodGFyZ2V0KTtcbiAgICBpZiAodHlwZSA9PT0gJ2FycmF5JykgYXJyYXlNYXAuZGVsZXRlKHRhcmdldCk7XG5cbiAgICBkYXRhID0gZGF0YU1hcC5zZXQodGFyZ2V0LCB7IHR5cGUgfSk7XG5cbiAgICBpZiAodGFyZ2V0LnRleHRDb250ZW50ICE9PSAnJykge1xuICAgICAgdGFyZ2V0LnRleHRDb250ZW50ID0gJyc7XG4gICAgfVxuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgdmFsdWUoaG9zdCwgdGFyZ2V0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIHJlc29sdmVBcnJheShob3N0LCB0YXJnZXQsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0YXJnZXQudGV4dENvbnRlbnQgPSB0eXBlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSA/IHZhbHVlIDogJyc7XG4gIH1cbn1cbiJdfQ==

  function _typeof$4(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

  var targets = new WeakMap();
  function resolveEventListener(eventType) {
    return function (host, target, value, lastValue) {
      if (lastValue) {
        var eventMap = targets.get(target);

        if (eventMap) {
          target.removeEventListener(eventType, eventMap.get(lastValue), lastValue.options !== undefined ? lastValue.options : false);
        }
      }

      if (value) {
        if (typeof value !== 'function') {
          throw Error("Event listener must be a function: ".concat(_typeof$4(value)));
        }

        var _eventMap = targets.get(target);

        if (!_eventMap) {
          _eventMap = new WeakMap();
          targets.set(target, _eventMap);
        }

        var callback = value.bind(null, host);

        _eventMap.set(value, callback);

        target.addEventListener(eventType, callback, value.options !== undefined ? value.options : false);
      }
    };
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvZXZlbnQuanMiXSwibmFtZXMiOlsidGFyZ2V0cyIsIldlYWtNYXAiLCJyZXNvbHZlRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImhvc3QiLCJ0YXJnZXQiLCJ2YWx1ZSIsImxhc3RWYWx1ZSIsImV2ZW50TWFwIiwiZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJFcnJvciIsInNldCIsImNhbGxiYWNrIiwiYmluZCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsT0FBTyxHQUFHLElBQUlDLE9BQUosRUFBaEI7QUFFQSxlQUFlLFNBQVNDLG9CQUFULENBQThCQyxTQUE5QixFQUF5QztBQUN0RCxTQUFPLFVBQUNDLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXNCQyxTQUF0QixFQUFvQztBQUN6QyxRQUFJQSxTQUFKLEVBQWU7QUFDYixVQUFNQyxRQUFRLEdBQUdSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZSixNQUFaLENBQWpCOztBQUNBLFVBQUlHLFFBQUosRUFBYztBQUNaSCxRQUFBQSxNQUFNLENBQUNLLG1CQUFQLENBQ0VQLFNBREYsRUFFRUssUUFBUSxDQUFDQyxHQUFULENBQWFGLFNBQWIsQ0FGRixFQUdFQSxTQUFTLENBQUNJLE9BQVYsS0FBc0JDLFNBQXRCLEdBQWtDTCxTQUFTLENBQUNJLE9BQTVDLEdBQXNELEtBSHhEO0FBS0Q7QUFDRjs7QUFFRCxRQUFJTCxLQUFKLEVBQVc7QUFDVCxVQUFJLE9BQU9BLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDL0IsY0FBTU8sS0FBSyxzREFBOENQLEtBQTlDLEdBQVg7QUFDRDs7QUFFRCxVQUFJRSxTQUFRLEdBQUdSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZSixNQUFaLENBQWY7O0FBQ0EsVUFBSSxDQUFDRyxTQUFMLEVBQWU7QUFDYkEsUUFBQUEsU0FBUSxHQUFHLElBQUlQLE9BQUosRUFBWDtBQUNBRCxRQUFBQSxPQUFPLENBQUNjLEdBQVIsQ0FBWVQsTUFBWixFQUFvQkcsU0FBcEI7QUFDRDs7QUFFRCxVQUFNTyxRQUFRLEdBQUdULEtBQUssQ0FBQ1UsSUFBTixDQUFXLElBQVgsRUFBaUJaLElBQWpCLENBQWpCOztBQUNBSSxNQUFBQSxTQUFRLENBQUNNLEdBQVQsQ0FBYVIsS0FBYixFQUFvQlMsUUFBcEI7O0FBRUFWLE1BQUFBLE1BQU0sQ0FBQ1ksZ0JBQVAsQ0FDRWQsU0FERixFQUVFWSxRQUZGLEVBR0VULEtBQUssQ0FBQ0ssT0FBTixLQUFrQkMsU0FBbEIsR0FBOEJOLEtBQUssQ0FBQ0ssT0FBcEMsR0FBOEMsS0FIaEQ7QUFLRDtBQUNGLEdBaENEO0FBaUNEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGFyZ2V0cyA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSkge1xuICByZXR1cm4gKGhvc3QsIHRhcmdldCwgdmFsdWUsIGxhc3RWYWx1ZSkgPT4ge1xuICAgIGlmIChsYXN0VmFsdWUpIHtcbiAgICAgIGNvbnN0IGV2ZW50TWFwID0gdGFyZ2V0cy5nZXQodGFyZ2V0KTtcbiAgICAgIGlmIChldmVudE1hcCkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgZXZlbnRNYXAuZ2V0KGxhc3RWYWx1ZSksXG4gICAgICAgICAgbGFzdFZhbHVlLm9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IGxhc3RWYWx1ZS5vcHRpb25zIDogZmFsc2UsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IEVycm9yKGBFdmVudCBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb246ICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgfVxuXG4gICAgICBsZXQgZXZlbnRNYXAgPSB0YXJnZXRzLmdldCh0YXJnZXQpO1xuICAgICAgaWYgKCFldmVudE1hcCkge1xuICAgICAgICBldmVudE1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRhcmdldHMuc2V0KHRhcmdldCwgZXZlbnRNYXApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjYWxsYmFjayA9IHZhbHVlLmJpbmQobnVsbCwgaG9zdCk7XG4gICAgICBldmVudE1hcC5zZXQodmFsdWUsIGNhbGxiYWNrKTtcblxuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHZhbHVlLm9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IHZhbHVlLm9wdGlvbnMgOiBmYWxzZSxcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuIl19

  function _typeof$5(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

  function normalizeValue(value) {
    var set = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();

    if (Array.isArray(value)) {
      value.forEach(function (className) {
        return set.add(className);
      });
    } else if (value !== null && _typeof$5(value) === 'object') {
      Object.keys(value).forEach(function (key) {
        return value[key] && set.add(key);
      });
    } else {
      set.add(value);
    }

    return set;
  }

  var classMap = new WeakMap();
  function resolveClassList(host, target, value) {
    var previousList = classMap.get(target) || new Set();
    var list = normalizeValue(value);
    classMap.set(target, list);
    list.forEach(function (className) {
      target.classList.add(className);
      previousList.delete(className);
    });
    previousList.forEach(function (className) {
      target.classList.remove(className);
    });
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvY2xhc3MuanMiXSwibmFtZXMiOlsibm9ybWFsaXplVmFsdWUiLCJ2YWx1ZSIsInNldCIsIlNldCIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJjbGFzc05hbWUiLCJhZGQiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiY2xhc3NNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZUNsYXNzTGlzdCIsImhvc3QiLCJ0YXJnZXQiLCJwcmV2aW91c0xpc3QiLCJnZXQiLCJsaXN0IiwiY2xhc3NMaXN0IiwiZGVsZXRlIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQWdEO0FBQUEsTUFBakJDLEdBQWlCLHVFQUFYLElBQUlDLEdBQUosRUFBVzs7QUFDOUMsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNKLEtBQWQsQ0FBSixFQUEwQjtBQUN4QkEsSUFBQUEsS0FBSyxDQUFDSyxPQUFOLENBQWMsVUFBQ0MsU0FBRDtBQUFBLGFBQWVMLEdBQUcsQ0FBQ00sR0FBSixDQUFRRCxTQUFSLENBQWY7QUFBQSxLQUFkO0FBQ0QsR0FGRCxNQUVPLElBQUlOLEtBQUssS0FBSyxJQUFWLElBQWtCLFFBQU9BLEtBQVAsTUFBaUIsUUFBdkMsRUFBaUQ7QUFDdERRLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxLQUFaLEVBQW1CSyxPQUFuQixDQUEyQixVQUFDSyxHQUFEO0FBQUEsYUFBU1YsS0FBSyxDQUFDVSxHQUFELENBQUwsSUFBY1QsR0FBRyxDQUFDTSxHQUFKLENBQVFHLEdBQVIsQ0FBdkI7QUFBQSxLQUEzQjtBQUNELEdBRk0sTUFFQTtBQUNMVCxJQUFBQSxHQUFHLENBQUNNLEdBQUosQ0FBUVAsS0FBUjtBQUNEOztBQUVELFNBQU9DLEdBQVA7QUFDRDs7QUFFRCxJQUFNVSxRQUFRLEdBQUcsSUFBSUMsT0FBSixFQUFqQjtBQUVBLGVBQWUsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDQyxNQUFoQyxFQUF3Q2YsS0FBeEMsRUFBK0M7QUFDNUQsTUFBTWdCLFlBQVksR0FBR0wsUUFBUSxDQUFDTSxHQUFULENBQWFGLE1BQWIsS0FBd0IsSUFBSWIsR0FBSixFQUE3QztBQUNBLE1BQU1nQixJQUFJLEdBQUduQixjQUFjLENBQUNDLEtBQUQsQ0FBM0I7QUFFQVcsRUFBQUEsUUFBUSxDQUFDVixHQUFULENBQWFjLE1BQWIsRUFBcUJHLElBQXJCO0FBRUFBLEVBQUFBLElBQUksQ0FBQ2IsT0FBTCxDQUFhLFVBQUNDLFNBQUQsRUFBZTtBQUMxQlMsSUFBQUEsTUFBTSxDQUFDSSxTQUFQLENBQWlCWixHQUFqQixDQUFxQkQsU0FBckI7QUFDQVUsSUFBQUEsWUFBWSxDQUFDSSxNQUFiLENBQW9CZCxTQUFwQjtBQUNELEdBSEQ7QUFLQVUsRUFBQUEsWUFBWSxDQUFDWCxPQUFiLENBQXFCLFVBQUNDLFNBQUQsRUFBZTtBQUNsQ1MsSUFBQUEsTUFBTSxDQUFDSSxTQUFQLENBQWlCRSxNQUFqQixDQUF3QmYsU0FBeEI7QUFDRCxHQUZEO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSwgc2V0ID0gbmV3IFNldCgpKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goKGNsYXNzTmFtZSkgPT4gc2V0LmFkZChjbGFzc05hbWUpKTtcbiAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goKGtleSkgPT4gdmFsdWVba2V5XSAmJiBzZXQuYWRkKGtleSkpO1xuICB9IGVsc2Uge1xuICAgIHNldC5hZGQodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuY29uc3QgY2xhc3NNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlQ2xhc3NMaXN0KGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgY29uc3QgcHJldmlvdXNMaXN0ID0gY2xhc3NNYXAuZ2V0KHRhcmdldCkgfHwgbmV3IFNldCgpO1xuICBjb25zdCBsaXN0ID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gIGNsYXNzTWFwLnNldCh0YXJnZXQsIGxpc3QpO1xuXG4gIGxpc3QuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICBwcmV2aW91c0xpc3QuZGVsZXRlKGNsYXNzTmFtZSk7XG4gIH0pO1xuXG4gIHByZXZpb3VzTGlzdC5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9KTtcbn1cbiJdfQ==

  function _typeof$6(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }
  var styleMap = new WeakMap();
  function resolveStyle(host, target, value) {
    if (value === null || _typeof$6(value) !== 'object') {
      throw TypeError("Style value must be an object in ".concat(stringifyElement(target), ":"), value);
    }

    var previousMap = styleMap.get(target) || new Map();
    var nextMap = Object.keys(value).reduce(function (map, key) {
      var dashKey = camelToDash(key);
      var styleValue = value[key];

      if (!styleValue && styleValue !== 0) {
        target.style.removeProperty(dashKey);
      } else {
        target.style.setProperty(dashKey, styleValue);
      }

      map.set(dashKey, styleValue);
      previousMap.delete(dashKey);
      return map;
    }, new Map());
    previousMap.forEach(function (styleValue, key) {
      target.style[key] = '';
    });
    styleMap.set(target, nextMap);
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvc3R5bGUuanMiXSwibmFtZXMiOlsiY2FtZWxUb0Rhc2giLCJzdHJpbmdpZnlFbGVtZW50Iiwic3R5bGVNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZVN0eWxlIiwiaG9zdCIsInRhcmdldCIsInZhbHVlIiwiVHlwZUVycm9yIiwicHJldmlvdXNNYXAiLCJnZXQiLCJNYXAiLCJuZXh0TWFwIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsIm1hcCIsImtleSIsImRhc2hLZXkiLCJzdHlsZVZhbHVlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5Iiwic2V0IiwiZGVsZXRlIiwiZm9yRWFjaCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxXQUFULEVBQXNCQyxnQkFBdEIsUUFBOEMsYUFBOUM7QUFFQSxJQUFNQyxRQUFRLEdBQUcsSUFBSUMsT0FBSixFQUFqQjtBQUVBLGVBQWUsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLE1BQTVCLEVBQW9DQyxLQUFwQyxFQUEyQztBQUN4RCxNQUFJQSxLQUFLLEtBQUssSUFBVixJQUFrQixRQUFPQSxLQUFQLE1BQWlCLFFBQXZDLEVBQWlEO0FBQy9DLFVBQU1DLFNBQVMsNENBQXFDUCxnQkFBZ0IsQ0FBQ0ssTUFBRCxDQUFyRCxRQUFrRUMsS0FBbEUsQ0FBZjtBQUNEOztBQUVELE1BQU1FLFdBQVcsR0FBR1AsUUFBUSxDQUFDUSxHQUFULENBQWFKLE1BQWIsS0FBd0IsSUFBSUssR0FBSixFQUE1QztBQUVBLE1BQU1DLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlQLEtBQVosRUFBbUJRLE1BQW5CLENBQTBCLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3RELFFBQU1DLE9BQU8sR0FBR2xCLFdBQVcsQ0FBQ2lCLEdBQUQsQ0FBM0I7QUFDQSxRQUFNRSxVQUFVLEdBQUdaLEtBQUssQ0FBQ1UsR0FBRCxDQUF4Qjs7QUFFQSxRQUFJLENBQUNFLFVBQUQsSUFBZUEsVUFBVSxLQUFLLENBQWxDLEVBQXFDO0FBQ25DYixNQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYUMsY0FBYixDQUE0QkgsT0FBNUI7QUFDRCxLQUZELE1BRU87QUFDTFosTUFBQUEsTUFBTSxDQUFDYyxLQUFQLENBQWFFLFdBQWIsQ0FBeUJKLE9BQXpCLEVBQWtDQyxVQUFsQztBQUNEOztBQUVESCxJQUFBQSxHQUFHLENBQUNPLEdBQUosQ0FBUUwsT0FBUixFQUFpQkMsVUFBakI7QUFDQVYsSUFBQUEsV0FBVyxDQUFDZSxNQUFaLENBQW1CTixPQUFuQjtBQUVBLFdBQU9GLEdBQVA7QUFDRCxHQWRlLEVBY2IsSUFBSUwsR0FBSixFQWRhLENBQWhCO0FBZ0JBRixFQUFBQSxXQUFXLENBQUNnQixPQUFaLENBQW9CLFVBQUNOLFVBQUQsRUFBYUYsR0FBYixFQUFxQjtBQUFFWCxJQUFBQSxNQUFNLENBQUNjLEtBQVAsQ0FBYUgsR0FBYixJQUFvQixFQUFwQjtBQUF5QixHQUFwRTtBQUVBZixFQUFBQSxRQUFRLENBQUNxQixHQUFULENBQWFqQixNQUFiLEVBQXFCTSxPQUFyQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FtZWxUb0Rhc2gsIHN0cmluZ2lmeUVsZW1lbnQgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmNvbnN0IHN0eWxlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVN0eWxlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoYFN0eWxlIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0IGluICR7c3RyaW5naWZ5RWxlbWVudCh0YXJnZXQpfTpgLCB2YWx1ZSk7XG4gIH1cblxuICBjb25zdCBwcmV2aW91c01hcCA9IHN0eWxlTWFwLmdldCh0YXJnZXQpIHx8IG5ldyBNYXAoKTtcblxuICBjb25zdCBuZXh0TWFwID0gT2JqZWN0LmtleXModmFsdWUpLnJlZHVjZSgobWFwLCBrZXkpID0+IHtcbiAgICBjb25zdCBkYXNoS2V5ID0gY2FtZWxUb0Rhc2goa2V5KTtcbiAgICBjb25zdCBzdHlsZVZhbHVlID0gdmFsdWVba2V5XTtcblxuICAgIGlmICghc3R5bGVWYWx1ZSAmJiBzdHlsZVZhbHVlICE9PSAwKSB7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoZGFzaEtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShkYXNoS2V5LCBzdHlsZVZhbHVlKTtcbiAgICB9XG5cbiAgICBtYXAuc2V0KGRhc2hLZXksIHN0eWxlVmFsdWUpO1xuICAgIHByZXZpb3VzTWFwLmRlbGV0ZShkYXNoS2V5KTtcblxuICAgIHJldHVybiBtYXA7XG4gIH0sIG5ldyBNYXAoKSk7XG5cbiAgcHJldmlvdXNNYXAuZm9yRWFjaCgoc3R5bGVWYWx1ZSwga2V5KSA9PiB7IHRhcmdldC5zdHlsZVtrZXldID0gJyc7IH0pO1xuXG4gIHN0eWxlTWFwLnNldCh0YXJnZXQsIG5leHRNYXApO1xufVxuIl19

  function resolveProperty(attrName, propertyName, isSVG) {
    if (propertyName.substr(0, 2) === 'on') {
      var eventType = propertyName.substr(2);
      return resolveEventListener(eventType);
    }

    switch (attrName) {
      case 'class':
        return resolveClassList;

      case 'style':
        return resolveStyle;

      default:
        return function (host, target, value) {
          if (!isSVG && !(target instanceof SVGElement) && propertyName in target) {
            if (target[propertyName] !== value) {
              target[propertyName] = value;
            }
          } else if (value === false || value === undefined || value === null) {
            target.removeAttribute(attrName);
          } else {
            var attrValue = value === true ? '' : String(value);
            target.setAttribute(attrName, attrValue);
          }
        };
    }
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZW1wbGF0ZS9yZXNvbHZlcnMvcHJvcGVydHkuanMiXSwibmFtZXMiOlsicmVzb2x2ZUV2ZW50TGlzdGVuZXIiLCJyZXNvbHZlQ2xhc3NMaXN0IiwicmVzb2x2ZVN0eWxlTGlzdCIsInJlc29sdmVQcm9wZXJ0eSIsImF0dHJOYW1lIiwicHJvcGVydHlOYW1lIiwiaXNTVkciLCJzdWJzdHIiLCJldmVudFR5cGUiLCJob3N0IiwidGFyZ2V0IiwidmFsdWUiLCJTVkdFbGVtZW50IiwidW5kZWZpbmVkIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clZhbHVlIiwiU3RyaW5nIiwic2V0QXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxvQkFBUCxNQUFpQyxTQUFqQztBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLFNBQTdCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsU0FBN0I7QUFFQSxlQUFlLFNBQVNDLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxZQUFuQyxFQUFpREMsS0FBakQsRUFBd0Q7QUFDckUsTUFBSUQsWUFBWSxDQUFDRSxNQUFiLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLE1BQThCLElBQWxDLEVBQXdDO0FBQ3RDLFFBQU1DLFNBQVMsR0FBR0gsWUFBWSxDQUFDRSxNQUFiLENBQW9CLENBQXBCLENBQWxCO0FBQ0EsV0FBT1Asb0JBQW9CLENBQUNRLFNBQUQsQ0FBM0I7QUFDRDs7QUFFRCxVQUFRSixRQUFSO0FBQ0UsU0FBSyxPQUFMO0FBQWMsYUFBT0gsZ0JBQVA7O0FBQ2QsU0FBSyxPQUFMO0FBQWMsYUFBT0MsZ0JBQVA7O0FBQ2Q7QUFDRSxhQUFPLFVBQUNPLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxLQUFmLEVBQXlCO0FBQzlCLFlBQUksQ0FBQ0wsS0FBRCxJQUFVLEVBQUVJLE1BQU0sWUFBWUUsVUFBcEIsQ0FBVixJQUE4Q1AsWUFBWSxJQUFJSyxNQUFsRSxFQUEyRTtBQUN6RSxjQUFJQSxNQUFNLENBQUNMLFlBQUQsQ0FBTixLQUF5Qk0sS0FBN0IsRUFBb0M7QUFDbENELFlBQUFBLE1BQU0sQ0FBQ0wsWUFBRCxDQUFOLEdBQXVCTSxLQUF2QjtBQUNEO0FBQ0YsU0FKRCxNQUlPLElBQUlBLEtBQUssS0FBSyxLQUFWLElBQW1CQSxLQUFLLEtBQUtFLFNBQTdCLElBQTBDRixLQUFLLEtBQUssSUFBeEQsRUFBOEQ7QUFDbkVELFVBQUFBLE1BQU0sQ0FBQ0ksZUFBUCxDQUF1QlYsUUFBdkI7QUFDRCxTQUZNLE1BRUE7QUFDTCxjQUFNVyxTQUFTLEdBQUdKLEtBQUssS0FBSyxJQUFWLEdBQWlCLEVBQWpCLEdBQXNCSyxNQUFNLENBQUNMLEtBQUQsQ0FBOUM7QUFDQUQsVUFBQUEsTUFBTSxDQUFDTyxZQUFQLENBQW9CYixRQUFwQixFQUE4QlcsU0FBOUI7QUFDRDtBQUNGLE9BWEQ7QUFKSjtBQWlCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZXNvbHZlRXZlbnRMaXN0ZW5lciBmcm9tICcuL2V2ZW50JztcbmltcG9ydCByZXNvbHZlQ2xhc3NMaXN0IGZyb20gJy4vY2xhc3MnO1xuaW1wb3J0IHJlc29sdmVTdHlsZUxpc3QgZnJvbSAnLi9zdHlsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0eShhdHRyTmFtZSwgcHJvcGVydHlOYW1lLCBpc1NWRykge1xuICBpZiAocHJvcGVydHlOYW1lLnN1YnN0cigwLCAyKSA9PT0gJ29uJykge1xuICAgIGNvbnN0IGV2ZW50VHlwZSA9IHByb3BlcnR5TmFtZS5zdWJzdHIoMik7XG4gICAgcmV0dXJuIHJlc29sdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSk7XG4gIH1cblxuICBzd2l0Y2ggKGF0dHJOYW1lKSB7XG4gICAgY2FzZSAnY2xhc3MnOiByZXR1cm4gcmVzb2x2ZUNsYXNzTGlzdDtcbiAgICBjYXNlICdzdHlsZSc6IHJldHVybiByZXNvbHZlU3R5bGVMaXN0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gKGhvc3QsIHRhcmdldCwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKCFpc1NWRyAmJiAhKHRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpICYmIChwcm9wZXJ0eU5hbWUgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgIGlmICh0YXJnZXRbcHJvcGVydHlOYW1lXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRhcmdldFtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gdmFsdWUgPT09IHRydWUgPyAnJyA6IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgfVxufVxuIl19

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

  function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _typeof$7(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }
  /* istanbul ignore next */

  try {
    process$1.env.NODE_ENV;
  } catch (e) {
    var process$1 = {
      env: {
        NODE_ENV: 'production'
      }
    };
  } // eslint-disable-line


  var TIMESTAMP = Date.now();
  var getPlaceholder = function getPlaceholder() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return "{{h-".concat(TIMESTAMP, "-").concat(id, "}}");
  };
  var PLACEHOLDER_REGEXP_TEXT = getPlaceholder('(\\d+)');
  var PLACEHOLDER_REGEXP_EQUAL = new RegExp("^".concat(PLACEHOLDER_REGEXP_TEXT, "$"));
  var PLACEHOLDER_REGEXP_ALL = new RegExp(PLACEHOLDER_REGEXP_TEXT, 'g');
  var ATTR_PREFIX = "--".concat(TIMESTAMP, "--");
  var ATTR_REGEXP = new RegExp(ATTR_PREFIX, 'g');
  var preparedTemplates = new WeakMap();
  /* istanbul ignore next */

  function applyShadyCSS(template, tagName) {
    if (!tagName) return template;
    return shadyCSS(function (shady) {
      var map = preparedTemplates.get(template);

      if (!map) {
        map = new Map();
        preparedTemplates.set(template, map);
      }

      var clone = map.get(tagName);

      if (!clone) {
        clone = document.createElement('template');
        clone.content.appendChild(template.content.cloneNode(true));
        map.set(tagName, clone);
        var styles = clone.content.querySelectorAll('style');
        Array.from(styles).forEach(function (style) {
          var count = style.childNodes.length + 1;

          for (var i = 0; i < count; i += 1) {
            style.parentNode.insertBefore(document.createTextNode(getPlaceholder()), style);
          }
        });
        shady.prepareTemplate(clone, tagName.toLowerCase());
      }

      return clone;
    }, template);
  }

  function createSignature(parts, styles) {
    var signature = parts.reduce(function (acc, part, index) {
      if (index === 0) {
        return part;
      }

      if (parts.slice(index).join('').match(/^\s*<\/\s*(table|tr|thead|tbody|tfoot|colgroup)>/)) {
        return "".concat(acc, "<!--").concat(getPlaceholder(index - 1), "-->").concat(part);
      }

      return acc + getPlaceholder(index - 1) + part;
    }, '');

    if (styles) {
      signature += "<style>\n".concat(styles.join('\n/*------*/\n'), "\n</style>");
    }
    /* istanbul ignore if */


    if (IS_IE) {
      return signature.replace(/style\s*=\s*(["][^"]+["]|['][^']+[']|[^\s"'<>/]+)/g, function (match) {
        return "".concat(ATTR_PREFIX).concat(match);
      });
    }

    return signature;
  }

  function getPropertyName(string) {
    return string.replace(/\s*=\s*['"]*$/g, '').split(' ').pop();
  }

  function replaceComments(fragment) {
    var iterator = document.createNodeIterator(fragment, NodeFilter.SHOW_COMMENT, null, false);
    var node; // eslint-disable-next-line no-cond-assign

    while (node = iterator.nextNode()) {
      if (PLACEHOLDER_REGEXP_EQUAL.test(node.textContent)) {
        node.parentNode.insertBefore(document.createTextNode(node.textContent), node);
        node.parentNode.removeChild(node);
      }
    }
  }

  function createInternalWalker(context) {
    var node;
    return {
      get currentNode() {
        return node;
      },

      nextNode: function nextNode() {
        if (node === undefined) {
          node = context.childNodes[0];
        } else if (node.childNodes.length) {
          node = node.childNodes[0];
        } else if (node.nextSibling) {
          node = node.nextSibling;
        } else {
          var parentNode = node.parentNode;
          node = parentNode.nextSibling;

          while (!node && parentNode !== context) {
            parentNode = parentNode.parentNode;
            node = parentNode.nextSibling;
          }
        }

        return !!node;
      }
    };
  }

  function createExternalWalker(context) {
    return document.createTreeWalker(context, // eslint-disable-next-line no-bitwise
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, null, false);
  }
  /* istanbul ignore next */


  var createWalker = _typeof$7(window.ShadyDOM) === 'object' && window.ShadyDOM.inUse ? createInternalWalker : createExternalWalker;
  var container = document.createElement('div');
  function compileTemplate(rawParts, isSVG, styles) {
    var template = document.createElement('template');
    var parts = [];
    var signature = createSignature(rawParts, styles);
    if (isSVG) signature = "<svg>".concat(signature, "</svg>");
    /* istanbul ignore if */

    if (IS_IE) {
      template.innerHTML = signature;
    } else {
      container.innerHTML = "<template>".concat(signature, "</template>");
      template.content.appendChild(container.children[0].content);
    }

    if (isSVG) {
      var svgRoot = template.content.firstChild;
      template.content.removeChild(svgRoot);
      Array.from(svgRoot.childNodes).forEach(function (node) {
        return template.content.appendChild(node);
      });
    }

    replaceComments(template.content);
    var compileWalker = createWalker(template.content);
    var compileIndex = 0;

    var _loop = function _loop() {
      var node = compileWalker.currentNode;

      if (node.nodeType === Node.TEXT_NODE) {
        var text = node.textContent;

        if (!text.match(PLACEHOLDER_REGEXP_EQUAL)) {
          var results = text.match(PLACEHOLDER_REGEXP_ALL);

          if (results) {
            var currentNode = node;
            results.reduce(function (acc, placeholder) {
              var _acc$pop$split = acc.pop().split(placeholder),
                  _acc$pop$split2 = _slicedToArray(_acc$pop$split, 2),
                  before = _acc$pop$split2[0],
                  next = _acc$pop$split2[1];

              if (before) acc.push(before);
              acc.push(placeholder);
              if (next) acc.push(next);
              return acc;
            }, [text]).forEach(function (part, index) {
              if (index === 0) {
                currentNode.textContent = part;
              } else {
                currentNode = currentNode.parentNode.insertBefore(document.createTextNode(part), currentNode.nextSibling);
              }
            });
          }
        }

        var equal = node.textContent.match(PLACEHOLDER_REGEXP_EQUAL);

        if (equal) {
          /* istanbul ignore else */
          if (!IS_IE) node.textContent = '';
          parts[equal[1]] = [compileIndex, resolveValue];
        }
      } else {
        /* istanbul ignore else */
        // eslint-disable-next-line no-lonely-if
        if (node.nodeType === Node.ELEMENT_NODE) {
          Array.from(node.attributes).forEach(function (attr) {
            var value = attr.value.trim();
            /* istanbul ignore next */

            var name = IS_IE ? attr.name.replace(ATTR_PREFIX, '') : attr.name;
            var equal = value.match(PLACEHOLDER_REGEXP_EQUAL);

            if (equal) {
              var propertyName = getPropertyName(rawParts[equal[1]]);
              parts[equal[1]] = [compileIndex, resolveProperty(name, propertyName, isSVG)];
              node.removeAttribute(attr.name);
            } else {
              var _results = value.match(PLACEHOLDER_REGEXP_ALL);

              if (_results) {
                var partialName = "attr__".concat(name);

                _results.forEach(function (placeholder, index) {
                  var _placeholder$match = placeholder.match(PLACEHOLDER_REGEXP_EQUAL),
                      _placeholder$match2 = _slicedToArray(_placeholder$match, 2),
                      id = _placeholder$match2[1];

                  parts[id] = [compileIndex, function (host, target, attrValue) {
                    var data = dataMap.get(target, {});
                    data[partialName] = (data[partialName] || value).replace(placeholder, attrValue == null ? '' : attrValue);

                    if (_results.length === 1 || index + 1 === _results.length) {
                      target.setAttribute(name, data[partialName]);
                      data[partialName] = undefined;
                    }
                  }];
                });

                attr.value = '';
                /* istanbul ignore next */

                if (IS_IE && name !== attr.name) {
                  node.removeAttribute(attr.name);
                  node.setAttribute(name, '');
                }
              }
            }
          });
        }
      }

      compileIndex += 1;
    };

    while (compileWalker.nextNode()) {
      _loop();
    }

    return function updateTemplateInstance(host, target, args) {
      var data = dataMap.get(target, {
        type: 'function'
      });

      if (template !== data.template) {
        if (data.template || target.nodeType === Node.ELEMENT_NODE) removeTemplate(target);
        data.prevArgs = null;
        var fragment = document.importNode(applyShadyCSS(template, host.tagName).content, true);
        var renderWalker = createWalker(fragment);
        var clonedParts = parts.slice(0);
        var renderIndex = 0;
        var currentPart = clonedParts.shift();
        var markers = [];
        data.template = template;
        data.markers = markers;

        while (renderWalker.nextNode()) {
          var node = renderWalker.currentNode;

          if (node.nodeType === Node.TEXT_NODE) {
            /* istanbul ignore next */
            if (PLACEHOLDER_REGEXP_EQUAL.test(node.textContent)) {
              node.textContent = '';
            } else if (IS_IE) {
              node.textContent = node.textContent.replace(ATTR_REGEXP, '');
            }
          }

          while (currentPart && currentPart[0] === renderIndex) {
            markers.push([node, currentPart[1]]);
            currentPart = clonedParts.shift();
          }

          renderIndex += 1;
        }

        if (target.nodeType === Node.TEXT_NODE) {
          data.startNode = fragment.childNodes[0];
          data.endNode = fragment.childNodes[fragment.childNodes.length - 1];
          var previousChild = target;
          var child = fragment.childNodes[0];

          while (child) {
            target.parentNode.insertBefore(child, previousChild.nextSibling);
            previousChild = child;
            child = fragment.childNodes[0];
          }
        } else {
          target.appendChild(fragment);
        }
      }

      var prevArgs = data.prevArgs;
      data.prevArgs = args;

      for (var index = 0; index < data.markers.length; index += 1) {
        var _data$markers$index = _slicedToArray(data.markers[index], 2),
            _node = _data$markers$index[0],
            marker = _data$markers$index[1];

        if (!prevArgs || prevArgs[index] !== args[index]) {
          marker(host, _node, args[index], prevArgs ? prevArgs[index] : undefined);
        }
      }

      if (target.nodeType !== Node.TEXT_NODE) {
        shadyCSS(function (shady) {
          if (host.shadowRoot) {
            if (prevArgs) {
              shady.styleSubtree(host);
            } else {
              shady.styleElement(host);
            }
          }
        });
      }
    };
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,

  var setCache = new Map();
  function set$1(propertyName, value) {
    if (!propertyName) throw Error("Target property name missing: ".concat(propertyName));

    if (arguments.length === 2) {
      return function (host) {
        host[propertyName] = value;
      };
    }

    var fn = setCache.get(propertyName);

    if (!fn) {
      fn = function fn(host, _ref) {
        var target = _ref.target;
        host[propertyName] = target.value;
      };

      setCache.set(propertyName, fn);
    }

    return fn;
  }
  var promiseMap = new WeakMap();
  function resolve(promise, placeholder) {
    var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
    return function (host, target) {
      var timeout;

      if (placeholder) {
        timeout = setTimeout(function () {
          timeout = undefined;
          requestAnimationFrame(function () {
            placeholder(host, target);
          });
        }, delay);
      }

      promiseMap.set(target, promise);
      promise.then(function (template) {
        if (timeout) clearTimeout(timeout);

        if (promiseMap.get(target) === promise) {
          template(host, target);
          promiseMap.set(target, null);
        }
      });
    };
  }
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbInNldENhY2hlIiwiTWFwIiwic2V0IiwicHJvcGVydHlOYW1lIiwidmFsdWUiLCJFcnJvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsImhvc3QiLCJmbiIsImdldCIsInRhcmdldCIsInByb21pc2VNYXAiLCJXZWFrTWFwIiwicmVzb2x2ZSIsInByb21pc2UiLCJwbGFjZWhvbGRlciIsImRlbGF5IiwidGltZW91dCIsInNldFRpbWVvdXQiLCJ1bmRlZmluZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0aGVuIiwidGVtcGxhdGUiLCJjbGVhclRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLFFBQVEsR0FBRyxJQUFJQyxHQUFKLEVBQWpCO0FBQ0EsT0FBTyxTQUFTQyxHQUFULENBQWFDLFlBQWIsRUFBMkJDLEtBQTNCLEVBQWtDO0FBQ3ZDLE1BQUksQ0FBQ0QsWUFBTCxFQUFtQixNQUFNRSxLQUFLLHlDQUFrQ0YsWUFBbEMsRUFBWDs7QUFFbkIsTUFBSUcsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCLFdBQU8sVUFBQ0MsSUFBRCxFQUFVO0FBQUVBLE1BQUFBLElBQUksQ0FBQ0wsWUFBRCxDQUFKLEdBQXFCQyxLQUFyQjtBQUE2QixLQUFoRDtBQUNEOztBQUVELE1BQUlLLEVBQUUsR0FBR1QsUUFBUSxDQUFDVSxHQUFULENBQWFQLFlBQWIsQ0FBVDs7QUFFQSxNQUFJLENBQUNNLEVBQUwsRUFBUztBQUNQQSxJQUFBQSxFQUFFLEdBQUcsWUFBQ0QsSUFBRCxRQUFzQjtBQUFBLFVBQWJHLE1BQWEsUUFBYkEsTUFBYTtBQUFFSCxNQUFBQSxJQUFJLENBQUNMLFlBQUQsQ0FBSixHQUFxQlEsTUFBTSxDQUFDUCxLQUE1QjtBQUFvQyxLQUFqRTs7QUFDQUosSUFBQUEsUUFBUSxDQUFDRSxHQUFULENBQWFDLFlBQWIsRUFBMkJNLEVBQTNCO0FBQ0Q7O0FBRUQsU0FBT0EsRUFBUDtBQUNEO0FBRUQsSUFBTUcsVUFBVSxHQUFHLElBQUlDLE9BQUosRUFBbkI7QUFDQSxPQUFPLFNBQVNDLE9BQVQsQ0FBaUJDLE9BQWpCLEVBQTBCQyxXQUExQixFQUFvRDtBQUFBLE1BQWJDLEtBQWEsdUVBQUwsR0FBSztBQUN6RCxTQUFPLFVBQUNULElBQUQsRUFBT0csTUFBUCxFQUFrQjtBQUN2QixRQUFJTyxPQUFKOztBQUVBLFFBQUlGLFdBQUosRUFBaUI7QUFDZkUsTUFBQUEsT0FBTyxHQUFHQyxVQUFVLENBQUMsWUFBTTtBQUN6QkQsUUFBQUEsT0FBTyxHQUFHRSxTQUFWO0FBRUFDLFFBQUFBLHFCQUFxQixDQUFDLFlBQU07QUFDMUJMLFVBQUFBLFdBQVcsQ0FBQ1IsSUFBRCxFQUFPRyxNQUFQLENBQVg7QUFDRCxTQUZvQixDQUFyQjtBQUdELE9BTm1CLEVBTWpCTSxLQU5pQixDQUFwQjtBQU9EOztBQUVETCxJQUFBQSxVQUFVLENBQUNWLEdBQVgsQ0FBZVMsTUFBZixFQUF1QkksT0FBdkI7QUFFQUEsSUFBQUEsT0FBTyxDQUFDTyxJQUFSLENBQWEsVUFBQ0MsUUFBRCxFQUFjO0FBQ3pCLFVBQUlMLE9BQUosRUFBYU0sWUFBWSxDQUFDTixPQUFELENBQVo7O0FBRWIsVUFBSU4sVUFBVSxDQUFDRixHQUFYLENBQWVDLE1BQWYsTUFBMkJJLE9BQS9CLEVBQXdDO0FBQ3RDUSxRQUFBQSxRQUFRLENBQUNmLElBQUQsRUFBT0csTUFBUCxDQUFSO0FBQ0FDLFFBQUFBLFVBQVUsQ0FBQ1YsR0FBWCxDQUFlUyxNQUFmLEVBQXVCLElBQXZCO0FBQ0Q7QUFDRixLQVBEO0FBUUQsR0F2QkQ7QUF3QkQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzZXRDYWNoZSA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBzZXQocHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICBpZiAoIXByb3BlcnR5TmFtZSkgdGhyb3cgRXJyb3IoYFRhcmdldCBwcm9wZXJ0eSBuYW1lIG1pc3Npbmc6ICR7cHJvcGVydHlOYW1lfWApO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIChob3N0KSA9PiB7IGhvc3RbcHJvcGVydHlOYW1lXSA9IHZhbHVlOyB9O1xuICB9XG5cbiAgbGV0IGZuID0gc2V0Q2FjaGUuZ2V0KHByb3BlcnR5TmFtZSk7XG5cbiAgaWYgKCFmbikge1xuICAgIGZuID0gKGhvc3QsIHsgdGFyZ2V0IH0pID0+IHsgaG9zdFtwcm9wZXJ0eU5hbWVdID0gdGFyZ2V0LnZhbHVlOyB9O1xuICAgIHNldENhY2hlLnNldChwcm9wZXJ0eU5hbWUsIGZuKTtcbiAgfVxuXG4gIHJldHVybiBmbjtcbn1cblxuY29uc3QgcHJvbWlzZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZShwcm9taXNlLCBwbGFjZWhvbGRlciwgZGVsYXkgPSAyMDApIHtcbiAgcmV0dXJuIChob3N0LCB0YXJnZXQpID0+IHtcbiAgICBsZXQgdGltZW91dDtcblxuICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aW1lb3V0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgcGxhY2Vob2xkZXIoaG9zdCwgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfVxuXG4gICAgcHJvbWlzZU1hcC5zZXQodGFyZ2V0LCBwcm9taXNlKTtcblxuICAgIHByb21pc2UudGhlbigodGVtcGxhdGUpID0+IHtcbiAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICAgIGlmIChwcm9taXNlTWFwLmdldCh0YXJnZXQpID09PSBwcm9taXNlKSB7XG4gICAgICAgIHRlbXBsYXRlKGhvc3QsIHRhcmdldCk7XG4gICAgICAgIHByb21pc2VNYXAuc2V0KHRhcmdldCwgbnVsbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG4iXX0=

  var helpers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    set: set$1,
    resolve: resolve
  });

  var PLACEHOLDER = getPlaceholder();
  var SVG_PLACEHOLDER = getPlaceholder('svg');
  var templatesMap = new Map();
  var stylesMap = new WeakMap();
  var methods = {
    define: function define$1(elements) {
      define(elements);
      return this;
    },
    key: function key(id) {
      this.id = id;
      return this;
    },
    style: function style() {
      for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
        styles[_key] = arguments[_key];
      }

      stylesMap.set(this, styles);
      return this;
    }
  };

  function create(parts, args, isSVG) {
    var createTemplate = function createTemplate(host) {
      var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : host;
      var styles = stylesMap.get(createTemplate);
      var id = parts.join(PLACEHOLDER);
      if (styles) id += styles.join(PLACEHOLDER);
      if (isSVG) id += SVG_PLACEHOLDER;
      var render = templatesMap.get(id);

      if (!render) {
        render = compileTemplate(parts, isSVG, styles);
        templatesMap.set(id, render);
      }

      render(host, target, args);
    };

    return Object.assign(createTemplate, methods);
  }

  function html(parts) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    return create(parts, args);
  }
  function svg(parts) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    return create(parts, args, true);
  }
  Object.assign(html, helpers);
  Object.assign(svg, helpers);
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZpbmVFbGVtZW50cyIsImNvbXBpbGVUZW1wbGF0ZSIsImdldFBsYWNlaG9sZGVyIiwiaGVscGVycyIsIlBMQUNFSE9MREVSIiwiU1ZHX1BMQUNFSE9MREVSIiwidGVtcGxhdGVzTWFwIiwiTWFwIiwic3R5bGVzTWFwIiwiV2Vha01hcCIsIm1ldGhvZHMiLCJkZWZpbmUiLCJlbGVtZW50cyIsImtleSIsImlkIiwic3R5bGUiLCJzdHlsZXMiLCJzZXQiLCJjcmVhdGUiLCJwYXJ0cyIsImFyZ3MiLCJpc1NWRyIsImNyZWF0ZVRlbXBsYXRlIiwiaG9zdCIsInRhcmdldCIsImdldCIsImpvaW4iLCJyZW5kZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJodG1sIiwic3ZnIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxjQUFQLE1BQTJCLFdBQTNCO0FBRUEsU0FBU0MsZUFBVCxFQUEwQkMsY0FBMUIsUUFBZ0QsUUFBaEQ7QUFDQSxPQUFPLEtBQUtDLE9BQVosTUFBeUIsV0FBekI7QUFFQSxJQUFNQyxXQUFXLEdBQUdGLGNBQWMsRUFBbEM7QUFDQSxJQUFNRyxlQUFlLEdBQUdILGNBQWMsQ0FBQyxLQUFELENBQXRDO0FBRUEsSUFBTUksWUFBWSxHQUFHLElBQUlDLEdBQUosRUFBckI7QUFDQSxJQUFNQyxTQUFTLEdBQUcsSUFBSUMsT0FBSixFQUFsQjtBQUVBLElBQU1DLE9BQU8sR0FBRztBQUNkQyxFQUFBQSxNQURjLGtCQUNQQyxRQURPLEVBQ0c7QUFDZlosSUFBQUEsY0FBYyxDQUFDWSxRQUFELENBQWQ7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUphO0FBS2RDLEVBQUFBLEdBTGMsZUFLVkMsRUFMVSxFQUtOO0FBQ04sU0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FSYTtBQVNkQyxFQUFBQSxLQVRjLG1CQVNHO0FBQUEsc0NBQVJDLE1BQVE7QUFBUkEsTUFBQUEsTUFBUTtBQUFBOztBQUNmUixJQUFBQSxTQUFTLENBQUNTLEdBQVYsQ0FBYyxJQUFkLEVBQW9CRCxNQUFwQjtBQUNBLFdBQU8sSUFBUDtBQUNEO0FBWmEsQ0FBaEI7O0FBZUEsU0FBU0UsTUFBVCxDQUFnQkMsS0FBaEIsRUFBdUJDLElBQXZCLEVBQTZCQyxLQUE3QixFQUFvQztBQUNsQyxNQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNDLElBQUQsRUFBeUI7QUFBQSxRQUFsQkMsTUFBa0IsdUVBQVRELElBQVM7QUFDOUMsUUFBTVAsTUFBTSxHQUFHUixTQUFTLENBQUNpQixHQUFWLENBQWNILGNBQWQsQ0FBZjtBQUNBLFFBQUlSLEVBQUUsR0FBR0ssS0FBSyxDQUFDTyxJQUFOLENBQVd0QixXQUFYLENBQVQ7QUFDQSxRQUFJWSxNQUFKLEVBQVlGLEVBQUUsSUFBSUUsTUFBTSxDQUFDVSxJQUFQLENBQVl0QixXQUFaLENBQU47QUFDWixRQUFJaUIsS0FBSixFQUFXUCxFQUFFLElBQUlULGVBQU47QUFFWCxRQUFJc0IsTUFBTSxHQUFHckIsWUFBWSxDQUFDbUIsR0FBYixDQUFpQlgsRUFBakIsQ0FBYjs7QUFDQSxRQUFJLENBQUNhLE1BQUwsRUFBYTtBQUNYQSxNQUFBQSxNQUFNLEdBQUcxQixlQUFlLENBQUNrQixLQUFELEVBQVFFLEtBQVIsRUFBZUwsTUFBZixDQUF4QjtBQUNBVixNQUFBQSxZQUFZLENBQUNXLEdBQWIsQ0FBaUJILEVBQWpCLEVBQXFCYSxNQUFyQjtBQUNEOztBQUVEQSxJQUFBQSxNQUFNLENBQUNKLElBQUQsRUFBT0MsTUFBUCxFQUFlSixJQUFmLENBQU47QUFDRCxHQWJEOztBQWVBLFNBQU9RLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUCxjQUFkLEVBQThCWixPQUE5QixDQUFQO0FBQ0Q7O0FBRUQsT0FBTyxTQUFTb0IsSUFBVCxDQUFjWCxLQUFkLEVBQThCO0FBQUEscUNBQU5DLElBQU07QUFBTkEsSUFBQUEsSUFBTTtBQUFBOztBQUNuQyxTQUFPRixNQUFNLENBQUNDLEtBQUQsRUFBUUMsSUFBUixDQUFiO0FBQ0Q7QUFFRCxPQUFPLFNBQVNXLEdBQVQsQ0FBYVosS0FBYixFQUE2QjtBQUFBLHFDQUFOQyxJQUFNO0FBQU5BLElBQUFBLElBQU07QUFBQTs7QUFDbEMsU0FBT0YsTUFBTSxDQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBYyxJQUFkLENBQWI7QUFDRDtBQUVEUSxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBZCxFQUFvQjNCLE9BQXBCO0FBQ0F5QixNQUFNLENBQUNDLE1BQVAsQ0FBY0UsR0FBZCxFQUFtQjVCLE9BQW5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZUVsZW1lbnRzIGZyb20gJy4uL2RlZmluZSc7XG5cbmltcG9ydCB7IGNvbXBpbGVUZW1wbGF0ZSwgZ2V0UGxhY2Vob2xkZXIgfSBmcm9tICcuL2NvcmUnO1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBQTEFDRUhPTERFUiA9IGdldFBsYWNlaG9sZGVyKCk7XG5jb25zdCBTVkdfUExBQ0VIT0xERVIgPSBnZXRQbGFjZWhvbGRlcignc3ZnJyk7XG5cbmNvbnN0IHRlbXBsYXRlc01hcCA9IG5ldyBNYXAoKTtcbmNvbnN0IHN0eWxlc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbmNvbnN0IG1ldGhvZHMgPSB7XG4gIGRlZmluZShlbGVtZW50cykge1xuICAgIGRlZmluZUVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAga2V5KGlkKSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBzdHlsZSguLi5zdHlsZXMpIHtcbiAgICBzdHlsZXNNYXAuc2V0KHRoaXMsIHN0eWxlcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGUocGFydHMsIGFyZ3MsIGlzU1ZHKSB7XG4gIGNvbnN0IGNyZWF0ZVRlbXBsYXRlID0gKGhvc3QsIHRhcmdldCA9IGhvc3QpID0+IHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZXNNYXAuZ2V0KGNyZWF0ZVRlbXBsYXRlKTtcbiAgICBsZXQgaWQgPSBwYXJ0cy5qb2luKFBMQUNFSE9MREVSKTtcbiAgICBpZiAoc3R5bGVzKSBpZCArPSBzdHlsZXMuam9pbihQTEFDRUhPTERFUik7XG4gICAgaWYgKGlzU1ZHKSBpZCArPSBTVkdfUExBQ0VIT0xERVI7XG5cbiAgICBsZXQgcmVuZGVyID0gdGVtcGxhdGVzTWFwLmdldChpZCk7XG4gICAgaWYgKCFyZW5kZXIpIHtcbiAgICAgIHJlbmRlciA9IGNvbXBpbGVUZW1wbGF0ZShwYXJ0cywgaXNTVkcsIHN0eWxlcyk7XG4gICAgICB0ZW1wbGF0ZXNNYXAuc2V0KGlkLCByZW5kZXIpO1xuICAgIH1cblxuICAgIHJlbmRlcihob3N0LCB0YXJnZXQsIGFyZ3MpO1xuICB9O1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKGNyZWF0ZVRlbXBsYXRlLCBtZXRob2RzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh0bWwocGFydHMsIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGNyZWF0ZShwYXJ0cywgYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdmcocGFydHMsIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGNyZWF0ZShwYXJ0cywgYXJncywgdHJ1ZSk7XG59XG5cbk9iamVjdC5hc3NpZ24oaHRtbCwgaGVscGVycyk7XG5PYmplY3QuYXNzaWduKHN2ZywgaGVscGVycyk7XG4iXX0=

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /* eslint-disable no-unused-vars */
  /**
   * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]
   * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.
   *
   * @param {string} prop Property name
   * @param {?Object} obj Reference object
   * @return {string} Potentially renamed property name
   */
  window.JSCompiler_renameProperty = function(prop, obj) {
    return prop;
  };

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  let CSS_URL_RX = /(url\()([^)]*)(\))/g;
  let ABS_URL = /(^\/[^\/])|(^#)|(^[\w-\d]*:)/;
  let workingURL;
  let resolveDoc;
  /**
   * Resolves the given URL against the provided `baseUri'.
   *
   * Note that this function performs no resolution for URLs that start
   * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
   * URL resolution, use `window.URL`.
   *
   * @param {string} url Input URL to resolve
   * @param {?string=} baseURI Base URI to resolve the URL against
   * @return {string} resolved URL
   */
  function resolveUrl(url, baseURI) {
    if (url && ABS_URL.test(url)) {
      return url;
    }
    if (url === '//') {
      return url;
    }
    // Lazy feature detection.
    if (workingURL === undefined) {
      workingURL = false;
      try {
        const u = new URL('b', 'http://a');
        u.pathname = 'c%20d';
        workingURL = (u.href === 'http://a/c%20d');
      } catch (e) {
        // silently fail
      }
    }
    if (!baseURI) {
      baseURI = document.baseURI || window.location.href;
    }
    if (workingURL) {
      try {
        return (new URL(url, baseURI)).href;
      } catch (e) {
        // Bad url or baseURI structure. Do not attempt to resolve.
        return url;
      }
    }
    // Fallback to creating an anchor into a disconnected document.
    if (!resolveDoc) {
      resolveDoc = document.implementation.createHTMLDocument('temp');
      resolveDoc.base = resolveDoc.createElement('base');
      resolveDoc.head.appendChild(resolveDoc.base);
      resolveDoc.anchor = resolveDoc.createElement('a');
      resolveDoc.body.appendChild(resolveDoc.anchor);
    }
    resolveDoc.base.href = baseURI;
    resolveDoc.anchor.href = url;
    return resolveDoc.anchor.href || url;

  }

  /**
   * Resolves any relative URL's in the given CSS text against the provided
   * `ownerDocument`'s `baseURI`.
   *
   * @param {string} cssText CSS text to process
   * @param {string} baseURI Base URI to resolve the URL against
   * @return {string} Processed CSS text with resolved URL's
   */
  function resolveCss(cssText, baseURI) {
    return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {
      return pre + '\'' +
        resolveUrl(url.replace(/["']/g, ''), baseURI) +
        '\'' + post;
    });
  }

  /**
   * Returns a path from a given `url`. The path includes the trailing
   * `/` from the url.
   *
   * @param {string} url Input URL to transform
   * @return {string} resolved path
   */
  function pathFromUrl(url) {
    return url.substring(0, url.lastIndexOf('/') + 1);
  }

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
  const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);


  /**
   * Globally settable property that is automatically assigned to
   * `ElementMixin` instances, useful for binding in templates to
   * make URL's relative to an application's root.  Defaults to the main
   * document URL, but can be overridden by users.  It may be useful to set
   * `rootPath` to provide a stable application mount path when
   * using client side routing.
   */
  let rootPath = pathFromUrl(document.baseURI || window.location.href);

  /**
   * A global callback used to sanitize any value before inserting it into the DOM.
   * The callback signature is:
   *
   *  function sanitizeDOMValue(value, name, type, node) { ... }
   *
   * Where:
   *
   * `value` is the value to sanitize.
   * `name` is the name of an attribute or property (for example, href).
   * `type` indicates where the value is being inserted: one of property, attribute, or text.
   * `node` is the node where the value is being inserted.
   *
   * @type {(function(*,string,string,Node):*)|undefined}
   */
  let sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;

  /**
   * Setting to ensure Polymer template evaluation only occurs based on tempates
   * defined in trusted script.  When true, `<dom-module>` re-registration is
   * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`
   * templates will only evaluate in the context of a trusted element template.
   */
  let strictTemplatePolicy = false;

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  // unique global id for deduping mixins.
  let dedupeId = 0;

  /* eslint-disable valid-jsdoc */
  /**
   * Wraps an ES6 class expression mixin such that the mixin is only applied
   * if it has not already been applied its base argument. Also memoizes mixin
   * applications.
   *
   * @template T
   * @param {T} mixin ES6 class expression mixin to wrap
   * @return {T}
   * @suppress {invalidCasts}
   */
  const dedupingMixin = function(mixin) {
    let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;
    if (!mixinApplications) {
      mixinApplications = new WeakMap();
      /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;
    }
    // maintain a unique id for each mixin
    let mixinDedupeId = dedupeId++;
    function dedupingMixin(base) {
      let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;
      if (baseSet && baseSet[mixinDedupeId]) {
        return base;
      }
      let map = mixinApplications;
      let extended = map.get(base);
      if (!extended) {
        extended = /** @type {!Function} */(mixin)(base);
        map.set(base, extended);
      }
      // copy inherited mixin set from the extended class, or the base class
      // NOTE: we avoid use of Set here because some browser (IE11)
      // cannot extend a base Set via the constructor.
      let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);
      mixinSet[mixinDedupeId] = true;
      /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;
      return extended;
    }

    return dedupingMixin;
  };
  /* eslint-enable valid-jsdoc */

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  let modules = {};
  let lcModules = {};
  /**
   * Sets a dom-module into the global registry by id.
   *
   * @param {string} id dom-module id
   * @param {DomModule} module dom-module instance
   * @return {void}
   */
  function setModule(id, module) {
    // store id separate from lowercased id so that
    // in all cases mixedCase id will stored distinctly
    // and lowercase version is a fallback
    modules[id] = lcModules[id.toLowerCase()] = module;
  }
  /**
   * Retrieves a dom-module from the global registry by id.
   *
   * @param {string} id dom-module id
   * @return {DomModule!} dom-module instance
   */
  function findModule(id) {
    return modules[id] || lcModules[id.toLowerCase()];
  }

  function styleOutsideTemplateCheck(inst) {
    if (inst.querySelector('style')) {
      console.warn('dom-module %s has style outside template', inst.id);
    }
  }

  /**
   * The `dom-module` element registers the dom it contains to the name given
   * by the module's id attribute. It provides a unified database of dom
   * accessible via its static `import` API.
   *
   * A key use case of `dom-module` is for providing custom element `<template>`s
   * via HTML imports that are parsed by the native HTML parser, that can be
   * relocated during a bundling pass and still looked up by `id`.
   *
   * Example:
   *
   *     <dom-module id="foo">
   *       <img src="stuff.png">
   *     </dom-module>
   *
   * Then in code in some other location that cannot access the dom-module above
   *
   *     let img = customElements.get('dom-module').import('foo', 'img');
   *
   * @customElement
   * @extends HTMLElement
   * @summary Custom element that provides a registry of relocatable DOM content
   *   by `id` that is agnostic to bundling.
   * @unrestricted
   */
  class DomModule extends HTMLElement {

    /** @override */
    static get observedAttributes() { return ['id']; }

    /**
     * Retrieves the element specified by the css `selector` in the module
     * registered by `id`. For example, this.import('foo', 'img');
     * @param {string} id The id of the dom-module in which to search.
     * @param {string=} selector The css selector by which to find the element.
     * @return {Element} Returns the element which matches `selector` in the
     * module registered at the specified `id`.
     *
     * @export
     * @nocollapse Referred to indirectly in style-gather.js
     */
    static import(id, selector) {
      if (id) {
        let m = findModule(id);
        if (m && selector) {
          return m.querySelector(selector);
        }
        return m;
      }
      return null;
    }

    /* eslint-disable no-unused-vars */
    /**
     * @param {string} name Name of attribute.
     * @param {?string} old Old value of attribute.
     * @param {?string} value Current value of attribute.
     * @param {?string} namespace Attribute namespace.
     * @return {void}
     * @override
     */
    attributeChangedCallback(name, old, value, namespace) {
      if (old !== value) {
        this.register();
      }
    }
    /* eslint-enable no-unused-args */

    /**
     * The absolute URL of the original location of this `dom-module`.
     *
     * This value will differ from this element's `ownerDocument` in the
     * following ways:
     * - Takes into account any `assetpath` attribute added during bundling
     *   to indicate the original location relative to the bundled location
     * - Uses the HTMLImports polyfill's `importForElement` API to ensure
     *   the path is relative to the import document's location since
     *   `ownerDocument` is not currently polyfilled
     */
    get assetpath() {
      // Don't override existing assetpath.
      if (!this.__assetpath) {
        // note: assetpath set via an attribute must be relative to this
        // element's location; accomodate polyfilled HTMLImports
        const owner = window.HTMLImports && HTMLImports.importForElement ?
          HTMLImports.importForElement(this) || document : this.ownerDocument;
        const url = resolveUrl(
          this.getAttribute('assetpath') || '', owner.baseURI);
        this.__assetpath = pathFromUrl(url);
      }
      return this.__assetpath;
    }

    /**
     * Registers the dom-module at a given id. This method should only be called
     * when a dom-module is imperatively created. For
     * example, `document.createElement('dom-module').register('foo')`.
     * @param {string=} id The id at which to register the dom-module.
     * @return {void}
     */
    register(id) {
      id = id || this.id;
      if (id) {
        this.id = id;
        setModule(id, this);
        styleOutsideTemplateCheck(this);
      }
    }
  }

  DomModule.prototype['modules'] = modules;

  customElements.define('dom-module', DomModule);

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';
  const INCLUDE_ATTR = 'include';
  const SHADY_UNSCOPED_ATTR = 'shady-unscoped';

  /**
   * @param {string} moduleId .
   * @return {?DomModule} .
   */
  function importModule(moduleId) {
    return /** @type {?DomModule} */(DomModule.import(moduleId));
  }

  function styleForImport(importDoc) {
    // NOTE: polyfill affordance.
    // under the HTMLImports polyfill, there will be no 'body',
    // but the import pseudo-doc can be used directly.
    let container = importDoc.body ? importDoc.body : importDoc;
    const importCss = resolveCss(container.textContent,
      importDoc.baseURI);
    const style = document.createElement('style');
    style.textContent = importCss;
    return style;
  }


  /**
   * Returns a list of <style> elements in a space-separated list of `dom-module`s.
   *
   * @function
   * @param {string} moduleIds List of dom-module id's within which to
   * search for css.
   * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements
   */
  function stylesFromModules(moduleIds) {
   const modules = moduleIds.trim().split(/\s+/);
   const styles = [];
   for (let i=0; i < modules.length; i++) {
     styles.push(...stylesFromModule(modules[i]));
   }
   return styles;
  }

  /**
   * Returns a list of <style> elements in a given `dom-module`.
   * Styles in a `dom-module` can come either from `<style>`s within the
   * first `<template>`, or else from one or more
   * `<link rel="import" type="css">` links outside the template.
   *
   * @param {string} moduleId dom-module id to gather styles from
   * @return {!Array<!HTMLStyleElement>} Array of contained styles.
   */
  function stylesFromModule(moduleId) {
    const m = importModule(moduleId);

    if (!m) {
      console.warn('Could not find style data in module named', moduleId);
      return [];
    }

    if (m._styles === undefined) {
      const styles = [];
      // module imports: <link rel="import" type="css">
      styles.push(..._stylesFromModuleImports(m));
      // include css from the first template in the module
      const template = /** @type {?HTMLTemplateElement} */(
          m.querySelector('template'));
      if (template) {
        styles.push(...stylesFromTemplate(template,
          /** @type {templateWithAssetPath} */(m).assetpath));
      }

      m._styles = styles;
    }

    return m._styles;
  }

  /**
   * Returns the `<style>` elements within a given template.
   *
   * @param {!HTMLTemplateElement} template Template to gather styles from
   * @param {string=} baseURI baseURI for style content
   * @return {!Array<!HTMLStyleElement>} Array of styles
   */
  function stylesFromTemplate(template, baseURI) {
    if (!template._styles) {
      const styles = [];
      // if element is a template, get content from its .content
      const e$ = template.content.querySelectorAll('style');
      for (let i=0; i < e$.length; i++) {
        let e = e$[i];
        // support style sharing by allowing styles to "include"
        // other dom-modules that contain styling
        let include = e.getAttribute(INCLUDE_ATTR);
        if (include) {
          styles.push(...stylesFromModules(include).filter(function(item, index, self) {
            return self.indexOf(item) === index;
          }));
        }
        if (baseURI) {
          e.textContent =
              resolveCss(e.textContent, /** @type {string} */ (baseURI));
        }
        styles.push(e);
      }
      template._styles = styles;
    }
    return template._styles;
  }

  /**
   * Returns a list of <style> elements  from stylesheets loaded via `<link rel="import" type="css">` links within the specified `dom-module`.
   *
   * @param {string} moduleId Id of `dom-module` to gather CSS from
   * @return {!Array<!HTMLStyleElement>} Array of contained styles.
   */
  function stylesFromModuleImports(moduleId) {
   let m = importModule(moduleId);
   return m ? _stylesFromModuleImports(m) : [];
  }

  /**
   * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
   * @return {!Array<!HTMLStyleElement>} Array of contained styles
   */
  function _stylesFromModuleImports(module) {
    const styles = [];
    const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);
    for (let i=0; i < p$.length; i++) {
      let p = p$[i];
      if (p.import) {
        const importDoc = p.import;
        const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);
        if (unscoped && !importDoc._unscopedStyle) {
          const style = styleForImport(importDoc);
          style.setAttribute(SHADY_UNSCOPED_ATTR, '');
          importDoc._unscopedStyle = style;
        } else if (!importDoc._style) {
          importDoc._style = styleForImport(importDoc);
        }
        styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);
      }
    }
    return styles;
  }

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /* eslint-disable valid-jsdoc */
  /**
   * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill
   * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,
   * a node wrapper must be used to access ShadowDOM API.
   * This is similar to using `Polymer.dom` but relies exclusively
   * on the presence of the ShadyDOM polyfill rather than requiring the loading
   * of legacy (Polymer.dom) API.
   * @type {function(Node):Node}
   */
  const wrap = (window['ShadyDOM'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['wrap']) ?
    window['ShadyDOM']['wrap'] :
    (window['ShadyDOM'] ? (n) => ShadyDOM['patch'](n) : (n) => n);

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /**
   * Module with utilities for manipulating structured data path strings.
   *
   * @summary Module with utilities for manipulating structured data path strings.
   */

  /**
   * Returns true if the given string is a structured data path (has dots).
   *
   * Example:
   *
   * ```
   * isPath('foo.bar.baz') // true
   * isPath('foo')         // false
   * ```
   *
   * @param {string} path Path string
   * @return {boolean} True if the string contained one or more dots
   */
  function isPath(path) {
    return path.indexOf('.') >= 0;
  }

  /**
   * Returns the root property name for the given path.
   *
   * Example:
   *
   * ```
   * root('foo.bar.baz') // 'foo'
   * root('foo')         // 'foo'
   * ```
   *
   * @param {string} path Path string
   * @return {string} Root property name
   */
  function root(path) {
    let dotIndex = path.indexOf('.');
    if (dotIndex === -1) {
      return path;
    }
    return path.slice(0, dotIndex);
  }

  /**
   * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not
   * Returns true if the given path is an ancestor of the base path.
   *
   * Example:
   *
   * ```
   * isAncestor('foo.bar', 'foo')         // true
   * isAncestor('foo.bar', 'foo.bar')     // false
   * isAncestor('foo.bar', 'foo.bar.baz') // false
   * ```
   *
   * @param {string} base Path string to test against.
   * @param {string} path Path string to test.
   * @return {boolean} True if `path` is an ancestor of `base`.
   */
  function isAncestor(base, path) {
    //     base.startsWith(path + '.');
    return base.indexOf(path + '.') === 0;
  }

  /**
   * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant
   *
   * Example:
   *
   * ```
   * isDescendant('foo.bar', 'foo.bar.baz') // true
   * isDescendant('foo.bar', 'foo.bar')     // false
   * isDescendant('foo.bar', 'foo')         // false
   * ```
   *
   * @param {string} base Path string to test against.
   * @param {string} path Path string to test.
   * @return {boolean} True if `path` is a descendant of `base`.
   */
  function isDescendant(base, path) {
    //     path.startsWith(base + '.');
    return path.indexOf(base + '.') === 0;
  }

  /**
   * Replaces a previous base path with a new base path, preserving the
   * remainder of the path.
   *
   * User must ensure `path` has a prefix of `base`.
   *
   * Example:
   *
   * ```
   * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'
   * ```
   *
   * @param {string} base Current base string to remove
   * @param {string} newBase New base string to replace with
   * @param {string} path Path to translate
   * @return {string} Translated string
   */
  function translate(base, newBase, path) {
    return newBase + path.slice(base.length);
  }

  /**
   * Converts array-based paths to flattened path.  String-based paths
   * are returned as-is.
   *
   * Example:
   *
   * ```
   * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'
   * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'
   * ```
   *
   * @param {string | !Array<string|number>} path Input path
   * @return {string} Flattened path
   */
  function normalize(path) {
    if (Array.isArray(path)) {
      let parts = [];
      for (let i=0; i<path.length; i++) {
        let args = path[i].toString().split('.');
        for (let j=0; j<args.length; j++) {
          parts.push(args[j]);
        }
      }
      return parts.join('.');
    } else {
      return path;
    }
  }

  /**
   * Splits a path into an array of property names. Accepts either arrays
   * of path parts or strings.
   *
   * Example:
   *
   * ```
   * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']
   * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']
   * ```
   *
   * @param {string | !Array<string|number>} path Input path
   * @return {!Array<string>} Array of path parts
   * @suppress {checkTypes}
   */
  function split(path) {
    if (Array.isArray(path)) {
      return normalize(path).split('.');
    }
    return path.toString().split('.');
  }

  /**
   * Reads a value from a path.  If any sub-property in the path is `undefined`,
   * this method returns `undefined` (will never throw.
   *
   * @param {Object} root Object from which to dereference path from
   * @param {string | !Array<string|number>} path Path to read
   * @param {Object=} info If an object is provided to `info`, the normalized
   *  (flattened) path will be set to `info.path`.
   * @return {*} Value at path, or `undefined` if the path could not be
   *  fully dereferenced.
   */
  function get$1(root, path, info) {
    let prop = root;
    let parts = split(path);
    // Loop over path parts[0..n-1] and dereference
    for (let i=0; i<parts.length; i++) {
      if (!prop) {
        return;
      }
      let part = parts[i];
      prop = prop[part];
    }
    if (info) {
      info.path = parts.join('.');
    }
    return prop;
  }

  /**
   * Sets a value to a path.  If any sub-property in the path is `undefined`,
   * this method will no-op.
   *
   * @param {Object} root Object from which to dereference path from
   * @param {string | !Array<string|number>} path Path to set
   * @param {*} value Value to set to path
   * @return {string | undefined} The normalized version of the input path
   */
  function set$2(root, path, value) {
    let prop = root;
    let parts = split(path);
    let last = parts[parts.length-1];
    if (parts.length > 1) {
      // Loop over path parts[0..n-2] and dereference
      for (let i=0; i<parts.length-1; i++) {
        let part = parts[i];
        prop = prop[part];
        if (!prop) {
          return;
        }
      }
      // Set value to object at end of path
      prop[last] = value;
    } else {
      // Simple property set
      prop[path] = value;
    }
    return parts.join('.');
  }

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  const caseMap = {};
  const DASH_TO_CAMEL = /-[a-z]/g;
  const CAMEL_TO_DASH = /([A-Z])/g;

  /**
   * @fileoverview Module with utilities for converting between "dash-case" and
   * "camelCase" identifiers.
   */

  /**
   * Converts "dash-case" identifier (e.g. `foo-bar-baz`) to "camelCase"
   * (e.g. `fooBarBaz`).
   *
   * @param {string} dash Dash-case identifier
   * @return {string} Camel-case representation of the identifier
   */
  function dashToCamelCase(dash) {
    return caseMap[dash] || (
      caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,
        (m) => m[1].toUpperCase()
      )
    );
  }

  /**
   * Converts "camelCase" identifier (e.g. `fooBarBaz`) to "dash-case"
   * (e.g. `foo-bar-baz`).
   *
   * @param {string} camel Camel-case identifier
   * @return {string} Dash-case representation of the identifier
   */
  function camelToDashCase(camel) {
    return caseMap[camel] || (
      caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()
    );
  }

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  // Microtask implemented using Mutation Observer
  let microtaskCurrHandle = 0;
  let microtaskLastHandle = 0;
  let microtaskCallbacks = [];
  let microtaskNodeContent = 0;
  let microtaskNode = document.createTextNode('');
  new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});

  function microtaskFlush() {
    const len = microtaskCallbacks.length;
    for (let i = 0; i < len; i++) {
      let cb = microtaskCallbacks[i];
      if (cb) {
        try {
          cb();
        } catch (e) {
          setTimeout(() => { throw e; });
        }
      }
    }
    microtaskCallbacks.splice(0, len);
    microtaskLastHandle += len;
  }

  /**
   * Async interface wrapper around `setTimeout`.
   *
   * @namespace
   * @summary Async interface wrapper around `setTimeout`.
   */
  const timeOut = {
    /**
     * Returns a sub-module with the async interface providing the provided
     * delay.
     *
     * @memberof timeOut
     * @param {number=} delay Time to wait before calling callbacks in ms
     * @return {!AsyncInterface} An async timeout interface
     */
    after(delay) {
      return {
        run(fn) { return window.setTimeout(fn, delay); },
        cancel(handle) {
          window.clearTimeout(handle);
        }
      };
    },
    /**
     * Enqueues a function called in the next task.
     *
     * @memberof timeOut
     * @param {!Function} fn Callback to run
     * @param {number=} delay Delay in milliseconds
     * @return {number} Handle used for canceling task
     */
    run(fn, delay) {
      return window.setTimeout(fn, delay);
    },
    /**
     * Cancels a previously enqueued `timeOut` callback.
     *
     * @memberof timeOut
     * @param {number} handle Handle returned from `run` of callback to cancel
     * @return {void}
     */
    cancel(handle) {
      window.clearTimeout(handle);
    }
  };

  /**
   * Async interface for enqueuing callbacks that run at microtask timing.
   *
   * Note that microtask timing is achieved via a single `MutationObserver`,
   * and thus callbacks enqueued with this API will all run in a single
   * batch, and not interleaved with other microtasks such as promises.
   * Promises are avoided as an implementation choice for the time being
   * due to Safari bugs that cause Promises to lack microtask guarantees.
   *
   * @namespace
   * @summary Async interface for enqueuing callbacks that run at microtask
   *   timing.
   */
  const microTask = {

    /**
     * Enqueues a function called at microtask timing.
     *
     * @memberof microTask
     * @param {!Function=} callback Callback to run
     * @return {number} Handle used for canceling task
     */
    run(callback) {
      microtaskNode.textContent = microtaskNodeContent++;
      microtaskCallbacks.push(callback);
      return microtaskCurrHandle++;
    },

    /**
     * Cancels a previously enqueued `microTask` callback.
     *
     * @memberof microTask
     * @param {number} handle Handle returned from `run` of callback to cancel
     * @return {void}
     */
    cancel(handle) {
      const idx = handle - microtaskLastHandle;
      if (idx >= 0) {
        if (!microtaskCallbacks[idx]) {
          throw new Error('invalid async handle: ' + handle);
        }
        microtaskCallbacks[idx] = null;
      }
    }

  };

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /** @const {!AsyncInterface} */
  const microtask = microTask;

  /**
   * Element class mixin that provides basic meta-programming for creating one
   * or more property accessors (getter/setter pair) that enqueue an async
   * (batched) `_propertiesChanged` callback.
   *
   * For basic usage of this mixin, call `MyClass.createProperties(props)`
   * once at class definition time to create property accessors for properties
   * named in props, implement `_propertiesChanged` to react as desired to
   * property changes, and implement `static get observedAttributes()` and
   * include lowercase versions of any property names that should be set from
   * attributes. Last, call `this._enableProperties()` in the element's
   * `connectedCallback` to enable the accessors.
   *
   * @mixinFunction
   * @polymer
   * @summary Element class mixin for reacting to property changes from
   *   generated property accessors.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */
  const PropertiesChanged = dedupingMixin(
      /**
       * @template T
       * @param {function(new:T)} superClass Class to apply mixin to.
       * @return {function(new:T)} superClass with mixin applied.
       */
      (superClass) => {

    /**
     * @polymer
     * @mixinClass
     * @implements {Polymer_PropertiesChanged}
     * @unrestricted
     */
    class PropertiesChanged extends superClass {

      /**
       * Creates property accessors for the given property names.
       * @param {!Object} props Object whose keys are names of accessors.
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createProperties(props) {
        const proto = this.prototype;
        for (let prop in props) {
          // don't stomp an existing accessor
          if (!(prop in proto)) {
            proto._createPropertyAccessor(prop);
          }
        }
      }

      /**
       * Returns an attribute name that corresponds to the given property.
       * The attribute name is the lowercased property name. Override to
       * customize this mapping.
       * @param {string} property Property to convert
       * @return {string} Attribute name corresponding to the given property.
       *
       * @protected
       * @nocollapse
       */
      static attributeNameForProperty(property) {
        return property.toLowerCase();
      }

      /**
       * Override point to provide a type to which to deserialize a value to
       * a given property.
       * @param {string} name Name of property
       *
       * @protected
       * @nocollapse
       */
      static typeForProperty(name) { } //eslint-disable-line no-unused-vars

      /**
       * Creates a setter/getter pair for the named property with its own
       * local storage.  The getter returns the value in the local storage,
       * and the setter calls `_setProperty`, which updates the local storage
       * for the property and enqueues a `_propertiesChanged` callback.
       *
       * This method may be called on a prototype or an instance.  Calling
       * this method may overwrite a property value that already exists on
       * the prototype/instance by creating the accessor.
       *
       * @param {string} property Name of the property
       * @param {boolean=} readOnly When true, no setter is created; the
       *   protected `_setProperty` function must be used to set the property
       * @return {void}
       * @protected
       * @override
       */
      _createPropertyAccessor(property, readOnly) {
        this._addPropertyToAttributeMap(property);
        if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataHasAccessor', this))) {
          this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);
        }
        if (!this.__dataHasAccessor[property]) {
          this.__dataHasAccessor[property] = true;
          this._definePropertyAccessor(property, readOnly);
        }
      }

      /**
       * Adds the given `property` to a map matching attribute names
       * to property names, using `attributeNameForProperty`. This map is
       * used when deserializing attribute values to properties.
       *
       * @param {string} property Name of the property
       * @override
       */
      _addPropertyToAttributeMap(property) {
        if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataAttributes', this))) {
          this.__dataAttributes = Object.assign({}, this.__dataAttributes);
        }
        if (!this.__dataAttributes[property]) {
          const attr = this.constructor.attributeNameForProperty(property);
          this.__dataAttributes[attr] = property;
        }
      }

      /**
       * Defines a property accessor for the given property.
       * @param {string} property Name of the property
       * @param {boolean=} readOnly When true, no setter is created
       * @return {void}
       * @override
       */
       _definePropertyAccessor(property, readOnly) {
        Object.defineProperty(this, property, {
          /* eslint-disable valid-jsdoc */
          /** @this {PropertiesChanged} */
          get() {
            return this._getProperty(property);
          },
          /** @this {PropertiesChanged} */
          set: readOnly ? function () {} : function (value) {
            this._setProperty(property, value);
          }
          /* eslint-enable */
        });
      }

      constructor() {
        super();
        /** @type {boolean} */
        this.__dataEnabled = false;
        this.__dataReady = false;
        this.__dataInvalid = false;
        this.__data = {};
        this.__dataPending = null;
        this.__dataOld = null;
        this.__dataInstanceProps = null;
        this.__serializing = false;
        this._initializeProperties();
      }

      /**
       * Lifecycle callback called when properties are enabled via
       * `_enableProperties`.
       *
       * Users may override this function to implement behavior that is
       * dependent on the element having its property data initialized, e.g.
       * from defaults (initialized from `constructor`, `_initializeProperties`),
       * `attributeChangedCallback`, or values propagated from host e.g. via
       * bindings.  `super.ready()` must be called to ensure the data system
       * becomes enabled.
       *
       * @return {void}
       * @public
       * @override
       */
      ready() {
        this.__dataReady = true;
        this._flushProperties();
      }

      /**
       * Initializes the local storage for property accessors.
       *
       * Provided as an override point for performing any setup work prior
       * to initializing the property accessor system.
       *
       * @return {void}
       * @protected
       * @override
       */
      _initializeProperties() {
        // Capture instance properties; these will be set into accessors
        // during first flush. Don't set them here, since we want
        // these to overwrite defaults/constructor assignments
        for (let p in this.__dataHasAccessor) {
          if (this.hasOwnProperty(p)) {
            this.__dataInstanceProps = this.__dataInstanceProps || {};
            this.__dataInstanceProps[p] = this[p];
            delete this[p];
          }
        }
      }

      /**
       * Called at ready time with bag of instance properties that overwrote
       * accessors when the element upgraded.
       *
       * The default implementation sets these properties back into the
       * setter at ready time.  This method is provided as an override
       * point for customizing or providing more efficient initialization.
       *
       * @param {Object} props Bag of property values that were overwritten
       *   when creating property accessors.
       * @return {void}
       * @protected
       * @override
       */
      _initializeInstanceProperties(props) {
        Object.assign(this, props);
      }

      /**
       * Updates the local storage for a property (via `_setPendingProperty`)
       * and enqueues a `_proeprtiesChanged` callback.
       *
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @return {void}
       * @protected
       * @override
       */
      _setProperty(property, value) {
        if (this._setPendingProperty(property, value)) {
          this._invalidateProperties();
        }
      }

      /**
       * Returns the value for the given property.
       * @param {string} property Name of property
       * @return {*} Value for the given property
       * @protected
       * @override
       */
      _getProperty(property) {
        return this.__data[property];
      }

      /* eslint-disable no-unused-vars */
      /**
       * Updates the local storage for a property, records the previous value,
       * and adds it to the set of "pending changes" that will be passed to the
       * `_propertiesChanged` callback.  This method does not enqueue the
       * `_propertiesChanged` callback.
       *
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @param {boolean=} ext Not used here; affordance for closure
       * @return {boolean} Returns true if the property changed
       * @protected
       * @override
       */
      _setPendingProperty(property, value, ext) {
        let old = this.__data[property];
        let changed = this._shouldPropertyChange(property, value, old);
        if (changed) {
          if (!this.__dataPending) {
            this.__dataPending = {};
            this.__dataOld = {};
          }
          // Ensure old is captured from the last turn
          if (this.__dataOld && !(property in this.__dataOld)) {
            this.__dataOld[property] = old;
          }
          this.__data[property] = value;
          this.__dataPending[property] = value;
        }
        return changed;
      }
      /* eslint-enable */

      /**
       * Marks the properties as invalid, and enqueues an async
       * `_propertiesChanged` callback.
       *
       * @return {void}
       * @protected
       * @override
       */
      _invalidateProperties() {
        if (!this.__dataInvalid && this.__dataReady) {
          this.__dataInvalid = true;
          microtask.run(() => {
            if (this.__dataInvalid) {
              this.__dataInvalid = false;
              this._flushProperties();
            }
          });
        }
      }

      /**
       * Call to enable property accessor processing. Before this method is
       * called accessor values will be set but side effects are
       * queued. When called, any pending side effects occur immediately.
       * For elements, generally `connectedCallback` is a normal spot to do so.
       * It is safe to call this method multiple times as it only turns on
       * property accessors once.
       *
       * @return {void}
       * @protected
       * @override
       */
      _enableProperties() {
        if (!this.__dataEnabled) {
          this.__dataEnabled = true;
          if (this.__dataInstanceProps) {
            this._initializeInstanceProperties(this.__dataInstanceProps);
            this.__dataInstanceProps = null;
          }
          this.ready();
        }
      }

      /**
       * Calls the `_propertiesChanged` callback with the current set of
       * pending changes (and old values recorded when pending changes were
       * set), and resets the pending set of changes. Generally, this method
       * should not be called in user code.
       *
       * @return {void}
       * @protected
       * @override
       */
      _flushProperties() {
        const props = this.__data;
        const changedProps = this.__dataPending;
        const old = this.__dataOld;
        if (this._shouldPropertiesChange(props, changedProps, old)) {
          this.__dataPending = null;
          this.__dataOld = null;
          this._propertiesChanged(props, changedProps, old);
        }
      }

      /**
       * Called in `_flushProperties` to determine if `_propertiesChanged`
       * should be called. The default implementation returns true if
       * properties are pending. Override to customize when
       * `_propertiesChanged` is called.
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {boolean} true if changedProps is truthy
       * @override
       */
      _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars
        return Boolean(changedProps);
      }

      /**
       * Callback called when any properties with accessors created via
       * `_createPropertyAccessor` have been set.
       *
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {void}
       * @protected
       * @override
       */
      _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars
      }

      /**
       * Method called to determine whether a property value should be
       * considered as a change and cause the `_propertiesChanged` callback
       * to be enqueued.
       *
       * The default implementation returns `true` if a strict equality
       * check fails. The method always returns false for `NaN`.
       *
       * Override this method to e.g. provide stricter checking for
       * Objects/Arrays when using immutable patterns.
       *
       * @param {string} property Property name
       * @param {*} value New property value
       * @param {*} old Previous property value
       * @return {boolean} Whether the property should be considered a change
       *   and enqueue a `_proeprtiesChanged` callback
       * @protected
       * @override
       */
      _shouldPropertyChange(property, value, old) {
        return (
          // Strict equality check
          (old !== value &&
            // This ensures (old==NaN, value==NaN) always returns false
            (old === old || value === value))
        );
      }

      /**
       * Implements native Custom Elements `attributeChangedCallback` to
       * set an attribute value to a property via `_attributeToProperty`.
       *
       * @param {string} name Name of attribute that changed
       * @param {?string} old Old attribute value
       * @param {?string} value New attribute value
       * @param {?string} namespace Attribute namespace.
       * @return {void}
       * @suppress {missingProperties} Super may or may not implement the callback
       * @override
       */
      attributeChangedCallback(name, old, value, namespace) {
        if (old !== value) {
          this._attributeToProperty(name, value);
        }
        if (super.attributeChangedCallback) {
          super.attributeChangedCallback(name, old, value, namespace);
        }
      }

      /**
       * Deserializes an attribute to its associated property.
       *
       * This method calls the `_deserializeValue` method to convert the string to
       * a typed value.
       *
       * @param {string} attribute Name of attribute to deserialize.
       * @param {?string} value of the attribute.
       * @param {*=} type type to deserialize to, defaults to the value
       * returned from `typeForProperty`
       * @return {void}
       * @override
       */
      _attributeToProperty(attribute, value, type) {
        if (!this.__serializing) {
          const map = this.__dataAttributes;
          const property = map && map[attribute] || attribute;
          this[property] = this._deserializeValue(value, type ||
            this.constructor.typeForProperty(property));
        }
      }

      /**
       * Serializes a property to its associated attribute.
       *
       * @suppress {invalidCasts} Closure can't figure out `this` is an element.
       *
       * @param {string} property Property name to reflect.
       * @param {string=} attribute Attribute name to reflect to.
       * @param {*=} value Property value to refect.
       * @return {void}
       * @override
       */
      _propertyToAttribute(property, attribute, value) {
        this.__serializing = true;
        value = (arguments.length < 3) ? this[property] : value;
        this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,
          attribute || this.constructor.attributeNameForProperty(property));
        this.__serializing = false;
      }

      /**
       * Sets a typed value to an HTML attribute on a node.
       *
       * This method calls the `_serializeValue` method to convert the typed
       * value to a string.  If the `_serializeValue` method returns `undefined`,
       * the attribute will be removed (this is the default for boolean
       * type `false`).
       *
       * @param {Element} node Element to set attribute to.
       * @param {*} value Value to serialize.
       * @param {string} attribute Attribute name to serialize to.
       * @return {void}
       * @override
       */
      _valueToNodeAttribute(node, value, attribute) {
        const str = this._serializeValue(value);
        if (attribute === 'class' || attribute === 'name' || attribute === 'slot') {
          node = /** @type {?Element} */(wrap(node));
        }
        if (str === undefined) {
          node.removeAttribute(attribute);
        } else {
          node.setAttribute(attribute, str);
        }
      }

      /**
       * Converts a typed JavaScript value to a string.
       *
       * This method is called when setting JS property values to
       * HTML attributes.  Users may override this method to provide
       * serialization for custom types.
       *
       * @param {*} value Property value to serialize.
       * @return {string | undefined} String serialized from the provided
       * property  value.
       * @override
       */
      _serializeValue(value) {
        switch (typeof value) {
          case 'boolean':
            return value ? '' : undefined;
          default:
            return value != null ? value.toString() : undefined;
        }
      }

      /**
       * Converts a string to a typed JavaScript value.
       *
       * This method is called when reading HTML attribute values to
       * JS properties.  Users may override this method to provide
       * deserialization for custom `type`s. Types for `Boolean`, `String`,
       * and `Number` convert attributes to the expected types.
       *
       * @param {?string} value Value to deserialize.
       * @param {*=} type Type to deserialize the string to.
       * @return {*} Typed value deserialized from the provided string.
       * @override
       */
      _deserializeValue(value, type) {
        switch (type) {
          case Boolean:
            return (value !== null);
          case Number:
            return Number(value);
          default:
            return value;
        }
      }

    }

    return PropertiesChanged;
  });

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  // Save map of native properties; this forms a blacklist or properties
  // that won't have their values "saved" by `saveAccessorValue`, since
  // reading from an HTMLElement accessor from the context of a prototype throws
  const nativeProperties = {};
  let proto = HTMLElement.prototype;
  while (proto) {
    let props = Object.getOwnPropertyNames(proto);
    for (let i=0; i<props.length; i++) {
      nativeProperties[props[i]] = true;
    }
    proto = Object.getPrototypeOf(proto);
  }

  /**
   * Used to save the value of a property that will be overridden with
   * an accessor. If the `model` is a prototype, the values will be saved
   * in `__dataProto`, and it's up to the user (or downstream mixin) to
   * decide how/when to set these values back into the accessors.
   * If `model` is already an instance (it has a `__data` property), then
   * the value will be set as a pending property, meaning the user should
   * call `_invalidateProperties` or `_flushProperties` to take effect
   *
   * @param {Object} model Prototype or instance
   * @param {string} property Name of property
   * @return {void}
   * @private
   */
  function saveAccessorValue(model, property) {
    // Don't read/store value for any native properties since they could throw
    if (!nativeProperties[property]) {
      let value = model[property];
      if (value !== undefined) {
        if (model.__data) {
          // Adding accessor to instance; update the property
          // It is the user's responsibility to call _flushProperties
          model._setPendingProperty(property, value);
        } else {
          // Adding accessor to proto; save proto's value for instance-time use
          if (!model.__dataProto) {
            model.__dataProto = {};
          } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {
            model.__dataProto = Object.create(model.__dataProto);
          }
          model.__dataProto[property] = value;
        }
      }
    }
  }

  /**
   * Element class mixin that provides basic meta-programming for creating one
   * or more property accessors (getter/setter pair) that enqueue an async
   * (batched) `_propertiesChanged` callback.
   *
   * For basic usage of this mixin:
   *
   * -   Declare attributes to observe via the standard `static get
   *     observedAttributes()`. Use `dash-case` attribute names to represent
   *     `camelCase` property names.
   * -   Implement the `_propertiesChanged` callback on the class.
   * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to
   *     generate property accessors for each observed attribute. This must be
   *     called before the first instance is created, for example, by calling it
   *     before calling `customElements.define`. It can also be called lazily from
   *     the element's `constructor`, as long as it's guarded so that the call is
   *     only made once, when the first instance is created.
   * -   Call `this._enableProperties()` in the element's `connectedCallback` to
   *     enable the accessors.
   *
   * Any `observedAttributes` will automatically be
   * deserialized via `attributeChangedCallback` and set to the associated
   * property using `dash-case`-to-`camelCase` convention.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertiesChanged
   * @summary Element class mixin for reacting to property changes from
   *   generated property accessors.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */
  const PropertyAccessors = dedupingMixin(superClass => {

    /**
     * @constructor
     * @implements {Polymer_PropertiesChanged}
     * @unrestricted
     * @private
     */
     const base = PropertiesChanged(superClass);

    /**
     * @polymer
     * @mixinClass
     * @implements {Polymer_PropertyAccessors}
     * @extends {base}
     * @unrestricted
     */
    class PropertyAccessors extends base {

      /**
       * Generates property accessors for all attributes in the standard
       * static `observedAttributes` array.
       *
       * Attribute names are mapped to property names using the `dash-case` to
       * `camelCase` convention
       *
       * @return {void}
       * @nocollapse
       */
      static createPropertiesForAttributes() {
        let a$ =  /** @type {?} */ (this).observedAttributes;
        for (let i=0; i < a$.length; i++) {
          this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]));
        }
      }

      /**
       * Returns an attribute name that corresponds to the given property.
       * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.
       * @param {string} property Property to convert
       * @return {string} Attribute name corresponding to the given property.
       *
       * @protected
       * @nocollapse
       */
      static attributeNameForProperty(property) {
        return camelToDashCase(property);
      }

      /**
       * Overrides PropertiesChanged implementation to initialize values for
       * accessors created for values that already existed on the element
       * prototype.
       *
       * @return {void}
       * @protected
       * @override
       */
      _initializeProperties() {
        if (this.__dataProto) {
          this._initializeProtoProperties(this.__dataProto);
          this.__dataProto = null;
        }
        super._initializeProperties();
      }

      /**
       * Called at instance time with bag of properties that were overwritten
       * by accessors on the prototype when accessors were created.
       *
       * The default implementation sets these properties back into the
       * setter at instance time.  This method is provided as an override
       * point for customizing or providing more efficient initialization.
       *
       * @param {Object} props Bag of property values that were overwritten
       *   when creating property accessors.
       * @return {void}
       * @protected
       * @override
       */
      _initializeProtoProperties(props) {
        for (let p in props) {
          this._setProperty(p, props[p]);
        }
      }

      /**
       * Ensures the element has the given attribute. If it does not,
       * assigns the given value to the attribute.
       *
       * @suppress {invalidCasts} Closure can't figure out `this` is infact an
       *     element
       *
       * @param {string} attribute Name of attribute to ensure is set.
       * @param {string} value of the attribute.
       * @return {void}
       * @override
       */
      _ensureAttribute(attribute, value) {
        const el = /** @type {!HTMLElement} */(this);
        if (!el.hasAttribute(attribute)) {
          this._valueToNodeAttribute(el, value, attribute);
        }
      }

      /**
       * Overrides PropertiesChanged implemention to serialize objects as JSON.
       *
       * @param {*} value Property value to serialize.
       * @return {string | undefined} String serialized from the provided property
       *     value.
       * @override
       */
      _serializeValue(value) {
        /* eslint-disable no-fallthrough */
        switch (typeof value) {
          case 'object':
            if (value instanceof Date) {
              return value.toString();
            } else if (value) {
              try {
                return JSON.stringify(value);
              } catch(x) {
                return '';
              }
            }

          default:
            return super._serializeValue(value);
        }
      }

      /**
       * Converts a string to a typed JavaScript value.
       *
       * This method is called by Polymer when reading HTML attribute values to
       * JS properties.  Users may override this method on Polymer element
       * prototypes to provide deserialization for custom `type`s.  Note,
       * the `type` argument is the value of the `type` field provided in the
       * `properties` configuration object for a given property, and is
       * by convention the constructor for the type to deserialize.
       *
       *
       * @param {?string} value Attribute value to deserialize.
       * @param {*=} type Type to deserialize the string to.
       * @return {*} Typed value deserialized from the provided string.
       * @override
       */
      _deserializeValue(value, type) {
        /**
         * @type {*}
         */
        let outValue;
        switch (type) {
          case Object:
            try {
              outValue = JSON.parse(/** @type {string} */(value));
            } catch(x) {
              // allow non-JSON literals like Strings and Numbers
              outValue = value;
            }
            break;
          case Array:
            try {
              outValue = JSON.parse(/** @type {string} */(value));
            } catch(x) {
              outValue = null;
              console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);
            }
            break;
          case Date:
            outValue = isNaN(value) ? String(value) : Number(value);
            outValue = new Date(outValue);
            break;
          default:
            outValue = super._deserializeValue(value, type);
            break;
        }
        return outValue;
      }
      /* eslint-enable no-fallthrough */

      /**
       * Overrides PropertiesChanged implementation to save existing prototype
       * property value so that it can be reset.
       * @param {string} property Name of the property
       * @param {boolean=} readOnly When true, no setter is created
       *
       * When calling on a prototype, any overwritten values are saved in
       * `__dataProto`, and it is up to the subclasser to decide how/when
       * to set those properties back into the accessor.  When calling on an
       * instance, the overwritten value is set via `_setPendingProperty`,
       * and the user should call `_invalidateProperties` or `_flushProperties`
       * for the values to take effect.
       * @protected
       * @return {void}
       * @override
       */
      _definePropertyAccessor(property, readOnly) {
        saveAccessorValue(this, property);
        super._definePropertyAccessor(property, readOnly);
      }

      /**
       * Returns true if this library created an accessor for the given property.
       *
       * @param {string} property Property name
       * @return {boolean} True if an accessor was created
       * @override
       */
      _hasAccessor(property) {
        return this.__dataHasAccessor && this.__dataHasAccessor[property];
      }

      /**
       * Returns true if the specified property has a pending change.
       *
       * @param {string} prop Property name
       * @return {boolean} True if property has a pending change
       * @protected
       * @override
       */
      _isPropertyPending(prop) {
        return Boolean(this.__dataPending && (prop in this.__dataPending));
      }

    }

    return PropertyAccessors;

  });

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  // 1.x backwards-compatible auto-wrapper for template type extensions
  // This is a clear layering violation and gives favored-nation status to
  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep
  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and
  // b.) to maintain if/repeat capability in parser-constrained elements
  //     (e.g. table, select) in lieu of native CE type extensions without
  //     massive new invention in this space (e.g. directive system)
  const templateExtensions = {
    'dom-if': true,
    'dom-repeat': true
  };

  let placeholderBugDetect = false;
  let placeholderBug = false;

  function hasPlaceholderBug() {
    if (!placeholderBugDetect) {
      placeholderBugDetect = true;
      const t = document.createElement('textarea');
      t.placeholder = 'a';
      placeholderBug = t.placeholder === t.textContent;
    }
    return placeholderBug;
  }

  /**
   * Some browsers have a bug with textarea, where placeholder text is copied as
   * a textnode child of the textarea.
   *
   * If the placeholder is a binding, this can break template stamping in two
   * ways.
   *
   * One issue is that when the `placeholder` attribute is removed when the
   * binding is processed, the textnode child of the textarea is deleted, and the
   * template info tries to bind into that node.
   *
   * With `legacyOptimizations` in use, when the template is stamped and the
   * `textarea.textContent` binding is processed, no corresponding node is found
   * because it was removed during parsing. An exception is generated when this
   * binding is updated.
   *
   * With `legacyOptimizations` not in use, the template is cloned before
   * processing and this changes the above behavior. The cloned template also has
   * a value property set to the placeholder and textContent. This prevents the
   * removal of the textContent when the placeholder attribute is removed.
   * Therefore the exception does not occur. However, there is an extra
   * unnecessary binding.
   *
   * @param {!Node} node Check node for placeholder bug
   * @return {void}
   */
  function fixPlaceholder(node) {
    if (hasPlaceholderBug() && node.localName === 'textarea' && node.placeholder
          && node.placeholder === node.textContent) {
      node.textContent = null;
    }
  }

  function wrapTemplateExtension(node) {
    let is = node.getAttribute('is');
    if (is && templateExtensions[is]) {
      let t = node;
      t.removeAttribute('is');
      node = t.ownerDocument.createElement(is);
      t.parentNode.replaceChild(node, t);
      node.appendChild(t);
      while(t.attributes.length) {
        node.setAttribute(t.attributes[0].name, t.attributes[0].value);
        t.removeAttribute(t.attributes[0].name);
      }
    }
    return node;
  }

  function findTemplateNode(root, nodeInfo) {
    // recursively ascend tree until we hit root
    let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);
    // unwind the stack, returning the indexed node at each level
    if (parent) {
      // note: marginally faster than indexing via childNodes
      // (http://jsperf.com/childnodes-lookup)
      for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {
        if (nodeInfo.parentIndex === i++) {
          return n;
        }
      }
    } else {
      return root;
    }
  }

  // construct `$` map (from id annotations)
  function applyIdToMap(inst, map, node, nodeInfo) {
    if (nodeInfo.id) {
      map[nodeInfo.id] = node;
    }
  }

  // install event listeners (from event annotations)
  function applyEventListener(inst, node, nodeInfo) {
    if (nodeInfo.events && nodeInfo.events.length) {
      for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {
        inst._addMethodEventListenerToNode(node, e.name, e.value, inst);
      }
    }
  }

  // push configuration references at configure time
  function applyTemplateContent(inst, node, nodeInfo) {
    if (nodeInfo.templateInfo) {
      node._templateInfo = nodeInfo.templateInfo;
    }
  }

  function createNodeEventHandler(context, eventName, methodName) {
    // Instances can optionally have a _methodHost which allows redirecting where
    // to find methods. Currently used by `templatize`.
    context = context._methodHost || context;
    let handler = function(e) {
      if (context[methodName]) {
        context[methodName](e, e.detail);
      } else {
        console.warn('listener method `' + methodName + '` not defined');
      }
    };
    return handler;
  }

  /**
   * Element mixin that provides basic template parsing and stamping, including
   * the following template-related features for stamped templates:
   *
   * - Declarative event listeners (`on-eventname="listener"`)
   * - Map of node id's to stamped node instances (`this.$.id`)
   * - Nested template content caching/removal and re-installation (performance
   *   optimization)
   *
   * @mixinFunction
   * @polymer
   * @summary Element class mixin that provides basic template parsing and stamping
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */
  const TemplateStamp = dedupingMixin(
      /**
       * @template T
       * @param {function(new:T)} superClass Class to apply mixin to.
       * @return {function(new:T)} superClass with mixin applied.
       */
      (superClass) => {

    /**
     * @polymer
     * @mixinClass
     * @implements {Polymer_TemplateStamp}
     */
    class TemplateStamp extends superClass {

      /**
       * Scans a template to produce template metadata.
       *
       * Template-specific metadata are stored in the object returned, and node-
       * specific metadata are stored in objects in its flattened `nodeInfoList`
       * array.  Only nodes in the template that were parsed as nodes of
       * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object
       * contains an `index` (`childNodes` index in parent) and optionally
       * `parent`, which points to node info of its parent (including its index).
       *
       * The template metadata object returned from this method has the following
       * structure (many fields optional):
       *
       * ```js
       *   {
       *     // Flattened list of node metadata (for nodes that generated metadata)
       *     nodeInfoList: [
       *       {
       *         // `id` attribute for any nodes with id's for generating `$` map
       *         id: {string},
       *         // `on-event="handler"` metadata
       *         events: [
       *           {
       *             name: {string},   // event name
       *             value: {string},  // handler method name
       *           }, ...
       *         ],
       *         // Notes when the template contained a `<slot>` for shady DOM
       *         // optimization purposes
       *         hasInsertionPoint: {boolean},
       *         // For nested `<template>`` nodes, nested template metadata
       *         templateInfo: {object}, // nested template metadata
       *         // Metadata to allow efficient retrieval of instanced node
       *         // corresponding to this metadata
       *         parentInfo: {number},   // reference to parent nodeInfo>
       *         parentIndex: {number},  // index in parent's `childNodes` collection
       *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`
       *       },
       *       ...
       *     ],
       *     // When true, the template had the `strip-whitespace` attribute
       *     // or was nested in a template with that setting
       *     stripWhitespace: {boolean},
       *     // For nested templates, nested template content is moved into
       *     // a document fragment stored here; this is an optimization to
       *     // avoid the cost of nested template cloning
       *     content: {DocumentFragment}
       *   }
       * ```
       *
       * This method kicks off a recursive treewalk as follows:
       *
       * ```
       *    _parseTemplate <---------------------+
       *      _parseTemplateContent              |
       *        _parseTemplateNode  <------------|--+
       *          _parseTemplateNestedTemplate --+  |
       *          _parseTemplateChildNodes ---------+
       *          _parseTemplateNodeAttributes
       *            _parseTemplateNodeAttribute
       *
       * ```
       *
       * These methods may be overridden to add custom metadata about templates
       * to either `templateInfo` or `nodeInfo`.
       *
       * Note that this method may be destructive to the template, in that
       * e.g. event annotations may be removed after being noted in the
       * template metadata.
       *
       * @param {!HTMLTemplateElement} template Template to parse
       * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer
       *   template, for parsing nested templates
       * @return {!TemplateInfo} Parsed template metadata
       * @nocollapse
       */
      static _parseTemplate(template, outerTemplateInfo) {
        // since a template may be re-used, memo-ize metadata
        if (!template._templateInfo) {
          // TODO(rictic): fix typing
          let /** ? */ templateInfo = template._templateInfo = {};
          templateInfo.nodeInfoList = [];
          templateInfo.stripWhiteSpace =
            (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||
            template.hasAttribute('strip-whitespace');
           // TODO(rictic): fix typing
           this._parseTemplateContent(
               template, templateInfo, /** @type {?} */ ({parent: null}));
        }
        return template._templateInfo;
      }

      /**
       * See docs for _parseTemplateNode.
       *
       * @param {!HTMLTemplateElement} template .
       * @param {!TemplateInfo} templateInfo .
       * @param {!NodeInfo} nodeInfo .
       * @return {boolean} .
       * @nocollapse
       */
      static _parseTemplateContent(template, templateInfo, nodeInfo) {
        return this._parseTemplateNode(template.content, templateInfo, nodeInfo);
      }

      /**
       * Parses template node and adds template and node metadata based on
       * the current node, and its `childNodes` and `attributes`.
       *
       * This method may be overridden to add custom node or template specific
       * metadata based on this node.
       *
       * @param {Node} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */
      static _parseTemplateNode(node, templateInfo, nodeInfo) {
        let noted = false;
        let element = /** @type {!HTMLTemplateElement} */ (node);
        if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {
          noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;
        } else if (element.localName === 'slot') {
          // For ShadyDom optimization, indicating there is an insertion point
          templateInfo.hasInsertionPoint = true;
        }
        fixPlaceholder(element);
        if (element.firstChild) {
          this._parseTemplateChildNodes(element, templateInfo, nodeInfo);
        }
        if (element.hasAttributes && element.hasAttributes()) {
          noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;
        }
        return noted;
      }

      /**
       * Parses template child nodes for the given root node.
       *
       * This method also wraps whitelisted legacy template extensions
       * (`is="dom-if"` and `is="dom-repeat"`) with their equivalent element
       * wrappers, collapses text nodes, and strips whitespace from the template
       * if the `templateInfo.stripWhitespace` setting was provided.
       *
       * @param {Node} root Root node whose `childNodes` will be parsed
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {void}
       */
      static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {
        if (root.localName === 'script' || root.localName === 'style') {
          return;
        }
        for (let node=root.firstChild, parentIndex=0, next; node; node=next) {
          // Wrap templates
          if (node.localName == 'template') {
            node = wrapTemplateExtension(node);
          }
          // collapse adjacent textNodes: fixes an IE issue that can cause
          // text nodes to be inexplicably split =(
          // note that root.normalize() should work but does not so we do this
          // manually.
          next = node.nextSibling;
          if (node.nodeType === Node.TEXT_NODE) {
            let /** Node */ n = next;
            while (n && (n.nodeType === Node.TEXT_NODE)) {
              node.textContent += n.textContent;
              next = n.nextSibling;
              root.removeChild(n);
              n = next;
            }
            // optionally strip whitespace
            if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {
              root.removeChild(node);
              continue;
            }
          }
          let childInfo =
              /** @type {!NodeInfo} */ ({parentIndex, parentInfo: nodeInfo});
          if (this._parseTemplateNode(node, templateInfo, childInfo)) {
            childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1;
          }
          // Increment if not removed
          if (node.parentNode) {
            parentIndex++;
          }
        }
      }

      /**
       * Parses template content for the given nested `<template>`.
       *
       * Nested template info is stored as `templateInfo` in the current node's
       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.
       * It will then be the responsibility of the host to set it back to the
       * template and for users stamping nested templates to use the
       * `_contentForTemplate` method to retrieve the content for this template
       * (an optimization to avoid the cost of cloning nested template content).
       *
       * @param {HTMLTemplateElement} node Node to parse (a <template>)
       * @param {TemplateInfo} outerTemplateInfo Template metadata for current template
       *   that includes the template `node`
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */
      static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {
        // TODO(rictic): the type of node should be non-null
        let element = /** @type {!HTMLTemplateElement} */ (node);
        let templateInfo = this._parseTemplate(element, outerTemplateInfo);
        let content = templateInfo.content =
            element.content.ownerDocument.createDocumentFragment();
        content.appendChild(element.content);
        nodeInfo.templateInfo = templateInfo;
        return true;
      }

      /**
       * Parses template node attributes and adds node metadata to `nodeInfo`
       * for nodes of interest.
       *
       * @param {Element} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current
       *     template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */
      static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {
        // Make copy of original attribute list, since the order may change
        // as attributes are added and removed
        let noted = false;
        let attrs = Array.from(node.attributes);
        for (let i=attrs.length-1, a; (a=attrs[i]); i--) {
          noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;
        }
        return noted;
      }

      /**
       * Parses a single template node attribute and adds node metadata to
       * `nodeInfo` for attributes of interest.
       *
       * This implementation adds metadata for `on-event="handler"` attributes
       * and `id` attributes.
       *
       * @param {Element} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @param {string} name Attribute name
       * @param {string} value Attribute value
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @nocollapse
       */
      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
        // events (on-*)
        if (name.slice(0, 3) === 'on-') {
          node.removeAttribute(name);
          nodeInfo.events = nodeInfo.events || [];
          nodeInfo.events.push({
            name: name.slice(3),
            value
          });
          return true;
        }
        // static id
        else if (name === 'id') {
          nodeInfo.id = value;
          return true;
        }
        return false;
      }

      /**
       * Returns the `content` document fragment for a given template.
       *
       * For nested templates, Polymer performs an optimization to cache nested
       * template content to avoid the cost of cloning deeply nested templates.
       * This method retrieves the cached content for a given template.
       *
       * @param {HTMLTemplateElement} template Template to retrieve `content` for
       * @return {DocumentFragment} Content fragment
       * @nocollapse
       */
      static _contentForTemplate(template) {
        let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;
        return (templateInfo && templateInfo.content) || template.content;
      }

      /**
       * Clones the provided template content and returns a document fragment
       * containing the cloned dom.
       *
       * The template is parsed (once and memoized) using this library's
       * template parsing features, and provides the following value-added
       * features:
       * * Adds declarative event listeners for `on-event="handler"` attributes
       * * Generates an "id map" for all nodes with id's under `$` on returned
       *   document fragment
       * * Passes template info including `content` back to templates as
       *   `_templateInfo` (a performance optimization to avoid deep template
       *   cloning)
       *
       * Note that the memoized template parsing process is destructive to the
       * template: attributes for bindings and declarative event listeners are
       * removed after being noted in notes, and any nested `<template>.content`
       * is removed and stored in notes as well.
       *
       * @param {!HTMLTemplateElement} template Template to stamp
       * @return {!StampedTemplate} Cloned template content
       * @override
       */
      _stampTemplate(template) {
        // Polyfill support: bootstrap the template if it has not already been
        if (template && !template.content &&
            window.HTMLTemplateElement && HTMLTemplateElement.decorate) {
          HTMLTemplateElement.decorate(template);
        }
        let templateInfo = this.constructor._parseTemplate(template);
        let nodeInfo = templateInfo.nodeInfoList;
        let content = templateInfo.content || template.content;
        let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));
        // NOTE: ShadyDom optimization indicating there is an insertion point
        dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;
        let nodes = dom.nodeList = new Array(nodeInfo.length);
        dom.$ = {};
        for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {
          let node = nodes[i] = findTemplateNode(dom, info);
          applyIdToMap(this, dom.$, node, info);
          applyTemplateContent(this, node, info);
          applyEventListener(this, node, info);
        }
        dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign
        return dom;
      }

      /**
       * Adds an event listener by method name for the event provided.
       *
       * This method generates a handler function that looks up the method
       * name at handling time.
       *
       * @param {!EventTarget} node Node to add listener on
       * @param {string} eventName Name of event
       * @param {string} methodName Name of method
       * @param {*=} context Context the method will be called on (defaults
       *   to `node`)
       * @return {Function} Generated handler function
       * @override
       */
      _addMethodEventListenerToNode(node, eventName, methodName, context) {
        context = context || node;
        let handler = createNodeEventHandler(context, eventName, methodName);
        this._addEventListenerToNode(node, eventName, handler);
        return handler;
      }

      /**
       * Override point for adding custom or simulated event handling.
       *
       * @param {!EventTarget} node Node to add event listener to
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to add
       * @return {void}
       * @override
       */
      _addEventListenerToNode(node, eventName, handler) {
        node.addEventListener(eventName, handler);
      }

      /**
       * Override point for adding custom or simulated event handling.
       *
       * @param {!EventTarget} node Node to remove event listener from
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to remove
       * @return {void}
       * @override
       */
      _removeEventListenerFromNode(node, eventName, handler) {
        node.removeEventListener(eventName, handler);
      }

    }

    return TemplateStamp;

  });

  /**
   * @fileoverview
   * @suppress {checkPrototypalTypes}
   * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
   * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
   * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
   * Google as part of the polymer project is also subject to an additional IP
   * rights grant found at http://polymer.github.io/PATENTS.txt
   */

  // Monotonically increasing unique ID used for de-duping effects triggered
  // from multiple properties in the same turn
  let dedupeId$1 = 0;

  /**
   * Property effect types; effects are stored on the prototype using these keys
   * @enum {string}
   */
  const TYPES = {
    COMPUTE: '__computeEffects',
    REFLECT: '__reflectEffects',
    NOTIFY: '__notifyEffects',
    PROPAGATE: '__propagateEffects',
    OBSERVE: '__observeEffects',
    READ_ONLY: '__readOnly'
  };

  /** @const {!RegExp} */
  const capitalAttributeRegex = /[A-Z]/;

  /**
   * Ensures that the model has an own-property map of effects for the given type.
   * The model may be a prototype or an instance.
   *
   * Property effects are stored as arrays of effects by property in a map,
   * by named type on the model. e.g.
   *
   *   __computeEffects: {
   *     foo: [ ... ],
   *     bar: [ ... ]
   *   }
   *
   * If the model does not yet have an effect map for the type, one is created
   * and returned.  If it does, but it is not an own property (i.e. the
   * prototype had effects), the the map is deeply cloned and the copy is
   * set on the model and returned, ready for new effects to be added.
   *
   * @param {Object} model Prototype or instance
   * @param {string} type Property effect type
   * @return {Object} The own-property map of effects for the given type
   * @private
   */
  function ensureOwnEffectMap(model, type) {
    let effects = model[type];
    if (!effects) {
      effects = model[type] = {};
    } else if (!model.hasOwnProperty(type)) {
      effects = model[type] = Object.create(model[type]);
      for (let p in effects) {
        let protoFx = effects[p];
        let instFx = effects[p] = Array(protoFx.length);
        for (let i=0; i<protoFx.length; i++) {
          instFx[i] = protoFx[i];
        }
      }
    }
    return effects;
  }

  // -- effects ----------------------------------------------

  /**
   * Runs all effects of a given type for the given set of property changes
   * on an instance.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {?Object} effects Object map of property-to-Array of effects
   * @param {?Object} props Bag of current property changes
   * @param {?Object=} oldProps Bag of previous values for changed properties
   * @param {boolean=} hasPaths True with `props` contains one or more paths
   * @param {*=} extraArgs Additional metadata to pass to effect function
   * @return {boolean} True if an effect ran for this property
   * @private
   */
  function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {
    if (effects) {
      let ran = false;
      let id = dedupeId$1++;
      for (let prop in props) {
        if (runEffectsForProperty(
                inst, /** @type {!Object} */ (effects), id, prop, props, oldProps,
                hasPaths, extraArgs)) {
          ran = true;
        }
      }
      return ran;
    }
    return false;
  }

  /**
   * Runs a list of effects for a given property.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {!Object} effects Object map of property-to-Array of effects
   * @param {number} dedupeId Counter used for de-duping effects
   * @param {string} prop Name of changed property
   * @param {*} props Changed properties
   * @param {*} oldProps Old properties
   * @param {boolean=} hasPaths True with `props` contains one or more paths
   * @param {*=} extraArgs Additional metadata to pass to effect function
   * @return {boolean} True if an effect ran for this property
   * @private
   */
  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {
    let ran = false;
    let rootProperty = hasPaths ? root(prop) : prop;
    let fxs = effects[rootProperty];
    if (fxs) {
      for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {
        if ((!fx.info || fx.info.lastRun !== dedupeId) &&
            (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {
          if (fx.info) {
            fx.info.lastRun = dedupeId;
          }
          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);
          ran = true;
        }
      }
    }
    return ran;
  }

  /**
   * Determines whether a property/path that has changed matches the trigger
   * criteria for an effect.  A trigger is a descriptor with the following
   * structure, which matches the descriptors returned from `parseArg`.
   * e.g. for `foo.bar.*`:
   * ```
   * trigger: {
   *   name: 'a.b',
   *   structured: true,
   *   wildcard: true
   * }
   * ```
   * If no trigger is given, the path is deemed to match.
   *
   * @param {string} path Path or property that changed
   * @param {?DataTrigger} trigger Descriptor
   * @return {boolean} Whether the path matched the trigger
   */
  function pathMatchesTrigger(path, trigger) {
    if (trigger) {
      let triggerPath = /** @type {string} */ (trigger.name);
      return (triggerPath == path) ||
          !!(trigger.structured && isAncestor(triggerPath, path)) ||
          !!(trigger.wildcard && isDescendant(triggerPath, path));
    } else {
      return true;
    }
  }

  /**
   * Implements the "observer" effect.
   *
   * Calls the method with `info.methodName` on the instance, passing the
   * new and old values.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */
  function runObserverEffect(inst, property, props, oldProps, info) {
    let fn = typeof info.method === "string" ? inst[info.method] : info.method;
    let changedProp = info.property;
    if (fn) {
      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);
    } else if (!info.dynamicFn) {
      console.warn('observer method `' + info.method + '` not defined');
    }
  }

  /**
   * Runs "notify" effects for a set of changed properties.
   *
   * This method differs from the generic `runEffects` method in that it
   * will dispatch path notification events in the case that the property
   * changed was a path and the root property for that path didn't have a
   * "notify" effect.  This is to maintain 1.0 behavior that did not require
   * `notify: true` to ensure object sub-property notifications were
   * sent.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {Object} notifyProps Bag of properties to notify
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */
  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {
    // Notify
    let fxs = inst[TYPES.NOTIFY];
    let notified;
    let id = dedupeId$1++;
    // Try normal notify effects; if none, fall back to try path notification
    for (let prop in notifyProps) {
      if (notifyProps[prop]) {
        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {
          notified = true;
        } else if (hasPaths && notifyPath(inst, prop, props)) {
          notified = true;
        }
      }
    }
    // Flush host if we actually notified and host was batching
    // And the host has already initialized clients; this prevents
    // an issue with a host observing data changes before clients are ready.
    let host;
    if (notified && (host = inst.__dataHost) && host._invalidateProperties) {
      host._invalidateProperties();
    }
  }

  /**
   * Dispatches {property}-changed events with path information in the detail
   * object to indicate a sub-path of the property was changed.
   *
   * @param {!Polymer_PropertyEffects} inst The element from which to fire the
   *     event
   * @param {string} path The path that was changed
   * @param {Object} props Bag of current property changes
   * @return {boolean} Returns true if the path was notified
   * @private
   */
  function notifyPath(inst, path, props) {
    let rootProperty = root(path);
    if (rootProperty !== path) {
      let eventName = camelToDashCase(rootProperty) + '-changed';
      dispatchNotifyEvent(inst, eventName, props[path], path);
      return true;
    }
    return false;
  }

  /**
   * Dispatches {property}-changed events to indicate a property (or path)
   * changed.
   *
   * @param {!Polymer_PropertyEffects} inst The element from which to fire the
   *     event
   * @param {string} eventName The name of the event to send
   *     ('{property}-changed')
   * @param {*} value The value of the changed property
   * @param {string | null | undefined} path If a sub-path of this property
   *     changed, the path that changed (optional).
   * @return {void}
   * @private
   * @suppress {invalidCasts}
   */
  function dispatchNotifyEvent(inst, eventName, value, path) {
    let detail = {
      value: value,
      queueProperty: true
    };
    if (path) {
      detail.path = path;
    }
    wrap(/** @type {!HTMLElement} */(inst)).dispatchEvent(new CustomEvent(eventName, { detail }));
  }

  /**
   * Implements the "notify" effect.
   *
   * Dispatches a non-bubbling event named `info.eventName` on the instance
   * with a detail object containing the new `value`.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */
  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {
    let rootProperty = hasPaths ? root(property) : property;
    let path = rootProperty != property ? property : null;
    let value = path ? get$1(inst, path) : inst.__data[property];
    if (path && value === undefined) {
      value = props[property];  // specifically for .splices
    }
    dispatchNotifyEvent(inst, info.eventName, value, path);
  }

  /**
   * Handler function for 2-way notification events. Receives context
   * information captured in the `addNotifyListener` closure from the
   * `__notifyListeners` metadata.
   *
   * Sets the value of the notified property to the host property or path.  If
   * the event contained path information, translate that path to the host
   * scope's name for that path first.
   *
   * @param {CustomEvent} event Notification event (e.g. '<property>-changed')
   * @param {!Polymer_PropertyEffects} inst Host element instance handling the
   *     notification event
   * @param {string} fromProp Child element property that was bound
   * @param {string} toPath Host property/path that was bound
   * @param {boolean} negate Whether the binding was negated
   * @return {void}
   * @private
   */
  function handleNotification(event, inst, fromProp, toPath, negate) {
    let value;
    let detail = /** @type {Object} */(event.detail);
    let fromPath = detail && detail.path;
    if (fromPath) {
      toPath = translate(fromProp, toPath, fromPath);
      value = detail && detail.value;
    } else {
      value = event.currentTarget[fromProp];
    }
    value = negate ? !value : value;
    if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {
      if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))
        && (!detail || !detail.queueProperty)) {
        inst._invalidateProperties();
      }
    }
  }

  /**
   * Implements the "reflect" effect.
   *
   * Sets the attribute named `info.attrName` to the given property value.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */
  function runReflectEffect(inst, property, props, oldProps, info) {
    let value = inst.__data[property];
    if (sanitizeDOMValue) {
      value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));
    }
    inst._propertyToAttribute(property, info.attrName, value);
  }

  /**
   * Runs "computed" effects for a set of changed properties.
   *
   * This method differs from the generic `runEffects` method in that it
   * continues to run computed effects based on the output of each pass until
   * there are no more newly computed properties.  This ensures that all
   * properties that will be computed by the initial set of changes are
   * computed before other effects (binding propagation, observers, and notify)
   * run.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {?Object} changedProps Bag of changed properties
   * @param {?Object} oldProps Bag of previous values for changed properties
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */
  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {
    let computeEffects = inst[TYPES.COMPUTE];
    if (computeEffects) {
      let inputProps = changedProps;
      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {
        Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);
        Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);
        inputProps = inst.__dataPending;
        inst.__dataPending = null;
      }
    }
  }

  /**
   * Implements the "computed property" effect by running the method with the
   * values of the arguments specified in the `info` object and setting the
   * return value to the computed property specified.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {?Object} props Bag of current property changes
   * @param {?Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */
  function runComputedEffect(inst, property, props, oldProps, info) {
    let result = runMethodEffect(inst, property, props, oldProps, info);
    let computedProp = info.methodInfo;
    if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {
      inst._setPendingProperty(computedProp, result, true);
    } else {
      inst[computedProp] = result;
    }
  }

  /**
   * Computes path changes based on path links set up using the `linkPaths`
   * API.
   *
   * @param {!Polymer_PropertyEffects} inst The instance whose props are changing
   * @param {string} path Path that has changed
   * @param {*} value Value of changed path
   * @return {void}
   * @private
   */
  function computeLinkedPaths(inst, path, value) {
    let links = inst.__dataLinkedPaths;
    if (links) {
      let link;
      for (let a in links) {
        let b = links[a];
        if (isDescendant(a, path)) {
          link = translate(a, b, path);
          inst._setPendingPropertyOrPath(link, value, true, true);
        } else if (isDescendant(b, path)) {
          link = translate(b, a, path);
          inst._setPendingPropertyOrPath(link, value, true, true);
        }
      }
    }
  }

  // -- bindings ----------------------------------------------

  /**
   * Adds binding metadata to the current `nodeInfo`, and binding effects
   * for all part dependencies to `templateInfo`.
   *
   * @param {Function} constructor Class that `_parseTemplate` is currently
   *   running on
   * @param {TemplateInfo} templateInfo Template metadata for current template
   * @param {NodeInfo} nodeInfo Node metadata for current template node
   * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'
   * @param {string} target Target property name
   * @param {!Array<!BindingPart>} parts Array of binding part metadata
   * @param {string=} literal Literal text surrounding binding parts (specified
   *   only for 'property' bindings, since these must be initialized as part
   *   of boot-up)
   * @return {void}
   * @private
   */
  function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {
    // Create binding metadata and add to nodeInfo
    nodeInfo.bindings = nodeInfo.bindings || [];
    let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };
    nodeInfo.bindings.push(binding);
    // Add listener info to binding metadata
    if (shouldAddListener(binding)) {
      let {event, negate} = binding.parts[0];
      binding.listenerEvent = event || (camelToDashCase(target) + '-changed');
      binding.listenerNegate = negate;
    }
    // Add "propagate" property effects to templateInfo
    let index = templateInfo.nodeInfoList.length;
    for (let i=0; i<binding.parts.length; i++) {
      let part = binding.parts[i];
      part.compoundIndex = i;
      addEffectForBindingPart(constructor, templateInfo, binding, part, index);
    }
  }

  /**
   * Adds property effects to the given `templateInfo` for the given binding
   * part.
   *
   * @param {Function} constructor Class that `_parseTemplate` is currently
   *   running on
   * @param {TemplateInfo} templateInfo Template metadata for current template
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @param {number} index Index into `nodeInfoList` for this node
   * @return {void}
   */
  function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {
    if (!part.literal) {
      if (binding.kind === 'attribute' && binding.target[0] === '-') {
        console.warn('Cannot set attribute ' + binding.target +
          ' because "-" is not a valid attribute starting character');
      } else {
        let dependencies = part.dependencies;
        let info = { index, binding, part, evaluator: constructor };
        for (let j=0; j<dependencies.length; j++) {
          let trigger = dependencies[j];
          if (typeof trigger == 'string') {
            trigger = parseArg(trigger);
            trigger.wildcard = true;
          }
          constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {
            fn: runBindingEffect,
            info, trigger
          });
        }
      }
    }
  }

  /**
   * Implements the "binding" (property/path binding) effect.
   *
   * Note that binding syntax is overridable via `_parseBindings` and
   * `_evaluateBinding`.  This method will call `_evaluateBinding` for any
   * non-literal parts returned from `_parseBindings`.  However,
   * there is no support for _path_ bindings via custom binding parts,
   * as this is specific to Polymer's path binding syntax.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} path Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template
   *   metadata
   * @return {void}
   * @private
   */
  function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {
    let node = nodeList[info.index];
    let binding = info.binding;
    let part = info.part;
    // Subpath notification: transform path and set to client
    // e.g.: foo="{{obj.sub}}", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop
    if (hasPaths && part.source && (path.length > part.source.length) &&
        (binding.kind == 'property') && !binding.isCompound &&
        node.__isPropertyEffectsClient &&
        node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {
      let value = props[path];
      path = translate(part.source, binding.target, path);
      if (node._setPendingPropertyOrPath(path, value, false, true)) {
        inst._enqueueClient(node);
      }
    } else {
      let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);
      // Propagate value to child
      applyBindingValue(inst, node, binding, part, value);
    }
  }

  /**
   * Sets the value for an "binding" (binding) effect to a node,
   * either as a property or attribute.
   *
   * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect
   * @param {Node} node Target node for binding
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @param {*} value Value to set
   * @return {void}
   * @private
   */
  function applyBindingValue(inst, node, binding, part, value) {
    value = computeBindingValue(node, value, binding, part);
    if (sanitizeDOMValue) {
      value = sanitizeDOMValue(value, binding.target, binding.kind, node);
    }
    if (binding.kind == 'attribute') {
      // Attribute binding
      inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);
    } else {
      // Property binding
      let prop = binding.target;
      if (node.__isPropertyEffectsClient &&
          node.__dataHasAccessor && node.__dataHasAccessor[prop]) {
        if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {
          if (node._setPendingProperty(prop, value)) {
            inst._enqueueClient(node);
          }
        }
      } else  {
        inst._setUnmanagedPropertyToNode(node, prop, value);
      }
    }
  }

  /**
   * Transforms an "binding" effect value based on compound & negation
   * effect metadata, as well as handling for special-case properties
   *
   * @param {Node} node Node the value will be set to
   * @param {*} value Value to set
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @return {*} Transformed value to set
   * @private
   */
  function computeBindingValue(node, value, binding, part) {
    if (binding.isCompound) {
      let storage = node.__dataCompoundStorage[binding.target];
      storage[part.compoundIndex] = value;
      value = storage.join('');
    }
    if (binding.kind !== 'attribute') {
      // Some browsers serialize `undefined` to `"undefined"`
      if (binding.target === 'textContent' ||
          (binding.target === 'value' &&
            (node.localName === 'input' || node.localName === 'textarea'))) {
        value = value == undefined ? '' : value;
      }
    }
    return value;
  }

  /**
   * Returns true if a binding's metadata meets all the requirements to allow
   * 2-way binding, and therefore a `<property>-changed` event listener should be
   * added:
   * - used curly braces
   * - is a property (not attribute) binding
   * - is not a textContent binding
   * - is not compound
   *
   * @param {!Binding} binding Binding metadata
   * @return {boolean} True if 2-way listener should be added
   * @private
   */
  function shouldAddListener(binding) {
    return Boolean(binding.target) &&
           binding.kind != 'attribute' &&
           binding.kind != 'text' &&
           !binding.isCompound &&
           binding.parts[0].mode === '{';
  }

  /**
   * Setup compound binding storage structures, notify listeners, and dataHost
   * references onto the bound nodeList.
   *
   * @param {!Polymer_PropertyEffects} inst Instance that bas been previously
   *     bound
   * @param {TemplateInfo} templateInfo Template metadata
   * @return {void}
   * @private
   */
  function setupBindings(inst, templateInfo) {
    // Setup compound storage, dataHost, and notify listeners
    let {nodeList, nodeInfoList} = templateInfo;
    if (nodeInfoList.length) {
      for (let i=0; i < nodeInfoList.length; i++) {
        let info = nodeInfoList[i];
        let node = nodeList[i];
        let bindings = info.bindings;
        if (bindings) {
          for (let i=0; i<bindings.length; i++) {
            let binding = bindings[i];
            setupCompoundStorage(node, binding);
            addNotifyListener(node, inst, binding);
          }
        }
        node.__dataHost = inst;
      }
    }
  }

  /**
   * Initializes `__dataCompoundStorage` local storage on a bound node with
   * initial literal data for compound bindings, and sets the joined
   * literal parts to the bound property.
   *
   * When changes to compound parts occur, they are first set into the compound
   * storage array for that property, and then the array is joined to result in
   * the final value set to the property/attribute.
   *
   * @param {Node} node Bound node to initialize
   * @param {Binding} binding Binding metadata
   * @return {void}
   * @private
   */
  function setupCompoundStorage(node, binding) {
    if (binding.isCompound) {
      // Create compound storage map
      let storage = node.__dataCompoundStorage ||
        (node.__dataCompoundStorage = {});
      let parts = binding.parts;
      // Copy literals from parts into storage for this binding
      let literals = new Array(parts.length);
      for (let j=0; j<parts.length; j++) {
        literals[j] = parts[j].literal;
      }
      let target = binding.target;
      storage[target] = literals;
      // Configure properties with their literal parts
      if (binding.literal && binding.kind == 'property') {
        // Note, className needs style scoping so this needs wrapping.
        // We may also want to consider doing this for `textContent` and
        // `innerHTML`.
        if (target === 'className') {
          node = wrap(node);
        }
        node[target] = binding.literal;
      }
    }
  }

  /**
   * Adds a 2-way binding notification event listener to the node specified
   *
   * @param {Object} node Child element to add listener to
   * @param {!Polymer_PropertyEffects} inst Host element instance to handle
   *     notification event
   * @param {Binding} binding Binding metadata
   * @return {void}
   * @private
   */
  function addNotifyListener(node, inst, binding) {
    if (binding.listenerEvent) {
      let part = binding.parts[0];
      node.addEventListener(binding.listenerEvent, function(e) {
        handleNotification(e, inst, binding.target, part.source, part.negate);
      });
    }
  }

  // -- for method-based effects (complexObserver & computed) --------------

  /**
   * Adds property effects for each argument in the method signature (and
   * optionally, for the method name if `dynamic` is true) that calls the
   * provided effect function.
   *
   * @param {Element | Object} model Prototype or instance
   * @param {!MethodSignature} sig Method signature metadata
   * @param {string} type Type of property effect to add
   * @param {Function} effectFn Function to run when arguments change
   * @param {*=} methodInfo Effect-specific information to be included in
   *   method effect metadata
   * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
   *   method names should be included as a dependency to the effect. Note,
   *   defaults to true if the signature is static (sig.static is true).
   * @return {void}
   * @private
   */
  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {
    dynamicFn = sig.static || (dynamicFn &&
      (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));
    let info = {
      methodName: sig.methodName,
      args: sig.args,
      methodInfo,
      dynamicFn
    };
    for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {
      if (!arg.literal) {
        model._addPropertyEffect(arg.rootProperty, type, {
          fn: effectFn, info: info, trigger: arg
        });
      }
    }
    if (dynamicFn) {
      model._addPropertyEffect(sig.methodName, type, {
        fn: effectFn, info: info
      });
    }
  }

  /**
   * Calls a method with arguments marshaled from properties on the instance
   * based on the method signature contained in the effect metadata.
   *
   * Multi-property observers, computed properties, and inline computing
   * functions call this function to invoke the method, then use the return
   * value accordingly.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {*} Returns the return value from the method invocation
   * @private
   */
  function runMethodEffect(inst, property, props, oldProps, info) {
    // Instances can optionally have a _methodHost which allows redirecting where
    // to find methods. Currently used by `templatize`.
    let context = inst._methodHost || inst;
    let fn = context[info.methodName];
    if (fn) {
      let args = inst._marshalArgs(info.args, property, props);
      return fn.apply(context, args);
    } else if (!info.dynamicFn) {
      console.warn('method `' + info.methodName + '` not defined');
    }
  }

  const emptyArray = [];

  // Regular expressions used for binding
  const IDENT  = '(?:' + '[a-zA-Z_$][\\w.:$\\-*]*' + ')';
  const NUMBER = '(?:' + '[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';
  const SQUOTE_STRING = '(?:' + '\'(?:[^\'\\\\]|\\\\.)*\'' + ')';
  const DQUOTE_STRING = '(?:' + '"(?:[^"\\\\]|\\\\.)*"' + ')';
  const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';
  const ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\s*' + ')';
  const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\s*' + ARGUMENT + ')*' + ')';
  const ARGUMENT_LIST = '(?:' + '\\(\\s*' +
                                '(?:' + ARGUMENTS + '?' + ')' +
                              '\\)\\s*' + ')';
  const BINDING = '(' + IDENT + '\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3
  const OPEN_BRACKET = '(\\[\\[|{{)' + '\\s*';
  const CLOSE_BRACKET = '(?:]]|}})';
  const NEGATE = '(?:(!)\\s*)?'; // Group 2
  const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;
  const bindingRegex = new RegExp(EXPRESSION, "g");

  /**
   * Create a string from binding parts of all the literal parts
   *
   * @param {!Array<BindingPart>} parts All parts to stringify
   * @return {string} String made from the literal parts
   */
  function literalFromParts(parts) {
    let s = '';
    for (let i=0; i<parts.length; i++) {
      let literal = parts[i].literal;
      s += literal || '';
    }
    return s;
  }

  /**
   * Parses an expression string for a method signature, and returns a metadata
   * describing the method in terms of `methodName`, `static` (whether all the
   * arguments are literals), and an array of `args`
   *
   * @param {string} expression The expression to parse
   * @return {?MethodSignature} The method metadata object if a method expression was
   *   found, otherwise `undefined`
   * @private
   */
  function parseMethod(expression) {
    // tries to match valid javascript property names
    let m = expression.match(/([^\s]+?)\(([\s\S]*)\)/);
    if (m) {
      let methodName = m[1];
      let sig = { methodName, static: true, args: emptyArray };
      if (m[2].trim()) {
        // replace escaped commas with comma entity, split on un-escaped commas
        let args = m[2].replace(/\\,/g, '&comma;').split(',');
        return parseArgs(args, sig);
      } else {
        return sig;
      }
    }
    return null;
  }

  /**
   * Parses an array of arguments and sets the `args` property of the supplied
   * signature metadata object. Sets the `static` property to false if any
   * argument is a non-literal.
   *
   * @param {!Array<string>} argList Array of argument names
   * @param {!MethodSignature} sig Method signature metadata object
   * @return {!MethodSignature} The updated signature metadata object
   * @private
   */
  function parseArgs(argList, sig) {
    sig.args = argList.map(function(rawArg) {
      let arg = parseArg(rawArg);
      if (!arg.literal) {
        sig.static = false;
      }
      return arg;
    }, this);
    return sig;
  }

  /**
   * Parses an individual argument, and returns an argument metadata object
   * with the following fields:
   *
   *   {
   *     value: 'prop',        // property/path or literal value
   *     literal: false,       // whether argument is a literal
   *     structured: false,    // whether the property is a path
   *     rootProperty: 'prop', // the root property of the path
   *     wildcard: false       // whether the argument was a wildcard '.*' path
   *   }
   *
   * @param {string} rawArg The string value of the argument
   * @return {!MethodArg} Argument metadata object
   * @private
   */
  function parseArg(rawArg) {
    // clean up whitespace
    let arg = rawArg.trim()
      // replace comma entity with comma
      .replace(/&comma;/g, ',')
      // repair extra escape sequences; note only commas strictly need
      // escaping, but we allow any other char to be escaped since its
      // likely users will do this
      .replace(/\\(.)/g, '\$1')
      ;
    // basic argument descriptor
    let a = {
      name: arg,
      value: '',
      literal: false
    };
    // detect literal value (must be String or Number)
    let fc = arg[0];
    if (fc === '-') {
      fc = arg[1];
    }
    if (fc >= '0' && fc <= '9') {
      fc = '#';
    }
    switch(fc) {
      case "'":
      case '"':
        a.value = arg.slice(1, -1);
        a.literal = true;
        break;
      case '#':
        a.value = Number(arg);
        a.literal = true;
        break;
    }
    // if not literal, look for structured path
    if (!a.literal) {
      a.rootProperty = root(arg);
      // detect structured path (has dots)
      a.structured = isPath(arg);
      if (a.structured) {
        a.wildcard = (arg.slice(-2) == '.*');
        if (a.wildcard) {
          a.name = arg.slice(0, -2);
        }
      }
    }
    return a;
  }

  function getArgValue(data, props, path) {
    let value = get$1(data, path);
    // when data is not stored e.g. `splices`, get the value from changedProps
    // TODO(kschaaf): Note, this can cause a rare issue where the wildcard
    // info.value could pull a stale value out of changedProps during a reentrant
    // change that sets the value back to undefined.
    // https://github.com/Polymer/polymer/issues/5479
    if (value === undefined) {
      value = props[path];
    }
    return value;
  }

  // data api

  /**
   * Sends array splice notifications (`.splices` and `.length`)
   *
   * Note: this implementation only accepts normalized paths
   *
   * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
   * @param {Array} array The array the mutations occurred on
   * @param {string} path The path to the array that was mutated
   * @param {Array} splices Array of splice records
   * @return {void}
   * @private
   */
  function notifySplices(inst, array, path, splices) {
    inst.notifyPath(path + '.splices', { indexSplices: splices });
    inst.notifyPath(path + '.length', array.length);
  }

  /**
   * Creates a splice record and sends an array splice notification for
   * the described mutation
   *
   * Note: this implementation only accepts normalized paths
   *
   * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
   * @param {Array} array The array the mutations occurred on
   * @param {string} path The path to the array that was mutated
   * @param {number} index Index at which the array mutation occurred
   * @param {number} addedCount Number of added items
   * @param {Array} removed Array of removed items
   * @return {void}
   * @private
   */
  function notifySplice(inst, array, path, index, addedCount, removed) {
    notifySplices(inst, array, path, [{
      index: index,
      addedCount: addedCount,
      removed: removed,
      object: array,
      type: 'splice'
    }]);
  }

  /**
   * Returns an upper-cased version of the string.
   *
   * @param {string} name String to uppercase
   * @return {string} Uppercased string
   * @private
   */
  function upper(name) {
    return name[0].toUpperCase() + name.substring(1);
  }

  /**
   * Element class mixin that provides meta-programming for Polymer's template
   * binding and data observation (collectively, "property effects") system.
   *
   * This mixin uses provides the following key static methods for adding
   * property effects to an element class:
   * - `addPropertyEffect`
   * - `createPropertyObserver`
   * - `createMethodObserver`
   * - `createNotifyingProperty`
   * - `createReadOnlyProperty`
   * - `createReflectedProperty`
   * - `createComputedProperty`
   * - `bindTemplate`
   *
   * Each method creates one or more property accessors, along with metadata
   * used by this mixin's implementation of `_propertiesChanged` to perform
   * the property effects.
   *
   * Underscored versions of the above methods also exist on the element
   * prototype for adding property effects on instances at runtime.
   *
   * Note that this mixin overrides several `PropertyAccessors` methods, in
   * many cases to maintain guarantees provided by the Polymer 1.x features;
   * notably it changes property accessors to be synchronous by default
   * whereas the default when using `PropertyAccessors` standalone is to be
   * async by default.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin TemplateStamp
   * @appliesMixin PropertyAccessors
   * @summary Element class mixin that provides meta-programming for Polymer's
   * template binding and data observation system.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */
  const PropertyEffects = dedupingMixin(superClass => {

    /**
     * @constructor
     * @implements {Polymer_PropertyAccessors}
     * @implements {Polymer_TemplateStamp}
     * @unrestricted
     * @private
     */
    const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));

    /**
     * @polymer
     * @mixinClass
     * @implements {Polymer_PropertyEffects}
     * @extends {propertyEffectsBase}
     * @unrestricted
     */
    class PropertyEffects extends propertyEffectsBase {

      constructor() {
        super();
        /** @type {boolean} */
        // Used to identify users of this mixin, ala instanceof
        this.__isPropertyEffectsClient = true;
        /** @type {number} */
        // NOTE: used to track re-entrant calls to `_flushProperties`
        // path changes dirty check against `__dataTemp` only during one "turn"
        // and are cleared when `__dataCounter` returns to 0.
        this.__dataCounter = 0;
        /** @type {boolean} */
        this.__dataClientsReady;
        /** @type {Array} */
        this.__dataPendingClients;
        /** @type {Object} */
        this.__dataToNotify;
        /** @type {Object} */
        this.__dataLinkedPaths;
        /** @type {boolean} */
        this.__dataHasPaths;
        /** @type {Object} */
        this.__dataCompoundStorage;
        /** @type {Polymer_PropertyEffects} */
        this.__dataHost;
        /** @type {!Object} */
        this.__dataTemp;
        /** @type {boolean} */
        this.__dataClientsInitialized;
        /** @type {!Object} */
        this.__data;
        /** @type {!Object|null} */
        this.__dataPending;
        /** @type {!Object} */
        this.__dataOld;
        /** @type {Object} */
        this.__computeEffects;
        /** @type {Object} */
        this.__reflectEffects;
        /** @type {Object} */
        this.__notifyEffects;
        /** @type {Object} */
        this.__propagateEffects;
        /** @type {Object} */
        this.__observeEffects;
        /** @type {Object} */
        this.__readOnly;
        /** @type {!TemplateInfo} */
        this.__templateInfo;
      }

      /**
       * @return {!Object<string, string>} Effect prototype property name map.
       */
      get PROPERTY_EFFECT_TYPES() {
        return TYPES;
      }

      /**
       * @override
       * @return {void}
       */
      _initializeProperties() {
        super._initializeProperties();
        hostStack.registerHost(this);
        this.__dataClientsReady = false;
        this.__dataPendingClients = null;
        this.__dataToNotify = null;
        this.__dataLinkedPaths = null;
        this.__dataHasPaths = false;
        // May be set on instance prior to upgrade
        this.__dataCompoundStorage = this.__dataCompoundStorage || null;
        this.__dataHost = this.__dataHost || null;
        this.__dataTemp = {};
        this.__dataClientsInitialized = false;
      }

      /**
       * Overrides `PropertyAccessors` implementation to provide a
       * more efficient implementation of initializing properties from
       * the prototype on the instance.
       *
       * @override
       * @param {Object} props Properties to initialize on the prototype
       * @return {void}
       */
      _initializeProtoProperties(props) {
        this.__data = Object.create(props);
        this.__dataPending = Object.create(props);
        this.__dataOld = {};
      }

      /**
       * Overrides `PropertyAccessors` implementation to avoid setting
       * `_setProperty`'s `shouldNotify: true`.
       *
       * @override
       * @param {Object} props Properties to initialize on the instance
       * @return {void}
       */
      _initializeInstanceProperties(props) {
        let readOnly = this[TYPES.READ_ONLY];
        for (let prop in props) {
          if (!readOnly || !readOnly[prop]) {
            this.__dataPending = this.__dataPending || {};
            this.__dataOld = this.__dataOld || {};
            this.__data[prop] = this.__dataPending[prop] = props[prop];
          }
        }
      }

      // Prototype setup ----------------------------------------

      /**
       * Equivalent to static `addPropertyEffect` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property that should trigger the effect
       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       */
      _addPropertyEffect(property, type, effect) {
        this._createPropertyAccessor(property, type == TYPES.READ_ONLY);
        // effects are accumulated into arrays per property based on type
        let effects = ensureOwnEffectMap(this, type)[property];
        if (!effects) {
          effects = this[type][property] = [];
        }
        effects.push(effect);
      }

      /**
       * Removes the given property effect.
       *
       * @override
       * @param {string} property Property the effect was associated with
       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @param {Object=} effect Effect metadata object to remove
       * @return {void}
       */
      _removePropertyEffect(property, type, effect) {
        let effects = ensureOwnEffectMap(this, type)[property];
        let idx = effects.indexOf(effect);
        if (idx >= 0) {
          effects.splice(idx, 1);
        }
      }

      /**
       * Returns whether the current prototype/instance has a property effect
       * of a certain type.
       *
       * @override
       * @param {string} property Property name
       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */
      _hasPropertyEffect(property, type) {
        let effects = this[type];
        return Boolean(effects && effects[property]);
      }

      /**
       * Returns whether the current prototype/instance has a "read only"
       * accessor for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */
      _hasReadOnlyEffect(property) {
        return this._hasPropertyEffect(property, TYPES.READ_ONLY);
      }

      /**
       * Returns whether the current prototype/instance has a "notify"
       * property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */
      _hasNotifyEffect(property) {
        return this._hasPropertyEffect(property, TYPES.NOTIFY);
      }

      /**
       * Returns whether the current prototype/instance has a "reflect to
       * attribute" property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */
      _hasReflectEffect(property) {
        return this._hasPropertyEffect(property, TYPES.REFLECT);
      }

      /**
       * Returns whether the current prototype/instance has a "computed"
       * property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */
      _hasComputedEffect(property) {
        return this._hasPropertyEffect(property, TYPES.COMPUTE);
      }

      // Runtime ----------------------------------------

      /**
       * Sets a pending property or path.  If the root property of the path in
       * question had no accessor, the path is set, otherwise it is enqueued
       * via `_setPendingProperty`.
       *
       * This function isolates relatively expensive functionality necessary
       * for the public API (`set`, `setProperties`, `notifyPath`, and property
       * change listeners via {{...}} bindings), such that it is only done
       * when paths enter the system, and not at every propagation step.  It
       * also sets a `__dataHasPaths` flag on the instance which is used to
       * fast-path slower path-matching code in the property effects host paths.
       *
       * `path` can be a path string or array of path parts as accepted by the
       * public API.
       *
       * @override
       * @param {string | !Array<number|string>} path Path to set
       * @param {*} value Value to set
       * @param {boolean=} shouldNotify Set to true if this change should
       *  cause a property notification event dispatch
       * @param {boolean=} isPathNotification If the path being set is a path
       *   notification of an already changed value, as opposed to a request
       *   to set and notify the change.  In the latter `false` case, a dirty
       *   check is performed and then the value is set to the path before
       *   enqueuing the pending property change.
       * @return {boolean} Returns true if the property/path was enqueued in
       *   the pending changes bag.
       * @protected
       */
      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {
        if (isPathNotification ||
            root(Array.isArray(path) ? path[0] : path) !== path) {
          // Dirty check changes being set to a path against the actual object,
          // since this is the entry point for paths into the system; from here
          // the only dirty checks are against the `__dataTemp` cache to prevent
          // duplicate work in the same turn only. Note, if this was a notification
          // of a change already set to a path (isPathNotification: true),
          // we always let the change through and skip the `set` since it was
          // already dirty checked at the point of entry and the underlying
          // object has already been updated
          if (!isPathNotification) {
            let old = get$1(this, path);
            path = /** @type {string} */ (set$2(this, path, value));
            // Use property-accessor's simpler dirty check
            if (!path || !super._shouldPropertyChange(path, value, old)) {
              return false;
            }
          }
          this.__dataHasPaths = true;
          if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {
            computeLinkedPaths(this, /**@type{string}*/ (path), value);
            return true;
          }
        } else {
          if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {
            return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);
          } else {
            this[path] = value;
          }
        }
        return false;
      }

      /**
       * Applies a value to a non-Polymer element/node's property.
       *
       * The implementation makes a best-effort at binding interop:
       * Some native element properties have side-effects when
       * re-setting the same value (e.g. setting `<input>.value` resets the
       * cursor position), so we do a dirty-check before setting the value.
       * However, for better interop with non-Polymer custom elements that
       * accept objects, we explicitly re-set object changes coming from the
       * Polymer world (which may include deep object changes without the
       * top reference changing), erring on the side of providing more
       * information.
       *
       * Users may override this method to provide alternate approaches.
       *
       * @override
       * @param {!Node} node The node to set a property on
       * @param {string} prop The property to set
       * @param {*} value The value to set
       * @return {void}
       * @protected
       */
      _setUnmanagedPropertyToNode(node, prop, value) {
        // It is a judgment call that resetting primitives is
        // "bad" and resettings objects is also "good"; alternatively we could
        // implement a whitelist of tag & property values that should never
        // be reset (e.g. <input>.value && <select>.value)
        if (value !== node[prop] || typeof value == 'object') {
          // Note, className needs style scoping so this needs wrapping.
          if (prop === 'className') {
            node = /** @type {!Node} */(wrap(node));
          }
          node[prop] = value;
        }
      }

      /**
       * Overrides the `PropertiesChanged` implementation to introduce special
       * dirty check logic depending on the property & value being set:
       *
       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})
       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`
       * 2. Object set to simple property (e.g. 'prop': {...})
       *    Stored in `__dataTemp` and `__data`, dirty checked against
       *    `__dataTemp` by default implementation of `_shouldPropertyChange`
       * 3. Primitive value set to simple property (e.g. 'prop': 42)
       *    Stored in `__data`, dirty checked against `__data`
       *
       * The dirty-check is important to prevent cycles due to two-way
       * notification, but paths and objects are only dirty checked against any
       * previous value set during this turn via a "temporary cache" that is
       * cleared when the last `_propertiesChanged` exits. This is so:
       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated
       *    due to array mutations like shift/unshift/splice; this is fine
       *    since path changes are dirty-checked at user entry points like `set`
       * b. dirty-checking for objects only lasts one turn to allow the user
       *    to mutate the object in-place and re-set it with the same identity
       *    and have all sub-properties re-propagated in a subsequent turn.
       *
       * The temp cache is not necessarily sufficient to prevent invalid array
       * paths, since a splice can happen during the same turn (with pathological
       * user code); we could introduce a "fixup" for temporarily cached array
       * paths if needed: https://github.com/Polymer/polymer/issues/4227
       *
       * @override
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @param {boolean=} shouldNotify True if property should fire notification
       *   event (applies only for `notify: true` properties)
       * @return {boolean} Returns true if the property changed
       */
      _setPendingProperty(property, value, shouldNotify) {
        let propIsPath = this.__dataHasPaths && isPath(property);
        let prevProps = propIsPath ? this.__dataTemp : this.__data;
        if (this._shouldPropertyChange(property, value, prevProps[property])) {
          if (!this.__dataPending) {
            this.__dataPending = {};
            this.__dataOld = {};
          }
          // Ensure old is captured from the last turn
          if (!(property in this.__dataOld)) {
            this.__dataOld[property] = this.__data[property];
          }
          // Paths are stored in temporary cache (cleared at end of turn),
          // which is used for dirty-checking, all others stored in __data
          if (propIsPath) {
            this.__dataTemp[property] = value;
          } else {
            this.__data[property] = value;
          }
          // All changes go into pending property bag, passed to _propertiesChanged
          this.__dataPending[property] = value;
          // Track properties that should notify separately
          if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {
            this.__dataToNotify = this.__dataToNotify || {};
            this.__dataToNotify[property] = shouldNotify;
          }
          return true;
        }
        return false;
      }

      /**
       * Overrides base implementation to ensure all accessors set `shouldNotify`
       * to true, for per-property notification tracking.
       *
       * @override
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @return {void}
       */
      _setProperty(property, value) {
        if (this._setPendingProperty(property, value, true)) {
          this._invalidateProperties();
        }
      }

      /**
       * Overrides `PropertyAccessor`'s default async queuing of
       * `_propertiesChanged`: if `__dataReady` is false (has not yet been
       * manually flushed), the function no-ops; otherwise flushes
       * `_propertiesChanged` synchronously.
       *
       * @override
       * @return {void}
       */
      _invalidateProperties() {
        if (this.__dataReady) {
          this._flushProperties();
        }
      }

      /**
       * Enqueues the given client on a list of pending clients, whose
       * pending property changes can later be flushed via a call to
       * `_flushClients`.
       *
       * @override
       * @param {Object} client PropertyEffects client to enqueue
       * @return {void}
       * @protected
       */
      _enqueueClient(client) {
        this.__dataPendingClients = this.__dataPendingClients || [];
        if (client !== this) {
          this.__dataPendingClients.push(client);
        }
      }

      /**
       * Overrides superclass implementation.
       *
       * @override
       * @return {void}
       * @protected
       */
      _flushProperties() {
        this.__dataCounter++;
        super._flushProperties();
        this.__dataCounter--;
      }

      /**
       * Flushes any clients previously enqueued via `_enqueueClient`, causing
       * their `_flushProperties` method to run.
       *
       * @override
       * @return {void}
       * @protected
       */
      _flushClients() {
        if (!this.__dataClientsReady) {
          this.__dataClientsReady = true;
          this._readyClients();
          // Override point where accessors are turned on; importantly,
          // this is after clients have fully readied, providing a guarantee
          // that any property effects occur only after all clients are ready.
          this.__dataReady = true;
        } else {
          this.__enableOrFlushClients();
        }
      }

      // NOTE: We ensure clients either enable or flush as appropriate. This
      // handles two corner cases:
      // (1) clients flush properly when connected/enabled before the host
      // enables; e.g.
      //   (a) Templatize stamps with no properties and does not flush and
      //   (b) the instance is inserted into dom and
      //   (c) then the instance flushes.
      // (2) clients enable properly when not connected/enabled when the host
      // flushes; e.g.
      //   (a) a template is runtime stamped and not yet connected/enabled
      //   (b) a host sets a property, causing stamped dom to flush
      //   (c) the stamped dom enables.
      __enableOrFlushClients() {
        let clients = this.__dataPendingClients;
        if (clients) {
          this.__dataPendingClients = null;
          for (let i=0; i < clients.length; i++) {
            let client = clients[i];
            if (!client.__dataEnabled) {
              client._enableProperties();
            } else if (client.__dataPending) {
              client._flushProperties();
            }
          }
        }
      }

      /**
       * Perform any initial setup on client dom. Called before the first
       * `_flushProperties` call on client dom and before any element
       * observers are called.
       *
       * @override
       * @return {void}
       * @protected
       */
      _readyClients() {
        this.__enableOrFlushClients();
      }

      /**
       * Sets a bag of property changes to this instance, and
       * synchronously processes all effects of the properties as a batch.
       *
       * Property names must be simple properties, not paths.  Batched
       * path propagation is not supported.
       *
       * @override
       * @param {Object} props Bag of one or more key-value pairs whose key is
       *   a property and value is the new value to set for that property.
       * @param {boolean=} setReadOnly When true, any private values set in
       *   `props` will be set. By default, `setProperties` will not set
       *   `readOnly: true` root properties.
       * @return {void}
       * @public
       */
      setProperties(props, setReadOnly) {
        for (let path in props) {
          if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {
            //TODO(kschaaf): explicitly disallow paths in setProperty?
            // wildcard observers currently only pass the first changed path
            // in the `info` object, and you could do some odd things batching
            // paths, e.g. {'foo.bar': {...}, 'foo': null}
            this._setPendingPropertyOrPath(path, props[path], true);
          }
        }
        this._invalidateProperties();
      }

      /**
       * Overrides `PropertyAccessors` so that property accessor
       * side effects are not enabled until after client dom is fully ready.
       * Also calls `_flushClients` callback to ensure client dom is enabled
       * that was not enabled as a result of flushing properties.
       *
       * @override
       * @return {void}
       */
      ready() {
        // It is important that `super.ready()` is not called here as it
        // immediately turns on accessors. Instead, we wait until `readyClients`
        // to enable accessors to provide a guarantee that clients are ready
        // before processing any accessors side effects.
        this._flushProperties();
        // If no data was pending, `_flushProperties` will not `flushClients`
        // so ensure this is done.
        if (!this.__dataClientsReady) {
          this._flushClients();
        }
        // Before ready, client notifications do not trigger _flushProperties.
        // Therefore a flush is necessary here if data has been set.
        if (this.__dataPending) {
          this._flushProperties();
        }
      }

      /**
       * Implements `PropertyAccessors`'s properties changed callback.
       *
       * Runs each class of effects for the batch of changed properties in
       * a specific order (compute, propagate, reflect, observe, notify).
       *
       * @override
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {void}
       */
      _propertiesChanged(currentProps, changedProps, oldProps) {
        // ----------------------------
        // let c = Object.getOwnPropertyNames(changedProps || {});
        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);
        // if (window.debug) { debugger; }
        // ----------------------------
        let hasPaths = this.__dataHasPaths;
        this.__dataHasPaths = false;
        // Compute properties
        runComputedEffects(this, changedProps, oldProps, hasPaths);
        // Clear notify properties prior to possible reentry (propagate, observe),
        // but after computing effects have a chance to add to them
        let notifyProps = this.__dataToNotify;
        this.__dataToNotify = null;
        // Propagate properties to clients
        this._propagatePropertyChanges(changedProps, oldProps, hasPaths);
        // Flush clients
        this._flushClients();
        // Reflect properties
        runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);
        // Observe properties
        runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);
        // Notify properties to host
        if (notifyProps) {
          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);
        }
        // Clear temporary cache at end of turn
        if (this.__dataCounter == 1) {
          this.__dataTemp = {};
        }
        // ----------------------------
        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);
        // ----------------------------
      }

      /**
       * Called to propagate any property changes to stamped template nodes
       * managed by this element.
       *
       * @override
       * @param {Object} changedProps Bag of changed properties
       * @param {Object} oldProps Bag of previous values for changed properties
       * @param {boolean} hasPaths True with `props` contains one or more paths
       * @return {void}
       * @protected
       */
      _propagatePropertyChanges(changedProps, oldProps, hasPaths) {
        if (this[TYPES.PROPAGATE]) {
          runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);
        }
        let templateInfo = this.__templateInfo;
        while (templateInfo) {
          runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,
            hasPaths, templateInfo.nodeList);
          templateInfo = templateInfo.nextTemplateInfo;
        }
      }

      /**
       * Aliases one data path as another, such that path notifications from one
       * are routed to the other.
       *
       * @override
       * @param {string | !Array<string|number>} to Target path to link.
       * @param {string | !Array<string|number>} from Source path to link.
       * @return {void}
       * @public
       */
      linkPaths(to, from) {
        to = normalize(to);
        from = normalize(from);
        this.__dataLinkedPaths = this.__dataLinkedPaths || {};
        this.__dataLinkedPaths[to] = from;
      }

      /**
       * Removes a data path alias previously established with `_linkPaths`.
       *
       * Note, the path to unlink should be the target (`to`) used when
       * linking the paths.
       *
       * @override
       * @param {string | !Array<string|number>} path Target path to unlink.
       * @return {void}
       * @public
       */
      unlinkPaths(path) {
        path = normalize(path);
        if (this.__dataLinkedPaths) {
          delete this.__dataLinkedPaths[path];
        }
      }

      /**
       * Notify that an array has changed.
       *
       * Example:
       *
       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];
       *     ...
       *     this.items.splice(1, 1, {name: 'Sam'});
       *     this.items.push({name: 'Bob'});
       *     this.notifySplices('items', [
       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,
       *         object: this.items, type: 'splice' },
       *       { index: 3, removed: [], addedCount: 1,
       *         object: this.items, type: 'splice'}
       *     ]);
       *
       * @param {string} path Path that should be notified.
       * @param {Array} splices Array of splice records indicating ordered
       *   changes that occurred to the array. Each record should have the
       *   following fields:
       *    * index: index at which the change occurred
       *    * removed: array of items that were removed from this index
       *    * addedCount: number of new items added at this index
       *    * object: a reference to the array in question
       *    * type: the string literal 'splice'
       *
       *   Note that splice records _must_ be normalized such that they are
       *   reported in index order (raw results from `Object.observe` are not
       *   ordered and must be normalized/merged before notifying).
       *
       * @override
       * @return {void}
       * @public
       */
      notifySplices(path, splices) {
        let info = {path: ''};
        let array = /** @type {Array} */(get$1(this, path, info));
        notifySplices(this, array, info.path, splices);
      }

      /**
       * Convenience method for reading a value from a path.
       *
       * Note, if any part in the path is undefined, this method returns
       * `undefined` (this method does not throw when dereferencing undefined
       * paths).
       *
       * @override
       * @param {(string|!Array<(string|number)>)} path Path to the value
       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)
       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
       *   bracketed expressions are not supported; string-based path parts
       *   *must* be separated by dots.  Note that when dereferencing array
       *   indices, the index may be used as a dotted part directly
       *   (e.g. `users.12.name` or `['users', 12, 'name']`).
       * @param {Object=} root Root object from which the path is evaluated.
       * @return {*} Value at the path, or `undefined` if any part of the path
       *   is undefined.
       * @public
       */
      get(path, root) {
        return get$1(root || this, path);
      }

      /**
       * Convenience method for setting a value to a path and notifying any
       * elements bound to the same path.
       *
       * Note, if any part in the path except for the last is undefined,
       * this method does nothing (this method does not throw when
       * dereferencing undefined paths).
       *
       * @override
       * @param {(string|!Array<(string|number)>)} path Path to the value
       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)
       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
       *   bracketed expressions are not supported; string-based path parts
       *   *must* be separated by dots.  Note that when dereferencing array
       *   indices, the index may be used as a dotted part directly
       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).
       * @param {*} value Value to set at the specified path.
       * @param {Object=} root Root object from which the path is evaluated.
       *   When specified, no notification will occur.
       * @return {void}
       * @public
       */
      set(path, value, root) {
        if (root) {
          set$2(root, path, value);
        } else {
          if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {
            if (this._setPendingPropertyOrPath(path, value, true)) {
              this._invalidateProperties();
            }
          }
        }
      }

      /**
       * Adds items onto the end of the array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.push`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {...*} items Items to push onto array
       * @return {number} New length of the array.
       * @public
       */
      push(path, ...items) {
        let info = {path: ''};
        let array = /** @type {Array}*/(get$1(this, path, info));
        let len = array.length;
        let ret = array.push(...items);
        if (items.length) {
          notifySplice(this, array, info.path, len, items.length, []);
        }
        return ret;
      }

      /**
       * Removes an item from the end of array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.pop`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @return {*} Item that was removed.
       * @public
       */
      pop(path) {
        let info = {path: ''};
        let array = /** @type {Array} */(get$1(this, path, info));
        let hadLength = Boolean(array.length);
        let ret = array.pop();
        if (hadLength) {
          notifySplice(this, array, info.path, array.length, 0, [ret]);
        }
        return ret;
      }

      /**
       * Starting from the start index specified, removes 0 or more items
       * from the array and inserts 0 or more new items in their place.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.splice`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {number} start Index from which to start removing/inserting.
       * @param {number=} deleteCount Number of items to remove.
       * @param {...*} items Items to insert into array.
       * @return {Array} Array of removed items.
       * @public
       */
      splice(path, start, deleteCount, ...items) {
        let info = {path : ''};
        let array = /** @type {Array} */(get$1(this, path, info));
        // Normalize fancy native splice handling of crazy start values
        if (start < 0) {
          start = array.length - Math.floor(-start);
        } else if (start) {
          start = Math.floor(start);
        }
        // array.splice does different things based on the number of arguments
        // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)
        // do different things. In the former, the whole array is cleared. In the
        // latter, no items are removed.
        // This means that we need to detect whether 1. one of the arguments
        // is actually passed in and then 2. determine how many arguments
        // we should pass on to the native array.splice
        //
        let ret;
        // Omit any additional arguments if they were not passed in
        if (arguments.length === 2) {
          ret = array.splice(start);
        // Either start was undefined and the others were defined, but in this
        // case we can safely pass on all arguments
        //
        // Note: this includes the case where none of the arguments were passed in,
        // e.g. this.splice('array'). However, if both start and deleteCount
        // are undefined, array.splice will not modify the array (as expected)
        } else {
          ret = array.splice(start, deleteCount, ...items);
        }
        // At the end, check whether any items were passed in (e.g. insertions)
        // or if the return array contains items (e.g. deletions).
        // Only notify if items were added or deleted.
        if (items.length || ret.length) {
          notifySplice(this, array, info.path, start, items.length, ret);
        }
        return ret;
      }

      /**
       * Removes an item from the beginning of array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.pop`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @return {*} Item that was removed.
       * @public
       */
      shift(path) {
        let info = {path: ''};
        let array = /** @type {Array} */(get$1(this, path, info));
        let hadLength = Boolean(array.length);
        let ret = array.shift();
        if (hadLength) {
          notifySplice(this, array, info.path, 0, 0, [ret]);
        }
        return ret;
      }

      /**
       * Adds items onto the beginning of the array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.push`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {...*} items Items to insert info array
       * @return {number} New length of the array.
       * @public
       */
      unshift(path, ...items) {
        let info = {path: ''};
        let array = /** @type {Array} */(get$1(this, path, info));
        let ret = array.unshift(...items);
        if (items.length) {
          notifySplice(this, array, info.path, 0, items.length, []);
        }
        return ret;
      }

      /**
       * Notify that a path has changed.
       *
       * Example:
       *
       *     this.item.user.name = 'Bob';
       *     this.notifyPath('item.user.name');
       *
       * @override
       * @param {string} path Path that should be notified.
       * @param {*=} value Value at the path (optional).
       * @return {void}
       * @public
       */
      notifyPath(path, value) {
        /** @type {string} */
        let propPath;
        if (arguments.length == 1) {
          // Get value if not supplied
          let info = {path: ''};
          value = get$1(this, path, info);
          propPath = info.path;
        } else if (Array.isArray(path)) {
          // Normalize path if needed
          propPath = normalize(path);
        } else {
          propPath = /** @type{string} */(path);
        }
        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {
          this._invalidateProperties();
        }
      }

      /**
       * Equivalent to static `createReadOnlyProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @param {boolean=} protectedSetter Creates a custom protected setter
       *   when `true`.
       * @return {void}
       * @protected
       */
      _createReadOnlyProperty(property, protectedSetter) {
        this._addPropertyEffect(property, TYPES.READ_ONLY);
        if (protectedSetter) {
          this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {
            this._setProperty(property, value);
          };
        }
      }

      /**
       * Equivalent to static `createPropertyObserver` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @param {string|function(*,*)} method Function or name of observer method
       *     to call
       * @param {boolean=} dynamicFn Whether the method name should be included as
       *   a dependency to the effect.
       * @return {void}
       * @protected
       */
      _createPropertyObserver(property, method, dynamicFn) {
        let info = { property, method, dynamicFn: Boolean(dynamicFn) };
        this._addPropertyEffect(property, TYPES.OBSERVE, {
          fn: runObserverEffect, info, trigger: {name: property}
        });
        if (dynamicFn) {
          this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {
            fn: runObserverEffect, info, trigger: {name: method}
          });
        }
      }

      /**
       * Equivalent to static `createMethodObserver` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       *   whether method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       */
      _createMethodObserver(expression, dynamicFn) {
        let sig = parseMethod(expression);
        if (!sig) {
          throw new Error("Malformed observer expression '" + expression + "'");
        }
        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);
      }

      /**
       * Equivalent to static `createNotifyingProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @return {void}
       * @protected
       */
      _createNotifyingProperty(property) {
        this._addPropertyEffect(property, TYPES.NOTIFY, {
          fn: runNotifyEffect,
          info: {
            eventName: camelToDashCase(property) + '-changed',
            property: property
          }
        });
      }

      /**
       * Equivalent to static `createReflectedProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @return {void}
       * @protected
       * @suppress {missingProperties} go/missingfnprops
       */
      _createReflectedProperty(property) {
        let attr = this.constructor.attributeNameForProperty(property);
        if (attr[0] === '-') {
          console.warn('Property ' + property + ' cannot be reflected to attribute ' +
            attr + ' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');
        } else {
          this._addPropertyEffect(property, TYPES.REFLECT, {
            fn: runReflectEffect,
            info: {
              attrName: attr
            }
          });
        }
      }

      /**
       * Equivalent to static `createComputedProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Name of computed property to set
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       *   whether method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       */
      _createComputedProperty(property, expression, dynamicFn) {
        let sig = parseMethod(expression);
        if (!sig) {
          throw new Error("Malformed computed expression '" + expression + "'");
        }
        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);
      }

      /**
       * Gather the argument values for a method specified in the provided array
       * of argument metadata.
       *
       * The `path` and `value` arguments are used to fill in wildcard descriptor
       * when the method is being called as a result of a path notification.
       *
       * @param {!Array<!MethodArg>} args Array of argument metadata
       * @param {string} path Property/path name that triggered the method effect
       * @param {Object} props Bag of current property changes
       * @return {Array<*>} Array of argument values
       * @private
       */
      _marshalArgs(args, path, props) {
        const data = this.__data;
        const values = [];
        for (let i=0, l=args.length; i<l; i++) {
          let {name, structured, wildcard, value, literal} = args[i];
          if (!literal) {
            if (wildcard) {
              const matches = isDescendant(name, path);
              const pathValue = getArgValue(data, props, matches ? path : name);
              value = {
                path: matches ? path : name,
                value: pathValue,
                base: matches ? get$1(data, name) : pathValue
              };
            } else {
              value = structured ? getArgValue(data, props, name) : data[name];
            }
          }
          values[i] = value;
        }
        return values;
      }

      // -- static class methods ------------

      /**
       * Ensures an accessor exists for the specified property, and adds
       * to a list of "property effects" that will run when the accessor for
       * the specified property is set.  Effects are grouped by "type", which
       * roughly corresponds to a phase in effect processing.  The effect
       * metadata should be in the following form:
       *
       *     {
       *       fn: effectFunction, // Reference to function to call to perform effect
       *       info: { ... }       // Effect metadata passed to function
       *       trigger: {          // Optional triggering metadata; if not provided
       *         name: string      // the property is treated as a wildcard
       *         structured: boolean
       *         wildcard: boolean
       *       }
       *     }
       *
       * Effects are called from `_propertiesChanged` in the following order by
       * type:
       *
       * 1. COMPUTE
       * 2. PROPAGATE
       * 3. REFLECT
       * 4. OBSERVE
       * 5. NOTIFY
       *
       * Effect functions are called with the following signature:
       *
       *     effectFunction(inst, path, props, oldProps, info, hasPaths)
       *
       * @param {string} property Property that should trigger the effect
       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       * @nocollapse
       */
      static addPropertyEffect(property, type, effect) {
        this.prototype._addPropertyEffect(property, type, effect);
      }

      /**
       * Creates a single-property observer for the given property.
       *
       * @param {string} property Property name
       * @param {string|function(*,*)} method Function or name of observer method to call
       * @param {boolean=} dynamicFn Whether the method name should be included as
       *   a dependency to the effect.
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createPropertyObserver(property, method, dynamicFn) {
        this.prototype._createPropertyObserver(property, method, dynamicFn);
      }

      /**
       * Creates a multi-property "method observer" based on the provided
       * expression, which should be a string in the form of a normal JavaScript
       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument
       * should correspond to a property or path in the context of this
       * prototype (or instance), or may be a literal string or number.
       *
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       * @return {void}
       *   whether method names should be included as a dependency to the effect.
       * @protected
       * @nocollapse
       */
      static createMethodObserver(expression, dynamicFn) {
        this.prototype._createMethodObserver(expression, dynamicFn);
      }

      /**
       * Causes the setter for the given property to dispatch `<property>-changed`
       * events to notify of changes to the property.
       *
       * @param {string} property Property name
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createNotifyingProperty(property) {
        this.prototype._createNotifyingProperty(property);
      }

      /**
       * Creates a read-only accessor for the given property.
       *
       * To set the property, use the protected `_setProperty` API.
       * To create a custom protected setter (e.g. `_setMyProp()` for
       * property `myProp`), pass `true` for `protectedSetter`.
       *
       * Note, if the property will have other property effects, this method
       * should be called first, before adding other effects.
       *
       * @param {string} property Property name
       * @param {boolean=} protectedSetter Creates a custom protected setter
       *   when `true`.
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createReadOnlyProperty(property, protectedSetter) {
        this.prototype._createReadOnlyProperty(property, protectedSetter);
      }

      /**
       * Causes the setter for the given property to reflect the property value
       * to a (dash-cased) attribute of the same name.
       *
       * @param {string} property Property name
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createReflectedProperty(property) {
        this.prototype._createReflectedProperty(property);
      }

      /**
       * Creates a computed property whose value is set to the result of the
       * method described by the given `expression` each time one or more
       * arguments to the method changes.  The expression should be a string
       * in the form of a normal JavaScript function signature:
       * `'methodName(arg1, [..., argn])'`
       *
       * @param {string} property Name of computed property to set
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
       *   method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createComputedProperty(property, expression, dynamicFn) {
        this.prototype._createComputedProperty(property, expression, dynamicFn);
      }

      /**
       * Parses the provided template to ensure binding effects are created
       * for them, and then ensures property accessors are created for any
       * dependent properties in the template.  Binding effects for bound
       * templates are stored in a linked list on the instance so that
       * templates can be efficiently stamped and unstamped.
       *
       * @param {!HTMLTemplateElement} template Template containing binding
       *   bindings
       * @return {!TemplateInfo} Template metadata object
       * @protected
       * @nocollapse
       */
      static bindTemplate(template) {
        return this.prototype._bindTemplate(template);
      }

      // -- binding ----------------------------------------------

      /**
       * Equivalent to static `bindTemplate` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * This method may be called on the prototype (for prototypical template
       * binding, to avoid creating accessors every instance) once per prototype,
       * and will be called with `runtimeBinding: true` by `_stampTemplate` to
       * create and link an instance of the template metadata associated with a
       * particular stamping.
       *
       * @override
       * @param {!HTMLTemplateElement} template Template containing binding
       *   bindings
       * @param {boolean=} instanceBinding When false (default), performs
       *   "prototypical" binding of the template and overwrites any previously
       *   bound template for the class. When true (as passed from
       *   `_stampTemplate`), the template info is instanced and linked into
       *   the list of bound templates.
       * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,
       *   this is an instance of the prototypical template info
       * @protected
       * @suppress {missingProperties} go/missingfnprops
       */
      _bindTemplate(template, instanceBinding) {
        let templateInfo = this.constructor._parseTemplate(template);
        let wasPreBound = this.__templateInfo == templateInfo;
        // Optimization: since this is called twice for proto-bound templates,
        // don't attempt to recreate accessors if this template was pre-bound
        if (!wasPreBound) {
          for (let prop in templateInfo.propertyEffects) {
            this._createPropertyAccessor(prop);
          }
        }
        if (instanceBinding) {
          // For instance-time binding, create instance of template metadata
          // and link into list of templates if necessary
          templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));
          templateInfo.wasPreBound = wasPreBound;
          if (!wasPreBound && this.__templateInfo) {
            let last = this.__templateInfoLast || this.__templateInfo;
            this.__templateInfoLast = last.nextTemplateInfo = templateInfo;
            templateInfo.previousTemplateInfo = last;
            return templateInfo;
          }
        }
        return this.__templateInfo = templateInfo;
      }

      /**
       * Adds a property effect to the given template metadata, which is run
       * at the "propagate" stage of `_propertiesChanged` when the template
       * has been bound to the element via `_bindTemplate`.
       *
       * The `effect` object should match the format in `_addPropertyEffect`.
       *
       * @param {Object} templateInfo Template metadata to add effect to
       * @param {string} prop Property that should trigger the effect
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       * @nocollapse
       */
      static _addTemplatePropertyEffect(templateInfo, prop, effect) {
        let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};
        hostProps[prop] = true;
        let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};
        let propEffects = effects[prop] = effects[prop] || [];
        propEffects.push(effect);
      }

      /**
       * Stamps the provided template and performs instance-time setup for
       * Polymer template features, including data bindings, declarative event
       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment
       * is returned containing the stamped DOM, ready for insertion into the
       * DOM.
       *
       * This method may be called more than once; however note that due to
       * `shadycss` polyfill limitations, only styles from templates prepared
       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped
       * to the shadow root and support CSS custom properties), and note that
       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,
       * any styles required by in runtime-stamped templates must be included
       * in the main element template.
       *
       * @param {!HTMLTemplateElement} template Template to stamp
       * @return {!StampedTemplate} Cloned template content
       * @override
       * @protected
       */
      _stampTemplate(template) {
        // Ensures that created dom is `_enqueueClient`'d to this element so
        // that it can be flushed on next call to `_flushProperties`
        hostStack.beginHosting(this);
        let dom = super._stampTemplate(template);
        hostStack.endHosting(this);
        let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));
        // Add template-instance-specific data to instanced templateInfo
        templateInfo.nodeList = dom.nodeList;
        // Capture child nodes to allow unstamping of non-prototypical templates
        if (!templateInfo.wasPreBound) {
          let nodes = templateInfo.childNodes = [];
          for (let n=dom.firstChild; n; n=n.nextSibling) {
            nodes.push(n);
          }
        }
        dom.templateInfo = templateInfo;
        // Setup compound storage, 2-way listeners, and dataHost for bindings
        setupBindings(this, templateInfo);
        // Flush properties into template nodes if already booted
        if (this.__dataReady) {
          runEffects(this, templateInfo.propertyEffects, this.__data, null,
            false, templateInfo.nodeList);
        }
        return dom;
      }

      /**
       * Removes and unbinds the nodes previously contained in the provided
       * DocumentFragment returned from `_stampTemplate`.
       *
       * @override
       * @param {!StampedTemplate} dom DocumentFragment previously returned
       *   from `_stampTemplate` associated with the nodes to be removed
       * @return {void}
       * @protected
       */
      _removeBoundDom(dom) {
        // Unlink template info
        let templateInfo = dom.templateInfo;
        if (templateInfo.previousTemplateInfo) {
          templateInfo.previousTemplateInfo.nextTemplateInfo =
            templateInfo.nextTemplateInfo;
        }
        if (templateInfo.nextTemplateInfo) {
          templateInfo.nextTemplateInfo.previousTemplateInfo =
            templateInfo.previousTemplateInfo;
        }
        if (this.__templateInfoLast == templateInfo) {
          this.__templateInfoLast = templateInfo.previousTemplateInfo;
        }
        templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;
        // Remove stamped nodes
        let nodes = templateInfo.childNodes;
        for (let i=0; i<nodes.length; i++) {
          let node = nodes[i];
          node.parentNode.removeChild(node);
        }
      }

      /**
       * Overrides default `TemplateStamp` implementation to add support for
       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`
       * array is added to `nodeInfo` and populated with binding metadata
       * with information capturing the binding target, and a `parts` array
       * with one or more metadata objects capturing the source(s) of the
       * binding.
       *
       * @param {Node} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */
      static _parseTemplateNode(node, templateInfo, nodeInfo) {
        // TODO(https://github.com/google/closure-compiler/issues/3240):
        //     Change back to just super.methodCall()
        let noted = propertyEffectsBase._parseTemplateNode.call(
          this, node, templateInfo, nodeInfo);
        if (node.nodeType === Node.TEXT_NODE) {
          let parts = this._parseBindings(node.textContent, templateInfo);
          if (parts) {
            // Initialize the textContent with any literal parts
            // NOTE: default to a space here so the textNode remains; some browsers
            // (IE) omit an empty textNode following cloneNode/importNode.
            node.textContent = literalFromParts(parts) || ' ';
            addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);
            noted = true;
          }
        }
        return noted;
      }

      /**
       * Overrides default `TemplateStamp` implementation to add support for
       * parsing bindings from attributes.  A `bindings`
       * array is added to `nodeInfo` and populated with binding metadata
       * with information capturing the binding target, and a `parts` array
       * with one or more metadata objects capturing the source(s) of the
       * binding.
       *
       * @param {Element} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @param {string} name Attribute name
       * @param {string} value Attribute value
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */
      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
        let parts = this._parseBindings(value, templateInfo);
        if (parts) {
          // Attribute or property
          let origName = name;
          let kind = 'property';
          // The only way we see a capital letter here is if the attr has
          // a capital letter in it per spec. In this case, to make sure
          // this binding works, we go ahead and make the binding to the attribute.
          if (capitalAttributeRegex.test(name)) {
            kind = 'attribute';
          } else if (name[name.length-1] == '$') {
            name = name.slice(0, -1);
            kind = 'attribute';
          }
          // Initialize attribute bindings with any literal parts
          let literal = literalFromParts(parts);
          if (literal && kind == 'attribute') {
            // Ensure a ShadyCSS template scoped style is not removed
            // when a class$ binding's initial literal value is set.
            if (name == 'class' && node.hasAttribute('class')) {
              literal += ' ' + node.getAttribute(name);
            }
            node.setAttribute(name, literal);
          }
          // Clear attribute before removing, since IE won't allow removing
          // `value` attribute if it previously had a value (can't
          // unconditionally set '' before removing since attributes with `$`
          // can't be set using setAttribute)
          if (node.localName === 'input' && origName === 'value') {
            node.setAttribute(origName, '');
          }
          // Remove annotation
          node.removeAttribute(origName);
          // Case hackery: attributes are lower-case, but bind targets
          // (properties) are case sensitive. Gambit is to map dash-case to
          // camel-case: `foo-bar` becomes `fooBar`.
          // Attribute bindings are excepted.
          if (kind === 'property') {
            name = dashToCamelCase(name);
          }
          addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);
          return true;
        } else {
          // TODO(https://github.com/google/closure-compiler/issues/3240):
          //     Change back to just super.methodCall()
          return propertyEffectsBase._parseTemplateNodeAttribute.call(
            this, node, templateInfo, nodeInfo, name, value);
        }
      }

      /**
       * Overrides default `TemplateStamp` implementation to add support for
       * binding the properties that a nested template depends on to the template
       * as `_host_<property>`.
       *
       * @param {Node} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */
      static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {
        // TODO(https://github.com/google/closure-compiler/issues/3240):
        //     Change back to just super.methodCall()
        let noted = propertyEffectsBase._parseTemplateNestedTemplate.call(
          this, node, templateInfo, nodeInfo);
        // Merge host props into outer template and add bindings
        let hostProps = nodeInfo.templateInfo.hostProps;
        let mode = '{';
        for (let source in hostProps) {
          let parts = [{ mode, source, dependencies: [source] }];
          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);
        }
        return noted;
      }

      /**
       * Called to parse text in a template (either attribute values or
       * textContent) into binding metadata.
       *
       * Any overrides of this method should return an array of binding part
       * metadata  representing one or more bindings found in the provided text
       * and any "literal" text in between.  Any non-literal parts will be passed
       * to `_evaluateBinding` when any dependencies change.  The only required
       * fields of each "part" in the returned array are as follows:
       *
       * - `dependencies` - Array containing trigger metadata for each property
       *   that should trigger the binding to update
       * - `literal` - String containing text if the part represents a literal;
       *   in this case no `dependencies` are needed
       *
       * Additional metadata for use by `_evaluateBinding` may be provided in
       * each part object as needed.
       *
       * The default implementation handles the following types of bindings
       * (one or more may be intermixed with literal strings):
       * - Property binding: `[[prop]]`
       * - Path binding: `[[object.prop]]`
       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`
       * - Two-way property or path bindings (supports negation):
       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`
       * - Inline computed method (supports negation):
       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`
       *
       * The default implementation uses a regular expression for best
       * performance. However, the regular expression uses a white-list of
       * allowed characters in a data-binding, which causes problems for
       * data-bindings that do use characters not in this white-list.
       *
       * Instead of updating the white-list with all allowed characters,
       * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)
       * that uses a state machine instead. This state machine is able to handle
       * all characters. However, it is slightly less performant, therefore we
       * extracted it into a separate optional mixin.
       *
       * @param {string} text Text to parse from attribute or textContent
       * @param {Object} templateInfo Current template metadata
       * @return {Array<!BindingPart>} Array of binding part metadata
       * @protected
       * @nocollapse
       */
      static _parseBindings(text, templateInfo) {
        let parts = [];
        let lastIndex = 0;
        let m;
        // Example: "literal1{{prop}}literal2[[!compute(foo,bar)]]final"
        // Regex matches:
        //        Iteration 1:  Iteration 2:
        // m[1]: '{{'          '[['
        // m[2]: ''            '!'
        // m[3]: 'prop'        'compute(foo,bar)'
        while ((m = bindingRegex.exec(text)) !== null) {
          // Add literal part
          if (m.index > lastIndex) {
            parts.push({literal: text.slice(lastIndex, m.index)});
          }
          // Add binding part
          let mode = m[1][0];
          let negate = Boolean(m[2]);
          let source = m[3].trim();
          let customEvent = false, notifyEvent = '', colon = -1;
          if (mode == '{' && (colon = source.indexOf('::')) > 0) {
            notifyEvent = source.substring(colon + 2);
            source = source.substring(0, colon);
            customEvent = true;
          }
          let signature = parseMethod(source);
          let dependencies = [];
          if (signature) {
            // Inline computed function
            let {args, methodName} = signature;
            for (let i=0; i<args.length; i++) {
              let arg = args[i];
              if (!arg.literal) {
                dependencies.push(arg);
              }
            }
            let dynamicFns = templateInfo.dynamicFns;
            if (dynamicFns && dynamicFns[methodName] || signature.static) {
              dependencies.push(methodName);
              signature.dynamicFn = true;
            }
          } else {
            // Property or path
            dependencies.push(source);
          }
          parts.push({
            source, mode, negate, customEvent, signature, dependencies,
            event: notifyEvent
          });
          lastIndex = bindingRegex.lastIndex;
        }
        // Add a final literal part
        if (lastIndex && lastIndex < text.length) {
          let literal = text.substring(lastIndex);
          if (literal) {
            parts.push({
              literal: literal
            });
          }
        }
        if (parts.length) {
          return parts;
        } else {
          return null;
        }
      }

      /**
       * Called to evaluate a previously parsed binding part based on a set of
       * one or more changed dependencies.
       *
       * @param {!Polymer_PropertyEffects} inst Element that should be used as
       *     scope for binding dependencies
       * @param {BindingPart} part Binding part metadata
       * @param {string} path Property/path that triggered this effect
       * @param {Object} props Bag of current property changes
       * @param {Object} oldProps Bag of previous values for changed properties
       * @param {boolean} hasPaths True with `props` contains one or more paths
       * @return {*} Value the binding part evaluated to
       * @protected
       * @nocollapse
       */
      static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {
        let value;
        if (part.signature) {
          value = runMethodEffect(inst, path, props, oldProps, part.signature);
        } else if (path != part.source) {
          value = get$1(inst, part.source);
        } else {
          if (hasPaths && isPath(path)) {
            value = get$1(inst, path);
          } else {
            value = inst.__data[path];
          }
        }
        if (part.negate) {
          value = !value;
        }
        return value;
      }

    }

    return PropertyEffects;
  });

  /**
   * Helper api for enqueuing client dom created by a host element.
   *
   * By default elements are flushed via `_flushProperties` when
   * `connectedCallback` is called. Elements attach their client dom to
   * themselves at `ready` time which results from this first flush.
   * This provides an ordering guarantee that the client dom an element
   * creates is flushed before the element itself (i.e. client `ready`
   * fires before host `ready`).
   *
   * However, if `_flushProperties` is called *before* an element is connected,
   * as for example `Templatize` does, this ordering guarantee cannot be
   * satisfied because no elements are connected. (Note: Bound elements that
   * receive data do become enqueued clients and are properly ordered but
   * unbound elements are not.)
   *
   * To maintain the desired "client before host" ordering guarantee for this
   * case we rely on the "host stack. Client nodes registers themselves with
   * the creating host element when created. This ensures that all client dom
   * is readied in the proper order, maintaining the desired guarantee.
   *
   * @private
   */
  class HostStack {
    constructor() {
      this.stack = [];
    }

    /**
     * @param {*} inst Instance to add to hostStack
     * @return {void}
     */
    registerHost(inst) {
      if (this.stack.length) {
        let host = this.stack[this.stack.length-1];
        host._enqueueClient(inst);
      }
    }

    /**
     * @param {*} inst Instance to begin hosting
     * @return {void}
     */
    beginHosting(inst) {
      this.stack.push(inst);
    }

    /**
     * @param {*} inst Instance to end hosting
     * @return {void}
     */
    endHosting(inst) {
      let stackLen = this.stack.length;
      if (stackLen && this.stack[stackLen-1] == inst) {
        this.stack.pop();
      }
    }
  }
  const hostStack = new HostStack();

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /**
   * Registers a class prototype for telemetry purposes.
   * @param {!PolymerElementConstructor} prototype Element prototype to register
   * @protected
   */
  function register(prototype) {
  }

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /**
   * Creates a copy of `props` with each property normalized such that
   * upgraded it is an object with at least a type property { type: Type}.
   *
   * @param {Object} props Properties to normalize
   * @return {Object} Copy of input `props` with normalized properties that
   * are in the form {type: Type}
   * @private
   */
  function normalizeProperties(props) {
    const output = {};
    for (let p in props) {
      const o = props[p];
      output[p] = (typeof o === 'function') ? {type: o} : o;
    }
    return output;
  }

  /**
   * Mixin that provides a minimal starting point to using the PropertiesChanged
   * mixin by providing a mechanism to declare properties in a static
   * getter (e.g. static get properties() { return { foo: String } }). Changes
   * are reported via the `_propertiesChanged` method.
   *
   * This mixin provides no specific support for rendering. Users are expected
   * to create a ShadowRoot and put content into it and update it in whatever
   * way makes sense. This can be done in reaction to properties changing by
   * implementing `_propertiesChanged`.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertiesChanged
   * @summary Mixin that provides a minimal starting point for using
   * the PropertiesChanged mixin by providing a declarative `properties` object.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */
  const PropertiesMixin = dedupingMixin(superClass => {

   /**
    * @constructor
    * @implements {Polymer_PropertiesChanged}
    * @private
    */
   const base = PropertiesChanged(superClass);

   /**
    * Returns the super class constructor for the given class, if it is an
    * instance of the PropertiesMixin.
    *
    * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor
    * @return {?PropertiesMixinConstructor} Super class constructor
    */
   function superPropertiesClass(constructor) {
     const superCtor = Object.getPrototypeOf(constructor);

     // Note, the `PropertiesMixin` class below only refers to the class
     // generated by this call to the mixin; the instanceof test only works
     // because the mixin is deduped and guaranteed only to apply once, hence
     // all constructors in a proto chain will see the same `PropertiesMixin`
     return (superCtor.prototype instanceof PropertiesMixin) ?
       /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;
   }

   /**
    * Returns a memoized version of the `properties` object for the
    * given class. Properties not in object format are converted to at
    * least {type}.
    *
    * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor
    * @return {Object} Memoized properties object
    */
   function ownProperties(constructor) {
     if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {
       let props = null;

       if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {
         const properties = constructor.properties;

         if (properties) {
          props = normalizeProperties(properties);
         }
       }

       constructor.__ownProperties = props;
     }
     return constructor.__ownProperties;
   }

   /**
    * @polymer
    * @mixinClass
    * @extends {base}
    * @implements {Polymer_PropertiesMixin}
    * @unrestricted
    */
   class PropertiesMixin extends base {

     /**
      * Implements standard custom elements getter to observes the attributes
      * listed in `properties`.
      * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
      * @nocollapse
      */
     static get observedAttributes() {
       if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {
         register(this.prototype);
         const props = this._properties;
         this.__observedAttributes = props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];
       }
       return this.__observedAttributes;
     }

     /**
      * Finalizes an element definition, including ensuring any super classes
      * are also finalized. This includes ensuring property
      * accessors exist on the element prototype. This method calls
      * `_finalizeClass` to finalize each constructor in the prototype chain.
      * @return {void}
      * @nocollapse
      */
     static finalize() {
       if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {
         const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));
         if (superCtor) {
           superCtor.finalize();
         }
         this.__finalized = true;
         this._finalizeClass();
       }
     }

     /**
      * Finalize an element class. This includes ensuring property
      * accessors exist on the element prototype. This method is called by
      * `finalize` and finalizes the class constructor.
      *
      * @protected
      * @nocollapse
      */
     static _finalizeClass() {
       const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));
       if (props) {
         /** @type {?} */ (this).createProperties(props);
       }
     }

     /**
      * Returns a memoized version of all properties, including those inherited
      * from super classes. Properties not in object format are converted to
      * at least {type}.
      *
      * @return {Object} Object containing properties for this class
      * @protected
      * @nocollapse
      */
     static get _properties() {
       if (!this.hasOwnProperty(
         JSCompiler_renameProperty('__properties', this))) {
         const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));
         this.__properties = Object.assign({},
           superCtor && superCtor._properties,
           ownProperties(/** @type {PropertiesMixinConstructor} */(this)));
       }
       return this.__properties;
     }

     /**
      * Overrides `PropertiesChanged` method to return type specified in the
      * static `properties` object for the given property.
      * @param {string} name Name of property
      * @return {*} Type to which to deserialize attribute
      *
      * @protected
      * @nocollapse
      */
     static typeForProperty(name) {
       const info = this._properties[name];
       return info && info.type;
     }

     /**
      * Overrides `PropertiesChanged` method and adds a call to
      * `finalize` which lazily configures the element's property accessors.
      * @override
      * @return {void}
      */
     _initializeProperties() {
       this.constructor.finalize();
       super._initializeProperties();
     }

     /**
      * Called when the element is added to a document.
      * Calls `_enableProperties` to turn on property system from
      * `PropertiesChanged`.
      * @suppress {missingProperties} Super may or may not implement the callback
      * @return {void}
      * @override
      */
     connectedCallback() {
       if (super.connectedCallback) {
         super.connectedCallback();
       }
       this._enableProperties();
     }

     /**
      * Called when the element is removed from a document
      * @suppress {missingProperties} Super may or may not implement the callback
      * @return {void}
      * @override
      */
     disconnectedCallback() {
       if (super.disconnectedCallback) {
         super.disconnectedCallback();
       }
     }

   }

   return PropertiesMixin;

  });

  /**
   * @fileoverview
   * @suppress {checkPrototypalTypes}
   * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
   * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
   * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
   * Google as part of the polymer project is also subject to an additional IP
   * rights grant found at http://polymer.github.io/PATENTS.txt
   */

  /**
   * Current Polymer version in Semver notation.
   * @type {string} Semver notation of the current version of Polymer.
   */
  const version = '3.3.1';

  const builtCSS = window.ShadyCSS && window.ShadyCSS['cssBuild'];

  /**
   * Element class mixin that provides the core API for Polymer's meta-programming
   * features including template stamping, data-binding, attribute deserialization,
   * and property change observation.
   *
   * Subclassers may provide the following static getters to return metadata
   * used to configure Polymer's features for the class:
   *
   * - `static get is()`: When the template is provided via a `dom-module`,
   *   users should return the `dom-module` id from a static `is` getter.  If
   *   no template is needed or the template is provided directly via the
   *   `template` getter, there is no need to define `is` for the element.
   *
   * - `static get template()`: Users may provide the template directly (as
   *   opposed to via `dom-module`) by implementing a static `template` getter.
   *   The getter must return an `HTMLTemplateElement`.
   *
   * - `static get properties()`: Should return an object describing
   *   property-related metadata used by Polymer features (key: property name
   *   value: object containing property metadata). Valid keys in per-property
   *   metadata include:
   *   - `type` (String|Number|Object|Array|...): Used by
   *     `attributeChangedCallback` to determine how string-based attributes
   *     are deserialized to JavaScript property values.
   *   - `notify` (boolean): Causes a change in the property to fire a
   *     non-bubbling event called `<property>-changed`. Elements that have
   *     enabled two-way binding to the property use this event to observe changes.
   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.
   *     To set a read-only property, use the private setter method
   *     `_setProperty(property, value)`.
   *   - `observer` (string): Observer method name that will be called when
   *     the property changes. The arguments of the method are
   *     `(value, previousValue)`.
   *   - `computed` (string): String describing method and dependent properties
   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
   *     Computed properties are read-only by default and can only be changed
   *     via the return value of the computing method.
   *
   * - `static get observers()`: Array of strings describing multi-property
   *   observer methods and their dependent properties (e.g.
   *   `'observeABC(a, b, c)'`).
   *
   * The base class provides default implementations for the following standard
   * custom element lifecycle callbacks; users may override these, but should
   * call the super method to ensure
   * - `constructor`: Run when the element is created or upgraded
   * - `connectedCallback`: Run each time the element is connected to the
   *   document
   * - `disconnectedCallback`: Run each time the element is disconnected from
   *   the document
   * - `attributeChangedCallback`: Run each time an attribute in
   *   `observedAttributes` is set or removed (note: this element's default
   *   `observedAttributes` implementation will automatically return an array
   *   of dash-cased attributes based on `properties`)
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertyEffects
   * @appliesMixin PropertiesMixin
   * @property rootPath {string} Set to the value of `rootPath`,
   *   which defaults to the main document path
   * @property importPath {string} Set to the value of the class's static
   *   `importPath` property, which defaults to the path of this element's
   *   `dom-module` (when `is` is used), but can be overridden for other
   *   import strategies.
   * @summary Element class mixin that provides the core API for Polymer's
   * meta-programming features.
   * @template T
   * @param {function(new:T)} superClass Class to apply mixin to.
   * @return {function(new:T)} superClass with mixin applied.
   */
  const ElementMixin = dedupingMixin(base => {
    /**
     * @constructor
     * @implements {Polymer_PropertyEffects}
     * @implements {Polymer_PropertiesMixin}
     * @extends {HTMLElement}
     * @private
     */
    const polymerElementBase = PropertiesMixin(PropertyEffects(base));

    /**
     * Returns a list of properties with default values.
     * This list is created as an optimization since it is a subset of
     * the list returned from `_properties`.
     * This list is used in `_initializeProperties` to set property defaults.
     *
     * @param {PolymerElementConstructor} constructor Element class
     * @return {PolymerElementProperties} Flattened properties for this class
     *   that have default values
     * @private
     */
    function propertyDefaults(constructor) {
      if (!constructor.hasOwnProperty(
        JSCompiler_renameProperty('__propertyDefaults', constructor))) {
        constructor.__propertyDefaults = null;
        let props = constructor._properties;
        for (let p in props) {
          let info = props[p];
          if ('value' in info) {
            constructor.__propertyDefaults = constructor.__propertyDefaults || {};
            constructor.__propertyDefaults[p] = info;
          }
        }
      }
      return constructor.__propertyDefaults;
    }

    /**
     * Returns a memoized version of the `observers` array.
     * @param {PolymerElementConstructor} constructor Element class
     * @return {Array} Array containing own observers for the given class
     * @protected
     */
    function ownObservers(constructor) {
      if (!constructor.hasOwnProperty(
        JSCompiler_renameProperty('__ownObservers', constructor))) {
        constructor.__ownObservers =
            constructor.hasOwnProperty(
                JSCompiler_renameProperty('observers', constructor)) ?
            /** @type {PolymerElementConstructor} */ (constructor).observers :
            null;
      }
      return constructor.__ownObservers;
    }

    /**
     * Creates effects for a property.
     *
     * Note, once a property has been set to
     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`
     * these values may not be changed. For example, a subclass cannot
     * alter these settings. However, additional `observers` may be added
     * by subclasses.
     *
     * The info object should contain property metadata as follows:
     *
     * * `type`: {function} type to which an attribute matching the property
     * is deserialized. Note the property is camel-cased from a dash-cased
     * attribute. For example, 'foo-bar' attribute is deserialized to a
     * property named 'fooBar'.
     *
     * * `readOnly`: {boolean} creates a readOnly property and
     * makes a private setter for the private of the form '_setFoo' for a
     * property 'foo',
     *
     * * `computed`: {string} creates a computed property. A computed property
     * is also automatically set to `readOnly: true`. The value is calculated
     * by running a method and arguments parsed from the given string. For
     * example 'compute(foo)' will compute a given property when the
     * 'foo' property changes by executing the 'compute' method. This method
     * must return the computed value.
     *
     * * `reflectToAttribute`: {boolean} If true, the property value is reflected
     * to an attribute of the same name. Note, the attribute is dash-cased
     * so a property named 'fooBar' is reflected as 'foo-bar'.
     *
     * * `notify`: {boolean} sends a non-bubbling notification event when
     * the property changes. For example, a property named 'foo' sends an
     * event named 'foo-changed' with `event.detail` set to the value of
     * the property.
     *
     * * observer: {string} name of a method that runs when the property
     * changes. The arguments of the method are (value, previousValue).
     *
     * Note: Users may want control over modifying property
     * effects via subclassing. For example, a user might want to make a
     * reflectToAttribute property not do so in a subclass. We've chosen to
     * disable this because it leads to additional complication.
     * For example, a readOnly effect generates a special setter. If a subclass
     * disables the effect, the setter would fail unexpectedly.
     * Based on feedback, we may want to try to make effects more malleable
     * and/or provide an advanced api for manipulating them.
     *
     * @param {!PolymerElement} proto Element class prototype to add accessors
     *   and effects to
     * @param {string} name Name of the property.
     * @param {Object} info Info object from which to create property effects.
     * Supported keys:
     * @param {Object} allProps Flattened map of all properties defined in this
     *   element (including inherited properties)
     * @return {void}
     * @private
     */
    function createPropertyFromConfig(proto, name, info, allProps) {
      // computed forces readOnly...
      if (info.computed) {
        info.readOnly = true;
      }
      // Note, since all computed properties are readOnly, this prevents
      // adding additional computed property effects (which leads to a confusing
      // setup where multiple triggers for setting a property)
      // While we do have `hasComputedEffect` this is set on the property's
      // dependencies rather than itself.
      if (info.computed) {
        if (proto._hasReadOnlyEffect(name)) {
          console.warn(`Cannot redefine computed property '${name}'.`);
        } else {
          proto._createComputedProperty(name, info.computed, allProps);
        }
      }
      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {
        proto._createReadOnlyProperty(name, !info.computed);
      } else if (info.readOnly === false && proto._hasReadOnlyEffect(name)) {
        console.warn(`Cannot make readOnly property '${name}' non-readOnly.`);
      }
      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {
        proto._createReflectedProperty(name);
      } else if (info.reflectToAttribute === false && proto._hasReflectEffect(name)) {
        console.warn(`Cannot make reflected property '${name}' non-reflected.`);
      }
      if (info.notify && !proto._hasNotifyEffect(name)) {
        proto._createNotifyingProperty(name);
      } else if (info.notify === false && proto._hasNotifyEffect(name)) {
        console.warn(`Cannot make notify property '${name}' non-notify.`);
      }
      // always add observer
      if (info.observer) {
        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);
      }
      // always create the mapping from attribute back to property for deserialization.
      proto._addPropertyToAttributeMap(name);
    }

    /**
     * Process all style elements in the element template. Styles with the
     * `include` attribute are processed such that any styles in
     * the associated "style modules" are included in the element template.
     * @param {PolymerElementConstructor} klass Element class
     * @param {!HTMLTemplateElement} template Template to process
     * @param {string} is Name of element
     * @param {string} baseURI Base URI for element
     * @private
     */
    function processElementStyles(klass, template, is, baseURI) {
      if (!builtCSS) {
        const templateStyles = template.content.querySelectorAll('style');
        const stylesWithImports = stylesFromTemplate(template);
        // insert styles from <link rel="import" type="css"> at the top of the template
        const linkedStyles = stylesFromModuleImports(is);
        const firstTemplateChild = template.content.firstElementChild;
        for (let idx = 0; idx < linkedStyles.length; idx++) {
          let s = linkedStyles[idx];
          s.textContent = klass._processStyleText(s.textContent, baseURI);
          template.content.insertBefore(s, firstTemplateChild);
        }
        // keep track of the last "concrete" style in the template we have encountered
        let templateStyleIndex = 0;
        // ensure all gathered styles are actually in this template.
        for (let i = 0; i < stylesWithImports.length; i++) {
          let s = stylesWithImports[i];
          let templateStyle = templateStyles[templateStyleIndex];
          // if the style is not in this template, it's been "included" and
          // we put a clone of it in the template before the style that included it
          if (templateStyle !== s) {
            s = s.cloneNode(true);
            templateStyle.parentNode.insertBefore(s, templateStyle);
          } else {
            templateStyleIndex++;
          }
          s.textContent = klass._processStyleText(s.textContent, baseURI);
        }
      }
      if (window.ShadyCSS) {
        window.ShadyCSS.prepareTemplate(template, is);
      }
    }

    /**
     * Look up template from dom-module for element
     *
     * @param {string} is Element name to look up
     * @return {?HTMLTemplateElement|undefined} Template found in dom module, or
     *   undefined if not found
     * @protected
     */
    function getTemplateFromDomModule(is) {
      let template = null;
      // Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed
      // when opted-in via allowTemplateFromDomModule
      if (is && (!strictTemplatePolicy )) {
        template = /** @type {?HTMLTemplateElement} */ (
            DomModule.import(is, 'template'));
      }
      return template;
    }

    /**
     * @polymer
     * @mixinClass
     * @unrestricted
     * @implements {Polymer_ElementMixin}
     * @extends {polymerElementBase}
     */
    class PolymerElement extends polymerElementBase {

      /**
       * Current Polymer version in Semver notation.
       * @type {string} Semver notation of the current version of Polymer.
       * @nocollapse
       */
      static get polymerElementVersion() {
        return version;
      }

      /**
       * Override of PropertiesMixin _finalizeClass to create observers and
       * find the template.
       * @return {void}
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */
      static _finalizeClass() {
        // TODO(https://github.com/google/closure-compiler/issues/3240):
        //     Change back to just super.methodCall()
        polymerElementBase._finalizeClass.call(this);
        const observers = ownObservers(this);
        if (observers) {
          this.createObservers(observers, this._properties);
        }
        this._prepareTemplate();
      }

      /** @nocollapse */
      static _prepareTemplate() {
        // note: create "working" template that is finalized at instance time
        let template = /** @type {PolymerElementConstructor} */ (this).template;
        if (template) {
          if (typeof template === 'string') {
            console.error('template getter must return HTMLTemplateElement');
            template = null;
          } else {
            template = template.cloneNode(true);
          }
        }

        /** @override */
        this.prototype._template = template;
      }

      /**
       * Override of PropertiesChanged createProperties to create accessors
       * and property effects for all of the properties.
       * @param {!Object} props .
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createProperties(props) {
        for (let p in props) {
          createPropertyFromConfig(
              /** @type {?} */ (this.prototype), p, props[p], props);
        }
      }

      /**
       * Creates observers for the given `observers` array.
       * Leverages `PropertyEffects` to create observers.
       * @param {Object} observers Array of observer descriptors for
       *   this class
       * @param {Object} dynamicFns Object containing keys for any properties
       *   that are functions and should trigger the effect when the function
       *   reference is changed
       * @return {void}
       * @protected
       * @nocollapse
       */
      static createObservers(observers, dynamicFns) {
        const proto = this.prototype;
        for (let i=0; i < observers.length; i++) {
          proto._createMethodObserver(observers[i], dynamicFns);
        }
      }

      /**
       * Returns the template that will be stamped into this element's shadow root.
       *
       * If a `static get is()` getter is defined, the default implementation
       * will return the first `<template>` in a `dom-module` whose `id`
       * matches this element's `is`.
       *
       * Users may override this getter to return an arbitrary template
       * (in which case the `is` getter is unnecessary). The template returned
       * must be an `HTMLTemplateElement`.
       *
       * Note that when subclassing, if the super class overrode the default
       * implementation and the subclass would like to provide an alternate
       * template via a `dom-module`, it should override this getter and
       * return `DomModule.import(this.is, 'template')`.
       *
       * If a subclass would like to modify the super class template, it should
       * clone it rather than modify it in place.  If the getter does expensive
       * work such as cloning/modifying a template, it should memoize the
       * template for maximum performance:
       *
       *   let memoizedTemplate;
       *   class MySubClass extends MySuperClass {
       *     static get template() {
       *       if (!memoizedTemplate) {
       *         memoizedTemplate = super.template.cloneNode(true);
       *         let subContent = document.createElement('div');
       *         subContent.textContent = 'This came from MySubClass';
       *         memoizedTemplate.content.appendChild(subContent);
       *       }
       *       return memoizedTemplate;
       *     }
       *   }
       *
       * @return {!HTMLTemplateElement|string} Template to be stamped
       * @nocollapse
       */
      static get template() {
        // Explanation of template-related properties:
        // - constructor.template (this getter): the template for the class.
        //     This can come from the prototype (for legacy elements), from a
        //     dom-module, or from the super class's template (or can be overridden
        //     altogether by the user)
        // - constructor._template: memoized version of constructor.template
        // - prototype._template: working template for the element, which will be
        //     parsed and modified in place. It is a cloned version of
        //     constructor.template, saved in _finalizeClass(). Note that before
        //     this getter is called, for legacy elements this could be from a
        //     _template field on the info object passed to Polymer(), a behavior,
        //     or set in registered(); once the static getter runs, a clone of it
        //     will overwrite it on the prototype as the working template.
        if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {
          this._template =
            // If user has put template on prototype (e.g. in legacy via registered
            // callback or info object), prefer that first
            this.prototype.hasOwnProperty(JSCompiler_renameProperty('_template', this.prototype)) ?
            this.prototype._template :
            // Look in dom-module associated with this element's is
            (getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/ (this).is) ||
            // Next look for superclass template (call the super impl this
            // way so that `this` points to the superclass)
            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template);
        }
        return this._template;
      }

      /**
       * Set the template.
       *
       * @param {!HTMLTemplateElement|string} value Template to set.
       * @nocollapse
       */
      static set template(value) {
        this._template = value;
      }

      /**
       * Path matching the url from which the element was imported.
       *
       * This path is used to resolve url's in template style cssText.
       * The `importPath` property is also set on element instances and can be
       * used to create bindings relative to the import path.
       *
       * For elements defined in ES modules, users should implement
       * `static get importMeta() { return import.meta; }`, and the default
       * implementation of `importPath` will  return `import.meta.url`'s path.
       * For elements defined in HTML imports, this getter will return the path
       * to the document containing a `dom-module` element matching this
       * element's static `is` property.
       *
       * Note, this path should contain a trailing `/`.
       *
       * @return {string} The import path for this element class
       * @suppress {missingProperties}
       * @nocollapse
       */
      static get importPath() {
        if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {
          const meta = this.importMeta;
          if (meta) {
            this._importPath = pathFromUrl(meta.url);
          } else {
            const module = DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);
            this._importPath = (module && module.assetpath) ||
              Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;
          }
        }
        return this._importPath;
      }

      constructor() {
        super();
        /** @type {HTMLTemplateElement} */
        this._template;
        /** @type {string} */
        this._importPath;
        /** @type {string} */
        this.rootPath;
        /** @type {string} */
        this.importPath;
        /** @type {StampedTemplate | HTMLElement | ShadowRoot} */
        this.root;
        /** @type {!Object<string, !Element>} */
        this.$;
      }

      /**
       * Overrides the default `PropertyAccessors` to ensure class
       * metaprogramming related to property accessors and effects has
       * completed (calls `finalize`).
       *
       * It also initializes any property defaults provided via `value` in
       * `properties` metadata.
       *
       * @return {void}
       * @override
       * @suppress {invalidCasts,missingProperties} go/missingfnprops
       */
      _initializeProperties() {
        this.constructor.finalize();
        // note: finalize template when we have access to `localName` to
        // avoid dependence on `is` for polyfilling styling.
        this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);
        super._initializeProperties();
        // set path defaults
        this.rootPath = rootPath;
        this.importPath = this.constructor.importPath;
        // apply property defaults...
        let p$ = propertyDefaults(this.constructor);
        if (!p$) {
          return;
        }
        for (let p in p$) {
          let info = p$[p];
          // Don't set default value if there is already an own property, which
          // happens when a `properties` property with default but no effects had
          // a property set (e.g. bound) by its host before upgrade
          if (!this.hasOwnProperty(p)) {
            let value = typeof info.value == 'function' ?
              info.value.call(this) :
              info.value;
            // Set via `_setProperty` if there is an accessor, to enable
            // initializing readOnly property defaults
            if (this._hasAccessor(p)) {
              this._setPendingProperty(p, value, true);
            } else {
              this[p] = value;
            }
          }
        }
      }

      /**
       * Gather style text for a style element in the template.
       *
       * @param {string} cssText Text containing styling to process
       * @param {string} baseURI Base URI to rebase CSS paths against
       * @return {string} The processed CSS text
       * @protected
       * @nocollapse
       */
      static _processStyleText(cssText, baseURI) {
        return resolveCss(cssText, baseURI);
      }

      /**
      * Configures an element `proto` to function with a given `template`.
      * The element name `is` and extends `ext` must be specified for ShadyCSS
      * style scoping.
      *
      * @param {string} is Tag name (or type extension name) for this element
      * @return {void}
      * @protected
      * @nocollapse
      */
      static _finalizeTemplate(is) {
        /** @const {HTMLTemplateElement} */
        const template = this.prototype._template;
        if (template && !template.__polymerFinalized) {
          template.__polymerFinalized = true;
          const importPath = this.importPath;
          const baseURI = importPath ? resolveUrl(importPath) : '';
          // e.g. support `include="module-name"`, and ShadyCSS
          processElementStyles(this, template, is, baseURI);
          this.prototype._bindTemplate(template);
        }
      }

      /**
       * Provides a default implementation of the standard Custom Elements
       * `connectedCallback`.
       *
       * The default implementation enables the property effects system and
       * flushes any pending properties, and updates shimmed CSS properties
       * when using the ShadyCSS scoping/custom properties polyfill.
       *
       * @override
       * @suppress {missingProperties, invalidCasts} Super may or may not
       *     implement the callback
       * @return {void}
       */
      connectedCallback() {
        if (window.ShadyCSS && this._template) {
          window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));
        }
        super.connectedCallback();
      }

      /**
       * Stamps the element template.
       *
       * @return {void}
       * @override
       */
      ready() {
        if (this._template) {
          this.root = this._stampTemplate(this._template);
          this.$ = this.root.$;
        }
        super.ready();
      }

      /**
       * Implements `PropertyEffects`'s `_readyClients` call. Attaches
       * element dom by calling `_attachDom` with the dom stamped from the
       * element's template via `_stampTemplate`. Note that this allows
       * client dom to be attached to the element prior to any observers
       * running.
       *
       * @return {void}
       * @override
       */
      _readyClients() {
        if (this._template) {
          this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));
        }
        // The super._readyClients here sets the clients initialized flag.
        // We must wait to do this until after client dom is created/attached
        // so that this flag can be checked to prevent notifications fired
        // during this process from being handled before clients are ready.
        super._readyClients();
      }


      /**
       * Attaches an element's stamped dom to itself. By default,
       * this method creates a `shadowRoot` and adds the dom to it.
       * However, this method may be overridden to allow an element
       * to put its dom in another location.
       *
       * @override
       * @throws {Error}
       * @suppress {missingReturn}
       * @param {StampedTemplate} dom to attach to the element.
       * @return {ShadowRoot} node to which the dom has been attached.
       */
      _attachDom(dom) {
        const n = wrap(this);
        if (n.attachShadow) {
          if (dom) {
            if (!n.shadowRoot) {
              n.attachShadow({mode: 'open', shadyUpgradeFragment: dom});
              n.shadowRoot.appendChild(dom);
            }
            return n.shadowRoot;
          }
          return null;
        } else {
          throw new Error('ShadowDOM not available. ' +
            // TODO(sorvell): move to compile-time conditional when supported
          'PolymerElement can create dom as children instead of in ' +
          'ShadowDOM by setting `this.root = this;\` before \`ready\`.');
        }
      }

      /**
       * When using the ShadyCSS scoping and custom property shim, causes all
       * shimmed styles in this element (and its subtree) to be updated
       * based on current custom property values.
       *
       * The optional parameter overrides inline custom property styles with an
       * object of properties where the keys are CSS properties, and the values
       * are strings.
       *
       * Example: `this.updateStyles({'--color': 'blue'})`
       *
       * These properties are retained unless a value of `null` is set.
       *
       * Note: This function does not support updating CSS mixins.
       * You can not dynamically change the value of an `@apply`.
       *
       * @override
       * @param {Object=} properties Bag of custom property key/values to
       *   apply to this element.
       * @return {void}
       * @suppress {invalidCasts}
       */
      updateStyles(properties) {
        if (window.ShadyCSS) {
          window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);
        }
      }

      /**
       * Rewrites a given URL relative to a base URL. The base URL defaults to
       * the original location of the document containing the `dom-module` for
       * this element. This method will return the same URL before and after
       * bundling.
       *
       * Note that this function performs no resolution for URLs that start
       * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
       * URL resolution, use `window.URL`.
       *
       * @override
       * @param {string} url URL to resolve.
       * @param {string=} base Optional base URL to resolve against, defaults
       * to the element's `importPath`
       * @return {string} Rewritten URL relative to base
       */
      resolveUrl(url, base) {
        if (!base && this.importPath) {
          base = resolveUrl(this.importPath);
        }
        return resolveUrl(url, base);
      }

      /**
       * Overrides `PropertyEffects` to add map of dynamic functions on
       * template info, for consumption by `PropertyEffects` template binding
       * code. This map determines which method templates should have accessors
       * created for them.
       *
       * @param {!HTMLTemplateElement} template Template
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} .
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */
      static _parseTemplateContent(template, templateInfo, nodeInfo) {
        templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;
        // TODO(https://github.com/google/closure-compiler/issues/3240):
        //     Change back to just super.methodCall()
        return polymerElementBase._parseTemplateContent.call(
          this, template, templateInfo, nodeInfo);
      }

      /**
       * Overrides `PropertyEffects` to warn on use of undeclared properties in
       * template.
       *
       * @param {Object} templateInfo Template metadata to add effect to
       * @param {string} prop Property that should trigger the effect
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       * @nocollapse
       */
      static _addTemplatePropertyEffect(templateInfo, prop, effect) {
        // TODO(https://github.com/google/closure-compiler/issues/3240):
        //     Change back to just super.methodCall()
        return polymerElementBase._addTemplatePropertyEffect.call(
          this, templateInfo, prop, effect);
      }

    }

    return PolymerElement;
  });

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /**
   * Class representing a static string value which can be used to filter
   * strings by asseting that they have been created via this class. The
   * `value` property returns the string passed to the constructor.
   */
  class LiteralString {
    constructor(string) {
      /** @type {string} */
      this.value = string.toString();
    }
    /**
     * @return {string} LiteralString string value
     * @override
     */
    toString() {
      return this.value;
    }
  }

  /**
   * @param {*} value Object to stringify into HTML
   * @return {string} HTML stringified form of `obj`
   */
  function literalValue(value) {
    if (value instanceof LiteralString) {
      return /** @type {!LiteralString} */(value).value;
    } else {
      throw new Error(
          `non-literal value passed to Polymer's htmlLiteral function: ${value}`
      );
    }
  }

  /**
   * @param {*} value Object to stringify into HTML
   * @return {string} HTML stringified form of `obj`
   */
  function htmlValue(value) {
    if (value instanceof HTMLTemplateElement) {
      return /** @type {!HTMLTemplateElement } */(value).innerHTML;
    } else if (value instanceof LiteralString) {
      return literalValue(value);
    } else {
      throw new Error(
          `non-template value passed to Polymer's html function: ${value}`);
    }
  }

  /**
   * A template literal tag that creates an HTML <template> element from the
   * contents of the string.
   *
   * This allows you to write a Polymer Template in JavaScript.
   *
   * Templates can be composed by interpolating `HTMLTemplateElement`s in
   * expressions in the JavaScript template literal. The nested template's
   * `innerHTML` is included in the containing template.  The only other
   * values allowed in expressions are those returned from `htmlLiteral`
   * which ensures only literal values from JS source ever reach the HTML, to
   * guard against XSS risks.
   *
   * All other values are disallowed in expressions to help prevent XSS
   * attacks; however, `htmlLiteral` can be used to compose static
   * string values into templates. This is useful to compose strings into
   * places that do not accept html, like the css text of a `style`
   * element.
   *
   * Example:
   *
   *     static get template() {
   *       return html`
   *         <style>:host{ content:"..." }</style>
   *         <div class="shadowed">${this.partialTemplate}</div>
   *         ${super.template}
   *       `;
   *     }
   *     static get partialTemplate() { return html`<span>Partial!</span>`; }
   *
   * @param {!ITemplateArray} strings Constant parts of tagged template literal
   * @param {...*} values Variable parts of tagged template literal
   * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement
   */
  const html$1 = function html(strings, ...values) {
    const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));
    template.innerHTML = values.reduce((acc, v, idx) =>
        acc + htmlValue(v) + strings[idx + 1], strings[0]);
    return template;
  };

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /**
   * Base class that provides the core API for Polymer's meta-programming
   * features including template stamping, data-binding, attribute deserialization,
   * and property change observation.
   *
   * @customElement
   * @polymer
   * @constructor
   * @implements {Polymer_ElementMixin}
   * @extends HTMLElement
   * @appliesMixin ElementMixin
   * @summary Custom element base class that provides the core API for Polymer's
   *   key meta-programming features including template stamping, data-binding,
   *   attribute deserialization, and property change observation
   */
  const PolymerElement = ElementMixin(HTMLElement);

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /**
   * @summary Collapse multiple callbacks into one invocation after a timer.
   */
  class Debouncer {
    constructor() {
      this._asyncModule = null;
      this._callback = null;
      this._timer = null;
    }
    /**
     * Sets the scheduler; that is, a module with the Async interface,
     * a callback and optional arguments to be passed to the run function
     * from the async module.
     *
     * @param {!AsyncInterface} asyncModule Object with Async interface.
     * @param {function()} callback Callback to run.
     * @return {void}
     */
    setConfig(asyncModule, callback) {
      this._asyncModule = asyncModule;
      this._callback = callback;
      this._timer = this._asyncModule.run(() => {
        this._timer = null;
        debouncerQueue.delete(this);
        this._callback();
      });
    }
    /**
     * Cancels an active debouncer and returns a reference to itself.
     *
     * @return {void}
     */
    cancel() {
      if (this.isActive()) {
        this._cancelAsync();
        // Canceling a debouncer removes its spot from the flush queue,
        // so if a debouncer is manually canceled and re-debounced, it
        // will reset its flush order (this is a very minor difference from 1.x)
        // Re-debouncing via the `debounce` API retains the 1.x FIFO flush order
        debouncerQueue.delete(this);
      }
    }
    /**
     * Cancels a debouncer's async callback.
     *
     * @return {void}
     */
    _cancelAsync() {
      if (this.isActive()) {
        this._asyncModule.cancel(/** @type {number} */(this._timer));
        this._timer = null;
      }
    }
    /**
     * Flushes an active debouncer and returns a reference to itself.
     *
     * @return {void}
     */
    flush() {
      if (this.isActive()) {
        this.cancel();
        this._callback();
      }
    }
    /**
     * Returns true if the debouncer is active.
     *
     * @return {boolean} True if active.
     */
    isActive() {
      return this._timer != null;
    }
    /**
     * Creates a debouncer if no debouncer is passed as a parameter
     * or it cancels an active debouncer otherwise. The following
     * example shows how a debouncer can be called multiple times within a
     * microtask and "debounced" such that the provided callback function is
     * called once. Add this method to a custom element:
     *
     * ```js
     * import {microTask} from '@polymer/polymer/lib/utils/async.js';
     * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';
     * // ...
     *
     * _debounceWork() {
     *   this._debounceJob = Debouncer.debounce(this._debounceJob,
     *       microTask, () => this._doWork());
     * }
     * ```
     *
     * If the `_debounceWork` method is called multiple times within the same
     * microtask, the `_doWork` function will be called only once at the next
     * microtask checkpoint.
     *
     * Note: In testing it is often convenient to avoid asynchrony. To accomplish
     * this with a debouncer, you can use `enqueueDebouncer` and
     * `flush`. For example, extend the above example by adding
     * `enqueueDebouncer(this._debounceJob)` at the end of the
     * `_debounceWork` method. Then in a test, call `flush` to ensure
     * the debouncer has completed.
     *
     * @param {Debouncer?} debouncer Debouncer object.
     * @param {!AsyncInterface} asyncModule Object with Async interface
     * @param {function()} callback Callback to run.
     * @return {!Debouncer} Returns a debouncer object.
     */
    static debounce(debouncer, asyncModule, callback) {
      if (debouncer instanceof Debouncer) {
        // Cancel the async callback, but leave in debouncerQueue if it was
        // enqueued, to maintain 1.x flush order
        debouncer._cancelAsync();
      } else {
        debouncer = new Debouncer();
      }
      debouncer.setConfig(asyncModule, callback);
      return debouncer;
    }
  }

  let debouncerQueue = new Set();

  /**
  @license
  Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at https://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at https://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at https://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at https://polymer.github.io/PATENTS.txt
  */

  /**
   * Promise that resolves when the gviz loader script is loaded, which
   * provides access to the Google Charts loading API.
   * @type {!Promise}
   */
  const loaderPromise = new Promise((resolve, reject) => {
    // Resolve immediately if the loader script has been added already and
    // `google.charts.load` is available. Adding the loader script twice throws
    // an error.
    if (typeof google !== 'undefined' && google.charts &&
        typeof google.charts.load === 'function') {
      resolve();
    } else {
      // Try to find existing loader script.
      let loaderScript = document.querySelector(
          'script[src="https://www.gstatic.cn/charts/loader.js"]');
      if (!loaderScript) {
        // If the loader is not present, add it.
        loaderScript =
            /** @type {!HTMLScriptElement} */ (document.createElement('script'));
        // Specify URL directly to pass JS compiler conformance checks.
        loaderScript.src = 'https://www.gstatic.cn/charts/loader.js';
        document.head.appendChild(loaderScript);
      }
      loaderScript.addEventListener('load', resolve);
      loaderScript.addEventListener('error', reject);
    }
  });

  /**
   * Loads Google Charts API with the selected settings or using defaults.
   *
   * The following settings are available:
   * - version: which version of library to load, default: 'current',
   * - packages: which chart packages to load, default: ['corechart'],
   * - language: what language to load library in, default: `lang` attribute on
   *   `<html>` or 'en' if not specified,
   * - mapsApiKey: key to use for maps API.
   *
   * @param {!LoadSettings=} settings
   * @return {!Promise}
   */
  async function load(settings = {}) {
    await loaderPromise;
    const {
      version = 'current',
      packages = ['corechart'],
      language = document.documentElement.lang || 'en',
      mapsApiKey,
    } = settings;
    return google.charts.load(version, {
      'packages': packages,
      'language': language,
      'mapsApiKey': mapsApiKey,
    });
  }

  /**
   * Creates a DataTable object for use with a chart.
   *
   * Multiple different argument types are supported. This is because the
   * result of loading the JSON data URL is fed into this function for
   * DataTable construction and its format is unknown.
   *
   * The data argument can be one of a few options:
   *
   * - null/undefined: An empty DataTable is created. Columns must be added
   * - !DataTable: The object is simply returned
   * - {{cols: !Array, rows: !Array}}: A DataTable in object format
   * - {{cols: !Array}}: A DataTable in object format without rows
   * - !Array<!Array>: A DataTable in 2D array format
   *
   * Un-supported types:
   *
   * - Empty !Array<!Array>: (e.g. `[]`) While technically a valid data
   *   format, this is rejected as charts will not render empty DataTables.
   *   DataTables must at least have columns specified. An empty array is most
   *   likely due to a bug or bad data. If one wants an empty DataTable, pass
   *   no arguments.
   * - Anything else
   *
   * See <a href="https://developers.google.com/chart/interactive/docs/reference#datatable-class">the docs</a> for more details.
   *
   * @param {!Array|{cols: !Array, rows: (!Array<!Array>|undefined)}|undefined} data
   *     the data with which we should use to construct the new DataTable object
   * @return {!Promise<!google.visualization.DataTable>} promise for the created DataTable
   */
  async function dataTable(data) {
    // Ensure that `google.visualization` namespace is added to the document.
    await load();
    if (data == null) {
      return new google.visualization.DataTable();
    } else if (data.getNumberOfRows) {
      // Data is already a DataTable
      return /** @type {!google.visualization.DataTable} */ (data);
    } else if (data.cols) {  // data.rows may also be specified
      // Data is in the form of object DataTable structure
      return new google.visualization.DataTable(data);
    } else if (data.length > 0) {
      // Data is in the form of a two dimensional array.
      return google.visualization.arrayToDataTable(data);
    } else if (data.length === 0) {
      // Chart data was empty.
      // We throw instead of creating an empty DataTable because most
      // (if not all) charts will render a sticky error in this situation.
      throw new Error('Data was empty.');
      }
    throw new Error('Data format was not recognized.');
  }

  /**
   * Creates new `ChartWrapper`.
   * @param {!Element} container Element in which the chart will be drawn
   * @return {!Promise<!google.visualization.ChartWrapper>}
   */
  async function createChartWrapper(container) {
    // Ensure that `google.visualization` namespace is added to the document.
    await load();
    return new google.visualization.ChartWrapper({'container': container});
  }

  /**
  @license
  Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at https://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at https://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at https://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at https://polymer.github.io/PATENTS.txt
  */

  const DEFAULT_EVENTS = ['ready', 'select'];

  /**
   * Constructor names for supported chart types.
   *
   * `ChartWrapper` expects a constructor name and assumes `google.visualization`
   *  as the default namespace.
   *
   * @type {!Object<string, (string|undefined)>}
   */
  const CHART_TYPES = {
    'area': 'AreaChart',
    'bar': 'BarChart',
    'md-bar': 'google.charts.Bar',
    'bubble': 'BubbleChart',
    'calendar': 'Calendar',
    'candlestick': 'CandlestickChart',
    'column': 'ColumnChart',
    'combo': 'ComboChart',
    'gauge': 'Gauge',
    'geo': 'GeoChart',
    'histogram': 'Histogram',
    'line': 'LineChart',
    'md-line': 'google.charts.Line',
    'org': 'OrgChart',
    'pie': 'PieChart',
    'sankey': 'Sankey',
    'scatter': 'ScatterChart',
    'md-scatter': 'google.charts.Scatter',
    'stepped-area': 'SteppedAreaChart',
    'table': 'Table',
    'timeline': 'Timeline',
    'treemap': 'TreeMap',
    'wordtree': 'WordTree',
  };

  /**
  `google-chart` encapsulates Google Charts as a web component, allowing you to easily visualize
  data. From simple line charts to complex hierarchical tree maps, the chart element provides a
  number of ready-to-use chart types.

      <google-chart
        type='pie'
        options='{"title": "Distribution of days in 2001Q1"}'
        cols='[{"label":"Month", "type":"string"}, {"label":"Days", "type":"number"}]'
        rows='[["Jan", 31],["Feb", 28],["Mar", 31]]'>
      </google-chart>

  Note: if you're passing JSON as attributes, single quotes are necessary to be valid JSON.
  See https://www.polymer-project.org/1.0/docs/devguide/properties#configuring-object-and-array-properties.

  Height and width are specified as style attributes:

      google-chart {
        height: 300px;
        width: 50em;
      }

  Data can be provided in one of three ways:

  - Via the `cols` and `rows` attributes:

        cols='[{"label":"Mth", "type":"string"}, {"label":"Days", "type":"number"}]'
        rows='[["Jan", 31],["Feb", 28],["Mar", 31]]'

  - Via the `data` attribute, passing in the data directly:

        data='[["Month", "Days"], ["Jan", 31], ["Feb", 28], ["Mar", 31]]'

  - Via the `data` attribute, passing in the URL to a resource containing the
    data, in JSON format:

        data='http://example.com/chart-data.json'

  - Via the `data` attribute, passing in a Google DataTable object:

        data='{{dataTable}}'

  - Via the `view` attribute, passing in a Google DataView object:

        view='{{dataView}}'

  You can display the charts in locales other than "en" by setting the `lang` attribute
  on the `html` tag of your document.

      <html lang="ja">

  @demo demo/index.html
  */
  class GoogleChart extends PolymerElement {
    static get template() {
      return html$1`
      <style>
        :host {
          display: -webkit-flex;
          display: -ms-flex;
          display: flex;
          margin: 0;
          padding: 0;
          width: 400px;
          height: 300px;
        }

        :host([hidden]) {
          display: none;
        }

        :host([type="gauge"]) {
          width: 300px;
          height: 300px;
        }

        #chartdiv {
          width: 100%;
        }

        /* Workaround for slow initial ready event for tables. */
        .google-visualization-table-loadtest {
          padding-left: 6px;
        }
      </style>
      <div id="styles"></div>
      <div id="chartdiv"></div>
    `;
    }

    /**
     * Fired after a chart type is rendered and ready for interaction.
     *
     * @event google-chart-ready
     * @param {{chart: !Object}} The raw chart object.
     */

    /**
     * Fired when the user makes a selection in the chart.
     *
     * @event google-chart-select
     * @param {{chart: !Object}} The raw chart object.
     */

    /** Polymer element properties. */
    static get properties() {
      return {
        type: {
          type: String,
          observer: GoogleChart.prototype._typeChanged,
        },
        events: Array,
        options: Object,
        cols: {
          type: Array,
          observer: GoogleChart.prototype._rowsOrColumnsChanged,
        },
        rows: {
          type: Array,
          observer: GoogleChart.prototype._rowsOrColumnsChanged,
        },
        data: {
          // Note: type: String, because it is parsed manually in the observer.
          type: String,
          observer: GoogleChart.prototype._dataChanged,
        },
        view: {
          type: Object,
          observer: GoogleChart.prototype._viewChanged,
        },
        selection: {
          type: Array,
          notify: true,
          observer: GoogleChart.prototype._setSelection,
        },
        drawn: {
          type: Boolean,
          readOnly: true,
        },
        _data: Object,
      };
    }

    static get observers() {
      return [
        'redraw(_data, options.*)',
      ];
    }

    constructor() {
      super();

      /**
       * Sets the type of the chart.
       *
       * Should be one of:
       * - `area`
       * - `(md-)bar`
       * - `bubble`
       * - `calendar`
       * - `candlestick`
       * - `column`
       * - `combo`
       * - `gauge`
       * - `geo`
       * - `histogram`
       * - `(md-)line`
       * - `org`
       * - `pie`
       * - `sankey`
       * - `(md-)scatter`
       * - `stepped-area`
       * - `table`
       * - `timeline`
       * - `treemap`
       * - `wordtree`
       *
       * See <a href="https://google-developers.appspot.com/chart/interactive/docs/gallery">Google Visualization API reference (Chart Gallery)</a>
       * for details.
       *
       * @type {string}
       */
      this.type = 'column';

      /**
       * Enumerates the chart events that should be fired.
       *
       * Charts support a variety of events. By default, this element only
       * fires on `ready` and `select`. If you would like to be notified of
       * other chart events, use this property to list them.
       * Events `ready` and `select` are always fired.
       *
       * Changes to this property are _not_ observed. Events are attached only
       * at chart construction time.
       *
       * @type {!Array<string>}
       */
      this.events = [];

      /**
       * Sets the options for the chart.
       *
       * Example:
       * <pre>{
       *   title: "Chart title goes here",
       *   hAxis: {title: "Categories"},
       *   vAxis: {title: "Values", minValue: 0, maxValue: 2},
       *   legend: "none"
       * };</pre>
       * See <a href="https://google-developers.appspot.com/chart/interactive/docs/gallery">Google Visualization API reference (Chart Gallery)</a>
       * for the options available to each chart type.
       *
       * This property is observed via a deep object observer.
       * If you would like to make changes to a sub-property, be sure to use the
       * Polymer method `set`: `googleChart.set('options.vAxis.logScale', true)`
       * (Note: Missing parent properties are not automatically created.)
       *
       * @type {!Object|undefined}
       */
      this.options = undefined;

      /**
       * Sets the data columns for this object.
       *
       * When specifying data with `cols` you must also specify `rows`, and
       * not specify `data`.
       *
       * Example:
       * <pre>[{label: "Categories", type: "string"},
       *  {label: "Value", type: "number"}]</pre>
       * See <a href="https://google-developers.appspot.com/chart/interactive/docs/reference#DataTable_addColumn">Google Visualization API reference (addColumn)</a>
       * for column definition format.
       *
       * @type {!Array|undefined}
       */
      this.cols = undefined;

      /**
       * Sets the data rows for this object.
       *
       * When specifying data with `rows` you must also specify `cols`, and
       * not specify `data`.
       *
       * Example:
       * <pre>[["Category 1", 1.0],
       *  ["Category 2", 1.1]]</pre>
       * See <a href="https://google-developers.appspot.com/chart/interactive/docs/reference#addrow">Google Visualization API reference (addRow)</a>
       * for row format.
       *
       * @type {!Array<!Array>|undefined}
       */
      this.rows = undefined;

      /**
       * Sets the entire dataset for this object.
       * Can be used to provide the data directly, or to provide a URL from
       * which to request the data.
       *
       * The data format can be a two-dimensional array or the DataTable format
       * expected by Google Charts.
       * See <a href="https://google-developers.appspot.com/chart/interactive/docs/reference#DataTable">Google Visualization API reference (DataTable constructor)</a>
       * for data table format details.
       *
       * When specifying data with `data` you must not specify `cols` or `rows`.
       *
       * Example:
       * <pre>[["Categories", "Value"],
       *  ["Category 1", 1.0],
       *  ["Category 2", 1.1]]</pre>
       *
       * @type {!google.visualization.DataTable|
       *        !Array<!Array>|
       *        {cols: !Array, rows: (!Array<!Array>|undefined)}|
       *        string|
       *        undefined}
       */
      this.data = undefined;

      /**
       * Sets the entire dataset for this object to a Google DataView.
       *
       * See <a href="https://google-developers.appspot.com/chart/interactive/docs/reference#dataview-class">Google Visualization API reference (DataView)</a>
       * for details.
       *
       * When specifying data with `view` you must not specify `data`, `cols` or `rows`.
       *
       * @type {!google.visualization.DataView|undefined}
       */
      this.view = undefined;

      /**
       * Selected datapoint(s) in the chart.
       *
       * An array of objects, each with a numeric row and/or column property.
       * `row` and `column` are the zero-based row or column number of an item
       * in the data table to select.
       *
       * To select a whole column, set row to null;
       * to select a whole row, set column to null.
       *
       * Example:
       * <pre>
       *   [{row:0,column:1}, {row:1, column:null}]
       * </pre>
       *
       * @type {!Array|undefined}
       */
      this.selection = undefined;


      /**
       * Whether the chart is currently rendered.
       *
       * @type {boolean}
       */
      this.drawn;
      this._setDrawn(false);

      /**
       * Internal data displayed on the chart.
       *
       * This property has protected visibility because it is used from an observer.
       *
       * @protected {!google.visualization.DataTable|
       *             !google.visualization.DataView|
       *             undefined}
       */
      this._data = undefined;

      /**
       * Internal chart object.
       * @private {!google.visualization.ChartWrapper|null}
       */
      this._chartWrapper = null;

      /** @private {?Debouncer} */
      this._redrawDebouncer = null;
    }

    /** @override */
    ready() {
      super.ready();
      createChartWrapper(this.$.chartdiv).then((chartWrapper) => {
        this._chartWrapper = chartWrapper;
        this._typeChanged();
        google.visualization.events.addListener(chartWrapper, 'ready', () => {
          this._setDrawn(true);
        });
        google.visualization.events.addListener(chartWrapper, 'select', () => {
          this.selection = chartWrapper.getChart().getSelection();
        });
        this._propagateEvents(DEFAULT_EVENTS, chartWrapper);
      });
    }

    /** Reacts to chart type change. */
    _typeChanged() {
      if (this._chartWrapper == null) return;
      this._chartWrapper.setChartType(CHART_TYPES[this.type] || this.type);
      const lastChart = this._chartWrapper.getChart();
      google.visualization.events.addOneTimeListener(this._chartWrapper, 'ready', () => {
        const chart = this._chartWrapper.getChart();
        if (chart !== lastChart) {
          this._propagateEvents(this.events.filter((eventName) => !DEFAULT_EVENTS.includes(eventName)), chart);
        }
        if (!this.$.styles.children.length) {
          this._localizeGlobalStylesheets();
        }
        if (this.selection) {
          this._setSelection();
        }
      });
      this.redraw();
    }

    /**
     * Adds listeners to propagate events from the chart.
     *
     * @param {!Array<string>} events
     * @private
     */
    _propagateEvents(events, eventTarget) {
      for (const eventName of events) {
        google.visualization.events.addListener(eventTarget, eventName, (event) => {
          this.dispatchEvent(new CustomEvent(`google-chart-${eventName}`, {
            bubbles: true,
            composed: true,
            detail: {
              chart: this._chartWrapper.getChart(),
              data: event,
            }}));
        });
      }
    }

    /** Sets the selectiton on the chart. */
    _setSelection() {
      if (this._chartWrapper == null) return;
      const chart = this._chartWrapper.getChart();
      if (chart == null) return;
      if (chart.setSelection) {
        // Workaround for timeline chart which emits select event on setSelection.
        // See issue #256.
        if (this.type === 'timeline') {
          const oldSelection = JSON.stringify(chart.getSelection());
          const newSelection = JSON.stringify(this.selection);
          if (newSelection === oldSelection) return;
        }
        chart.setSelection(this.selection);
      }
    }

    /**
     * Redraws the chart.
     *
     * Called automatically when data/type/selection attributes change.
     * Call manually to handle view updates, page resizes, etc.
     */
    redraw() {
      if (this._chartWrapper == null || this._data == null) return;
      this._chartWrapper.setDataTable(this._data);
      this._chartWrapper.setOptions(this.options || {});

      this._setDrawn(false);
      this._redrawDebouncer = Debouncer.debounce(this._redrawDebouncer, timeOut.after(5), () => {
        this._chartWrapper.draw();
      });
    }

    /**
     * Returns the chart serialized as an image URI.
     *
     * Call this after the chart is drawn (google-chart-ready event).
     *
     * @return {?string} Returns image URI.
     */
    get imageURI() {
      if (this._chartWrapper == null) return null;
      const chart = this._chartWrapper.getChart();
      return chart && chart.getImageURI();
    }

    /** Handles changes to the `view` attribute. */
    _viewChanged() {
      if (!this.view) { return; }
      this._data = this.view;
    }

    /** Handles changes to the rows & columns attributes. */
    async _rowsOrColumnsChanged() {
      const {rows, cols} = this;
      if (!rows || !cols) return;
      try {
        const dt = await dataTable({cols});
        dt.addRows(rows);
        this._data = dt;
      } catch (reason) {
        this.$.chartdiv.textContent = reason;
      }
    }

    /**
     * Handles changes to the `data` attribute.
     *
     * @param {
     *     !google.visualization.DataTable|
     *     !Array<!Array>|
     *     {cols: !Array, rows: (!Array<!Array>|undefined)}|
     *     string|
     *     undefined} data The new data value
     */
    _dataChanged(data) {
      var dataPromise;
      if (!data) { return; }

      var isString = false;

      // Polymer 2 will not call observer if type:Object is set and fails, so
      // we must parse the string ourselves.
      try {
        /**
         * @suppress {checkTypes} `JSON.parse` expects a string but here it tries to deserialize
         * the value of the `data` property which might be a serialized array.
         */
        data = JSON.parse(data);
      } catch (e) {
        isString = typeof data == 'string' || data instanceof String;
      }

      if (isString) {
        // Load data asynchronously, from external URL.
        dataPromise = fetch(data).then((response) => response.json());
      } else {
        // Data is all ready to be processed.
        dataPromise = Promise.resolve(data);
      }
      dataPromise.then(dataTable).then((data) => {
        this._data = data;
      });
    }

    /**
     * Queries global document head for google charts link#load-css-* and clones
     * them into the local root's div#styles element for shadow dom support.
     *
     * @private
     */
    _localizeGlobalStylesheets() {
      // get all gchart stylesheets
      var stylesheets = document.head
          .querySelectorAll('link[rel="stylesheet"][type="text/css"]');

      var stylesheetsArray = Array.from(stylesheets);

      for (var i = 0; i < stylesheetsArray.length; i++) {
        var sheetLinkEl = stylesheetsArray[i];
        var isGchartStylesheet = sheetLinkEl.id.indexOf('load-css-') == 0;

        if (isGchartStylesheet) {
          // clone necessary stylesheet attributes
          var clonedLinkEl = document.createElement('link');
          clonedLinkEl.setAttribute('rel', 'stylesheet');
          clonedLinkEl.setAttribute('type', 'text/css');
          clonedLinkEl.setAttribute('href', sheetLinkEl.getAttribute('href'));

          this.$.styles.appendChild(clonedLinkEl);
        }
      }
    }
  }

  customElements.define('google-chart', GoogleChart);

  var bestServer, name, options, seconds, server, serverInterval, serverStatus, serverTime, servers;

  servers = {
    'St. Louis': '216.119.214.209',
    'Kansas': '216.119.213.209',
    'Purchase': '216.119.215.209',
    'Brussels': '185.96.137.209',
    'Singapore': '58.185.171.177',
    'Sydney': '119.225.114.34'
  };

  serverInterval = 3;

  seconds = 180;

  options = {
    title: "MC VPN Server Speed Test by Samuel\n (Lower is better in ms)",
    hAxis: {
      format: 'h:m:s'
    }
  };

  serverStatus = {}; //ip:time

  bestServer = '';

  serverTime = async function(server) {
    var ip, name, t;
    t = new Date();
    try {
      await fetch(`https://${server}`);
    } catch (error) {
    }
    t = new Date() - t;
    if (t < Math.min(...Object.values(serverStatus))) {
      for (name in servers) {
        ip = servers[name];
        if (ip === server) {
          bestServer = name;
        }
      }
    }
    serverStatus[server] = t;
    return setTimeout((function() {
      return serverTime(server);
    }), serverInterval * 1000);
  };

  for (name in servers) {
    server = servers[name];
    serverStatus[server] = 0;
    serverTime(server);
  }

  define('mc-vpn', (function() {
    return {
      data: {
        connect: function(e) {
          var data, redraw;
          data = [[''].concat(Object.keys(servers))];
          redraw = function() {
            var status;
            status = [new Date()].concat(Object.values(serverStatus));
            if (data.length > seconds - 1) {
              data.splice(1, 1);
            }
            data.push(status);
            return e.data = data.slice();
          };
          return setInterval(redraw, 1000);
        }
      },
      render: function(e) {
        return html`<google-chart type='line' options='${options}' data='${e.data}'>
</google-chart>
<div>Best server is:${bestServer}</div>
<style>google-chart{width:100%}</style>`;
      }
    };
  })());

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vcmVuZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL2VtaXR0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vY2FjaGUuanMiLCIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vZGVmaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL3Jlc29sdmVycy9hcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9oeWJyaWRzL2VzbS90ZW1wbGF0ZS9yZXNvbHZlcnMvdmFsdWUuanMiLCIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL2V2ZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL3Jlc29sdmVycy9jbGFzcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9oeWJyaWRzL2VzbS90ZW1wbGF0ZS9yZXNvbHZlcnMvc3R5bGUuanMiLCIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvcmVzb2x2ZXJzL3Byb3BlcnR5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2h5YnJpZHMvZXNtL3RlbXBsYXRlL2NvcmUuanMiLCIuLi9ub2RlX21vZHVsZXMvaHlicmlkcy9lc20vdGVtcGxhdGUvaGVscGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9oeWJyaWRzL2VzbS90ZW1wbGF0ZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9ib290LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3Jlc29sdmUtdXJsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3NldHRpbmdzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL21peGluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL2VsZW1lbnRzL2RvbS1tb2R1bGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvc3R5bGUtZ2F0aGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3dyYXAuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvcGF0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9jYXNlLW1hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvcHJvcGVydGllcy1jaGFuZ2VkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0eS1hY2Nlc3NvcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvbHltZXIvcG9seW1lci9saWIvbWl4aW5zL3RlbXBsYXRlLXN0YW1wLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL21peGlucy9wcm9wZXJ0eS1lZmZlY3RzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL3RlbGVtZXRyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvcHJvcGVydGllcy1taXhpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi9taXhpbnMvZWxlbWVudC1taXhpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9odG1sLXRhZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL3BvbHltZXItZWxlbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9seW1lci9wb2x5bWVyL2xpYi91dGlscy9kZWJvdW5jZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLXdlYi1jb21wb25lbnRzL2dvb2dsZS1jaGFydC9sb2FkZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQGdvb2dsZS13ZWItY29tcG9uZW50cy9nb29nbGUtY2hhcnQvZ29vZ2xlLWNoYXJ0LmpzIiwiLi4vdGFncy5jb2ZmZWUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBjYW1lbFRvRGFzaE1hcCA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBjYW1lbFRvRGFzaChzdHIpIHtcbiAgdmFyIHJlc3VsdCA9IGNhbWVsVG9EYXNoTWFwLmdldChzdHIpO1xuXG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJlc3VsdCA9IHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNhbWVsVG9EYXNoTWFwLnNldChzdHIsIHJlc3VsdCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbFRvRGFzaChzdHIpIHtcbiAgcmV0dXJuIGNhbWVsVG9EYXNoKHN0ci5yZXBsYWNlKC8oKD8hKFtBLVpdezJ9fF4pKVtBLVpdKS9nLCAnLSQxJykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoKGhvc3QsIGV2ZW50VHlwZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHJldHVybiBob3N0LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50VHlwZSwgX29iamVjdFNwcmVhZCh7XG4gICAgYnViYmxlczogZmFsc2VcbiAgfSwgb3B0aW9ucykpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzaGFkeUNTUyhmbiwgZmFsbGJhY2spIHtcbiAgdmFyIHNoYWR5ID0gd2luZG93LlNoYWR5Q1NTO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG4gIGlmIChzaGFkeSAmJiAhc2hhZHkubmF0aXZlU2hhZG93KSB7XG4gICAgcmV0dXJuIGZuKHNoYWR5KTtcbiAgfVxuXG4gIHJldHVybiBmYWxsYmFjaztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgdmFyIHRhZ05hbWUgPSBTdHJpbmcoZWxlbWVudC50YWdOYW1lKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gXCI8XCIuY29uY2F0KHRhZ05hbWUsIFwiPlwiKTtcbn1cbmV4cG9ydCB2YXIgSVNfSUUgPSAnQWN0aXZlWE9iamVjdCcgaW4gd2luZG93O1xuZXhwb3J0IHZhciBkZWZlcnJlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTkxZEdsc2N5NXFjeUpkTENKdVlXMWxjeUk2V3lKallXMWxiRlJ2UkdGemFFMWhjQ0lzSWsxaGNDSXNJbU5oYldWc1ZHOUVZWE5vSWl3aWMzUnlJaXdpY21WemRXeDBJaXdpWjJWMElpd2lkVzVrWldacGJtVmtJaXdpY21Wd2JHRmpaU0lzSW5SdlRHOTNaWEpEWVhObElpd2ljMlYwSWl3aWNHRnpZMkZzVkc5RVlYTm9JaXdpWkdsemNHRjBZMmdpTENKb2IzTjBJaXdpWlhabGJuUlVlWEJsSWl3aWIzQjBhVzl1Y3lJc0ltUnBjM0JoZEdOb1JYWmxiblFpTENKRGRYTjBiMjFGZG1WdWRDSXNJbUoxWW1Kc1pYTWlMQ0p6YUdGa2VVTlRVeUlzSW1adUlpd2labUZzYkdKaFkyc2lMQ0p6YUdGa2VTSXNJbmRwYm1SdmR5SXNJbE5vWVdSNVExTlRJaXdpYm1GMGFYWmxVMmhoWkc5M0lpd2ljM1J5YVc1bmFXWjVSV3hsYldWdWRDSXNJbVZzWlcxbGJuUWlMQ0owWVdkT1lXMWxJaXdpVTNSeWFXNW5JaXdpU1ZOZlNVVWlMQ0prWldabGNuSmxaQ0lzSWxCeWIyMXBjMlVpTENKeVpYTnZiSFpsSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN1FVRkJRU3hKUVVGTlFTeGpRVUZqTEVkQlFVY3NTVUZCU1VNc1IwRkJTaXhGUVVGMlFqdEJRVU5CTEU5QlFVOHNVMEZCVTBNc1YwRkJWQ3hEUVVGeFFrTXNSMEZCY2tJc1JVRkJNRUk3UVVGREwwSXNUVUZCU1VNc1RVRkJUU3hIUVVGSFNpeGpRVUZqTEVOQlFVTkxMRWRCUVdZc1EwRkJiVUpHTEVkQlFXNUNMRU5CUVdJN08wRkJRMEVzVFVGQlNVTXNUVUZCVFN4TFFVRkxSU3hUUVVGbUxFVkJRVEJDTzBGQlEzaENSaXhKUVVGQlFTeE5RVUZOTEVkQlFVZEVMRWRCUVVjc1EwRkJRMGtzVDBGQlNpeERRVUZaTEdsQ1FVRmFMRVZCUVN0Q0xFOUJRUzlDTEVWQlFYZERReXhYUVVGNFF5eEZRVUZVTzBGQlEwRlNMRWxCUVVGQkxHTkJRV01zUTBGQlExTXNSMEZCWml4RFFVRnRRazRzUjBGQmJrSXNSVUZCZDBKRExFMUJRWGhDTzBGQlEwUTdPMEZCUTBRc1UwRkJUMEVzVFVGQlVEdEJRVU5FTzBGQlJVUXNUMEZCVHl4VFFVRlRUU3haUVVGVUxFTkJRWE5DVUN4SFFVRjBRaXhGUVVFeVFqdEJRVU5vUXl4VFFVRlBSQ3hYUVVGWExFTkJRVU5ETEVkQlFVY3NRMEZCUTBrc1QwRkJTaXhEUVVGWkxEQkNRVUZhTEVWQlFYZERMRXRCUVhoRExFTkJRVVFzUTBGQmJFSTdRVUZEUkR0QlFVVkVMRTlCUVU4c1UwRkJVMGtzVVVGQlZDeERRVUZyUWtNc1NVRkJiRUlzUlVGQmQwSkRMRk5CUVhoQ0xFVkJRV2xFTzBGQlFVRXNUVUZCWkVNc1QwRkJZeXgxUlVGQlNpeEZRVUZKTzBGQlEzUkVMRk5CUVU5R0xFbEJRVWtzUTBGQlEwY3NZVUZCVEN4RFFVRnRRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENTQ3hUUVVGb1FqdEJRVUUyUWtrc1NVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlFYUkRMRXRCUVdkRVNDeFBRVUZvUkN4RlFVRnVRaXhEUVVGUU8wRkJRMFE3UVVGRlJDeFBRVUZQTEZOQlFWTkpMRkZCUVZRc1EwRkJhMEpETEVWQlFXeENMRVZCUVhOQ1F5eFJRVUYwUWl4RlFVRm5RenRCUVVOeVF5eE5RVUZOUXl4TFFVRkxMRWRCUVVkRExFMUJRVTBzUTBGQlEwTXNVVUZCY2tJN1FVRkZRVHM3UVVGRFFTeE5RVUZKUml4TFFVRkxMRWxCUVVrc1EwRkJRMEVzUzBGQlN5eERRVUZEUnl4WlFVRndRaXhGUVVGclF6dEJRVU5vUXl4WFFVRlBUQ3hGUVVGRkxFTkJRVU5GTEV0QlFVUXNRMEZCVkR0QlFVTkVPenRCUVVWRUxGTkJRVTlFTEZGQlFWQTdRVUZEUkR0QlFVVkVMRTlCUVU4c1UwRkJVMHNzWjBKQlFWUXNRMEZCTUVKRExFOUJRVEZDTEVWQlFXMURPMEZCUTNoRExFMUJRVTFETEU5QlFVOHNSMEZCUjBNc1RVRkJUU3hEUVVGRFJpeFBRVUZQTEVOQlFVTkRMRTlCUVZRc1EwRkJUaXhEUVVGM1FtNUNMRmRCUVhoQ0xFVkJRV2hDTzBGQlEwRXNiMEpCUVZkdFFpeFBRVUZZTzBGQlEwUTdRVUZGUkN4UFFVRlBMRWxCUVUxRkxFdEJRVXNzUjBGQlJ5eHRRa0ZCYlVKUUxFMUJRV3BETzBGQlExQXNUMEZCVHl4SlFVRk5VU3hSUVVGUkxFZEJRVWRETEU5QlFVOHNRMEZCUTBNc1QwRkJVaXhGUVVGcVFpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbU52Ym5OMElHTmhiV1ZzVkc5RVlYTm9UV0Z3SUQwZ2JtVjNJRTFoY0NncE8xeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTmhiV1ZzVkc5RVlYTm9LSE4wY2lrZ2UxeHVJQ0JzWlhRZ2NtVnpkV3gwSUQwZ1kyRnRaV3hVYjBSaGMyaE5ZWEF1WjJWMEtITjBjaWs3WEc0Z0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUhKbGMzVnNkQ0E5SUhOMGNpNXlaWEJzWVdObEtDOG9XMkV0ZWwwcEtGdEJMVnBkS1M5bkxDQW5KREV0SkRJbktTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dUlDQWdJR05oYldWc1ZHOUVZWE5vVFdGd0xuTmxkQ2h6ZEhJc0lISmxjM1ZzZENrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIQmhjMk5oYkZSdlJHRnphQ2h6ZEhJcElIdGNiaUFnY21WMGRYSnVJR05oYldWc1ZHOUVZWE5vS0hOMGNpNXlaWEJzWVdObEtDOG9LRDhoS0Z0QkxWcGRleko5ZkY0cEtWdEJMVnBkS1M5bkxDQW5MU1F4SnlrcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWkdsemNHRjBZMmdvYUc5emRDd2daWFpsYm5SVWVYQmxMQ0J2Y0hScGIyNXpJRDBnZTMwcElIdGNiaUFnY21WMGRYSnVJR2h2YzNRdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9aWFpsYm5SVWVYQmxMQ0I3SUdKMVltSnNaWE02SUdaaGJITmxMQ0F1TGk1dmNIUnBiMjV6SUgwcEtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhOb1lXUjVRMU5US0dadUxDQm1ZV3hzWW1GamF5a2dlMXh1SUNCamIyNXpkQ0J6YUdGa2VTQTlJSGRwYm1SdmR5NVRhR0ZrZVVOVFV6dGNibHh1SUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQnBaaUFvYzJoaFpIa2dKaVlnSVhOb1lXUjVMbTVoZEdsMlpWTm9ZV1J2ZHlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtYmloemFHRmtlU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm1Gc2JHSmhZMnM3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnpkSEpwYm1kcFpubEZiR1Z0Wlc1MEtHVnNaVzFsYm5RcElIdGNiaUFnWTI5dWMzUWdkR0ZuVG1GdFpTQTlJRk4wY21sdVp5aGxiR1Z0Wlc1MExuUmhaMDVoYldVcExuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lISmxkSFZ5YmlCZ1BDUjdkR0ZuVG1GdFpYMCtZRHRjYm4xY2JseHVaWGh3YjNKMElHTnZibk4wSUVsVFgwbEZJRDBnSjBGamRHbDJaVmhQWW1wbFkzUW5JR2x1SUhkcGJtUnZkenRjYm1WNGNHOXlkQ0JqYjI1emRDQmtaV1psY25KbFpDQTlJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BPMXh1SWwxOSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCB7IGNhbWVsVG9EYXNoIH0gZnJvbSAnLi91dGlscyc7XG5cbnZhciBkZWZhdWx0VHJhbnNmb3JtID0gZnVuY3Rpb24gZGVmYXVsdFRyYW5zZm9ybSh2KSB7XG4gIHJldHVybiB2O1xufTtcblxudmFyIG9iamVjdFRyYW5zZm9ybSA9IGZ1bmN0aW9uIG9iamVjdFRyYW5zZm9ybSh2YWx1ZSkge1xuICBpZiAoX3R5cGVvZih2YWx1ZSkgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQXNzaWduZWQgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3Q6IFwiLmNvbmNhdChfdHlwZW9mKHZhbHVlKSkpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlICYmIE9iamVjdC5mcmVlemUodmFsdWUpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcGVydHkodmFsdWUsIGNvbm5lY3QpIHtcbiAgdmFyIHR5cGUgPSBfdHlwZW9mKHZhbHVlKTtcblxuICB2YXIgdHJhbnNmb3JtID0gZGVmYXVsdFRyYW5zZm9ybTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgdHJhbnNmb3JtID0gU3RyaW5nO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgdHJhbnNmb3JtID0gTnVtYmVyO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHRyYW5zZm9ybSA9IEJvb2xlYW47XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHRyYW5zZm9ybSA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSB0cmFuc2Zvcm0oKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmICh2YWx1ZSkgT2JqZWN0LmZyZWV6ZSh2YWx1ZSk7XG4gICAgICB0cmFuc2Zvcm0gPSBvYmplY3RUcmFuc2Zvcm07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoaG9zdCkge1xuICAgICAgdmFyIHZhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdmFsdWU7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoaG9zdCwgdmFsLCBvbGRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybSh2YWwsIG9sZFZhbHVlKTtcbiAgICB9LFxuICAgIGNvbm5lY3Q6IHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGUgIT09ICd1bmRlZmluZWQnID8gZnVuY3Rpb24gKGhvc3QsIGtleSwgaW52YWxpZGF0ZSkge1xuICAgICAgaWYgKGhvc3Rba2V5XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gY2FtZWxUb0Rhc2goa2V5KTtcblxuICAgICAgICBpZiAoaG9zdC5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgdmFyIGF0dHJWYWx1ZSA9IGhvc3QuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgICBob3N0W2tleV0gPSBhdHRyVmFsdWUgPT09ICcnICYmIHRyYW5zZm9ybSA9PT0gQm9vbGVhbiA/IHRydWUgOiBhdHRyVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbm5lY3QgJiYgY29ubmVjdChob3N0LCBrZXksIGludmFsaWRhdGUpO1xuICAgIH0gOiBjb25uZWN0XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXdjbTl3WlhKMGVTNXFjeUpkTENKdVlXMWxjeUk2V3lKallXMWxiRlJ2UkdGemFDSXNJbVJsWm1GMWJIUlVjbUZ1YzJadmNtMGlMQ0oySWl3aWIySnFaV04wVkhKaGJuTm1iM0p0SWl3aWRtRnNkV1VpTENKVWVYQmxSWEp5YjNJaUxDSlBZbXBsWTNRaUxDSm1jbVZsZW1VaUxDSndjbTl3WlhKMGVTSXNJbU52Ym01bFkzUWlMQ0owZVhCbElpd2lkSEpoYm5ObWIzSnRJaXdpVTNSeWFXNW5JaXdpVG5WdFltVnlJaXdpUW05dmJHVmhiaUlzSW1kbGRDSXNJbWh2YzNRaUxDSjJZV3dpTENKelpYUWlMQ0p2YkdSV1lXeDFaU0lzSW10bGVTSXNJbWx1ZG1Gc2FXUmhkR1VpTENKaGRIUnlUbUZ0WlNJc0ltaGhjMEYwZEhKcFluVjBaU0lzSW1GMGRISldZV3gxWlNJc0ltZGxkRUYwZEhKcFluVjBaU0pkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4VFFVRlRRU3hYUVVGVUxGRkJRVFJDTEZOQlFUVkNPenRCUVVWQkxFbEJRVTFETEdkQ1FVRm5RaXhIUVVGSExGTkJRVzVDUVN4blFrRkJiVUlzUTBGQlEwTXNRMEZCUkR0QlFVRkJMRk5CUVU5QkxFTkJRVkE3UVVGQlFTeERRVUY2UWpzN1FVRkZRU3hKUVVGTlF5eGxRVUZsTEVkQlFVY3NVMEZCYkVKQkxHVkJRV3RDTEVOQlFVTkRMRXRCUVVRc1JVRkJWenRCUVVOcVF5eE5RVUZKTEZGQlFVOUJMRXRCUVZBc1RVRkJhVUlzVVVGQmNrSXNSVUZCSzBJN1FVRkROMElzVlVGQlRVTXNVMEZCVXl4eFJFRkJOa05FTEV0QlFUZERMRWRCUVdZN1FVRkRSRHM3UVVGRFJDeFRRVUZQUVN4TFFVRkxMRWxCUVVsRkxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVRmpTQ3hMUVVGa0xFTkJRV2hDTzBGQlEwUXNRMEZNUkRzN1FVRlBRU3hsUVVGbExGTkJRVk5KTEZGQlFWUXNRMEZCYTBKS0xFdEJRV3hDTEVWQlFYbENTeXhQUVVGNlFpeEZRVUZyUXp0QlFVTXZReXhOUVVGTlF5eEpRVUZKTEZkQlFWVk9MRXRCUVZZc1EwRkJWanM3UVVGRFFTeE5RVUZKVHl4VFFVRlRMRWRCUVVkV0xHZENRVUZvUWpzN1FVRkZRU3hWUVVGUlV5eEpRVUZTTzBGQlEwVXNVMEZCU3l4UlFVRk1PMEZCUTBWRExFMUJRVUZCTEZOQlFWTXNSMEZCUjBNc1RVRkJXanRCUVVOQk96dEJRVU5HTEZOQlFVc3NVVUZCVER0QlFVTkZSQ3hOUVVGQlFTeFRRVUZUTEVkQlFVZEZMRTFCUVZvN1FVRkRRVHM3UVVGRFJpeFRRVUZMTEZOQlFVdzdRVUZEUlVZc1RVRkJRVUVzVTBGQlV5eEhRVUZIUnl4UFFVRmFPMEZCUTBFN08wRkJRMFlzVTBGQlN5eFZRVUZNTzBGQlEwVklMRTFCUVVGQkxGTkJRVk1zUjBGQlIxQXNTMEZCV2p0QlFVTkJRU3hOUVVGQlFTeExRVUZMTEVkQlFVZFBMRk5CUVZNc1JVRkJha0k3UVVGRFFUczdRVUZEUml4VFFVRkxMRkZCUVV3N1FVRkRSU3hWUVVGSlVDeExRVUZLTEVWQlFWZEZMRTFCUVUwc1EwRkJRME1zVFVGQlVDeERRVUZqU0N4TFFVRmtPMEZCUTFoUExFMUJRVUZCTEZOQlFWTXNSMEZCUjFJc1pVRkJXanRCUVVOQk96dEJRVU5HTzBGQlFWTTdRVUZzUWxnN08wRkJjVUpCTEZOQlFVODdRVUZEVEZrc1NVRkJRVUVzUjBGQlJ5eEZRVUZGTEdGQlFVTkRMRWxCUVVRN1FVRkJRU3hWUVVGUFF5eEhRVUZRTEhWRlFVRmhZaXhMUVVGaU8wRkJRVUVzWVVGQmRVSmhMRWRCUVhaQ08wRkJRVUVzUzBGRVFUdEJRVVZNUXl4SlFVRkJRU3hIUVVGSExFVkJRVVVzWVVGQlEwWXNTVUZCUkN4RlFVRlBReXhIUVVGUUxFVkJRVmxGTEZGQlFWbzdRVUZCUVN4aFFVRjVRbElzVTBGQlV5eERRVUZEVFN4SFFVRkVMRVZCUVUxRkxGRkJRVTRzUTBGQmJFTTdRVUZCUVN4TFFVWkJPMEZCUjB4V0xFbEJRVUZCTEU5QlFVOHNSVUZCUlVNc1NVRkJTU3hMUVVGTExGRkJRVlFzU1VGQmNVSkJMRWxCUVVrc1MwRkJTeXhYUVVFNVFpeEhRVU5NTEZWQlFVTk5MRWxCUVVRc1JVRkJUMGtzUjBGQlVDeEZRVUZaUXl4VlFVRmFMRVZCUVRKQ08wRkJRek5DTEZWQlFVbE1MRWxCUVVrc1EwRkJRMGtzUjBGQlJDeERRVUZLTEV0QlFXTm9RaXhMUVVGc1FpeEZRVUY1UWp0QlFVTjJRaXhaUVVGTmEwSXNVVUZCVVN4SFFVRkhkRUlzVjBGQlZ5eERRVUZEYjBJc1IwRkJSQ3hEUVVFMVFqczdRVUZGUVN4WlFVRkpTaXhKUVVGSkxFTkJRVU5QTEZsQlFVd3NRMEZCYTBKRUxGRkJRV3hDTEVOQlFVb3NSVUZCYVVNN1FVRkRMMElzWTBGQlRVVXNVMEZCVXl4SFFVRkhVaXhKUVVGSkxFTkJRVU5UTEZsQlFVd3NRMEZCYTBKSUxGRkJRV3hDTEVOQlFXeENPMEZCUTBGT0xGVkJRVUZCTEVsQlFVa3NRMEZCUTBrc1IwRkJSQ3hEUVVGS0xFZEJRVmxKTEZOQlFWTXNTMEZCU3l4RlFVRmtMRWxCUVc5Q1lpeFRRVUZUTEV0QlFVdEhMRTlCUVd4RExFZEJRVFJETEVsQlFUVkRMRWRCUVcxRVZTeFRRVUV2UkR0QlFVTkVPMEZCUTBZN08wRkJSVVFzWVVGQlQyWXNUMEZCVHl4SlFVRkpRU3hQUVVGUExFTkJRVU5QTEVsQlFVUXNSVUZCVDBrc1IwRkJVQ3hGUVVGWlF5eFZRVUZhTEVOQlFYcENPMEZCUTBRc1MwRmFUU3hIUVdGTVdqdEJRV2hDUXl4SFFVRlFPMEZCYTBKRUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dZMkZ0Wld4VWIwUmhjMmdnZlNCbWNtOXRJQ2N1TDNWMGFXeHpKenRjYmx4dVkyOXVjM1FnWkdWbVlYVnNkRlJ5WVc1elptOXliU0E5SUNoMktTQTlQaUIyTzF4dVhHNWpiMjV6ZENCdlltcGxZM1JVY21GdWMyWnZjbTBnUFNBb2RtRnNkV1VwSUQwK0lIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0FoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNCMGFISnZkeUJVZVhCbFJYSnliM0lvWUVGemMybG5ibVZrSUhaaGJIVmxJRzExYzNRZ1ltVWdZVzRnYjJKcVpXTjBPaUFrZTNSNWNHVnZaaUIyWVd4MVpYMWdLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkbUZzZFdVZ0ppWWdUMkpxWldOMExtWnlaV1Y2WlNoMllXeDFaU2s3WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQndjbTl3WlhKMGVTaDJZV3gxWlN3Z1kyOXVibVZqZENrZ2UxeHVJQ0JqYjI1emRDQjBlWEJsSUQwZ2RIbHdaVzltSUhaaGJIVmxPMXh1SUNCc1pYUWdkSEpoYm5ObWIzSnRJRDBnWkdWbVlYVnNkRlJ5WVc1elptOXliVHRjYmx4dUlDQnpkMmwwWTJnZ0tIUjVjR1VwSUh0Y2JpQWdJQ0JqWVhObElDZHpkSEpwYm1jbk9seHVJQ0FnSUNBZ2RISmhibk5tYjNKdElEMGdVM1J5YVc1bk8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNBbmJuVnRZbVZ5SnpwY2JpQWdJQ0FnSUhSeVlXNXpabTl5YlNBOUlFNTFiV0psY2p0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjJKdmIyeGxZVzRuT2x4dUlDQWdJQ0FnZEhKaGJuTm1iM0p0SUQwZ1FtOXZiR1ZoYmp0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjJaMWJtTjBhVzl1SnpwY2JpQWdJQ0FnSUhSeVlXNXpabTl5YlNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnZG1Gc2RXVWdQU0IwY21GdWMyWnZjbTBvS1R0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjI5aWFtVmpkQ2M2WEc0Z0lDQWdJQ0JwWmlBb2RtRnNkV1VwSUU5aWFtVmpkQzVtY21WbGVtVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ2RISmhibk5tYjNKdElEMGdiMkpxWldOMFZISmhibk5tYjNKdE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdaR1ZtWVhWc2REb2dZbkpsWVdzN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdkbGREb2dLR2h2YzNRc0lIWmhiQ0E5SUhaaGJIVmxLU0E5UGlCMllXd3NYRzRnSUNBZ2MyVjBPaUFvYUc5emRDd2dkbUZzTENCdmJHUldZV3gxWlNrZ1BUNGdkSEpoYm5ObWIzSnRLSFpoYkN3Z2IyeGtWbUZzZFdVcExGeHVJQ0FnSUdOdmJtNWxZM1E2SUhSNWNHVWdJVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1VnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0lDQS9JQ2hvYjNOMExDQnJaWGtzSUdsdWRtRnNhV1JoZEdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHaHZjM1JiYTJWNVhTQTlQVDBnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JoZEhSeVRtRnRaU0E5SUdOaGJXVnNWRzlFWVhOb0tHdGxlU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUc5emRDNW9ZWE5CZEhSeWFXSjFkR1VvWVhSMGNrNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmhkSFJ5Vm1Gc2RXVWdQU0JvYjNOMExtZGxkRUYwZEhKcFluVjBaU2hoZEhSeVRtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9iM04wVzJ0bGVWMGdQU0JoZEhSeVZtRnNkV1VnUFQwOUlDY25JQ1ltSUhSeVlXNXpabTl5YlNBOVBUMGdRbTl2YkdWaGJpQS9JSFJ5ZFdVZ09pQmhkSFJ5Vm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTnZibTVsWTNRZ0ppWWdZMjl1Ym1WamRDaG9iM04wTENCclpYa3NJR2x1ZG1Gc2FXUmhkR1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnT2lCamIyNXVaV04wTEZ4dUlDQjlPMXh1ZlZ4dUlsMTkiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKGZuKSB7XG4gIHZhciBjdXN0b21PcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbjogXCIuY29uY2F0KF90eXBlb2YoZm4pKSk7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe1xuICAgIHNoYWRvd1Jvb3Q6IHRydWVcbiAgfSwgY3VzdG9tT3B0aW9ucyk7XG5cbiAgdmFyIHNoYWRvd1Jvb3RJbml0ID0ge1xuICAgIG1vZGU6ICdvcGVuJ1xuICB9O1xuXG4gIGlmIChfdHlwZW9mKG9wdGlvbnMuc2hhZG93Um9vdCkgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmFzc2lnbihzaGFkb3dSb290SW5pdCwgb3B0aW9ucy5zaGFkb3dSb290KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoaG9zdCkge1xuICAgICAgdmFyIHVwZGF0ZSA9IGZuKGhvc3QpO1xuICAgICAgdmFyIHRhcmdldCA9IGhvc3Q7XG5cbiAgICAgIGlmIChvcHRpb25zLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgaWYgKCFob3N0LnNoYWRvd1Jvb3QpIGhvc3QuYXR0YWNoU2hhZG93KHNoYWRvd1Jvb3RJbml0KTtcbiAgICAgICAgdGFyZ2V0ID0gaG9zdC5zaGFkb3dSb290O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHVwZGF0ZShob3N0LCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfTtcbiAgICB9LFxuICAgIG9ic2VydmU6IGZ1bmN0aW9uIG9ic2VydmUoaG9zdCwgZmx1c2gpIHtcbiAgICAgIGZsdXNoKCk7XG4gICAgfVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl5Wlc1a1pYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnVaR1Z5SWl3aVptNGlMQ0pqZFhOMGIyMVBjSFJwYjI1eklpd2lWSGx3WlVWeWNtOXlJaXdpYjNCMGFXOXVjeUlzSW5Ob1lXUnZkMUp2YjNRaUxDSnphR0ZrYjNkU2IyOTBTVzVwZENJc0ltMXZaR1VpTENKUFltcGxZM1FpTENKaGMzTnBaMjRpTENKblpYUWlMQ0pvYjNOMElpd2lkWEJrWVhSbElpd2lkR0Z5WjJWMElpd2lZWFIwWVdOb1UyaGhaRzkzSWl3aVpteDFjMmdpTENKdlluTmxjblpsSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096dEJRVUZCTEdWQlFXVXNVMEZCVTBFc1RVRkJWQ3hEUVVGblFrTXNSVUZCYUVJc1JVRkJkME03UVVGQlFTeE5RVUZ3UWtNc1lVRkJiMElzZFVWQlFVb3NSVUZCU1RzN1FVRkRja1FzVFVGQlNTeFBRVUZQUkN4RlFVRlFMRXRCUVdNc1ZVRkJiRUlzUlVGQk9FSTdRVUZETlVJc1ZVRkJUVVVzVTBGQlV5d3dSRUZCYTBSR0xFVkJRV3hFTEVkQlFXWTdRVUZEUkRzN1FVRkZSQ3hOUVVGTlJ5eFBRVUZQTzBGQlFVdERMRWxCUVVGQkxGVkJRVlVzUlVGQlJUdEJRVUZxUWl4TFFVRXdRa2dzWVVGQk1VSXNRMEZCWWpzN1FVRkRRU3hOUVVGTlNTeGpRVUZqTEVkQlFVYzdRVUZCUlVNc1NVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFWSXNSMEZCZGtJN08wRkJSVUVzVFVGQlNTeFJRVUZQU0N4UFFVRlBMRU5CUVVORExGVkJRV1lzVFVGQk9FSXNVVUZCYkVNc1JVRkJORU03UVVGRE1VTkhMRWxCUVVGQkxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVRmpTQ3hqUVVGa0xFVkJRVGhDUml4UFFVRlBMRU5CUVVORExGVkJRWFJETzBGQlEwUTdPMEZCUlVRc1UwRkJUenRCUVVOTVN5eEpRVUZCUVN4SFFVUkxMR1ZCUTBSRExFbEJSRU1zUlVGRFN6dEJRVU5TTEZWQlFVMURMRTFCUVUwc1IwRkJSMWdzUlVGQlJTeERRVUZEVlN4SlFVRkVMRU5CUVdwQ08wRkJRMEVzVlVGQlNVVXNUVUZCVFN4SFFVRkhSaXhKUVVGaU96dEJRVVZCTEZWQlFVbFFMRTlCUVU4c1EwRkJRME1zVlVGQldpeEZRVUYzUWp0QlFVTjBRaXhaUVVGSkxFTkJRVU5OTEVsQlFVa3NRMEZCUTA0c1ZVRkJWaXhGUVVGelFrMHNTVUZCU1N4RFFVRkRSeXhaUVVGTUxFTkJRV3RDVWl4alFVRnNRanRCUVVOMFFrOHNVVUZCUVVFc1RVRkJUU3hIUVVGSFJpeEpRVUZKTEVOQlFVTk9MRlZCUVdRN1FVRkRSRHM3UVVGRlJDeGhRVUZQTEZOQlFWTlZMRXRCUVZRc1IwRkJhVUk3UVVGRGRFSklMRkZCUVVGQkxFMUJRVTBzUTBGQlEwUXNTVUZCUkN4RlFVRlBSU3hOUVVGUUxFTkJRVTQ3UVVGRFFTeGxRVUZQUVN4TlFVRlFPMEZCUTBRc1QwRklSRHRCUVVsRUxFdEJaRWs3UVVGbFRFY3NTVUZCUVVFc1QwRm1TeXh0UWtGbFIwd3NTVUZtU0N4RlFXVlRTU3hMUVdaVUxFVkJaV2RDTzBGQlEyNUNRU3hOUVVGQlFTeExRVUZMTzBGQlEwNDdRVUZxUWtrc1IwRkJVRHRCUVcxQ1JDSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlISmxibVJsY2lobWJpd2dZM1Z6ZEc5dFQzQjBhVzl1Y3lBOUlIdDlLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdabTRnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCVWVYQmxSWEp5YjNJb1lGUm9aU0JtYVhKemRDQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNDZJQ1I3ZEhsd1pXOW1JR1p1ZldBcE8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2IzQjBhVzl1Y3lBOUlIc2djMmhoWkc5M1VtOXZkRG9nZEhKMVpTd2dMaTR1WTNWemRHOXRUM0IwYVc5dWN5QjlPMXh1SUNCamIyNXpkQ0J6YUdGa2IzZFNiMjkwU1c1cGRDQTlJSHNnYlc5a1pUb2dKMjl3Wlc0bklIMDdYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1ekxuTm9ZV1J2ZDFKdmIzUWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnVDJKcVpXTjBMbUZ6YzJsbmJpaHphR0ZrYjNkU2IyOTBTVzVwZEN3Z2IzQjBhVzl1Y3k1emFHRmtiM2RTYjI5MEtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ1oyVjBLR2h2YzNRcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhWd1pHRjBaU0E5SUdadUtHaHZjM1FwTzF4dUlDQWdJQ0FnYkdWMElIUmhjbWRsZENBOUlHaHZjM1E3WEc1Y2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuTm9ZV1J2ZDFKdmIzUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm9iM04wTG5Ob1lXUnZkMUp2YjNRcElHaHZjM1F1WVhSMFlXTm9VMmhoWkc5M0tITm9ZV1J2ZDFKdmIzUkpibWwwS1R0Y2JpQWdJQ0FnSUNBZ2RHRnlaMlYwSUQwZ2FHOXpkQzV6YUdGa2IzZFNiMjkwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWm14MWMyZ29LU0I3WEc0Z0lDQWdJQ0FnSUhWd1pHRjBaU2hvYjNOMExDQjBZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5TEZ4dUlDQWdJRzlpYzJWeWRtVW9hRzl6ZEN3Z1pteDFjMmdwSUh0Y2JpQWdJQ0FnSUdac2RYTm9LQ2s3WEc0Z0lDQWdmU3hjYmlBZ2ZUdGNibjFjYmlKZGZRPT0iLCJ2YXIgY2FsbGJhY2tzID0gbmV3IFdlYWtNYXAoKTtcbnZhciBxdWV1ZSA9IG5ldyBTZXQoKTtcblxuZnVuY3Rpb24gZXhlY3V0ZSgpIHtcbiAgdHJ5IHtcbiAgICBxdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNhbGxiYWNrcy5nZXQodGFyZ2V0KSgpO1xuICAgICAgICBxdWV1ZS5kZWxldGUodGFyZ2V0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcXVldWUuZGVsZXRlKHRhcmdldCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocXVldWUuc2l6ZSkgZXhlY3V0ZSgpO1xuICAgIHRocm93IGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoKHRhcmdldCkge1xuICBpZiAoIXF1ZXVlLnNpemUpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZXhlY3V0ZSk7XG4gIH1cblxuICBxdWV1ZS5hZGQodGFyZ2V0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmUodGFyZ2V0LCBjYikge1xuICBjYWxsYmFja3Muc2V0KHRhcmdldCwgY2IpO1xuICBkaXNwYXRjaCh0YXJnZXQpO1xuICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgcXVldWUuZGVsZXRlKHRhcmdldCk7XG4gICAgY2FsbGJhY2tzLmRlbGV0ZSh0YXJnZXQpO1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlsYldsMGRHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTmhiR3hpWVdOcmN5SXNJbGRsWVd0TllYQWlMQ0p4ZFdWMVpTSXNJbE5sZENJc0ltVjRaV04xZEdVaUxDSm1iM0pGWVdOb0lpd2lkR0Z5WjJWMElpd2laMlYwSWl3aVpHVnNaWFJsSWl3aVpTSXNJbk5wZW1VaUxDSmthWE53WVhSamFDSXNJbkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNJc0ltRmtaQ0lzSW5OMVluTmpjbWxpWlNJc0ltTmlJaXdpYzJWMElpd2lkVzV6ZFdKelkzSnBZbVVpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEVsQlFVMUJMRk5CUVZNc1IwRkJSeXhKUVVGSlF5eFBRVUZLTEVWQlFXeENPMEZCUTBFc1NVRkJUVU1zUzBGQlN5eEhRVUZITEVsQlFVbERMRWRCUVVvc1JVRkJaRHM3UVVGRlFTeFRRVUZUUXl4UFFVRlVMRWRCUVcxQ08wRkJRMnBDTEUxQlFVazdRVUZEUmtZc1NVRkJRVUVzUzBGQlN5eERRVUZEUnl4UFFVRk9MRU5CUVdNc1ZVRkJRME1zVFVGQlJDeEZRVUZaTzBGQlEzaENMRlZCUVVrN1FVRkRSazRzVVVGQlFVRXNVMEZCVXl4RFFVRkRUeXhIUVVGV0xFTkJRV05FTEUxQlFXUTdRVUZEUVVvc1VVRkJRVUVzUzBGQlN5eERRVUZEVFN4TlFVRk9MRU5CUVdGR0xFMUJRV0k3UVVGRFJDeFBRVWhFTEVOQlIwVXNUMEZCVDBjc1EwRkJVQ3hGUVVGVk8wRkJRMVpRTEZGQlFVRkJMRXRCUVVzc1EwRkJRMDBzVFVGQlRpeERRVUZoUml4TlFVRmlPMEZCUTBFc1kwRkJUVWNzUTBGQlRqdEJRVU5FTzBGQlEwWXNTMEZTUkR0QlFWTkVMRWRCVmtRc1EwRlZSU3hQUVVGUFFTeERRVUZRTEVWQlFWVTdRVUZEVml4UlFVRkpVQ3hMUVVGTExFTkJRVU5STEVsQlFWWXNSVUZCWjBKT0xFOUJRVTg3UVVGRGRrSXNWVUZCVFVzc1EwRkJUanRCUVVORU8wRkJRMFk3TzBGQlJVUXNUMEZCVHl4VFFVRlRSU3hSUVVGVUxFTkJRV3RDVEN4TlFVRnNRaXhGUVVFd1FqdEJRVU12UWl4TlFVRkpMRU5CUVVOS0xFdEJRVXNzUTBGQlExRXNTVUZCV0N4RlFVRnBRanRCUVVObVJTeEpRVUZCUVN4eFFrRkJjVUlzUTBGQlExSXNUMEZCUkN4RFFVRnlRanRCUVVORU96dEJRVU5FUml4RlFVRkJRU3hMUVVGTExFTkJRVU5YTEVkQlFVNHNRMEZCVlZBc1RVRkJWanRCUVVORU8wRkJSVVFzVDBGQlR5eFRRVUZUVVN4VFFVRlVMRU5CUVcxQ1VpeE5RVUZ1UWl4RlFVRXlRbE1zUlVGQk0wSXNSVUZCSzBJN1FVRkRjRU5tTEVWQlFVRkJMRk5CUVZNc1EwRkJRMmRDTEVkQlFWWXNRMEZCWTFZc1RVRkJaQ3hGUVVGelFsTXNSVUZCZEVJN1FVRkRRVW9zUlVGQlFVRXNVVUZCVVN4RFFVRkRUQ3hOUVVGRUxFTkJRVkk3UVVGRlFTeFRRVUZQTEZOQlFWTlhMRmRCUVZRc1IwRkJkVUk3UVVGRE5VSm1MRWxCUVVGQkxFdEJRVXNzUTBGQlEwMHNUVUZCVGl4RFFVRmhSaXhOUVVGaU8wRkJRMEZPTEVsQlFVRkJMRk5CUVZNc1EwRkJRMUVzVFVGQlZpeERRVUZwUWtZc1RVRkJha0k3UVVGRFJDeEhRVWhFTzBGQlNVUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpqYjI1emRDQmpZV3hzWW1GamEzTWdQU0J1WlhjZ1YyVmhhMDFoY0NncE8xeHVZMjl1YzNRZ2NYVmxkV1VnUFNCdVpYY2dVMlYwS0NrN1hHNWNibVoxYm1OMGFXOXVJR1Y0WldOMWRHVW9LU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjWFZsZFdVdVptOXlSV0ZqYUNnb2RHRnlaMlYwS1NBOVBpQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCallXeHNZbUZqYTNNdVoyVjBLSFJoY21kbGRDa29LVHRjYmlBZ0lDQWdJQ0FnY1hWbGRXVXVaR1ZzWlhSbEtIUmhjbWRsZENrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJSEYxWlhWbExtUmxiR1YwWlNoMFlYSm5aWFFwTzF4dUlDQWdJQ0FnSUNCMGFISnZkeUJsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdhV1lnS0hGMVpYVmxMbk5wZW1VcElHVjRaV04xZEdVb0tUdGNiaUFnSUNCMGFISnZkeUJsTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCa2FYTndZWFJqYUNoMFlYSm5aWFFwSUh0Y2JpQWdhV1lnS0NGeGRXVjFaUzV6YVhwbEtTQjdYRzRnSUNBZ2NtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxLR1Y0WldOMWRHVXBPMXh1SUNCOVhHNGdJSEYxWlhWbExtRmtaQ2gwWVhKblpYUXBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2MzVmljMk55YVdKbEtIUmhjbWRsZEN3Z1kySXBJSHRjYmlBZ1kyRnNiR0poWTJ0ekxuTmxkQ2gwWVhKblpYUXNJR05pS1R0Y2JpQWdaR2x6Y0dGMFkyZ29kR0Z5WjJWMEtUdGNibHh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnZFc1emRXSnpZM0pwWW1Vb0tTQjdYRzRnSUNBZ2NYVmxkV1V1WkdWc1pYUmxLSFJoY21kbGRDazdYRzRnSUNBZ1kyRnNiR0poWTJ0ekxtUmxiR1YwWlNoMFlYSm5aWFFwTzF4dUlDQjlPMXh1ZlZ4dUlsMTkiLCJpbXBvcnQgeyBzdHJpbmdpZnlFbGVtZW50IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyBlbWl0dGVyIGZyb20gJy4vZW1pdHRlcic7XG52YXIgZW50cmllcyA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW50cnkodGFyZ2V0LCBrZXkpIHtcbiAgdmFyIHRhcmdldE1hcCA9IGVudHJpZXMuZ2V0KHRhcmdldCk7XG5cbiAgaWYgKCF0YXJnZXRNYXApIHtcbiAgICB0YXJnZXRNYXAgPSBuZXcgTWFwKCk7XG4gICAgZW50cmllcy5zZXQodGFyZ2V0LCB0YXJnZXRNYXApO1xuICB9XG5cbiAgdmFyIGVudHJ5ID0gdGFyZ2V0TWFwLmdldChrZXkpO1xuXG4gIGlmICghZW50cnkpIHtcbiAgICBlbnRyeSA9IHtcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAga2V5OiBrZXksXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgY29udGV4dHM6IHVuZGVmaW5lZCxcbiAgICAgIGRlcHM6IHVuZGVmaW5lZCxcbiAgICAgIHN0YXRlOiAwLFxuICAgICAgY2hlY2tzdW06IDAsXG4gICAgICBvYnNlcnZlZDogZmFsc2VcbiAgICB9O1xuICAgIHRhcmdldE1hcC5zZXQoa2V5LCBlbnRyeSk7XG4gIH1cblxuICByZXR1cm4gZW50cnk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUNoZWNrc3VtKGVudHJ5KSB7XG4gIHZhciBjaGVja3N1bSA9IGVudHJ5LnN0YXRlO1xuXG4gIGlmIChlbnRyeS5kZXBzKSB7XG4gICAgZW50cnkuZGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXBFbnRyeSkge1xuICAgICAgY2hlY2tzdW0gKz0gZGVwRW50cnkuc3RhdGU7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY2hlY2tzdW07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRGVlcChlbnRyeSkge1xuICBpZiAoZW50cnkub2JzZXJ2ZWQpIGVtaXR0ZXIuZGlzcGF0Y2goZW50cnkpO1xuICBpZiAoZW50cnkuY29udGV4dHMpIGVudHJ5LmNvbnRleHRzLmZvckVhY2goZGlzcGF0Y2hEZWVwKTtcbn1cblxudmFyIGNvbnRleHRTdGFjayA9IG5ldyBTZXQoKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXksIGdldHRlcikge1xuICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0YXJnZXQsIGtleSk7XG5cbiAgaWYgKGNvbnRleHRTdGFjay5zaXplICYmIGNvbnRleHRTdGFjay5oYXMoZW50cnkpKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJDaXJjdWxhciBnZXQgaW52b2NhdGlvbiBvZiB0aGUgJ1wiLmNvbmNhdChrZXksIFwiJyBwcm9wZXJ0eSBpbiAnXCIpLmNvbmNhdChzdHJpbmdpZnlFbGVtZW50KHRhcmdldCksIFwiJ1wiKSk7XG4gIH1cblxuICBjb250ZXh0U3RhY2suZm9yRWFjaChmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIGNvbnRleHQuZGVwcyA9IGNvbnRleHQuZGVwcyB8fCBuZXcgU2V0KCk7XG4gICAgY29udGV4dC5kZXBzLmFkZChlbnRyeSk7XG5cbiAgICBpZiAoY29udGV4dC5vYnNlcnZlZCkge1xuICAgICAgZW50cnkuY29udGV4dHMgPSBlbnRyeS5jb250ZXh0cyB8fCBuZXcgU2V0KCk7XG4gICAgICBlbnRyeS5jb250ZXh0cy5hZGQoY29udGV4dCk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoZW50cnkuY2hlY2tzdW0gJiYgZW50cnkuY2hlY2tzdW0gPT09IGNhbGN1bGF0ZUNoZWNrc3VtKGVudHJ5KSkge1xuICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29udGV4dFN0YWNrLmFkZChlbnRyeSk7XG5cbiAgICBpZiAoZW50cnkub2JzZXJ2ZWQgJiYgZW50cnkuZGVwcyAmJiBlbnRyeS5kZXBzLnNpemUpIHtcbiAgICAgIGVudHJ5LmRlcHMuZm9yRWFjaChmdW5jdGlvbiAoZGVwRW50cnkpIHtcbiAgICAgICAgaWYgKGRlcEVudHJ5LmNvbnRleHRzKSBkZXBFbnRyeS5jb250ZXh0cy5kZWxldGUoZW50cnkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW50cnkuZGVwcyA9IHVuZGVmaW5lZDtcbiAgICB2YXIgbmV4dFZhbHVlID0gZ2V0dGVyKHRhcmdldCwgZW50cnkudmFsdWUpO1xuXG4gICAgaWYgKG5leHRWYWx1ZSAhPT0gZW50cnkudmFsdWUpIHtcbiAgICAgIGVudHJ5LnN0YXRlICs9IDE7XG4gICAgICBlbnRyeS52YWx1ZSA9IG5leHRWYWx1ZTtcbiAgICAgIGRpc3BhdGNoRGVlcChlbnRyeSk7XG4gICAgfVxuXG4gICAgZW50cnkuY2hlY2tzdW0gPSBjYWxjdWxhdGVDaGVja3N1bShlbnRyeSk7XG4gICAgY29udGV4dFN0YWNrLmRlbGV0ZShlbnRyeSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlbnRyeS5jaGVja3N1bSA9IDA7XG4gICAgY29udGV4dFN0YWNrLmRlbGV0ZShlbnRyeSk7XG4gICAgY29udGV4dFN0YWNrLmZvckVhY2goZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQuZGVwcy5kZWxldGUoZW50cnkpO1xuICAgICAgaWYgKGNvbnRleHQub2JzZXJ2ZWQpIGVudHJ5LmNvbnRleHRzLmRlbGV0ZShjb250ZXh0KTtcbiAgICB9KTtcbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5LnZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgc2V0dGVyLCB2YWx1ZSwgZm9yY2UpIHtcbiAgaWYgKGNvbnRleHRTdGFjay5zaXplICYmICFmb3JjZSkge1xuICAgIHRocm93IEVycm9yKFwiVHJ5IHRvIHNldCAnXCIuY29uY2F0KGtleSwgXCInIG9mICdcIikuY29uY2F0KHN0cmluZ2lmeUVsZW1lbnQodGFyZ2V0KSwgXCInIGluIGdldCBjYWxsXCIpKTtcbiAgfVxuXG4gIHZhciBlbnRyeSA9IGdldEVudHJ5KHRhcmdldCwga2V5KTtcbiAgdmFyIG5ld1ZhbHVlID0gc2V0dGVyKHRhcmdldCwgdmFsdWUsIGVudHJ5LnZhbHVlKTtcblxuICBpZiAobmV3VmFsdWUgIT09IGVudHJ5LnZhbHVlKSB7XG4gICAgZW50cnkuY2hlY2tzdW0gPSAwO1xuICAgIGVudHJ5LnN0YXRlICs9IDE7XG4gICAgZW50cnkudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICBkaXNwYXRjaERlZXAoZW50cnkpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZSh0YXJnZXQsIGtleSwgY2xlYXJWYWx1ZSkge1xuICBpZiAoY29udGV4dFN0YWNrLnNpemUpIHtcbiAgICB0aHJvdyBFcnJvcihcIlRyeSB0byBpbnZhbGlkYXRlICdcIi5jb25jYXQoa2V5LCBcIicgaW4gJ1wiKS5jb25jYXQoc3RyaW5naWZ5RWxlbWVudCh0YXJnZXQpLCBcIicgZ2V0IGNhbGxcIikpO1xuICB9XG5cbiAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGFyZ2V0LCBrZXkpO1xuICBlbnRyeS5jaGVja3N1bSA9IDA7XG4gIGVudHJ5LnN0YXRlICs9IDE7XG4gIGRpc3BhdGNoRGVlcChlbnRyeSk7XG5cbiAgaWYgKGNsZWFyVmFsdWUpIHtcbiAgICBlbnRyeS52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmUodGFyZ2V0LCBrZXksIGdldHRlciwgZm4pIHtcbiAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGFyZ2V0LCBrZXkpO1xuICBlbnRyeS5vYnNlcnZlZCA9IHRydWU7XG4gIHZhciBsYXN0VmFsdWU7XG4gIHZhciB1bnN1YnNjcmliZSA9IGVtaXR0ZXIuc3Vic2NyaWJlKGVudHJ5LCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0KHRhcmdldCwga2V5LCBnZXR0ZXIpO1xuXG4gICAgaWYgKHZhbHVlICE9PSBsYXN0VmFsdWUpIHtcbiAgICAgIGZuKHRhcmdldCwgdmFsdWUsIGxhc3RWYWx1ZSk7XG4gICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gdW5vYnNlcnZlKCkge1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgZW50cnkub2JzZXJ2ZWQgPSBmYWxzZTtcblxuICAgIGlmIChlbnRyeS5kZXBzICYmIGVudHJ5LmRlcHMuc2l6ZSkge1xuICAgICAgZW50cnkuZGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXBFbnRyeSkge1xuICAgICAgICBpZiAoZGVwRW50cnkuY29udGV4dHMpIGRlcEVudHJ5LmNvbnRleHRzLmRlbGV0ZShlbnRyeSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OWpZV05vWlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp6ZEhKcGJtZHBabmxGYkdWdFpXNTBJaXdpWlcxcGRIUmxjaUlzSW1WdWRISnBaWE1pTENKWFpXRnJUV0Z3SWl3aVoyVjBSVzUwY25raUxDSjBZWEpuWlhRaUxDSnJaWGtpTENKMFlYSm5aWFJOWVhBaUxDSm5aWFFpTENKTllYQWlMQ0p6WlhRaUxDSmxiblJ5ZVNJc0luWmhiSFZsSWl3aWRXNWtaV1pwYm1Wa0lpd2lZMjl1ZEdWNGRITWlMQ0prWlhCeklpd2ljM1JoZEdVaUxDSmphR1ZqYTNOMWJTSXNJbTlpYzJWeWRtVmtJaXdpWTJGc1kzVnNZWFJsUTJobFkydHpkVzBpTENKbWIzSkZZV05vSWl3aVpHVndSVzUwY25raUxDSmthWE53WVhSamFFUmxaWEFpTENKa2FYTndZWFJqYUNJc0ltTnZiblJsZUhSVGRHRmpheUlzSWxObGRDSXNJbWRsZEhSbGNpSXNJbk5wZW1VaUxDSm9ZWE1pTENKRmNuSnZjaUlzSW1OdmJuUmxlSFFpTENKaFpHUWlMQ0prWld4bGRHVWlMQ0p1WlhoMFZtRnNkV1VpTENKbElpd2ljMlYwZEdWeUlpd2labTl5WTJVaUxDSnVaWGRXWVd4MVpTSXNJbWx1ZG1Gc2FXUmhkR1VpTENKamJHVmhjbFpoYkhWbElpd2liMkp6WlhKMlpTSXNJbVp1SWl3aWJHRnpkRlpoYkhWbElpd2lkVzV6ZFdKelkzSnBZbVVpTENKemRXSnpZM0pwWW1VaUxDSjFibTlpYzJWeWRtVWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRk5CUVZOQkxHZENRVUZVTEZGQlFXbERMRk5CUVdwRE8wRkJRMEVzVDBGQlR5eExRVUZMUXl4UFFVRmFMRTFCUVhsQ0xGZEJRWHBDTzBGQlJVRXNTVUZCVFVNc1QwRkJUeXhIUVVGSExFbEJRVWxETEU5QlFVb3NSVUZCYUVJN1FVRkRRU3hQUVVGUExGTkJRVk5ETEZGQlFWUXNRMEZCYTBKRExFMUJRV3hDTEVWQlFUQkNReXhIUVVFeFFpeEZRVUVyUWp0QlFVTndReXhOUVVGSlF5eFRRVUZUTEVkQlFVZE1MRTlCUVU4c1EwRkJRMDBzUjBGQlVpeERRVUZaU0N4TlFVRmFMRU5CUVdoQ096dEJRVU5CTEUxQlFVa3NRMEZCUTBVc1UwRkJUQ3hGUVVGblFqdEJRVU5rUVN4SlFVRkJRU3hUUVVGVExFZEJRVWNzU1VGQlNVVXNSMEZCU2l4RlFVRmFPMEZCUTBGUUxFbEJRVUZCTEU5QlFVOHNRMEZCUTFFc1IwRkJVaXhEUVVGWlRDeE5RVUZhTEVWQlFXOUNSU3hUUVVGd1FqdEJRVU5FT3p0QlFVVkVMRTFCUVVsSkxFdEJRVXNzUjBGQlIwb3NVMEZCVXl4RFFVRkRReXhIUVVGV0xFTkJRV05HTEVkQlFXUXNRMEZCV2pzN1FVRkZRU3hOUVVGSkxFTkJRVU5MTEV0QlFVd3NSVUZCV1R0QlFVTldRU3hKUVVGQlFTeExRVUZMTEVkQlFVYzdRVUZEVGs0c1RVRkJRVUVzVFVGQlRTeEZRVUZPUVN4TlFVUk5PMEZCUlU1RExFMUJRVUZCTEVkQlFVY3NSVUZCU0VFc1IwRkdUVHRCUVVkT1RTeE5RVUZCUVN4TFFVRkxMRVZCUVVWRExGTkJTRVE3UVVGSlRrTXNUVUZCUVVFc1VVRkJVU3hGUVVGRlJDeFRRVXBLTzBGQlMwNUZMRTFCUVVGQkxFbEJRVWtzUlVGQlJVWXNVMEZNUVR0QlFVMU9SeXhOUVVGQlFTeExRVUZMTEVWQlFVVXNRMEZPUkR0QlFVOU9ReXhOUVVGQlFTeFJRVUZSTEVWQlFVVXNRMEZRU2p0QlFWRk9ReXhOUVVGQlFTeFJRVUZSTEVWQlFVVTdRVUZTU2l4TFFVRlNPMEZCVlVGWUxFbEJRVUZCTEZOQlFWTXNRMEZCUTBjc1IwRkJWaXhEUVVGalNpeEhRVUZrTEVWQlFXMUNTeXhMUVVGdVFqdEJRVU5FT3p0QlFVVkVMRk5CUVU5QkxFdEJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRVU3hwUWtGQlZDeERRVUV5UWxJc1MwRkJNMElzUlVGQmEwTTdRVUZEYUVNc1RVRkJTVTBzVVVGQlVTeEhRVUZIVGl4TFFVRkxMRU5CUVVOTExFdEJRWEpDT3p0QlFVTkJMRTFCUVVsTUxFdEJRVXNzUTBGQlEwa3NTVUZCVml4RlFVRm5RanRCUVVOa1NpeEpRVUZCUVN4TFFVRkxMRU5CUVVOSkxFbEJRVTRzUTBGQlYwc3NUMEZCV0N4RFFVRnRRaXhWUVVGRFF5eFJRVUZFTEVWQlFXTTdRVUZETDBKS0xFMUJRVUZCTEZGQlFWRXNTVUZCU1Vrc1VVRkJVU3hEUVVGRFRDeExRVUZ5UWp0QlFVTkVMRXRCUmtRN1FVRkhSRHM3UVVGRlJDeFRRVUZQUXl4UlFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUwc3NXVUZCVkN4RFFVRnpRbGdzUzBGQmRFSXNSVUZCTmtJN1FVRkRNMElzVFVGQlNVRXNTMEZCU3l4RFFVRkRUeXhSUVVGV0xFVkJRVzlDYWtJc1QwRkJUeXhEUVVGRGMwSXNVVUZCVWl4RFFVRnBRbG9zUzBGQmFrSTdRVUZEY0VJc1RVRkJTVUVzUzBGQlN5eERRVUZEUnl4UlFVRldMRVZCUVc5Q1NDeExRVUZMTEVOQlFVTkhMRkZCUVU0c1EwRkJaVTBzVDBGQlppeERRVUYxUWtVc1dVRkJka0k3UVVGRGNrSTdPMEZCUlVRc1NVRkJUVVVzV1VGQldTeEhRVUZITEVsQlFVbERMRWRCUVVvc1JVRkJja0k3UVVGRFFTeFBRVUZQTEZOQlFWTnFRaXhIUVVGVUxFTkJRV0ZJTEUxQlFXSXNSVUZCY1VKRExFZEJRWEpDTEVWQlFUQkNiMElzVFVGQk1VSXNSVUZCYTBNN1FVRkRka01zVFVGQlRXWXNTMEZCU3l4SFFVRkhVQ3hSUVVGUkxFTkJRVU5ETEUxQlFVUXNSVUZCVTBNc1IwRkJWQ3hEUVVGMFFqczdRVUZGUVN4TlFVRkphMElzV1VGQldTeERRVUZEUnl4SlFVRmlMRWxCUVhGQ1NDeFpRVUZaTEVOQlFVTkpMRWRCUVdJc1EwRkJhVUpxUWl4TFFVRnFRaXhEUVVGNlFpeEZRVUZyUkR0QlFVTm9SQ3hWUVVGTmEwSXNTMEZCU3l3eVEwRkJiME4yUWl4SFFVRndReXcwUWtGQmVVUk9MR2RDUVVGblFpeERRVUZEU3l4TlFVRkVMRU5CUVhwRkxFOUJRVmc3UVVGRFJEczdRVUZGUkcxQ0xFVkJRVUZCTEZsQlFWa3NRMEZCUTBvc1QwRkJZaXhEUVVGeFFpeFZRVUZEVlN4UFFVRkVMRVZCUVdFN1FVRkRhRU5CTEVsQlFVRkJMRTlCUVU4c1EwRkJRMllzU1VGQlVpeEhRVUZsWlN4UFFVRlBMRU5CUVVObUxFbEJRVklzU1VGQlowSXNTVUZCU1ZVc1IwRkJTaXhGUVVFdlFqdEJRVU5CU3l4SlFVRkJRU3hQUVVGUExFTkJRVU5tTEVsQlFWSXNRMEZCWVdkQ0xFZEJRV0lzUTBGQmFVSndRaXhMUVVGcVFqczdRVUZGUVN4UlFVRkpiVUlzVDBGQlR5eERRVUZEV2l4UlFVRmFMRVZCUVhOQ08wRkJRM0JDVUN4TlFVRkJRU3hMUVVGTExFTkJRVU5ITEZGQlFVNHNSMEZCYVVKSUxFdEJRVXNzUTBGQlEwY3NVVUZCVGl4SlFVRnJRaXhKUVVGSlZ5eEhRVUZLTEVWQlFXNURPMEZCUTBGa0xFMUJRVUZCTEV0QlFVc3NRMEZCUTBjc1VVRkJUaXhEUVVGbGFVSXNSMEZCWml4RFFVRnRRa1FzVDBGQmJrSTdRVUZEUkR0QlFVTkdMRWRCVWtRN08wRkJWVUVzVFVGQlNXNUNMRXRCUVVzc1EwRkJRMDBzVVVGQlRpeEpRVUZyUWs0c1MwRkJTeXhEUVVGRFRTeFJRVUZPTEV0QlFXMUNSU3hwUWtGQmFVSXNRMEZCUTFJc1MwRkJSQ3hEUVVFeFJDeEZRVUZ0UlR0QlFVTnFSU3hYUVVGUFFTeExRVUZMTEVOQlFVTkRMRXRCUVdJN1FVRkRSRHM3UVVGRlJDeE5RVUZKTzBGQlEwWlpMRWxCUVVGQkxGbEJRVmtzUTBGQlEwOHNSMEZCWWl4RFFVRnBRbkJDTEV0QlFXcENPenRCUVVWQkxGRkJRVWxCTEV0QlFVc3NRMEZCUTA4c1VVRkJUaXhKUVVGclFsQXNTMEZCU3l4RFFVRkRTU3hKUVVGNFFpeEpRVUZuUTBvc1MwRkJTeXhEUVVGRFNTeEpRVUZPTEVOQlFWZFpMRWxCUVM5RExFVkJRWEZFTzBGQlEyNUVhRUlzVFVGQlFVRXNTMEZCU3l4RFFVRkRTU3hKUVVGT0xFTkJRVmRMTEU5QlFWZ3NRMEZCYlVJc1ZVRkJRME1zVVVGQlJDeEZRVUZqTzBGQlF5OUNMRmxCUVVsQkxGRkJRVkVzUTBGQlExQXNVVUZCWWl4RlFVRjFRazhzVVVGQlVTeERRVUZEVUN4UlFVRlVMRU5CUVd0Q2EwSXNUVUZCYkVJc1EwRkJlVUp5UWl4TFFVRjZRanRCUVVONFFpeFBRVVpFTzBGQlIwUTdPMEZCUlVSQkxFbEJRVUZCTEV0QlFVc3NRMEZCUTBrc1NVRkJUaXhIUVVGaFJpeFRRVUZpTzBGQlEwRXNVVUZCVFc5Q0xGTkJRVk1zUjBGQlIxQXNUVUZCVFN4RFFVRkRja0lzVFVGQlJDeEZRVUZUVFN4TFFVRkxMRU5CUVVORExFdEJRV1lzUTBGQmVFSTdPMEZCUlVFc1VVRkJTWEZDTEZOQlFWTXNTMEZCUzNSQ0xFdEJRVXNzUTBGQlEwTXNTMEZCZUVJc1JVRkJLMEk3UVVGRE4wSkVMRTFCUVVGQkxFdEJRVXNzUTBGQlEwc3NTMEZCVGl4SlFVRmxMRU5CUVdZN1FVRkRRVXdzVFVGQlFVRXNTMEZCU3l4RFFVRkRReXhMUVVGT0xFZEJRV054UWl4VFFVRmtPMEZCUlVGWUxFMUJRVUZCTEZsQlFWa3NRMEZCUTFnc1MwRkJSQ3hEUVVGYU8wRkJRMFE3TzBGQlJVUkJMRWxCUVVGQkxFdEJRVXNzUTBGQlEwMHNVVUZCVGl4SFFVRnBRa1VzYVVKQlFXbENMRU5CUVVOU0xFdEJRVVFzUTBGQmJFTTdRVUZEUVdFc1NVRkJRVUVzV1VGQldTeERRVUZEVVN4TlFVRmlMRU5CUVc5Q2NrSXNTMEZCY0VJN1FVRkRSQ3hIUVhKQ1JDeERRWEZDUlN4UFFVRlBkVUlzUTBGQlVDeEZRVUZWTzBGQlExWjJRaXhKUVVGQlFTeExRVUZMTEVOQlFVTk5MRkZCUVU0c1IwRkJhVUlzUTBGQmFrSTdRVUZGUVU4c1NVRkJRVUVzV1VGQldTeERRVUZEVVN4TlFVRmlMRU5CUVc5Q2NrSXNTMEZCY0VJN1FVRkRRV0VzU1VGQlFVRXNXVUZCV1N4RFFVRkRTaXhQUVVGaUxFTkJRWEZDTEZWQlFVTlZMRTlCUVVRc1JVRkJZVHRCUVVOb1EwRXNUVUZCUVVFc1QwRkJUeXhEUVVGRFppeEpRVUZTTEVOQlFXRnBRaXhOUVVGaUxFTkJRVzlDY2tJc1MwRkJjRUk3UVVGRFFTeFZRVUZKYlVJc1QwRkJUeXhEUVVGRFdpeFJRVUZhTEVWQlFYTkNVQ3hMUVVGTExFTkJRVU5ITEZGQlFVNHNRMEZCWld0Q0xFMUJRV1lzUTBGQmMwSkdMRTlCUVhSQ08wRkJRM1pDTEV0QlNFUTdRVUZMUVN4VlFVRk5TU3hEUVVGT08wRkJRMFE3TzBGQlJVUXNVMEZCVDNaQ0xFdEJRVXNzUTBGQlEwTXNTMEZCWWp0QlFVTkVPMEZCUlVRc1QwRkJUeXhUUVVGVFJpeEhRVUZVTEVOQlFXRk1MRTFCUVdJc1JVRkJjVUpETEVkQlFYSkNMRVZCUVRCQ05rSXNUVUZCTVVJc1JVRkJhME4yUWl4TFFVRnNReXhGUVVGNVEzZENMRXRCUVhwRExFVkJRV2RFTzBGQlEzSkVMRTFCUVVsYUxGbEJRVmtzUTBGQlEwY3NTVUZCWWl4SlFVRnhRaXhEUVVGRFV5eExRVUV4UWl4RlFVRnBRenRCUVVNdlFpeFZRVUZOVUN4TFFVRkxMSFZDUVVGblFuWkNMRWRCUVdoQ0xHMUNRVUUwUWs0c1owSkJRV2RDTEVOQlFVTkxMRTFCUVVRc1EwRkJOVU1zYlVKQlFWZzdRVUZEUkRzN1FVRkZSQ3hOUVVGTlRTeExRVUZMTEVkQlFVZFFMRkZCUVZFc1EwRkJRME1zVFVGQlJDeEZRVUZUUXl4SFFVRlVMRU5CUVhSQ08wRkJRMEVzVFVGQlRTdENMRkZCUVZFc1IwRkJSMFlzVFVGQlRTeERRVUZET1VJc1RVRkJSQ3hGUVVGVFR5eExRVUZVTEVWQlFXZENSQ3hMUVVGTExFTkJRVU5ETEV0QlFYUkNMRU5CUVhaQ096dEJRVVZCTEUxQlFVbDVRaXhSUVVGUkxFdEJRVXN4UWl4TFFVRkxMRU5CUVVORExFdEJRWFpDTEVWQlFUaENPMEZCUXpWQ1JDeEpRVUZCUVN4TFFVRkxMRU5CUVVOTkxGRkJRVTRzUjBGQmFVSXNRMEZCYWtJN1FVRkRRVTRzU1VGQlFVRXNTMEZCU3l4RFFVRkRTeXhMUVVGT0xFbEJRV1VzUTBGQlpqdEJRVU5CVEN4SlFVRkJRU3hMUVVGTExFTkJRVU5ETEV0QlFVNHNSMEZCWTNsQ0xGRkJRV1E3UVVGRlFXWXNTVUZCUVVFc1dVRkJXU3hEUVVGRFdDeExRVUZFTEVOQlFWbzdRVUZEUkR0QlFVTkdPMEZCUlVRc1QwRkJUeXhUUVVGVE1rSXNWVUZCVkN4RFFVRnZRbXBETEUxQlFYQkNMRVZCUVRSQ1F5eEhRVUUxUWl4RlFVRnBRMmxETEZWQlFXcERMRVZCUVRaRE8wRkJRMnhFTEUxQlFVbG1MRmxCUVZrc1EwRkJRMGNzU1VGQmFrSXNSVUZCZFVJN1FVRkRja0lzVlVGQlRVVXNTMEZCU3l3NFFrRkJkVUoyUWl4SFFVRjJRaXh0UWtGQmJVTk9MR2RDUVVGblFpeERRVUZEU3l4TlFVRkVMRU5CUVc1RUxHZENRVUZZTzBGQlEwUTdPMEZCUlVRc1RVRkJUVTBzUzBGQlN5eEhRVUZIVUN4UlFVRlJMRU5CUVVORExFMUJRVVFzUlVGQlUwTXNSMEZCVkN4RFFVRjBRanRCUVVWQlN5eEZRVUZCUVN4TFFVRkxMRU5CUVVOTkxGRkJRVTRzUjBGQmFVSXNRMEZCYWtJN1FVRkRRVTRzUlVGQlFVRXNTMEZCU3l4RFFVRkRTeXhMUVVGT0xFbEJRV1VzUTBGQlpqdEJRVVZCVFN4RlFVRkJRU3haUVVGWkxFTkJRVU5ZTEV0QlFVUXNRMEZCV2pzN1FVRkZRU3hOUVVGSk5FSXNWVUZCU2l4RlFVRm5RanRCUVVOa05VSXNTVUZCUVVFc1MwRkJTeXhEUVVGRFF5eExRVUZPTEVkQlFXTkRMRk5CUVdRN1FVRkRSRHRCUVVOR08wRkJSVVFzVDBGQlR5eFRRVUZUTWtJc1QwRkJWQ3hEUVVGcFFtNURMRTFCUVdwQ0xFVkJRWGxDUXl4SFFVRjZRaXhGUVVFNFFtOUNMRTFCUVRsQ0xFVkJRWE5EWlN4RlFVRjBReXhGUVVFd1F6dEJRVU12UXl4TlFVRk5PVUlzUzBGQlN5eEhRVUZIVUN4UlFVRlJMRU5CUVVORExFMUJRVVFzUlVGQlUwTXNSMEZCVkN4RFFVRjBRanRCUVVOQlN5eEZRVUZCUVN4TFFVRkxMRU5CUVVOUExGRkJRVTRzUjBGQmFVSXNTVUZCYWtJN1FVRkZRU3hOUVVGSmQwSXNVMEZCU2p0QlFVTkJMRTFCUVUxRExGZEJRVmNzUjBGQlJ6RkRMRTlCUVU4c1EwRkJRekpETEZOQlFWSXNRMEZCYTBKcVF5eExRVUZzUWl4RlFVRjVRaXhaUVVGTk8wRkJRMnBFTEZGQlFVMURMRXRCUVVzc1IwRkJSMG9zUjBGQlJ5eERRVUZEU0N4TlFVRkVMRVZCUVZORExFZEJRVlFzUlVGQlkyOUNMRTFCUVdRc1EwRkJha0k3TzBGQlEwRXNVVUZCU1dRc1MwRkJTeXhMUVVGTE9FSXNVMEZCWkN4RlFVRjVRanRCUVVOMlFrUXNUVUZCUVVFc1JVRkJSU3hEUVVGRGNFTXNUVUZCUkN4RlFVRlRUeXhMUVVGVUxFVkJRV2RDT0VJc1UwRkJhRUlzUTBGQlJqdEJRVU5CUVN4TlFVRkJRU3hUUVVGVExFZEJRVWM1UWl4TFFVRmFPMEZCUTBRN1FVRkRSaXhIUVU1dFFpeERRVUZ3UWp0QlFWRkJMRk5CUVU4c1UwRkJVMmxETEZOQlFWUXNSMEZCY1VJN1FVRkRNVUpHTEVsQlFVRkJMRmRCUVZjN1FVRkRXR2hETEVsQlFVRkJMRXRCUVVzc1EwRkJRMDhzVVVGQlRpeEhRVUZwUWl4TFFVRnFRanM3UVVGRFFTeFJRVUZKVUN4TFFVRkxMRU5CUVVOSkxFbEJRVTRzU1VGQlkwb3NTMEZCU3l4RFFVRkRTU3hKUVVGT0xFTkJRVmRaTEVsQlFUZENMRVZCUVcxRE8wRkJRMnBEYUVJc1RVRkJRVUVzUzBGQlN5eERRVUZEU1N4SlFVRk9MRU5CUVZkTExFOUJRVmdzUTBGQmJVSXNWVUZCUTBNc1VVRkJSQ3hGUVVGak8wRkJReTlDTEZsQlFVbEJMRkZCUVZFc1EwRkJRMUFzVVVGQllpeEZRVUYxUWs4c1VVRkJVU3hEUVVGRFVDeFJRVUZVTEVOQlFXdENhMElzVFVGQmJFSXNRMEZCZVVKeVFpeExRVUY2UWp0QlFVTjRRaXhQUVVaRU8wRkJSMFE3UVVGRFJpeEhRVkpFTzBGQlUwUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJ6ZEhKcGJtZHBabmxGYkdWdFpXNTBJSDBnWm5KdmJTQW5MaTkxZEdsc2N5YzdYRzVwYlhCdmNuUWdLaUJoY3lCbGJXbDBkR1Z5SUdaeWIyMGdKeTR2WlcxcGRIUmxjaWM3WEc1Y2JtTnZibk4wSUdWdWRISnBaWE1nUFNCdVpYY2dWMlZoYTAxaGNDZ3BPMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEVWdWRISjVLSFJoY21kbGRDd2dhMlY1S1NCN1hHNGdJR3hsZENCMFlYSm5aWFJOWVhBZ1BTQmxiblJ5YVdWekxtZGxkQ2gwWVhKblpYUXBPMXh1SUNCcFppQW9JWFJoY21kbGRFMWhjQ2tnZTF4dUlDQWdJSFJoY21kbGRFMWhjQ0E5SUc1bGR5Qk5ZWEFvS1R0Y2JpQWdJQ0JsYm5SeWFXVnpMbk5sZENoMFlYSm5aWFFzSUhSaGNtZGxkRTFoY0NrN1hHNGdJSDFjYmx4dUlDQnNaWFFnWlc1MGNua2dQU0IwWVhKblpYUk5ZWEF1WjJWMEtHdGxlU2s3WEc1Y2JpQWdhV1lnS0NGbGJuUnllU2tnZTF4dUlDQWdJR1Z1ZEhKNUlEMGdlMXh1SUNBZ0lDQWdkR0Z5WjJWMExGeHVJQ0FnSUNBZ2EyVjVMRnh1SUNBZ0lDQWdkbUZzZFdVNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lHTnZiblJsZUhSek9pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQmtaWEJ6T2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCemRHRjBaVG9nTUN4Y2JpQWdJQ0FnSUdOb1pXTnJjM1Z0T2lBd0xGeHVJQ0FnSUNBZ2IySnpaWEoyWldRNklHWmhiSE5sTEZ4dUlDQWdJSDA3WEc0Z0lDQWdkR0Z5WjJWMFRXRndMbk5sZENoclpYa3NJR1Z1ZEhKNUtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmxiblJ5ZVR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWTJGc1kzVnNZWFJsUTJobFkydHpkVzBvWlc1MGNua3BJSHRjYmlBZ2JHVjBJR05vWldOcmMzVnRJRDBnWlc1MGNua3VjM1JoZEdVN1hHNGdJR2xtSUNobGJuUnllUzVrWlhCektTQjdYRzRnSUNBZ1pXNTBjbmt1WkdWd2N5NW1iM0pGWVdOb0tDaGtaWEJGYm5SeWVTa2dQVDRnZTF4dUlDQWdJQ0FnWTJobFkydHpkVzBnS3owZ1pHVndSVzUwY25rdWMzUmhkR1U3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWTJobFkydHpkVzA3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1JwYzNCaGRHTm9SR1ZsY0NobGJuUnllU2tnZTF4dUlDQnBaaUFvWlc1MGNua3ViMkp6WlhKMlpXUXBJR1Z0YVhSMFpYSXVaR2x6Y0dGMFkyZ29aVzUwY25rcE8xeHVJQ0JwWmlBb1pXNTBjbmt1WTI5dWRHVjRkSE1wSUdWdWRISjVMbU52Ym5SbGVIUnpMbVp2Y2tWaFkyZ29aR2x6Y0dGMFkyaEVaV1Z3S1R0Y2JuMWNibHh1WTI5dWMzUWdZMjl1ZEdWNGRGTjBZV05ySUQwZ2JtVjNJRk5sZENncE8xeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkQ2gwWVhKblpYUXNJR3RsZVN3Z1oyVjBkR1Z5S1NCN1hHNGdJR052Ym5OMElHVnVkSEo1SUQwZ1oyVjBSVzUwY25rb2RHRnlaMlYwTENCclpYa3BPMXh1WEc0Z0lHbG1JQ2hqYjI1MFpYaDBVM1JoWTJzdWMybDZaU0FtSmlCamIyNTBaWGgwVTNSaFkyc3VhR0Z6S0dWdWRISjVLU2tnZTF4dUlDQWdJSFJvY205M0lFVnljbTl5S0dCRGFYSmpkV3hoY2lCblpYUWdhVzUyYjJOaGRHbHZiaUJ2WmlCMGFHVWdKeVI3YTJWNWZTY2djSEp2Y0dWeWRIa2dhVzRnSnlSN2MzUnlhVzVuYVdaNVJXeGxiV1Z1ZENoMFlYSm5aWFFwZlNkZ0tUdGNiaUFnZlZ4dVhHNGdJR052Ym5SbGVIUlRkR0ZqYXk1bWIzSkZZV05vS0NoamIyNTBaWGgwS1NBOVBpQjdYRzRnSUNBZ1kyOXVkR1Y0ZEM1a1pYQnpJRDBnWTI5dWRHVjRkQzVrWlhCeklIeDhJRzVsZHlCVFpYUW9LVHRjYmlBZ0lDQmpiMjUwWlhoMExtUmxjSE11WVdSa0tHVnVkSEo1S1R0Y2JseHVJQ0FnSUdsbUlDaGpiMjUwWlhoMExtOWljMlZ5ZG1Wa0tTQjdYRzRnSUNBZ0lDQmxiblJ5ZVM1amIyNTBaWGgwY3lBOUlHVnVkSEo1TG1OdmJuUmxlSFJ6SUh4OElHNWxkeUJUWlhRb0tUdGNiaUFnSUNBZ0lHVnVkSEo1TG1OdmJuUmxlSFJ6TG1Ga1pDaGpiMjUwWlhoMEtUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dVhHNGdJR2xtSUNobGJuUnllUzVqYUdWamEzTjFiU0FtSmlCbGJuUnllUzVqYUdWamEzTjFiU0E5UFQwZ1kyRnNZM1ZzWVhSbFEyaGxZMnR6ZFcwb1pXNTBjbmtwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1Z1ZEhKNUxuWmhiSFZsTzF4dUlDQjlYRzVjYmlBZ2RISjVJSHRjYmlBZ0lDQmpiMjUwWlhoMFUzUmhZMnN1WVdSa0tHVnVkSEo1S1R0Y2JseHVJQ0FnSUdsbUlDaGxiblJ5ZVM1dlluTmxjblpsWkNBbUppQmxiblJ5ZVM1a1pYQnpJQ1ltSUdWdWRISjVMbVJsY0hNdWMybDZaU2tnZTF4dUlDQWdJQ0FnWlc1MGNua3VaR1Z3Y3k1bWIzSkZZV05vS0Noa1pYQkZiblJ5ZVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHVndSVzUwY25rdVkyOXVkR1Y0ZEhNcElHUmxjRVZ1ZEhKNUxtTnZiblJsZUhSekxtUmxiR1YwWlNobGJuUnllU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JsYm5SeWVTNWtaWEJ6SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdOdmJuTjBJRzVsZUhSV1lXeDFaU0E5SUdkbGRIUmxjaWgwWVhKblpYUXNJR1Z1ZEhKNUxuWmhiSFZsS1R0Y2JseHVJQ0FnSUdsbUlDaHVaWGgwVm1Gc2RXVWdJVDA5SUdWdWRISjVMblpoYkhWbEtTQjdYRzRnSUNBZ0lDQmxiblJ5ZVM1emRHRjBaU0FyUFNBeE8xeHVJQ0FnSUNBZ1pXNTBjbmt1ZG1Gc2RXVWdQU0J1WlhoMFZtRnNkV1U3WEc1Y2JpQWdJQ0FnSUdScGMzQmhkR05vUkdWbGNDaGxiblJ5ZVNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWlc1MGNua3VZMmhsWTJ0emRXMGdQU0JqWVd4amRXeGhkR1ZEYUdWamEzTjFiU2hsYm5SeWVTazdYRzRnSUNBZ1kyOXVkR1Y0ZEZOMFlXTnJMbVJsYkdWMFpTaGxiblJ5ZVNrN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0JsYm5SeWVTNWphR1ZqYTNOMWJTQTlJREE3WEc1Y2JpQWdJQ0JqYjI1MFpYaDBVM1JoWTJzdVpHVnNaWFJsS0dWdWRISjVLVHRjYmlBZ0lDQmpiMjUwWlhoMFUzUmhZMnN1Wm05eVJXRmphQ2dvWTI5dWRHVjRkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVkR1Y0ZEM1a1pYQnpMbVJsYkdWMFpTaGxiblJ5ZVNrN1hHNGdJQ0FnSUNCcFppQW9ZMjl1ZEdWNGRDNXZZbk5sY25abFpDa2daVzUwY25rdVkyOXVkR1Y0ZEhNdVpHVnNaWFJsS0dOdmJuUmxlSFFwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZEdoeWIzY2daVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJsYm5SeWVTNTJZV3gxWlR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSE5sZENoMFlYSm5aWFFzSUd0bGVTd2djMlYwZEdWeUxDQjJZV3gxWlN3Z1ptOXlZMlVwSUh0Y2JpQWdhV1lnS0dOdmJuUmxlSFJUZEdGamF5NXphWHBsSUNZbUlDRm1iM0pqWlNrZ2UxeHVJQ0FnSUhSb2NtOTNJRVZ5Y205eUtHQlVjbmtnZEc4Z2MyVjBJQ2NrZTJ0bGVYMG5JRzltSUNja2UzTjBjbWx1WjJsbWVVVnNaVzFsYm5Rb2RHRnlaMlYwS1gwbklHbHVJR2RsZENCallXeHNZQ2s3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0JsYm5SeWVTQTlJR2RsZEVWdWRISjVLSFJoY21kbGRDd2dhMlY1S1R0Y2JpQWdZMjl1YzNRZ2JtVjNWbUZzZFdVZ1BTQnpaWFIwWlhJb2RHRnlaMlYwTENCMllXeDFaU3dnWlc1MGNua3VkbUZzZFdVcE8xeHVYRzRnSUdsbUlDaHVaWGRXWVd4MVpTQWhQVDBnWlc1MGNua3VkbUZzZFdVcElIdGNiaUFnSUNCbGJuUnllUzVqYUdWamEzTjFiU0E5SURBN1hHNGdJQ0FnWlc1MGNua3VjM1JoZEdVZ0t6MGdNVHRjYmlBZ0lDQmxiblJ5ZVM1MllXeDFaU0E5SUc1bGQxWmhiSFZsTzF4dVhHNGdJQ0FnWkdsemNHRjBZMmhFWldWd0tHVnVkSEo1S1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FXNTJZV3hwWkdGMFpTaDBZWEpuWlhRc0lHdGxlU3dnWTJ4bFlYSldZV3gxWlNrZ2UxeHVJQ0JwWmlBb1kyOXVkR1Y0ZEZOMFlXTnJMbk5wZW1VcElIdGNiaUFnSUNCMGFISnZkeUJGY25KdmNpaGdWSEo1SUhSdklHbHVkbUZzYVdSaGRHVWdKeVI3YTJWNWZTY2dhVzRnSnlSN2MzUnlhVzVuYVdaNVJXeGxiV1Z1ZENoMFlYSm5aWFFwZlNjZ1oyVjBJR05oYkd4Z0tUdGNiaUFnZlZ4dVhHNGdJR052Ym5OMElHVnVkSEo1SUQwZ1oyVjBSVzUwY25rb2RHRnlaMlYwTENCclpYa3BPMXh1WEc0Z0lHVnVkSEo1TG1Ob1pXTnJjM1Z0SUQwZ01EdGNiaUFnWlc1MGNua3VjM1JoZEdVZ0t6MGdNVHRjYmx4dUlDQmthWE53WVhSamFFUmxaWEFvWlc1MGNua3BPMXh1WEc0Z0lHbG1JQ2hqYkdWaGNsWmhiSFZsS1NCN1hHNGdJQ0FnWlc1MGNua3VkbUZzZFdVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRzlpYzJWeWRtVW9kR0Z5WjJWMExDQnJaWGtzSUdkbGRIUmxjaXdnWm00cElIdGNiaUFnWTI5dWMzUWdaVzUwY25rZ1BTQm5aWFJGYm5SeWVTaDBZWEpuWlhRc0lHdGxlU2s3WEc0Z0lHVnVkSEo1TG05aWMyVnlkbVZrSUQwZ2RISjFaVHRjYmx4dUlDQnNaWFFnYkdGemRGWmhiSFZsTzF4dUlDQmpiMjV6ZENCMWJuTjFZbk5qY21saVpTQTlJR1Z0YVhSMFpYSXVjM1ZpYzJOeWFXSmxLR1Z1ZEhKNUxDQW9LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdkbUZzZFdVZ1BTQm5aWFFvZEdGeVoyVjBMQ0JyWlhrc0lHZGxkSFJsY2lrN1hHNGdJQ0FnYVdZZ0tIWmhiSFZsSUNFOVBTQnNZWE4wVm1Gc2RXVXBJSHRjYmlBZ0lDQWdJR1p1S0hSaGNtZGxkQ3dnZG1Gc2RXVXNJR3hoYzNSV1lXeDFaU2s3WEc0Z0lDQWdJQ0JzWVhOMFZtRnNkV1VnUFNCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUIxYm05aWMyVnlkbVVvS1NCN1hHNGdJQ0FnZFc1emRXSnpZM0pwWW1Vb0tUdGNiaUFnSUNCbGJuUnllUzV2WW5ObGNuWmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2hsYm5SeWVTNWtaWEJ6SUNZbUlHVnVkSEo1TG1SbGNITXVjMmw2WlNrZ2UxeHVJQ0FnSUNBZ1pXNTBjbmt1WkdWd2N5NW1iM0pGWVdOb0tDaGtaWEJGYm5SeWVTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9aR1Z3Ulc1MGNua3VZMjl1ZEdWNGRITXBJR1JsY0VWdWRISjVMbU52Ym5SbGVIUnpMbVJsYkdWMFpTaGxiblJ5ZVNrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1OVhHNGlYWDA9IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7IF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7IGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHsgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7IF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpOyB9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7IHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7IH07IHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTsgfVxuXG5mdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgeyBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7IH0gZWxzZSB7IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7IHJldHVybiBpbnN0YW5jZTsgfTsgfSByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7IHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgcHJvcGVydHkgZnJvbSAnLi9wcm9wZXJ0eSc7XG5pbXBvcnQgcmVuZGVyIGZyb20gJy4vcmVuZGVyJztcbmltcG9ydCAqIGFzIGNhY2hlIGZyb20gJy4vY2FjaGUnO1xuaW1wb3J0IHsgcGFzY2FsVG9EYXNoLCBkZWZlcnJlZCB9IGZyb20gJy4vdXRpbHMnO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxudHJ5IHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG59IGNhdGNoIChlKSB7XG4gIHZhciBwcm9jZXNzID0ge1xuICAgIGVudjoge1xuICAgICAgTk9ERV9FTlY6ICdwcm9kdWN0aW9uJ1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG5cbnZhciBkZWZhdWx0TWV0aG9kID0gZnVuY3Rpb24gZGVmYXVsdE1ldGhvZChob3N0LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG5mdW5jdGlvbiBjb21waWxlKEh5YnJpZCwgZGVzY3JpcHRvcnMpIHtcbiAgSHlicmlkLmh5YnJpZHMgPSBkZXNjcmlwdG9ycztcbiAgSHlicmlkLmNhbGxiYWNrcyA9IFtdO1xuICBPYmplY3Qua2V5cyhkZXNjcmlwdG9ycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGRlc2MgPSBkZXNjcmlwdG9yc1trZXldO1xuXG4gICAgdmFyIHR5cGUgPSBfdHlwZW9mKGRlc2MpO1xuXG4gICAgdmFyIGNvbmZpZztcblxuICAgIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25maWcgPSBrZXkgPT09ICdyZW5kZXInID8gcmVuZGVyKGRlc2MpIDoge1xuICAgICAgICBnZXQ6IGRlc2NcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlICE9PSAnb2JqZWN0JyB8fCBkZXNjID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkoZGVzYykpIHtcbiAgICAgIGNvbmZpZyA9IHByb3BlcnR5KGRlc2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSB7XG4gICAgICAgIGdldDogZGVzYy5nZXQgfHwgZGVmYXVsdE1ldGhvZCxcbiAgICAgICAgc2V0OiBkZXNjLnNldCB8fCAhZGVzYy5nZXQgJiYgZGVmYXVsdE1ldGhvZCB8fCB1bmRlZmluZWQsXG4gICAgICAgIGNvbm5lY3Q6IGRlc2MuY29ubmVjdCxcbiAgICAgICAgb2JzZXJ2ZTogZGVzYy5vYnNlcnZlXG4gICAgICB9O1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIeWJyaWQucHJvdG90eXBlLCBrZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KHRoaXMsIGtleSwgY29uZmlnLmdldCk7XG4gICAgICB9LFxuICAgICAgc2V0OiBjb25maWcuc2V0ICYmIGZ1bmN0aW9uIHNldChuZXdWYWx1ZSkge1xuICAgICAgICBjYWNoZS5zZXQodGhpcywga2V5LCBjb25maWcuc2V0LCBuZXdWYWx1ZSk7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgIH0pO1xuXG4gICAgaWYgKGNvbmZpZy5vYnNlcnZlKSB7XG4gICAgICBIeWJyaWQuY2FsbGJhY2tzLnVuc2hpZnQoZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLm9ic2VydmUoaG9zdCwga2V5LCBjb25maWcuZ2V0LCBjb25maWcub2JzZXJ2ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNvbm5lY3QpIHtcbiAgICAgIEh5YnJpZC5jYWxsYmFja3MucHVzaChmdW5jdGlvbiAoaG9zdCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmNvbm5lY3QoaG9zdCwga2V5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FjaGUuaW52YWxpZGF0ZShob3N0LCBrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciB1cGRhdGU7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgd2Fsa0luU2hhZG93ID0gZnVuY3Rpb24gd2Fsa0luU2hhZG93KG5vZGUsIGZuKSB7XG4gICAgZm4obm9kZSk7XG4gICAgQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIHdhbGtJblNoYWRvdyhlbCwgZm4pO1xuICAgIH0pO1xuXG4gICAgaWYgKG5vZGUuc2hhZG93Um9vdCkge1xuICAgICAgQXJyYXkuZnJvbShub2RlLnNoYWRvd1Jvb3QuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHJldHVybiB3YWxrSW5TaGFkb3coZWwsIGZuKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdXBkYXRlUXVldWUgPSBuZXcgTWFwKCk7XG5cbiAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKEh5YnJpZCwgbGFzdEh5YnJpZHMpIHtcbiAgICBpZiAoIXVwZGF0ZVF1ZXVlLnNpemUpIHtcbiAgICAgIGRlZmVycmVkLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB3YWxrSW5TaGFkb3coZG9jdW1lbnQuYm9keSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICBpZiAodXBkYXRlUXVldWUuaGFzKG5vZGUuY29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgICB2YXIgaHlicmlkcyA9IHVwZGF0ZVF1ZXVlLmdldChub2RlLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIG5vZGUuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG5vZGUuY29uc3RydWN0b3IuaHlicmlkcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIGNhY2hlLmludmFsaWRhdGUobm9kZSwga2V5LCBub2RlLmNvbnN0cnVjdG9yLmh5YnJpZHNba2V5XSAhPT0gaHlicmlkc1trZXldKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbm9kZS5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHVwZGF0ZVF1ZXVlLmNsZWFyKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVRdWV1ZS5zZXQoSHlicmlkLCBsYXN0SHlicmlkcyk7XG4gIH07XG59XG5cbnZhciBkaXNjb25uZWN0cyA9IG5ldyBXZWFrTWFwKCk7XG5cbmZ1bmN0aW9uIGRlZmluZUVsZW1lbnQodGFnTmFtZSwgaHlicmlkc09yQ29uc3RydWN0b3IpIHtcbiAgdmFyIHR5cGUgPSBfdHlwZW9mKGh5YnJpZHNPckNvbnN0cnVjdG9yKTtcblxuICBpZiAodHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihcIlNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uOiBcIi5jb25jYXQodHlwZSkpO1xuICB9XG5cbiAgdmFyIEN1c3RvbUVsZW1lbnQgPSB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZ2V0KHRhZ05hbWUpO1xuXG4gIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKEN1c3RvbUVsZW1lbnQgIT09IGh5YnJpZHNPckNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBoeWJyaWRzT3JDb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIEN1c3RvbUVsZW1lbnQ7XG4gIH1cblxuICBpZiAoQ3VzdG9tRWxlbWVudCkge1xuICAgIGlmIChDdXN0b21FbGVtZW50Lmh5YnJpZHMgPT09IGh5YnJpZHNPckNvbnN0cnVjdG9yKSB7XG4gICAgICByZXR1cm4gQ3VzdG9tRWxlbWVudDtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBDdXN0b21FbGVtZW50Lmh5YnJpZHMpIHtcbiAgICAgIE9iamVjdC5rZXlzKEN1c3RvbUVsZW1lbnQuaHlicmlkcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSBDdXN0b21FbGVtZW50LnByb3RvdHlwZVtrZXldO1xuICAgICAgfSk7XG4gICAgICB2YXIgbGFzdEh5YnJpZHMgPSBDdXN0b21FbGVtZW50Lmh5YnJpZHM7XG4gICAgICBjb21waWxlKEN1c3RvbUVsZW1lbnQsIGh5YnJpZHNPckNvbnN0cnVjdG9yKTtcbiAgICAgIHVwZGF0ZShDdXN0b21FbGVtZW50LCBsYXN0SHlicmlkcyk7XG4gICAgICByZXR1cm4gQ3VzdG9tRWxlbWVudDtcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcihcIkVsZW1lbnQgJ1wiLmNvbmNhdCh0YWdOYW1lLCBcIicgYWxyZWFkeSBkZWZpbmVkXCIpKTtcbiAgfVxuXG4gIHZhciBIeWJyaWQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfSFRNTEVsZW1lbnQpIHtcbiAgICBfaW5oZXJpdHMoSHlicmlkLCBfSFRNTEVsZW1lbnQpO1xuXG4gICAgZnVuY3Rpb24gSHlicmlkKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEh5YnJpZCk7XG5cbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoSHlicmlkKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoSHlicmlkLCBbe1xuICAgICAga2V5OiBcImNvbm5lY3RlZENhbGxiYWNrXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmNvbnN0cnVjdG9yLmNhbGxiYWNrcztcbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY2FsbGJhY2tzLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICAgIHZhciBjYiA9IGNhbGxiYWNrc1tpbmRleF0odGhpcyk7XG4gICAgICAgICAgaWYgKGNiKSBsaXN0LnB1c2goY2IpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzY29ubmVjdHMuc2V0KHRoaXMsIGxpc3QpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNjb25uZWN0ZWRDYWxsYmFja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB2YXIgbGlzdCA9IGRpc2Nvbm5lY3RzLmdldCh0aGlzKTtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGlzdC5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICBsaXN0W2luZGV4XSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwibmFtZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0YWdOYW1lO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBIeWJyaWQ7XG4gIH0oX3dyYXBOYXRpdmVTdXBlcihIVE1MRWxlbWVudCkpO1xuXG4gIGNvbXBpbGUoSHlicmlkLCBoeWJyaWRzT3JDb25zdHJ1Y3Rvcik7XG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBIeWJyaWQpO1xuICByZXR1cm4gSHlicmlkO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVNYXAoZWxlbWVudHMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGVsZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgdmFyIHRhZ05hbWUgPSBwYXNjYWxUb0Rhc2goa2V5KTtcbiAgICBhY2Nba2V5XSA9IGRlZmluZUVsZW1lbnQodGFnTmFtZSwgZWxlbWVudHNba2V5XSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZpbmUoKSB7XG4gIGlmIChfdHlwZW9mKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGRlZmluZU1hcChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICB9XG5cbiAgcmV0dXJuIGRlZmluZUVsZW1lbnQuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlrWldacGJtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNISnZjR1Z5ZEhraUxDSnlaVzVrWlhJaUxDSmpZV05vWlNJc0luQmhjMk5oYkZSdlJHRnphQ0lzSW1SbFptVnljbVZrSWl3aWNISnZZMlZ6Y3lJc0ltVnVkaUlzSWs1UFJFVmZSVTVXSWl3aVpTSXNJbVJsWm1GMWJIUk5aWFJvYjJRaUxDSm9iM04wSWl3aWRtRnNkV1VpTENKamIyMXdhV3hsSWl3aVNIbGljbWxrSWl3aVpHVnpZM0pwY0hSdmNuTWlMQ0pvZVdKeWFXUnpJaXdpWTJGc2JHSmhZMnR6SWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW1admNrVmhZMmdpTENKclpYa2lMQ0prWlhOaklpd2lkSGx3WlNJc0ltTnZibVpwWnlJc0ltZGxkQ0lzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW5ObGRDSXNJblZ1WkdWbWFXNWxaQ0lzSW1OdmJtNWxZM1FpTENKdlluTmxjblpsSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKd2NtOTBiM1I1Y0dVaUxDSnVaWGRXWVd4MVpTSXNJbVZ1ZFcxbGNtRmliR1VpTENKamIyNW1hV2QxY21GaWJHVWlMQ0oxYm5Ob2FXWjBJaXdpY0hWemFDSXNJbWx1ZG1Gc2FXUmhkR1VpTENKMWNHUmhkR1VpTENKM1lXeHJTVzVUYUdGa2IzY2lMQ0p1YjJSbElpd2labTRpTENKbWNtOXRJaXdpWTJocGJHUnlaVzRpTENKbGJDSXNJbk5vWVdSdmQxSnZiM1FpTENKMWNHUmhkR1ZSZFdWMVpTSXNJazFoY0NJc0lteGhjM1JJZVdKeWFXUnpJaXdpYzJsNlpTSXNJblJvWlc0aUxDSmtiMk4xYldWdWRDSXNJbUp2WkhraUxDSm9ZWE1pTENKamIyNXpkSEoxWTNSdmNpSXNJbVJwYzJOdmJtNWxZM1JsWkVOaGJHeGlZV05ySWl3aVkyOXVibVZqZEdWa1EyRnNiR0poWTJzaUxDSmpiR1ZoY2lJc0ltUnBjMk52Ym01bFkzUnpJaXdpVjJWaGEwMWhjQ0lzSW1SbFptbHVaVVZzWlcxbGJuUWlMQ0owWVdkT1lXMWxJaXdpYUhsaWNtbGtjMDl5UTI5dWMzUnlkV04wYjNJaUxDSlVlWEJsUlhKeWIzSWlMQ0pEZFhOMGIyMUZiR1Z0Wlc1MElpd2lkMmx1Wkc5M0lpd2lZM1Z6ZEc5dFJXeGxiV1Z1ZEhNaUxDSmtaV1pwYm1VaUxDSkZjbkp2Y2lJc0lteHBjM1FpTENKcGJtUmxlQ0lzSW14bGJtZDBhQ0lzSW1OaUlpd2lTRlJOVEVWc1pXMWxiblFpTENKa1pXWnBibVZOWVhBaUxDSmxiR1Z0Wlc1MGN5SXNJbkpsWkhWalpTSXNJbUZqWXlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUZCUVN4UFFVRlBRU3hSUVVGUUxFMUJRWEZDTEZsQlFYSkNPMEZCUTBFc1QwRkJUME1zVFVGQlVDeE5RVUZ0UWl4VlFVRnVRanRCUVVWQkxFOUJRVThzUzBGQlMwTXNTMEZCV2l4TlFVRjFRaXhUUVVGMlFqdEJRVU5CTEZOQlFWTkRMRmxCUVZRc1JVRkJkVUpETEZGQlFYWkNMRkZCUVhWRExGTkJRWFpETzBGQlJVRTdPMEZCUTBFc1NVRkJTVHRCUVVGRlF5eEZRVUZCUVN4UFFVRlBMRU5CUVVORExFZEJRVklzUTBGQldVTXNVVUZCV2p0QlFVRnpRaXhEUVVFMVFpeERRVUUyUWl4UFFVRk5ReXhEUVVGT0xFVkJRVk03UVVGQlJTeE5RVUZKU0N4UFFVRlBMRWRCUVVjN1FVRkJSVU1zU1VGQlFVRXNSMEZCUnl4RlFVRkZPMEZCUVVWRExFMUJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVRmFPMEZCUVZBc1IwRkJaRHRCUVVGdlJDeERMRU5CUVVNN096dEJRVVUzUml4SlFVRk5SU3hoUVVGaExFZEJRVWNzVTBGQmFFSkJMR0ZCUVdkQ0xFTkJRVU5ETEVsQlFVUXNSVUZCVDBNc1MwRkJVRHRCUVVGQkxGTkJRV2xDUVN4TFFVRnFRanRCUVVGQkxFTkJRWFJDT3p0QlFVVkJMRk5CUVZORExFOUJRVlFzUTBGQmFVSkRMRTFCUVdwQ0xFVkJRWGxDUXl4WFFVRjZRaXhGUVVGelF6dEJRVU53UTBRc1JVRkJRVUVzVFVGQlRTeERRVUZEUlN4UFFVRlFMRWRCUVdsQ1JDeFhRVUZxUWp0QlFVTkJSQ3hGUVVGQlFTeE5RVUZOTEVOQlFVTkhMRk5CUVZBc1IwRkJiVUlzUlVGQmJrSTdRVUZGUVVNc1JVRkJRVUVzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZsS0xGZEJRVm9zUlVGQmVVSkxMRTlCUVhwQ0xFTkJRV2xETEZWQlFVTkRMRWRCUVVRc1JVRkJVenRCUVVONFF5eFJRVUZOUXl4SlFVRkpMRWRCUVVkUUxGZEJRVmNzUTBGQlEwMHNSMEZCUkN4RFFVRjRRanM3UVVGRFFTeFJRVUZOUlN4SlFVRkpMRmRCUVZWRUxFbEJRVllzUTBGQlZqczdRVUZGUVN4UlFVRkpSU3hOUVVGS096dEJRVVZCTEZGQlFVbEVMRWxCUVVrc1MwRkJTeXhWUVVGaUxFVkJRWGxDTzBGQlEzWkNReXhOUVVGQlFTeE5RVUZOTEVkQlFVZElMRWRCUVVjc1MwRkJTeXhSUVVGU0xFZEJRVzFDYmtJc1RVRkJUU3hEUVVGRGIwSXNTVUZCUkN4RFFVRjZRaXhIUVVGclF6dEJRVUZGUnl4UlFVRkJRU3hIUVVGSExFVkJRVVZJTzBGQlFWQXNUMEZCTTBNN1FVRkRSQ3hMUVVaRUxFMUJSVThzU1VGQlNVTXNTVUZCU1N4TFFVRkxMRkZCUVZRc1NVRkJjVUpFTEVsQlFVa3NTMEZCU3l4SlFVRTVRaXhKUVVGMVEwa3NTMEZCU3l4RFFVRkRReXhQUVVGT0xFTkJRV05NTEVsQlFXUXNRMEZCTTBNc1JVRkJhVVU3UVVGRGRFVkZMRTFCUVVGQkxFMUJRVTBzUjBGQlIzWkNMRkZCUVZFc1EwRkJRM0ZDTEVsQlFVUXNRMEZCYWtJN1FVRkRSQ3hMUVVaTkxFMUJSVUU3UVVGRFRFVXNUVUZCUVVFc1RVRkJUU3hIUVVGSE8wRkJRMUJETEZGQlFVRkJMRWRCUVVjc1JVRkJSVWdzU1VGQlNTeERRVUZEUnl4SFFVRk1MRWxCUVZsbUxHRkJSRlk3UVVGRlVHdENMRkZCUVVGQkxFZEJRVWNzUlVGQlJVNHNTVUZCU1N4RFFVRkRUU3hIUVVGTUxFbEJRV0VzUTBGQlEwNHNTVUZCU1N4RFFVRkRSeXhIUVVGT0xFbEJRV0ZtTEdGQlFURkNMRWxCUVRSRGJVSXNVMEZHTVVNN1FVRkhVRU1zVVVGQlFVRXNUMEZCVHl4RlFVRkZVaXhKUVVGSkxFTkJRVU5STEU5QlNGQTdRVUZKVUVNc1VVRkJRVUVzVDBGQlR5eEZRVUZGVkN4SlFVRkpMRU5CUVVOVE8wRkJTbEFzVDBGQlZEdEJRVTFFT3p0QlFVVkVZaXhKUVVGQlFTeE5RVUZOTEVOQlFVTmpMR05CUVZBc1EwRkJjMEpzUWl4TlFVRk5MRU5CUVVOdFFpeFRRVUUzUWl4RlFVRjNRMW9zUjBGQmVFTXNSVUZCTmtNN1FVRkRNME5KTEUxQlFVRkJMRWRCUVVjc1JVRkJSU3hUUVVGVFFTeEhRVUZVTEVkQlFXVTdRVUZEYkVJc1pVRkJUM1JDTEV0QlFVc3NRMEZCUTNOQ0xFZEJRVTRzUTBGQlZTeEpRVUZXTEVWQlFXZENTaXhIUVVGb1FpeEZRVUZ4UWtjc1RVRkJUU3hEUVVGRFF5eEhRVUUxUWl4RFFVRlFPMEZCUTBRc1QwRklNRU03UVVGSk0wTkhMRTFCUVVGQkxFZEJRVWNzUlVGQlJVb3NUVUZCVFN4RFFVRkRTU3hIUVVGUUxFbEJRV01zVTBGQlUwRXNSMEZCVkN4RFFVRmhUU3hSUVVGaUxFVkJRWFZDTzBGQlEzaERMMElzVVVGQlFVRXNTMEZCU3l4RFFVRkRlVUlzUjBGQlRpeERRVUZWTEVsQlFWWXNSVUZCWjBKUUxFZEJRV2hDTEVWQlFYRkNSeXhOUVVGTkxFTkJRVU5KTEVkQlFUVkNMRVZCUVdsRFRTeFJRVUZxUXp0QlFVTkVMRTlCVGpCRE8wRkJUek5EUXl4TlFVRkJRU3hWUVVGVkxFVkJRVVVzU1VGUUswSTdRVUZSTTBORExFMUJRVUZCTEZsQlFWa3NSVUZCUlRsQ0xFOUJRVThzUTBGQlEwTXNSMEZCVWl4RFFVRlpReXhSUVVGYUxFdEJRWGxDTzBGQlVra3NTMEZCTjBNN08wRkJWMEVzVVVGQlNXZENMRTFCUVUwc1EwRkJRMDhzVDBGQldDeEZRVUZ2UWp0QlFVTnNRbXBDTEUxQlFVRkJMRTFCUVUwc1EwRkJRMGNzVTBGQlVDeERRVUZwUW05Q0xFOUJRV3BDTEVOQlEwVXNWVUZCUXpGQ0xFbEJRVVE3UVVGQlFTeGxRVUZWVWl4TFFVRkxMRU5CUVVNMFFpeFBRVUZPTEVOQlFXTndRaXhKUVVGa0xFVkJRVzlDVlN4SFFVRndRaXhGUVVGNVFrY3NUVUZCVFN4RFFVRkRReXhIUVVGb1F5eEZRVUZ4UTBRc1RVRkJUU3hEUVVGRFR5eFBRVUUxUXl4RFFVRldPMEZCUVVFc1QwRkVSanRCUVVkRU96dEJRVVZFTEZGQlFVbFFMRTFCUVUwc1EwRkJRMDBzVDBGQldDeEZRVUZ2UWp0QlFVTnNRbWhDTEUxQlFVRkJMRTFCUVUwc1EwRkJRMGNzVTBGQlVDeERRVUZwUW5GQ0xFbEJRV3BDTEVOQlEwVXNWVUZCUXpOQ0xFbEJRVVE3UVVGQlFTeGxRVUZWWVN4TlFVRk5MRU5CUVVOTkxFOUJRVkFzUTBGQlpXNUNMRWxCUVdZc1JVRkJjVUpWTEVkQlFYSkNMRVZCUVRCQ0xGbEJRVTA3UVVGQlJXeENMRlZCUVVGQkxFdEJRVXNzUTBGQlEyOURMRlZCUVU0c1EwRkJhVUkxUWl4SlFVRnFRaXhGUVVGMVFsVXNSMEZCZGtJN1FVRkJPRUlzVTBGQmFFVXNRMEZCVmp0QlFVRkJMRTlCUkVZN1FVRkhSRHRCUVVOR0xFZEJla05FTzBGQk1FTkVPenRCUVVWRUxFbEJRVWx0UWl4TlFVRktPMEZCUTBFN08wRkJRMEVzU1VGQlNXeERMRTlCUVU4c1EwRkJRME1zUjBGQlVpeERRVUZaUXl4UlFVRmFMRXRCUVhsQ0xGbEJRVGRDTEVWQlFUSkRPMEZCUTNwRExFMUJRVTFwUXl4WlFVRlpMRWRCUVVjc1UwRkJaa0VzV1VGQlpTeERRVUZEUXl4SlFVRkVMRVZCUVU5RExFVkJRVkFzUlVGQll6dEJRVU5xUTBFc1NVRkJRVUVzUlVGQlJTeERRVUZEUkN4SlFVRkVMRU5CUVVZN1FVRkZRV2hDTEVsQlFVRkJMRXRCUVVzc1EwRkJRMnRDTEVsQlFVNHNRMEZCVjBZc1NVRkJTU3hEUVVGRFJ5eFJRVUZvUWl4RlFVTkhla0lzVDBGRVNDeERRVU5YTEZWQlFVTXdRaXhGUVVGRU8wRkJRVUVzWVVGQlVVd3NXVUZCV1N4RFFVRkRTeXhGUVVGRUxFVkJRVXRJTEVWQlFVd3NRMEZCY0VJN1FVRkJRU3hMUVVSWU96dEJRVWRCTEZGQlFVbEVMRWxCUVVrc1EwRkJRMHNzVlVGQlZDeEZRVUZ4UWp0QlFVTnVRbkpDTEUxQlFVRkJMRXRCUVVzc1EwRkJRMnRDTEVsQlFVNHNRMEZCVjBZc1NVRkJTU3hEUVVGRFN5eFZRVUZNTEVOQlFXZENSaXhSUVVFelFpeEZRVU5IZWtJc1QwRkVTQ3hEUVVOWExGVkJRVU13UWl4RlFVRkVPMEZCUVVFc1pVRkJVVXdzV1VGQldTeERRVUZEU3l4RlFVRkVMRVZCUVV0SUxFVkJRVXdzUTBGQmNFSTdRVUZCUVN4UFFVUllPMEZCUlVRN1FVRkRSaXhIUVZaRU96dEJRVmxCTEUxQlFVMUxMRmRCUVZjc1IwRkJSeXhKUVVGSlF5eEhRVUZLTEVWQlFYQkNPenRCUVVOQlZDeEZRVUZCUVN4TlFVRk5MRWRCUVVjc1owSkJRVU14UWl4TlFVRkVMRVZCUVZOdlF5eFhRVUZVTEVWQlFYbENPMEZCUTJoRExGRkJRVWtzUTBGQlEwWXNWMEZCVnl4RFFVRkRSeXhKUVVGcVFpeEZRVUYxUWp0QlFVTnlRamxETEUxQlFVRkJMRkZCUVZFc1EwRkJReXRETEVsQlFWUXNRMEZCWXl4WlFVRk5PMEZCUTJ4Q1dDeFJRVUZCUVN4WlFVRlpMRU5CUVVOWkxGRkJRVkVzUTBGQlEwTXNTVUZCVml4RlFVRm5RaXhWUVVGRFdpeEpRVUZFTEVWQlFWVTdRVUZEY0VNc1kwRkJTVTBzVjBGQlZ5eERRVUZEVHl4SFFVRmFMRU5CUVdkQ1lpeEpRVUZKTEVOQlFVTmpMRmRCUVhKQ0xFTkJRVW9zUlVGQmRVTTdRVUZEY2tNc1owSkJRVTE0UXl4UFFVRlBMRWRCUVVkblF5eFhRVUZYTEVOQlFVTjJRaXhIUVVGYUxFTkJRV2RDYVVJc1NVRkJTU3hEUVVGRFl5eFhRVUZ5UWl4RFFVRm9RanRCUVVOQlpDeFpRVUZCUVN4SlFVRkpMRU5CUVVObExHOUNRVUZNTzBGQlJVRjJReXhaUVVGQlFTeE5RVUZOTEVOQlFVTkRMRWxCUVZBc1EwRkJXWFZDTEVsQlFVa3NRMEZCUTJNc1YwRkJUQ3hEUVVGcFFuaERMRTlCUVRkQ0xFVkJRWE5EU1N4UFFVRjBReXhEUVVFNFF5eFZRVUZEUXl4SFFVRkVMRVZCUVZNN1FVRkRja1JzUWl4alFVRkJRU3hMUVVGTExFTkJRVU52UXl4VlFVRk9MRU5CUVdsQ1J5eEpRVUZxUWl4RlFVRjFRbkpDTEVkQlFYWkNMRVZCUVRSQ2NVSXNTVUZCU1N4RFFVRkRZeXhYUVVGTUxFTkJRV2xDZUVNc1QwRkJha0lzUTBGQmVVSkxMRWRCUVhwQ0xFMUJRV3REVEN4UFFVRlBMRU5CUVVOTExFZEJRVVFzUTBGQmNrVTdRVUZEUkN4aFFVWkVPMEZCU1VGeFFpeFpRVUZCUVN4SlFVRkpMRU5CUVVOblFpeHBRa0ZCVER0QlFVTkVPMEZCUTBZc1UwRllWeXhEUVVGYU8wRkJXVUZXTEZGQlFVRkJMRmRCUVZjc1EwRkJRMWNzUzBGQldqdEJRVU5FTEU5QlpFUTdRVUZsUkRzN1FVRkRSRmdzU1VGQlFVRXNWMEZCVnl4RFFVRkRjRUlzUjBGQldpeERRVUZuUW1Rc1RVRkJhRUlzUlVGQmQwSnZReXhYUVVGNFFqdEJRVU5FTEVkQmJrSkVPMEZCYjBKRU96dEJRVVZFTEVsQlFVMVZMRmRCUVZjc1IwRkJSeXhKUVVGSlF5eFBRVUZLTEVWQlFYQkNPenRCUVVWQkxGTkJRVk5ETEdGQlFWUXNRMEZCZFVKRExFOUJRWFpDTEVWQlFXZERReXh2UWtGQmFFTXNSVUZCYzBRN1FVRkRjRVFzVFVGQlRYcERMRWxCUVVrc1YwRkJWWGxETEc5Q1FVRldMRU5CUVZZN08wRkJRMEVzVFVGQlNYcERMRWxCUVVrc1MwRkJTeXhSUVVGVUxFbEJRWEZDUVN4SlFVRkpMRXRCUVVzc1ZVRkJiRU1zUlVGQk9FTTdRVUZETlVNc1ZVRkJUVEJETEZOQlFWTXNORVJCUVhGRU1VTXNTVUZCY2tRc1JVRkJaanRCUVVORU96dEJRVVZFTEUxQlFVMHlReXhoUVVGaExFZEJRVWRETEUxQlFVMHNRMEZCUTBNc1kwRkJVQ3hEUVVGelFqTkRMRWRCUVhSQ0xFTkJRVEJDYzBNc1QwRkJNVUlzUTBGQmRFSTdPMEZCUlVFc1RVRkJTWGhETEVsQlFVa3NTMEZCU3l4VlFVRmlMRVZCUVhsQ08wRkJRM1pDTEZGQlFVa3lReXhoUVVGaExFdEJRVXRHTEc5Q1FVRjBRaXhGUVVFMFF6dEJRVU14UXl4aFFVRlBSeXhOUVVGTkxFTkJRVU5ETEdOQlFWQXNRMEZCYzBKRExFMUJRWFJDTEVOQlFUWkNUaXhQUVVFM1FpeEZRVUZ6UTBNc2IwSkJRWFJETEVOQlFWQTdRVUZEUkRzN1FVRkRSQ3hYUVVGUFJTeGhRVUZRTzBGQlEwUTdPMEZCUlVRc1RVRkJTVUVzWVVGQlNpeEZRVUZ0UWp0QlFVTnFRaXhSUVVGSlFTeGhRVUZoTEVOQlFVTnNSQ3hQUVVGa0xFdEJRVEJDWjBRc2IwSkJRVGxDTEVWQlFXOUVPMEZCUTJ4RUxHRkJRVTlGTEdGQlFWQTdRVUZEUkRzN1FVRkRSQ3hSUVVGSk5VUXNUMEZCVHl4RFFVRkRReXhIUVVGU0xFTkJRVmxETEZGQlFWb3NTMEZCZVVJc1dVRkJla0lzU1VGQmVVTXdSQ3hoUVVGaExFTkJRVU5zUkN4UFFVRXpSQ3hGUVVGdlJUdEJRVU5zUlVVc1RVRkJRVUVzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZrclF5eGhRVUZoTEVOQlFVTnNSQ3hQUVVFeFFpeEZRVUZ0UTBrc1QwRkJia01zUTBGQk1rTXNWVUZCUTBNc1IwRkJSQ3hGUVVGVE8wRkJRMnhFTEdWQlFVODJReXhoUVVGaExFTkJRVU5xUXl4VFFVRmtMRU5CUVhkQ1dpeEhRVUY0UWl4RFFVRlFPMEZCUTBRc1QwRkdSRHRCUVVsQkxGVkJRVTAyUWl4WFFVRlhMRWRCUVVkblFpeGhRVUZoTEVOQlFVTnNSQ3hQUVVGc1F6dEJRVVZCU0N4TlFVRkJRU3hQUVVGUExFTkJRVU54UkN4aFFVRkVMRVZCUVdkQ1JpeHZRa0ZCYUVJc1EwRkJVRHRCUVVOQmVFSXNUVUZCUVVFc1RVRkJUU3hEUVVGRE1FSXNZVUZCUkN4RlFVRm5RbWhDTEZkQlFXaENMRU5CUVU0N1FVRkZRU3hoUVVGUFowSXNZVUZCVUR0QlFVTkVPenRCUVVWRUxGVkJRVTFKTEV0QlFVc3NiMEpCUVdGUUxFOUJRV0lzZFVKQlFWZzdRVUZEUkRzN1FVRnFRMjFFTEUxQmJVTTVRMnBFTEUxQmJrTTRRenRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJMREJEUVhORE9VSTdRVUZCUVN4WlFVTldSeXhUUVVSVkxFZEJRMGtzUzBGQlMzVkRMRmRCUkZRc1EwRkRWblpETEZOQlJGVTdRVUZGYkVJc1dVRkJUWE5FTEVsQlFVa3NSMEZCUnl4RlFVRmlPenRCUVVWQkxHRkJRVXNzU1VGQlNVTXNTMEZCU3l4SFFVRkhMRU5CUVdwQ0xFVkJRVzlDUVN4TFFVRkxMRWRCUVVkMlJDeFRRVUZUTEVOQlFVTjNSQ3hOUVVGMFF5eEZRVUU0UTBRc1MwRkJTeXhKUVVGSkxFTkJRWFpFTEVWQlFUQkVPMEZCUTNoRUxHTkJRVTFGTEVWQlFVVXNSMEZCUjNwRUxGTkJRVk1zUTBGQlEzVkVMRXRCUVVRc1EwRkJWQ3hEUVVGcFFpeEpRVUZxUWl4RFFVRllPMEZCUTBFc1kwRkJTVVVzUlVGQlNpeEZRVUZSU0N4SlFVRkpMRU5CUVVOcVF5eEpRVUZNTEVOQlFWVnZReXhGUVVGV08wRkJRMVE3TzBGQlJVUmtMRkZCUVVGQkxGZEJRVmNzUTBGQlEyaERMRWRCUVZvc1EwRkJaMElzU1VGQmFFSXNSVUZCYzBJeVF5eEpRVUYwUWp0QlFVTkVPMEZCYUVScFJEdEJRVUZCTzBGQlFVRXNOa05CYTBRelFqdEJRVU55UWl4WlFVRk5RU3hKUVVGSkxFZEJRVWRZTEZkQlFWY3NRMEZCUTI1RExFZEJRVm9zUTBGQlowSXNTVUZCYUVJc1EwRkJZanM3UVVGRFFTeGhRVUZMTEVsQlFVa3JReXhMUVVGTExFZEJRVWNzUTBGQmFrSXNSVUZCYjBKQkxFdEJRVXNzUjBGQlIwUXNTVUZCU1N4RFFVRkRSU3hOUVVGcVF5eEZRVUY1UTBRc1MwRkJTeXhKUVVGSkxFTkJRV3hFTEVWQlFYRkVPMEZCUTI1RVJDeFZRVUZCUVN4SlFVRkpMRU5CUVVORExFdEJRVVFzUTBGQlNqdEJRVU5FTzBGQlEwWTdRVUYyUkdsRU8wRkJRVUU3UVVGQlFTd3dRa0Z2UTJoRE8wRkJRVVVzWlVGQlQxUXNUMEZCVUR0QlFVRnBRanRCUVhCRFlUczdRVUZCUVR0QlFVRkJMSEZDUVcxREwwSlpMRmRCYmtNclFqczdRVUV3UkhCRU9VUXNSVUZCUVVFc1QwRkJUeXhEUVVGRFF5eE5RVUZFTEVWQlFWTnJSQ3h2UWtGQlZDeERRVUZRTzBGQlEwRkpMRVZCUVVGQkxHTkJRV01zUTBGQlEwTXNUVUZCWml4RFFVRnpRazRzVDBGQmRFSXNSVUZCSzBKcVJDeE5RVUV2UWp0QlFVVkJMRk5CUVU5QkxFMUJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRPRVFzVTBGQlZDeERRVUZ0UWtNc1VVRkJia0lzUlVGQk5rSTdRVUZETTBJc1UwRkJUek5FTEUxQlFVMHNRMEZCUTBNc1NVRkJVQ3hEUVVGWk1FUXNVVUZCV2l4RlFVRnpRa01zVFVGQmRFSXNRMEZCTmtJc1ZVRkJRME1zUjBGQlJDeEZRVUZOTVVRc1IwRkJUaXhGUVVGak8wRkJRMmhFTEZGQlFVMHdReXhQUVVGUExFZEJRVWN6UkN4WlFVRlpMRU5CUVVOcFFpeEhRVUZFTEVOQlFUVkNPMEZCUTBFd1JDeEpRVUZCUVN4SFFVRkhMRU5CUVVNeFJDeEhRVUZFTEVOQlFVZ3NSMEZCVjNsRExHRkJRV0VzUTBGQlEwTXNUMEZCUkN4RlFVRlZZeXhSUVVGUkxFTkJRVU40UkN4SFFVRkVMRU5CUVd4Q0xFTkJRWGhDTzBGQlJVRXNWMEZCVHpCRUxFZEJRVkE3UVVGRFJDeEhRVXhOTEVWQlMwb3NSVUZNU1N4RFFVRlFPMEZCVFVRN08wRkJSVVFzWlVGQlpTeFRRVUZUVml4TlFVRlVMRWRCUVhsQ08wRkJRM1JETEUxQlFVa3NPRVJCUVcxQ0xGRkJRWFpDTEVWQlFXbERPMEZCUXk5Q0xGZEJRVTlQTEZOQlFWTXNhMFJCUVdoQ08wRkJRMFE3TzBGQlJVUXNVMEZCVDJRc1lVRkJZU3hOUVVGaUxHMUNRVUZRTzBGQlEwUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdjSEp2Y0dWeWRIa2dabkp2YlNBbkxpOXdjbTl3WlhKMGVTYzdYRzVwYlhCdmNuUWdjbVZ1WkdWeUlHWnliMjBnSnk0dmNtVnVaR1Z5Snp0Y2JseHVhVzF3YjNKMElDb2dZWE1nWTJGamFHVWdabkp2YlNBbkxpOWpZV05vWlNjN1hHNXBiWEJ2Y25RZ2V5QndZWE5qWVd4VWIwUmhjMmdzSUdSbFptVnljbVZrSUgwZ1puSnZiU0FuTGk5MWRHbHNjeWM3WEc1Y2JpOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNTBjbmtnZXlCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQjlJR05oZEdOb0tHVXBJSHNnZG1GeUlIQnliMk5sYzNNZ1BTQjdJR1Z1ZGpvZ2V5Qk9UMFJGWDBWT1Zqb2dKM0J5YjJSMVkzUnBiMjRuSUgwZ2ZUc2dmU0F2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bFhHNWNibU52Ym5OMElHUmxabUYxYkhSTlpYUm9iMlFnUFNBb2FHOXpkQ3dnZG1Gc2RXVXBJRDArSUhaaGJIVmxPMXh1WEc1bWRXNWpkR2x2YmlCamIyMXdhV3hsS0VoNVluSnBaQ3dnWkdWelkzSnBjSFJ2Y25NcElIdGNiaUFnU0hsaWNtbGtMbWg1WW5KcFpITWdQU0JrWlhOamNtbHdkRzl5Y3p0Y2JpQWdTSGxpY21sa0xtTmhiR3hpWVdOcmN5QTlJRnRkTzF4dVhHNGdJRTlpYW1WamRDNXJaWGx6S0dSbGMyTnlhWEIwYjNKektTNW1iM0pGWVdOb0tDaHJaWGtwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0JrWlhOaklEMGdaR1Z6WTNKcGNIUnZjbk5iYTJWNVhUdGNiaUFnSUNCamIyNXpkQ0IwZVhCbElEMGdkSGx3Wlc5bUlHUmxjMk03WEc1Y2JpQWdJQ0JzWlhRZ1kyOXVabWxuTzF4dVhHNGdJQ0FnYVdZZ0tIUjVjR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJR052Ym1acFp5QTlJR3RsZVNBOVBUMGdKM0psYm1SbGNpY2dQeUJ5Wlc1a1pYSW9aR1Z6WXlrZ09pQjdJR2RsZERvZ1pHVnpZeUI5TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pTQWhQVDBnSjI5aWFtVmpkQ2NnZkh3Z1pHVnpZeUE5UFQwZ2JuVnNiQ0I4ZkNBb1FYSnlZWGt1YVhOQmNuSmhlU2hrWlhOaktTa3BJSHRjYmlBZ0lDQWdJR052Ym1acFp5QTlJSEJ5YjNCbGNuUjVLR1JsYzJNcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JqYjI1bWFXY2dQU0I3WEc0Z0lDQWdJQ0FnSUdkbGREb2daR1Z6WXk1blpYUWdmSHdnWkdWbVlYVnNkRTFsZEdodlpDeGNiaUFnSUNBZ0lDQWdjMlYwT2lCa1pYTmpMbk5sZENCOGZDQW9JV1JsYzJNdVoyVjBJQ1ltSUdSbFptRjFiSFJOWlhSb2IyUXBJSHg4SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ1kyOXVibVZqZERvZ1pHVnpZeTVqYjI1dVpXTjBMRnh1SUNBZ0lDQWdJQ0J2WW5ObGNuWmxPaUJrWlhOakxtOWljMlZ5ZG1Vc1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaEllV0p5YVdRdWNISnZkRzkwZVhCbExDQnJaWGtzSUh0Y2JpQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdaMlYwS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1V1WjJWMEtIUm9hWE1zSUd0bGVTd2dZMjl1Wm1sbkxtZGxkQ2s3WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnYzJWME9pQmpiMjVtYVdjdWMyVjBJQ1ltSUdaMWJtTjBhVzl1SUhObGRDaHVaWGRXWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pTNXpaWFFvZEdocGN5d2dhMlY1TENCamIyNW1hV2N1YzJWMExDQnVaWGRXWVd4MVpTazdYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1Snl4Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUlDaGpiMjVtYVdjdWIySnpaWEoyWlNrZ2UxeHVJQ0FnSUNBZ1NIbGljbWxrTG1OaGJHeGlZV05yY3k1MWJuTm9hV1owS0Z4dUlDQWdJQ0FnSUNBb2FHOXpkQ2tnUFQ0Z1kyRmphR1V1YjJKelpYSjJaU2hvYjNOMExDQnJaWGtzSUdOdmJtWnBaeTVuWlhRc0lHTnZibVpwWnk1dlluTmxjblpsS1N4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTnZibVpwWnk1amIyNXVaV04wS1NCN1hHNGdJQ0FnSUNCSWVXSnlhV1F1WTJGc2JHSmhZMnR6TG5CMWMyZ29YRzRnSUNBZ0lDQWdJQ2hvYjNOMEtTQTlQaUJqYjI1bWFXY3VZMjl1Ym1WamRDaG9iM04wTENCclpYa3NJQ2dwSUQwK0lIc2dZMkZqYUdVdWFXNTJZV3hwWkdGMFpTaG9iM04wTENCclpYa3BPeUI5S1N4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYm4xY2JseHViR1YwSUhWd1pHRjBaVHRjYmk4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCbGJITmxJQ292WEc1cFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQmpiMjV6ZENCM1lXeHJTVzVUYUdGa2IzY2dQU0FvYm05a1pTd2dabTRwSUQwK0lIdGNiaUFnSUNCbWJpaHViMlJsS1R0Y2JseHVJQ0FnSUVGeWNtRjVMbVp5YjIwb2JtOWtaUzVqYUdsc1pISmxiaWxjYmlBZ0lDQWdJQzVtYjNKRllXTm9LQ2hsYkNrZ1BUNGdkMkZzYTBsdVUyaGhaRzkzS0dWc0xDQm1iaWtwTzF4dVhHNGdJQ0FnYVdZZ0tHNXZaR1V1YzJoaFpHOTNVbTl2ZENrZ2UxeHVJQ0FnSUNBZ1FYSnlZWGt1Wm5KdmJTaHViMlJsTG5Ob1lXUnZkMUp2YjNRdVkyaHBiR1J5Wlc0cFhHNGdJQ0FnSUNBZ0lDNW1iM0pGWVdOb0tDaGxiQ2tnUFQ0Z2QyRnNhMGx1VTJoaFpHOTNLR1ZzTENCbWJpa3BPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JqYjI1emRDQjFjR1JoZEdWUmRXVjFaU0E5SUc1bGR5Qk5ZWEFvS1R0Y2JpQWdkWEJrWVhSbElEMGdLRWg1WW5KcFpDd2diR0Z6ZEVoNVluSnBaSE1wSUQwK0lIdGNiaUFnSUNCcFppQW9JWFZ3WkdGMFpWRjFaWFZsTG5OcGVtVXBJSHRjYmlBZ0lDQWdJR1JsWm1WeWNtVmtMblJvWlc0b0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCM1lXeHJTVzVUYUdGa2IzY29aRzlqZFcxbGJuUXVZbTlrZVN3Z0tHNXZaR1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RYQmtZWFJsVVhWbGRXVXVhR0Z6S0c1dlpHVXVZMjl1YzNSeWRXTjBiM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm9lV0p5YVdSeklEMGdkWEJrWVhSbFVYVmxkV1V1WjJWMEtHNXZaR1V1WTI5dWMzUnlkV04wYjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNWthWE5qYjI1dVpXTjBaV1JEWVd4c1ltRmpheWdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3lodWIyUmxMbU52Ym5OMGNuVmpkRzl5TG1oNVluSnBaSE1wTG1admNrVmhZMmdvS0d0bGVTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pTNXBiblpoYkdsa1lYUmxLRzV2WkdVc0lHdGxlU3dnYm05a1pTNWpiMjV6ZEhKMVkzUnZjaTVvZVdKeWFXUnpXMnRsZVYwZ0lUMDlJR2g1WW5KcFpITmJhMlY1WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNWpiMjV1WldOMFpXUkRZV3hzWW1GamF5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFZ3WkdGMFpWRjFaWFZsTG1Oc1pXRnlLQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkWEJrWVhSbFVYVmxkV1V1YzJWMEtFaDVZbkpwWkN3Z2JHRnpkRWg1WW5KcFpITXBPMXh1SUNCOU8xeHVmVnh1WEc1amIyNXpkQ0JrYVhOamIyNXVaV04wY3lBOUlHNWxkeUJYWldGclRXRndLQ2s3WEc1Y2JtWjFibU4wYVc5dUlHUmxabWx1WlVWc1pXMWxiblFvZEdGblRtRnRaU3dnYUhsaWNtbGtjMDl5UTI5dWMzUnlkV04wYjNJcElIdGNiaUFnWTI5dWMzUWdkSGx3WlNBOUlIUjVjR1Z2WmlCb2VXSnlhV1J6VDNKRGIyNXpkSEoxWTNSdmNqdGNiaUFnYVdZZ0tIUjVjR1VnSVQwOUlDZHZZbXBsWTNRbklDWW1JSFI1Y0dVZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QlVlWEJsUlhKeWIzSW9ZRk5sWTI5dVpDQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRnVJRzlpYW1WamRDQnZjaUJoSUdaMWJtTjBhVzl1T2lBa2UzUjVjR1Y5WUNrN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCRGRYTjBiMjFGYkdWdFpXNTBJRDBnZDJsdVpHOTNMbU4xYzNSdmJVVnNaVzFsYm5SekxtZGxkQ2gwWVdkT1lXMWxLVHRjYmx4dUlDQnBaaUFvZEhsd1pTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUdsbUlDaERkWE4wYjIxRmJHVnRaVzUwSUNFOVBTQm9lV0p5YVdSelQzSkRiMjV6ZEhKMVkzUnZjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSGRwYm1SdmR5NWpkWE4wYjIxRmJHVnRaVzUwY3k1a1pXWnBibVVvZEdGblRtRnRaU3dnYUhsaWNtbGtjMDl5UTI5dWMzUnlkV04wYjNJcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdRM1Z6ZEc5dFJXeGxiV1Z1ZER0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hEZFhOMGIyMUZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ2FXWWdLRU4xYzNSdmJVVnNaVzFsYm5RdWFIbGljbWxrY3lBOVBUMGdhSGxpY21sa2MwOXlRMjl1YzNSeWRXTjBiM0lwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJEZFhOMGIyMUZiR1Z0Wlc1ME8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdJVDA5SUNkd2NtOWtkV04wYVc5dUp5QW1KaUJEZFhOMGIyMUZiR1Z0Wlc1MExtaDVZbkpwWkhNcElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1clpYbHpLRU4xYzNSdmJVVnNaVzFsYm5RdWFIbGljbWxrY3lrdVptOXlSV0ZqYUNnb2EyVjVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCRGRYTjBiMjFGYkdWdFpXNTBMbkJ5YjNSdmRIbHdaVnRyWlhsZE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJR052Ym5OMElHeGhjM1JJZVdKeWFXUnpJRDBnUTNWemRHOXRSV3hsYldWdWRDNW9lV0p5YVdSek8xeHVYRzRnSUNBZ0lDQmpiMjF3YVd4bEtFTjFjM1J2YlVWc1pXMWxiblFzSUdoNVluSnBaSE5QY2tOdmJuTjBjblZqZEc5eUtUdGNiaUFnSUNBZ0lIVndaR0YwWlNoRGRYTjBiMjFGYkdWdFpXNTBMQ0JzWVhOMFNIbGljbWxrY3lrN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCRGRYTjBiMjFGYkdWdFpXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9jbTkzSUVWeWNtOXlLR0JGYkdWdFpXNTBJQ2NrZTNSaFowNWhiV1Y5SnlCaGJISmxZV1I1SUdSbFptbHVaV1JnS1R0Y2JpQWdmVnh1WEc0Z0lHTnNZWE56SUVoNVluSnBaQ0JsZUhSbGJtUnpJRWhVVFV4RmJHVnRaVzUwSUh0Y2JpQWdJQ0J6ZEdGMGFXTWdaMlYwSUc1aGJXVW9LU0I3SUhKbGRIVnliaUIwWVdkT1lXMWxPeUI5WEc1Y2JpQWdJQ0JqYjI1dVpXTjBaV1JEWVd4c1ltRmpheWdwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSHNnWTJGc2JHSmhZMnR6SUgwZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eU8xeHVJQ0FnSUNBZ1kyOXVjM1FnYkdsemRDQTlJRnRkTzF4dVhHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcGJtUmxlQ0E5SURBN0lHbHVaR1Y0SUR3Z1kyRnNiR0poWTJ0ekxteGxibWQwYURzZ2FXNWtaWGdnS3owZ01Ta2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpZaUE5SUdOaGJHeGlZV05yYzF0cGJtUmxlRjBvZEdocGN5azdYRzRnSUNBZ0lDQWdJR2xtSUNoallpa2diR2x6ZEM1d2RYTm9LR05pS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1pHbHpZMjl1Ym1WamRITXVjMlYwS0hSb2FYTXNJR3hwYzNRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdScGMyTnZibTVsWTNSbFpFTmhiR3hpWVdOcktDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2JHbHpkQ0E5SUdScGMyTnZibTVsWTNSekxtZGxkQ2gwYUdsektUdGNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHbHVaR1Y0SUQwZ01Ec2dhVzVrWlhnZ1BDQnNhWE4wTG14bGJtZDBhRHNnYVc1a1pYZ2dLejBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQnNhWE4wVzJsdVpHVjRYU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdOdmJYQnBiR1VvU0hsaWNtbGtMQ0JvZVdKeWFXUnpUM0pEYjI1emRISjFZM1J2Y2lrN1hHNGdJR04xYzNSdmJVVnNaVzFsYm5SekxtUmxabWx1WlNoMFlXZE9ZVzFsTENCSWVXSnlhV1FwTzF4dVhHNGdJSEpsZEhWeWJpQkllV0p5YVdRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdSbFptbHVaVTFoY0NobGJHVnRaVzUwY3lrZ2UxeHVJQ0J5WlhSMWNtNGdUMkpxWldOMExtdGxlWE1vWld4bGJXVnVkSE1wTG5KbFpIVmpaU2dvWVdOakxDQnJaWGtwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0IwWVdkT1lXMWxJRDBnY0dGelkyRnNWRzlFWVhOb0tHdGxlU2s3WEc0Z0lDQWdZV05qVzJ0bGVWMGdQU0JrWldacGJtVkZiR1Z0Wlc1MEtIUmhaMDVoYldVc0lHVnNaVzFsYm5SelcydGxlVjBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJR0ZqWXp0Y2JpQWdmU3dnZTMwcE8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJrWldacGJtVW9MaTR1WVhKbmN5a2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHRnlaM05iTUYwZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHUmxabWx1WlUxaGNDaGhjbWR6V3pCZEtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmtaV1pwYm1WRmJHVnRaVzUwS0M0dUxtRnlaM01wTzF4dWZWeHVJbDE5IiwidmFyIG1hcCA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgdmFyIGRhdGFNYXAgPSB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbWFwLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgbWFwLnNldChrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRlbXBsYXRlRW5kKG5vZGUpIHtcbiAgdmFyIGRhdGE7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuXG4gIHdoaWxlIChub2RlICYmIChkYXRhID0gZGF0YU1hcC5nZXQobm9kZSkpICYmIGRhdGEuZW5kTm9kZSkge1xuICAgIG5vZGUgPSBkYXRhLmVuZE5vZGU7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUZW1wbGF0ZSh0YXJnZXQpIHtcbiAgaWYgKHRhcmdldC5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHtcbiAgICB2YXIgY2hpbGQgPSB0YXJnZXQuY2hpbGROb2Rlc1swXTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgdGFyZ2V0LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gdGFyZ2V0LmNoaWxkTm9kZXNbMF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBkYXRhID0gZGF0YU1hcC5nZXQodGFyZ2V0KTtcblxuICAgIGlmIChkYXRhLnN0YXJ0Tm9kZSkge1xuICAgICAgdmFyIGVuZE5vZGUgPSBnZXRUZW1wbGF0ZUVuZChkYXRhLmVuZE5vZGUpO1xuICAgICAgdmFyIG5vZGUgPSBkYXRhLnN0YXJ0Tm9kZTtcbiAgICAgIHZhciBsYXN0TmV4dFNpYmxpbmcgPSBlbmROb2RlLm5leHRTaWJsaW5nO1xuXG4gICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgIG5vZGUgPSBuZXh0U2libGluZyAhPT0gbGFzdE5leHRTaWJsaW5nICYmIG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5MWRHbHNjeTVxY3lKZExDSnVZVzFsY3lJNld5SnRZWEFpTENKWFpXRnJUV0Z3SWl3aVpHRjBZVTFoY0NJc0ltZGxkQ0lzSW10bGVTSXNJbVJsWm1GMWJIUldZV3gxWlNJc0luWmhiSFZsSWl3aWMyVjBJaXdpWjJWMFZHVnRjR3hoZEdWRmJtUWlMQ0p1YjJSbElpd2laR0YwWVNJc0ltVnVaRTV2WkdVaUxDSnlaVzF2ZG1WVVpXMXdiR0YwWlNJc0luUmhjbWRsZENJc0ltNXZaR1ZVZVhCbElpd2lUbTlrWlNJc0lsUkZXRlJmVGs5RVJTSXNJbU5vYVd4a0lpd2lZMmhwYkdST2IyUmxjeUlzSW5KbGJXOTJaVU5vYVd4a0lpd2ljM1JoY25ST2IyUmxJaXdpYkdGemRFNWxlSFJUYVdKc2FXNW5JaXdpYm1WNGRGTnBZbXhwYm1jaUxDSndZWEpsYm5ST2IyUmxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGTlFTeEhRVUZITEVkQlFVY3NTVUZCU1VNc1QwRkJTaXhGUVVGYU8wRkJRMEVzVDBGQlR5eEpRVUZOUXl4UFFVRlBMRWRCUVVjN1FVRkRja0pETEVWQlFVRkJMRWRCUkhGQ0xHVkJRMnBDUXl4SFFVUnBRaXhGUVVOYVF5eFpRVVJaTEVWQlEwVTdRVUZEY2tJc1VVRkJUVU1zUzBGQlN5eEhRVUZIVGl4SFFVRkhMRU5CUVVOSExFZEJRVW9zUTBGQlVVTXNSMEZCVWl4RFFVRmtPMEZCUTBFc1VVRkJTVVVzUzBGQlNpeEZRVUZYTEU5QlFVOUJMRXRCUVZBN08wRkJSVmdzVVVGQlNVUXNXVUZCU2l4RlFVRnJRanRCUVVOb1Frd3NUVUZCUVVFc1IwRkJSeXhEUVVGRFR5eEhRVUZLTEVOQlFWRklMRWRCUVZJc1JVRkJZVU1zV1VGQllqdEJRVU5FT3p0QlFVVkVMRmRCUVU5QkxGbEJRVkE3UVVGRFJDeEhRVlp2UWp0QlFWZHlRa1VzUlVGQlFVRXNSMEZZY1VJc1pVRlhha0pJTEVkQldHbENMRVZCVjFwRkxFdEJXRmtzUlVGWFREdEJRVU5rVGl4SlFVRkJRU3hIUVVGSExFTkJRVU5QTEVkQlFVb3NRMEZCVVVnc1IwRkJVaXhGUVVGaFJTeExRVUZpTzBGQlEwRXNWMEZCVDBFc1MwRkJVRHRCUVVORU8wRkJaRzlDTEVOQlFXaENPMEZCYVVKUUxFOUJRVThzVTBGQlUwVXNZMEZCVkN4RFFVRjNRa01zU1VGQmVFSXNSVUZCT0VJN1FVRkRia01zVFVGQlNVTXNTVUZCU2l4RFFVUnRReXhEUVVWdVF6czdRVUZEUVN4VFFVRlBSQ3hKUVVGSkxFdEJRVXRETEVsQlFVa3NSMEZCUjFJc1QwRkJUeXhEUVVGRFF5eEhRVUZTTEVOQlFWbE5MRWxCUVZvc1EwRkJXaXhEUVVGS0xFbEJRWE5EUXl4SlFVRkpMRU5CUVVORExFOUJRV3hFTEVWQlFUSkVPMEZCUTNwRVJpeEpRVUZCUVN4SlFVRkpMRWRCUVVkRExFbEJRVWtzUTBGQlEwTXNUMEZCV2p0QlFVTkVPenRCUVVWRUxGTkJRVTlHTEVsQlFWQTdRVUZEUkR0QlFVVkVMRTlCUVU4c1UwRkJVMGNzWTBGQlZDeERRVUYzUWtNc1RVRkJlRUlzUlVGQlowTTdRVUZEY2tNc1RVRkJTVUVzVFVGQlRTeERRVUZEUXl4UlFVRlFMRXRCUVc5Q1F5eEpRVUZKTEVOQlFVTkRMRk5CUVRkQ0xFVkJRWGRETzBGQlEzUkRMRkZCUVVsRExFdEJRVXNzUjBGQlIwb3NUVUZCVFN4RFFVRkRTeXhWUVVGUUxFTkJRV3RDTEVOQlFXeENMRU5CUVZvN08wRkJRMEVzVjBGQlQwUXNTMEZCVUN4RlFVRmpPMEZCUTFwS0xFMUJRVUZCTEUxQlFVMHNRMEZCUTAwc1YwRkJVQ3hEUVVGdFFrWXNTMEZCYmtJN1FVRkRRVUVzVFVGQlFVRXNTMEZCU3l4SFFVRkhTaXhOUVVGTkxFTkJRVU5MTEZWQlFWQXNRMEZCYTBJc1EwRkJiRUlzUTBGQlVqdEJRVU5FTzBGQlEwWXNSMEZPUkN4TlFVMVBPMEZCUTB3c1VVRkJUVklzU1VGQlNTeEhRVUZIVWl4UFFVRlBMRU5CUVVORExFZEJRVklzUTBGQldWVXNUVUZCV2l4RFFVRmlPenRCUVVWQkxGRkJRVWxJTEVsQlFVa3NRMEZCUTFVc1UwRkJWQ3hGUVVGdlFqdEJRVU5zUWl4VlFVRk5WQ3hQUVVGUExFZEJRVWRJTEdOQlFXTXNRMEZCUTBVc1NVRkJTU3hEUVVGRFF5eFBRVUZPTEVOQlFUbENPMEZCUlVFc1ZVRkJTVVlzU1VGQlNTeEhRVUZIUXl4SlFVRkpMRU5CUVVOVkxGTkJRV2hDTzBGQlEwRXNWVUZCVFVNc1pVRkJaU3hIUVVGSFZpeFBRVUZQTEVOQlFVTlhMRmRCUVdoRE96dEJRVVZCTEdGQlFVOWlMRWxCUVZBc1JVRkJZVHRCUVVOWUxGbEJRVTFoTEZkQlFWY3NSMEZCUjJJc1NVRkJTU3hEUVVGRFlTeFhRVUY2UWp0QlFVTkJZaXhSUVVGQlFTeEpRVUZKTEVOQlFVTmpMRlZCUVV3c1EwRkJaMEpLTEZkQlFXaENMRU5CUVRSQ1ZpeEpRVUUxUWp0QlFVTkJRU3hSUVVGQlFTeEpRVUZKTEVkQlFVZGhMRmRCUVZjc1MwRkJTMFFzWlVGQmFFSXNTVUZCYlVORExGZEJRVEZETzBGQlEwUTdRVUZEUmp0QlFVTkdPMEZCUTBZaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCdFlYQWdQU0J1WlhjZ1YyVmhhMDFoY0NncE8xeHVaWGh3YjNKMElHTnZibk4wSUdSaGRHRk5ZWEFnUFNCN1hHNGdJR2RsZENoclpYa3NJR1JsWm1GMWJIUldZV3gxWlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFpoYkhWbElEMGdiV0Z3TG1kbGRDaHJaWGtwTzF4dUlDQWdJR2xtSUNoMllXeDFaU2tnY21WMGRYSnVJSFpoYkhWbE8xeHVYRzRnSUNBZ2FXWWdLR1JsWm1GMWJIUldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2JXRndMbk5sZENoclpYa3NJR1JsWm1GMWJIUldZV3gxWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR1JsWm1GMWJIUldZV3gxWlR0Y2JpQWdmU3hjYmlBZ2MyVjBLR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0J0WVhBdWMyVjBLR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JpQWdmU3hjYm4wN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJVWlcxd2JHRjBaVVZ1WkNodWIyUmxLU0I3WEc0Z0lHeGxkQ0JrWVhSaE8xeHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dFkyOXVaQzFoYzNOcFoyNWNiaUFnZDJocGJHVWdLRzV2WkdVZ0ppWWdLR1JoZEdFZ1BTQmtZWFJoVFdGd0xtZGxkQ2h1YjJSbEtTa2dKaVlnWkdGMFlTNWxibVJPYjJSbEtTQjdYRzRnSUNBZ2JtOWtaU0E5SUdSaGRHRXVaVzVrVG05a1pUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnViMlJsTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjbVZ0YjNabFZHVnRjR3hoZEdVb2RHRnlaMlYwS1NCN1hHNGdJR2xtSUNoMFlYSm5aWFF1Ym05a1pWUjVjR1VnSVQwOUlFNXZaR1V1VkVWWVZGOU9UMFJGS1NCN1hHNGdJQ0FnYkdWMElHTm9hV3hrSUQwZ2RHRnlaMlYwTG1Ob2FXeGtUbTlrWlhOYk1GMDdYRzRnSUNBZ2QyaHBiR1VnS0dOb2FXeGtLU0I3WEc0Z0lDQWdJQ0IwWVhKblpYUXVjbVZ0YjNabFEyaHBiR1FvWTJocGJHUXBPMXh1SUNBZ0lDQWdZMmhwYkdRZ1BTQjBZWEpuWlhRdVkyaHBiR1JPYjJSbGMxc3dYVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUdSaGRHRk5ZWEF1WjJWMEtIUmhjbWRsZENrN1hHNWNiaUFnSUNCcFppQW9aR0YwWVM1emRHRnlkRTV2WkdVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdWdVpFNXZaR1VnUFNCblpYUlVaVzF3YkdGMFpVVnVaQ2hrWVhSaExtVnVaRTV2WkdVcE8xeHVYRzRnSUNBZ0lDQnNaWFFnYm05a1pTQTlJR1JoZEdFdWMzUmhjblJPYjJSbE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYkdGemRFNWxlSFJUYVdKc2FXNW5JRDBnWlc1a1RtOWtaUzV1WlhoMFUybGliR2x1Wnp0Y2JseHVJQ0FnSUNBZ2QyaHBiR1VnS0c1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibVY0ZEZOcFlteHBibWNnUFNCdWIyUmxMbTVsZUhSVGFXSnNhVzVuTzF4dUlDQWdJQ0FnSUNCdWIyUmxMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUc1dlpHVWdQU0J1WlhoMFUybGliR2x1WnlBaFBUMGdiR0Z6ZEU1bGVIUlRhV0pzYVc1bklDWW1JRzVsZUhSVGFXSnNhVzVuTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1SWwxOSIsImltcG9ydCB7IGRhdGFNYXAsIHJlbW92ZVRlbXBsYXRlLCBnZXRUZW1wbGF0ZUVuZCB9IGZyb20gJy4uL3V0aWxzJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuXG5pbXBvcnQgcmVzb2x2ZVZhbHVlIGZyb20gJy4vdmFsdWUnO1xuZXhwb3J0IHZhciBhcnJheU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbmZ1bmN0aW9uIG1vdmVQbGFjZWhvbGRlcih0YXJnZXQsIHByZXZpb3VzU2libGluZykge1xuICB2YXIgZGF0YSA9IGRhdGFNYXAuZ2V0KHRhcmdldCk7XG4gIHZhciBzdGFydE5vZGUgPSBkYXRhLnN0YXJ0Tm9kZTtcbiAgdmFyIGVuZE5vZGUgPSBnZXRUZW1wbGF0ZUVuZChkYXRhLmVuZE5vZGUpO1xuICBwcmV2aW91c1NpYmxpbmcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFyZ2V0LCBwcmV2aW91c1NpYmxpbmcubmV4dFNpYmxpbmcpO1xuICB2YXIgcHJldk5vZGUgPSB0YXJnZXQ7XG4gIHZhciBub2RlID0gc3RhcnROb2RlO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwcmV2Tm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBwcmV2Tm9kZS5uZXh0U2libGluZyk7XG4gICAgcHJldk5vZGUgPSBub2RlO1xuICAgIG5vZGUgPSBuZXh0Tm9kZSAhPT0gZW5kTm9kZS5uZXh0U2libGluZyAmJiBuZXh0Tm9kZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlQXJyYXkoaG9zdCwgdGFyZ2V0LCB2YWx1ZSkge1xuICB2YXIgbGFzdEVudHJpZXMgPSBhcnJheU1hcC5nZXQodGFyZ2V0KTtcbiAgdmFyIGVudHJpZXMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgJ2lkJykgPyBpdGVtLmlkIDogaW5kZXgsXG4gICAgICB2YWx1ZTogaXRlbSxcbiAgICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgICAgYXZhaWxhYmxlOiB0cnVlXG4gICAgfTtcbiAgfSk7XG4gIGFycmF5TWFwLnNldCh0YXJnZXQsIGVudHJpZXMpO1xuXG4gIGlmIChsYXN0RW50cmllcykge1xuICAgIHZhciBpZHMgPSBuZXcgU2V0KCk7XG4gICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGlkcy5hZGQoZW50cnkuaWQpO1xuICAgIH0pO1xuICAgIGxhc3RFbnRyaWVzID0gbGFzdEVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgaWYgKCFpZHMuaGFzKGVudHJ5LmlkKSkge1xuICAgICAgICByZW1vdmVUZW1wbGF0ZShlbnRyeS5wbGFjZWhvbGRlcik7XG4gICAgICAgIGVudHJ5LnBsYWNlaG9sZGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZW50cnkucGxhY2Vob2xkZXIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzU2libGluZyA9IHRhcmdldDtcbiAgdmFyIGxhc3RJbmRleCA9IHZhbHVlLmxlbmd0aCAtIDE7XG4gIHZhciBkYXRhID0gZGF0YU1hcC5nZXQodGFyZ2V0KTtcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB2YXIgbWF0Y2hlZEVudHJ5ID0gdm9pZCAwO1xuXG4gICAgaWYgKGxhc3RFbnRyaWVzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RFbnRyaWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChsYXN0RW50cmllc1tpXS5hdmFpbGFibGUgJiYgbGFzdEVudHJpZXNbaV0uaWQgPT09IGVudHJ5LmlkKSB7XG4gICAgICAgICAgbWF0Y2hlZEVudHJ5ID0gbGFzdEVudHJpZXNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB2b2lkIDA7XG5cbiAgICBpZiAobWF0Y2hlZEVudHJ5KSB7XG4gICAgICBtYXRjaGVkRW50cnkuYXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICBwbGFjZWhvbGRlciA9IG1hdGNoZWRFbnRyeS5wbGFjZWhvbGRlcjtcblxuICAgICAgaWYgKHBsYWNlaG9sZGVyLnByZXZpb3VzU2libGluZyAhPT0gcHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIG1vdmVQbGFjZWhvbGRlcihwbGFjZWhvbGRlciwgcHJldmlvdXNTaWJsaW5nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hdGNoZWRFbnRyeS52YWx1ZSAhPT0gZW50cnkudmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZVZhbHVlKGhvc3QsIHBsYWNlaG9sZGVyLCBlbnRyeS52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgICAgcHJldmlvdXNTaWJsaW5nLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHBsYWNlaG9sZGVyLCBwcmV2aW91c1NpYmxpbmcubmV4dFNpYmxpbmcpO1xuICAgICAgcmVzb2x2ZVZhbHVlKGhvc3QsIHBsYWNlaG9sZGVyLCBlbnRyeS52YWx1ZSk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNTaWJsaW5nID0gZ2V0VGVtcGxhdGVFbmQoZGF0YU1hcC5nZXQocGxhY2Vob2xkZXIpLmVuZE5vZGUgfHwgcGxhY2Vob2xkZXIpO1xuICAgIGlmIChpbmRleCA9PT0gMCkgZGF0YS5zdGFydE5vZGUgPSBwbGFjZWhvbGRlcjtcbiAgICBpZiAoaW5kZXggPT09IGxhc3RJbmRleCkgZGF0YS5lbmROb2RlID0gcHJldmlvdXNTaWJsaW5nO1xuICAgIGVudHJ5LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gIH1cblxuICBpZiAobGFzdEVudHJpZXMpIHtcbiAgICBsYXN0RW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgaWYgKGVudHJ5LmF2YWlsYWJsZSkge1xuICAgICAgICByZW1vdmVUZW1wbGF0ZShlbnRyeS5wbGFjZWhvbGRlcik7XG4gICAgICAgIGVudHJ5LnBsYWNlaG9sZGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZW50cnkucGxhY2Vob2xkZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5eVpYTnZiSFpsY25NdllYSnlZWGt1YW5NaVhTd2libUZ0WlhNaU9sc2laR0YwWVUxaGNDSXNJbkpsYlc5MlpWUmxiWEJzWVhSbElpd2laMlYwVkdWdGNHeGhkR1ZGYm1RaUxDSnlaWE52YkhabFZtRnNkV1VpTENKaGNuSmhlVTFoY0NJc0lsZGxZV3ROWVhBaUxDSnRiM1psVUd4aFkyVm9iMnhrWlhJaUxDSjBZWEpuWlhRaUxDSndjbVYyYVc5MWMxTnBZbXhwYm1jaUxDSmtZWFJoSWl3aVoyVjBJaXdpYzNSaGNuUk9iMlJsSWl3aVpXNWtUbTlrWlNJc0luQmhjbVZ1ZEU1dlpHVWlMQ0pwYm5ObGNuUkNaV1p2Y21VaUxDSnVaWGgwVTJsaWJHbHVaeUlzSW5CeVpYWk9iMlJsSWl3aWJtOWtaU0lzSW01bGVIUk9iMlJsSWl3aWNtVnpiMngyWlVGeWNtRjVJaXdpYUc5emRDSXNJblpoYkhWbElpd2liR0Z6ZEVWdWRISnBaWE1pTENKbGJuUnlhV1Z6SWl3aWJXRndJaXdpYVhSbGJTSXNJbWx1WkdWNElpd2lhV1FpTENKUFltcGxZM1FpTENKd2NtOTBiM1I1Y0dVaUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0ltTmhiR3dpTENKd2JHRmpaV2h2YkdSbGNpSXNJbUYyWVdsc1lXSnNaU0lzSW5ObGRDSXNJbWxrY3lJc0lsTmxkQ0lzSW1admNrVmhZMmdpTENKbGJuUnllU0lzSW1Ga1pDSXNJbVpwYkhSbGNpSXNJbWhoY3lJc0luSmxiVzkyWlVOb2FXeGtJaXdpYkdGemRFbHVaR1Y0SWl3aWJHVnVaM1JvSWl3aWJXRjBZMmhsWkVWdWRISjVJaXdpYVNJc0ltUnZZM1Z0Wlc1MElpd2lZM0psWVhSbFZHVjRkRTV2WkdVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxGTkJRMFZCTEU5QlJFWXNSVUZEVjBNc1kwRkVXQ3hGUVVNeVFrTXNZMEZFTTBJc1VVRkZUeXhWUVVaUUxFTXNRMEZKUVRzN1FVRkRRU3hQUVVGUFF5eFpRVUZRTEUxQlFYbENMRk5CUVhwQ08wRkJSVUVzVDBGQlR5eEpRVUZOUXl4UlFVRlJMRWRCUVVjc1NVRkJTVU1zVDBGQlNpeEZRVUZxUWpzN1FVRkZVQ3hUUVVGVFF5eGxRVUZVTEVOQlFYbENReXhOUVVGNlFpeEZRVUZwUTBNc1pVRkJha01zUlVGQmEwUTdRVUZEYUVRc1RVRkJUVU1zU1VGQlNTeEhRVUZIVkN4UFFVRlBMRU5CUVVOVkxFZEJRVklzUTBGQldVZ3NUVUZCV2l4RFFVRmlPMEZCUTBFc1RVRkJUVWtzVTBGQlV5eEhRVUZIUml4SlFVRkpMRU5CUVVORkxGTkJRWFpDTzBGQlEwRXNUVUZCVFVNc1QwRkJUeXhIUVVGSFZpeGpRVUZqTEVOQlFVTlBMRWxCUVVrc1EwRkJRMGNzVDBGQlRpeERRVUU1UWp0QlFVVkJTaXhGUVVGQlFTeGxRVUZsTEVOQlFVTkxMRlZCUVdoQ0xFTkJRVEpDUXl4WlFVRXpRaXhEUVVGM1ExQXNUVUZCZUVNc1JVRkJaMFJETEdWQlFXVXNRMEZCUTA4c1YwRkJhRVU3UVVGRlFTeE5RVUZKUXl4UlFVRlJMRWRCUVVkVUxFMUJRV1k3UVVGRFFTeE5RVUZKVlN4SlFVRkpMRWRCUVVkT0xGTkJRVmc3TzBGQlEwRXNVMEZCVDAwc1NVRkJVQ3hGUVVGaE8wRkJRMWdzVVVGQlRVTXNVVUZCVVN4SFFVRkhSQ3hKUVVGSkxFTkJRVU5HTEZkQlFYUkNPMEZCUTBGRExFbEJRVUZCTEZGQlFWRXNRMEZCUTBnc1ZVRkJWQ3hEUVVGdlFrTXNXVUZCY0VJc1EwRkJhVU5ITEVsQlFXcERMRVZCUVhWRFJDeFJRVUZSTEVOQlFVTkVMRmRCUVdoRU8wRkJRMEZETEVsQlFVRkJMRkZCUVZFc1IwRkJSME1zU1VGQldEdEJRVU5CUVN4SlFVRkJRU3hKUVVGSkxFZEJRVWRETEZGQlFWRXNTMEZCUzA0c1QwRkJUeXhEUVVGRFJ5eFhRVUZ5UWl4SlFVRnZRMGNzVVVGQk0wTTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHVkJRV1VzVTBGQlUwTXNXVUZCVkN4RFFVRnpRa01zU1VGQmRFSXNSVUZCTkVKaUxFMUJRVFZDTEVWQlFXOURZeXhMUVVGd1F5eEZRVUV5UXp0QlFVTjRSQ3hOUVVGSlF5eFhRVUZYTEVkQlFVZHNRaXhSUVVGUkxFTkJRVU5OTEVkQlFWUXNRMEZCWVVnc1RVRkJZaXhEUVVGc1FqdEJRVU5CTEUxQlFVMW5RaXhQUVVGUExFZEJRVWRHTEV0QlFVc3NRMEZCUTBjc1IwRkJUaXhEUVVGVkxGVkJRVU5ETEVsQlFVUXNSVUZCVDBNc1MwRkJVRHRCUVVGQkxGZEJRV3RDTzBGQlF6RkRReXhOUVVGQlFTeEZRVUZGTEVWQlFVVkRMRTFCUVUwc1EwRkJRME1zVTBGQlVDeERRVUZwUWtNc1kwRkJha0lzUTBGQlowTkRMRWxCUVdoRExFTkJRWEZEVGl4SlFVRnlReXhGUVVFeVF5eEpRVUV6UXl4SlFVRnRSRUVzU1VGQlNTeERRVUZEUlN4RlFVRjRSQ3hIUVVFMlJFUXNTMEZFZGtJN1FVRkZNVU5NTEUxQlFVRkJMRXRCUVVzc1JVRkJSVWtzU1VGR2JVTTdRVUZITVVOUExFMUJRVUZCTEZkQlFWY3NSVUZCUlN4SlFVZzJRanRCUVVreFEwTXNUVUZCUVVFc1UwRkJVeXhGUVVGRk8wRkJTaXRDTEV0QlFXeENPMEZCUVVFc1IwRkJWaXhEUVVGb1FqdEJRVTlCTjBJc1JVRkJRVUVzVVVGQlVTeERRVUZET0VJc1IwRkJWQ3hEUVVGaE0wSXNUVUZCWWl4RlFVRnhRbWRDTEU5QlFYSkNPenRCUVVWQkxFMUJRVWxFTEZkQlFVb3NSVUZCYVVJN1FVRkRaaXhSUVVGTllTeEhRVUZITEVkQlFVY3NTVUZCU1VNc1IwRkJTaXhGUVVGYU8wRkJRMEZpTEVsQlFVRkJMRTlCUVU4c1EwRkJRMk1zVDBGQlVpeERRVUZuUWl4VlFVRkRReXhMUVVGRU8wRkJRVUVzWVVGQlYwZ3NSMEZCUnl4RFFVRkRTU3hIUVVGS0xFTkJRVkZFTEV0QlFVc3NRMEZCUTFnc1JVRkJaQ3hEUVVGWU8wRkJRVUVzUzBGQmFFSTdRVUZGUVV3c1NVRkJRVUVzVjBGQlZ5eEhRVUZIUVN4WFFVRlhMRU5CUVVOclFpeE5RVUZhTEVOQlFXMUNMRlZCUVVOR0xFdEJRVVFzUlVGQlZ6dEJRVU14UXl4VlFVRkpMRU5CUVVOSUxFZEJRVWNzUTBGQlEwMHNSMEZCU2l4RFFVRlJTQ3hMUVVGTExFTkJRVU5ZTEVWQlFXUXNRMEZCVEN4RlFVRjNRanRCUVVOMFFqRkNMRkZCUVVGQkxHTkJRV01zUTBGQlEzRkRMRXRCUVVzc1EwRkJRMDRzVjBGQlVDeERRVUZrTzBGQlEwRk5MRkZCUVVGQkxFdEJRVXNzUTBGQlEwNHNWMEZCVGl4RFFVRnJRbTVDTEZWQlFXeENMRU5CUVRaQ05rSXNWMEZCTjBJc1EwRkJlVU5LTEV0QlFVc3NRMEZCUTA0c1YwRkJMME03UVVGRFFTeGxRVUZQTEV0QlFWQTdRVUZEUkRzN1FVRkZSQ3hoUVVGUExFbEJRVkE3UVVGRFJDeExRVkpoTEVOQlFXUTdRVUZUUkRzN1FVRkZSQ3hOUVVGSmVFSXNaVUZCWlN4SFFVRkhSQ3hOUVVGMFFqdEJRVU5CTEUxQlFVMXZReXhUUVVGVExFZEJRVWQwUWl4TFFVRkxMRU5CUVVOMVFpeE5RVUZPTEVkQlFXVXNRMEZCYWtNN1FVRkRRU3hOUVVGTmJrTXNTVUZCU1N4SFFVRkhWQ3hQUVVGUExFTkJRVU5WTEVkQlFWSXNRMEZCV1Vnc1RVRkJXaXhEUVVGaU96dEJRVVZCTEU5QlFVc3NTVUZCU1cxQ0xFdEJRVXNzUjBGQlJ5eERRVUZxUWl4RlFVRnZRa0VzUzBGQlN5eEhRVUZIU0N4UFFVRlBMRU5CUVVOeFFpeE5RVUZ3UXl4RlFVRTBRMnhDTEV0QlFVc3NTVUZCU1N4RFFVRnlSQ3hGUVVGM1JEdEJRVU4wUkN4UlFVRk5XU3hMUVVGTExFZEJRVWRtTEU5QlFVOHNRMEZCUTBjc1MwRkJSQ3hEUVVGeVFqdEJRVU5CTEZGQlFVbHRRaXhaUVVGWkxGTkJRV2hDT3p0QlFVTkJMRkZCUVVsMlFpeFhRVUZLTEVWQlFXbENPMEZCUTJZc1YwRkJTeXhKUVVGSmQwSXNRMEZCUXl4SFFVRkhMRU5CUVdJc1JVRkJaMEpCTEVOQlFVTXNSMEZCUjNoQ0xGZEJRVmNzUTBGQlEzTkNMRTFCUVdoRExFVkJRWGREUlN4RFFVRkRMRWxCUVVrc1EwRkJOME1zUlVGQlowUTdRVUZET1VNc1dVRkJTWGhDTEZkQlFWY3NRMEZCUTNkQ0xFTkJRVVFzUTBGQldDeERRVUZsWWl4VFFVRm1MRWxCUVRSQ1dDeFhRVUZYTEVOQlFVTjNRaXhEUVVGRUxFTkJRVmdzUTBGQlpXNUNMRVZCUVdZc1MwRkJjMEpYTEV0QlFVc3NRMEZCUTFnc1JVRkJOVVFzUlVGQlowVTdRVUZET1VSclFpeFZRVUZCUVN4WlFVRlpMRWRCUVVkMlFpeFhRVUZYTEVOQlFVTjNRaXhEUVVGRUxFTkJRVEZDTzBGQlEwRTdRVUZEUkR0QlFVTkdPMEZCUTBZN08wRkJSVVFzVVVGQlNXUXNWMEZCVnl4VFFVRm1PenRCUVVOQkxGRkJRVWxoTEZsQlFVb3NSVUZCYTBJN1FVRkRhRUpCTEUxQlFVRkJMRmxCUVZrc1EwRkJRMW9zVTBGQllpeEhRVUY1UWl4TFFVRjZRanRCUVVOQlJDeE5RVUZCUVN4WFFVRlhMRWRCUVVkaExGbEJRVmtzUTBGQlEySXNWMEZCTTBJN08wRkJSVUVzVlVGQlNVRXNWMEZCVnl4RFFVRkRlRUlzWlVGQldpeExRVUZuUTBFc1pVRkJjRU1zUlVGQmNVUTdRVUZEYmtSR0xGRkJRVUZCTEdWQlFXVXNRMEZCUXpCQ0xGZEJRVVFzUlVGQlkzaENMR1ZCUVdRc1EwRkJaanRCUVVORU96dEJRVU5FTEZWQlFVbHhReXhaUVVGWkxFTkJRVU40UWl4TFFVRmlMRXRCUVhWQ2FVSXNTMEZCU3l4RFFVRkRha0lzUzBGQmFrTXNSVUZCZDBNN1FVRkRkRU5zUWl4UlFVRkJRU3haUVVGWkxFTkJRVU5wUWl4SlFVRkVMRVZCUVU5WkxGZEJRVkFzUlVGQmIwSk5MRXRCUVVzc1EwRkJRMnBDTEV0QlFURkNMRU5CUVZvN1FVRkRSRHRCUVVOR0xFdEJWa1FzVFVGVlR6dEJRVU5NVnl4TlFVRkJRU3hYUVVGWExFZEJRVWRsTEZGQlFWRXNRMEZCUTBNc1kwRkJWQ3hEUVVGM1FpeEZRVUY0UWl4RFFVRmtPMEZCUTBGNFF5eE5RVUZCUVN4bFFVRmxMRU5CUVVOTExGVkJRV2hDTEVOQlFUSkNReXhaUVVFelFpeERRVUYzUTJ0Q0xGZEJRWGhETEVWQlFYRkVlRUlzWlVGQlpTeERRVUZEVHl4WFFVRnlSVHRCUVVOQldpeE5RVUZCUVN4WlFVRlpMRU5CUVVOcFFpeEpRVUZFTEVWQlFVOVpMRmRCUVZBc1JVRkJiMEpOTEV0QlFVc3NRMEZCUTJwQ0xFdEJRVEZDTEVOQlFWbzdRVUZEUkRzN1FVRkZSR0lzU1VGQlFVRXNaVUZCWlN4SFFVRkhUaXhqUVVGakxFTkJRVU5HTEU5QlFVOHNRMEZCUTFVc1IwRkJVaXhEUVVGWmMwSXNWMEZCV2l4RlFVRjVRbkJDTEU5QlFYcENMRWxCUVc5RGIwSXNWMEZCY2tNc1EwRkJhRU03UVVGRlFTeFJRVUZKVGl4TFFVRkxMRXRCUVVzc1EwRkJaQ3hGUVVGcFFtcENMRWxCUVVrc1EwRkJRMFVzVTBGQlRDeEhRVUZwUW5GQ0xGZEJRV3BDTzBGQlEycENMRkZCUVVsT0xFdEJRVXNzUzBGQlMybENMRk5CUVdRc1JVRkJlVUpzUXl4SlFVRkpMRU5CUVVOSExFOUJRVXdzUjBGQlpVb3NaVUZCWmp0QlFVVjZRamhDTEVsQlFVRkJMRXRCUVVzc1EwRkJRMDRzVjBGQlRpeEhRVUZ2UWtFc1YwRkJjRUk3UVVGRFJEczdRVUZGUkN4TlFVRkpWaXhYUVVGS0xFVkJRV2xDTzBGQlEyWkJMRWxCUVVGQkxGZEJRVmNzUTBGQlEyVXNUMEZCV2l4RFFVRnZRaXhWUVVGRFF5eExRVUZFTEVWQlFWYzdRVUZETjBJc1ZVRkJTVUVzUzBGQlN5eERRVUZEVEN4VFFVRldMRVZCUVhGQ08wRkJRMjVDYUVNc1VVRkJRVUVzWTBGQll5eERRVUZEY1VNc1MwRkJTeXhEUVVGRFRpeFhRVUZRTEVOQlFXUTdRVUZEUVUwc1VVRkJRVUVzUzBGQlN5eERRVUZEVGl4WFFVRk9MRU5CUVd0Q2JrSXNWVUZCYkVJc1EwRkJOa0kyUWl4WFFVRTNRaXhEUVVGNVEwb3NTMEZCU3l4RFFVRkRUaXhYUVVFdlF6dEJRVU5FTzBGQlEwWXNTMEZNUkR0QlFVMUVPMEZCUTBZaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2UxeHVJQ0JrWVhSaFRXRndMQ0J5WlcxdmRtVlVaVzF3YkdGMFpTd2daMlYwVkdWdGNHeGhkR1ZGYm1Rc1hHNTlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1THk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdsdGNHOXlkQzl1YnkxamVXTnNaVnh1YVcxd2IzSjBJSEpsYzI5c2RtVldZV3gxWlNCbWNtOXRJQ2N1TDNaaGJIVmxKenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR0Z5Y21GNVRXRndJRDBnYm1WM0lGZGxZV3ROWVhBb0tUdGNibHh1Wm5WdVkzUnBiMjRnYlc5MlpWQnNZV05sYUc5c1pHVnlLSFJoY21kbGRDd2djSEpsZG1sdmRYTlRhV0pzYVc1bktTQjdYRzRnSUdOdmJuTjBJR1JoZEdFZ1BTQmtZWFJoVFdGd0xtZGxkQ2gwWVhKblpYUXBPMXh1SUNCamIyNXpkQ0J6ZEdGeWRFNXZaR1VnUFNCa1lYUmhMbk4wWVhKMFRtOWtaVHRjYmlBZ1kyOXVjM1FnWlc1a1RtOWtaU0E5SUdkbGRGUmxiWEJzWVhSbFJXNWtLR1JoZEdFdVpXNWtUbTlrWlNrN1hHNWNiaUFnY0hKbGRtbHZkWE5UYVdKc2FXNW5MbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtIUmhjbWRsZEN3Z2NISmxkbWx2ZFhOVGFXSnNhVzVuTG01bGVIUlRhV0pzYVc1bktUdGNibHh1SUNCc1pYUWdjSEpsZGs1dlpHVWdQU0IwWVhKblpYUTdYRzRnSUd4bGRDQnViMlJsSUQwZ2MzUmhjblJPYjJSbE8xeHVJQ0IzYUdsc1pTQW9ibTlrWlNrZ2UxeHVJQ0FnSUdOdmJuTjBJRzVsZUhST2IyUmxJRDBnYm05a1pTNXVaWGgwVTJsaWJHbHVaenRjYmlBZ0lDQndjbVYyVG05a1pTNXdZWEpsYm5ST2IyUmxMbWx1YzJWeWRFSmxabTl5WlNodWIyUmxMQ0J3Y21WMlRtOWtaUzV1WlhoMFUybGliR2x1WnlrN1hHNGdJQ0FnY0hKbGRrNXZaR1VnUFNCdWIyUmxPMXh1SUNBZ0lHNXZaR1VnUFNCdVpYaDBUbTlrWlNBaFBUMGdaVzVrVG05a1pTNXVaWGgwVTJsaWJHbHVaeUFtSmlCdVpYaDBUbTlrWlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCeVpYTnZiSFpsUVhKeVlYa29hRzl6ZEN3Z2RHRnlaMlYwTENCMllXeDFaU2tnZTF4dUlDQnNaWFFnYkdGemRFVnVkSEpwWlhNZ1BTQmhjbkpoZVUxaGNDNW5aWFFvZEdGeVoyVjBLVHRjYmlBZ1kyOXVjM1FnWlc1MGNtbGxjeUE5SUhaaGJIVmxMbTFoY0Nnb2FYUmxiU3dnYVc1a1pYZ3BJRDArSUNoN1hHNGdJQ0FnYVdRNklFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHBkR1Z0TENBbmFXUW5LU0EvSUdsMFpXMHVhV1FnT2lCcGJtUmxlQ3hjYmlBZ0lDQjJZV3gxWlRvZ2FYUmxiU3hjYmlBZ0lDQndiR0ZqWldodmJHUmxjam9nYm5Wc2JDeGNiaUFnSUNCaGRtRnBiR0ZpYkdVNklIUnlkV1VzWEc0Z0lIMHBLVHRjYmx4dUlDQmhjbkpoZVUxaGNDNXpaWFFvZEdGeVoyVjBMQ0JsYm5SeWFXVnpLVHRjYmx4dUlDQnBaaUFvYkdGemRFVnVkSEpwWlhNcElIdGNiaUFnSUNCamIyNXpkQ0JwWkhNZ1BTQnVaWGNnVTJWMEtDazdYRzRnSUNBZ1pXNTBjbWxsY3k1bWIzSkZZV05vS0NobGJuUnllU2tnUFQ0Z2FXUnpMbUZrWkNobGJuUnllUzVwWkNrcE8xeHVYRzRnSUNBZ2JHRnpkRVZ1ZEhKcFpYTWdQU0JzWVhOMFJXNTBjbWxsY3k1bWFXeDBaWElvS0dWdWRISjVLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9JV2xrY3k1b1lYTW9aVzUwY25rdWFXUXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVlJsYlhCc1lYUmxLR1Z1ZEhKNUxuQnNZV05sYUc5c1pHVnlLVHRjYmlBZ0lDQWdJQ0FnWlc1MGNua3VjR3hoWTJWb2IyeGtaWEl1Y0dGeVpXNTBUbTlrWlM1eVpXMXZkbVZEYUdsc1pDaGxiblJ5ZVM1d2JHRmpaV2h2YkdSbGNpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JzWlhRZ2NISmxkbWx2ZFhOVGFXSnNhVzVuSUQwZ2RHRnlaMlYwTzF4dUlDQmpiMjV6ZENCc1lYTjBTVzVrWlhnZ1BTQjJZV3gxWlM1c1pXNW5kR2dnTFNBeE8xeHVJQ0JqYjI1emRDQmtZWFJoSUQwZ1pHRjBZVTFoY0M1blpYUW9kR0Z5WjJWMEtUdGNibHh1SUNCbWIzSWdLR3hsZENCcGJtUmxlQ0E5SURBN0lHbHVaR1Y0SUR3Z1pXNTBjbWxsY3k1c1pXNW5kR2c3SUdsdVpHVjRJQ3M5SURFcElIdGNiaUFnSUNCamIyNXpkQ0JsYm5SeWVTQTlJR1Z1ZEhKcFpYTmJhVzVrWlhoZE8xeHVJQ0FnSUd4bGRDQnRZWFJqYUdWa1JXNTBjbms3WEc0Z0lDQWdhV1lnS0d4aGMzUkZiblJ5YVdWektTQjdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR3hoYzNSRmJuUnlhV1Z6TG14bGJtZDBhRHNnYVNBclBTQXhLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHNZWE4wUlc1MGNtbGxjMXRwWFM1aGRtRnBiR0ZpYkdVZ0ppWWdiR0Z6ZEVWdWRISnBaWE5iYVYwdWFXUWdQVDA5SUdWdWRISjVMbWxrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiV0YwWTJobFpFVnVkSEo1SUQwZ2JHRnpkRVZ1ZEhKcFpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2NHeGhZMlZvYjJ4a1pYSTdYRzRnSUNBZ2FXWWdLRzFoZEdOb1pXUkZiblJ5ZVNrZ2UxeHVJQ0FnSUNBZ2JXRjBZMmhsWkVWdWRISjVMbUYyWVdsc1lXSnNaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdjR3hoWTJWb2IyeGtaWElnUFNCdFlYUmphR1ZrUlc1MGNua3VjR3hoWTJWb2IyeGtaWEk3WEc1Y2JpQWdJQ0FnSUdsbUlDaHdiR0ZqWldodmJHUmxjaTV3Y21WMmFXOTFjMU5wWW14cGJtY2dJVDA5SUhCeVpYWnBiM1Z6VTJsaWJHbHVaeWtnZTF4dUlDQWdJQ0FnSUNCdGIzWmxVR3hoWTJWb2IyeGtaWElvY0d4aFkyVm9iMnhrWlhJc0lIQnlaWFpwYjNWelUybGliR2x1WnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9iV0YwWTJobFpFVnVkSEo1TG5aaGJIVmxJQ0U5UFNCbGJuUnllUzUyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxWbUZzZFdVb2FHOXpkQ3dnY0d4aFkyVm9iMnhrWlhJc0lHVnVkSEo1TG5aaGJIVmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVlVaWGgwVG05a1pTZ25KeWs3WEc0Z0lDQWdJQ0J3Y21WMmFXOTFjMU5wWW14cGJtY3VjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb2NHeGhZMlZvYjJ4a1pYSXNJSEJ5WlhacGIzVnpVMmxpYkdsdVp5NXVaWGgwVTJsaWJHbHVaeWs3WEc0Z0lDQWdJQ0J5WlhOdmJIWmxWbUZzZFdVb2FHOXpkQ3dnY0d4aFkyVm9iMnhrWlhJc0lHVnVkSEo1TG5aaGJIVmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQndjbVYyYVc5MWMxTnBZbXhwYm1jZ1BTQm5aWFJVWlcxd2JHRjBaVVZ1WkNoa1lYUmhUV0Z3TG1kbGRDaHdiR0ZqWldodmJHUmxjaWt1Wlc1a1RtOWtaU0I4ZkNCd2JHRmpaV2h2YkdSbGNpazdYRzVjYmlBZ0lDQnBaaUFvYVc1a1pYZ2dQVDA5SURBcElHUmhkR0V1YzNSaGNuUk9iMlJsSUQwZ2NHeGhZMlZvYjJ4a1pYSTdYRzRnSUNBZ2FXWWdLR2x1WkdWNElEMDlQU0JzWVhOMFNXNWtaWGdwSUdSaGRHRXVaVzVrVG05a1pTQTlJSEJ5WlhacGIzVnpVMmxpYkdsdVp6dGNibHh1SUNBZ0lHVnVkSEo1TG5Cc1lXTmxhRzlzWkdWeUlEMGdjR3hoWTJWb2IyeGtaWEk3WEc0Z0lIMWNibHh1SUNCcFppQW9iR0Z6ZEVWdWRISnBaWE1wSUh0Y2JpQWdJQ0JzWVhOMFJXNTBjbWxsY3k1bWIzSkZZV05vS0NobGJuUnllU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLR1Z1ZEhKNUxtRjJZV2xzWVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlcxdmRtVlVaVzF3YkdGMFpTaGxiblJ5ZVM1d2JHRmpaV2h2YkdSbGNpazdYRzRnSUNBZ0lDQWdJR1Z1ZEhKNUxuQnNZV05sYUc5c1pHVnlMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb1pXNTBjbmt1Y0d4aFkyVm9iMnhrWlhJcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNGlYWDA9IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgZGF0YU1hcCwgcmVtb3ZlVGVtcGxhdGUgfSBmcm9tICcuLi91dGlscyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcblxuaW1wb3J0IHJlc29sdmVBcnJheSwgeyBhcnJheU1hcCB9IGZyb20gJy4vYXJyYXknO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgdmFyIHR5cGUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/ICdhcnJheScgOiBfdHlwZW9mKHZhbHVlKTtcbiAgdmFyIGRhdGEgPSBkYXRhTWFwLmdldCh0YXJnZXQsIHt9KTtcblxuICBpZiAoZGF0YS50eXBlICE9PSB0eXBlKSB7XG4gICAgcmVtb3ZlVGVtcGxhdGUodGFyZ2V0KTtcbiAgICBpZiAodHlwZSA9PT0gJ2FycmF5JykgYXJyYXlNYXAuZGVsZXRlKHRhcmdldCk7XG4gICAgZGF0YSA9IGRhdGFNYXAuc2V0KHRhcmdldCwge1xuICAgICAgdHlwZTogdHlwZVxuICAgIH0pO1xuXG4gICAgaWYgKHRhcmdldC50ZXh0Q29udGVudCAhPT0gJycpIHtcbiAgICAgIHRhcmdldC50ZXh0Q29udGVudCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHZhbHVlKGhvc3QsIHRhcmdldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIHJlc29sdmVBcnJheShob3N0LCB0YXJnZXQsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRhcmdldC50ZXh0Q29udGVudCA9IHR5cGUgPT09ICdudW1iZXInIHx8IHZhbHVlID8gdmFsdWUgOiAnJztcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OTBaVzF3YkdGMFpTOXlaWE52YkhabGNuTXZkbUZzZFdVdWFuTWlYU3dpYm1GdFpYTWlPbHNpWkdGMFlVMWhjQ0lzSW5KbGJXOTJaVlJsYlhCc1lYUmxJaXdpY21WemIyeDJaVUZ5Y21GNUlpd2lZWEp5WVhsTllYQWlMQ0p5WlhOdmJIWmxWbUZzZFdVaUxDSm9iM04wSWl3aWRHRnlaMlYwSWl3aWRtRnNkV1VpTENKMGVYQmxJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpWkdGMFlTSXNJbWRsZENJc0ltUmxiR1YwWlNJc0luTmxkQ0lzSW5SbGVIUkRiMjUwWlc1MElsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRk5CUVZOQkxFOUJRVlFzUlVGQmEwSkRMR05CUVd4Q0xGRkJRWGRETEZWQlFYaERMRU1zUTBGRFFUczdRVUZEUVN4UFFVRlBReXhaUVVGUUxFbEJRWFZDUXl4UlFVRjJRaXhSUVVGMVF5eFRRVUYyUXp0QlFVVkJMR1ZCUVdVc1UwRkJVME1zV1VGQlZDeERRVUZ6UWtNc1NVRkJkRUlzUlVGQk5FSkRMRTFCUVRWQ0xFVkJRVzlEUXl4TFFVRndReXhGUVVFeVF6dEJRVU40UkN4TlFVRk5ReXhKUVVGSkxFZEJRVWRETEV0QlFVc3NRMEZCUTBNc1QwRkJUaXhEUVVGalNDeExRVUZrTEVsQlFYVkNMRTlCUVhaQ0xGZEJRWGREUVN4TFFVRjRReXhEUVVGaU8wRkJRMEVzVFVGQlNVa3NTVUZCU1N4SFFVRkhXQ3hQUVVGUExFTkJRVU5aTEVkQlFWSXNRMEZCV1U0c1RVRkJXaXhGUVVGdlFpeEZRVUZ3UWl4RFFVRllPenRCUVVWQkxFMUJRVWxMTEVsQlFVa3NRMEZCUTBnc1NVRkJUQ3hMUVVGalFTeEpRVUZzUWl4RlFVRjNRanRCUVVOMFFsQXNTVUZCUVVFc1kwRkJZeXhEUVVGRFN5eE5RVUZFTEVOQlFXUTdRVUZEUVN4UlFVRkpSU3hKUVVGSkxFdEJRVXNzVDBGQllpeEZRVUZ6UWt3c1VVRkJVU3hEUVVGRFZTeE5RVUZVTEVOQlFXZENVQ3hOUVVGb1FqdEJRVVYwUWtzc1NVRkJRVUVzU1VGQlNTeEhRVUZIV0N4UFFVRlBMRU5CUVVOakxFZEJRVklzUTBGQldWSXNUVUZCV2l4RlFVRnZRanRCUVVGRlJTeE5RVUZCUVN4SlFVRkpMRVZCUVVwQk8wRkJRVVlzUzBGQmNFSXNRMEZCVURzN1FVRkZRU3hSUVVGSlJpeE5RVUZOTEVOQlFVTlRMRmRCUVZBc1MwRkJkVUlzUlVGQk0wSXNSVUZCSzBJN1FVRkROMEpVTEUxQlFVRkJMRTFCUVUwc1EwRkJRMU1zVjBGQlVDeEhRVUZ4UWl4RlFVRnlRanRCUVVORU8wRkJRMFk3TzBGQlJVUXNWVUZCVVZBc1NVRkJVanRCUVVORkxGTkJRVXNzVlVGQlREdEJRVU5GUkN4TlFVRkJRU3hMUVVGTExFTkJRVU5HTEVsQlFVUXNSVUZCVDBNc1RVRkJVQ3hEUVVGTU8wRkJRMEU3TzBGQlEwWXNVMEZCU3l4UFFVRk1PMEZCUTBWS0xFMUJRVUZCTEZsQlFWa3NRMEZCUTBjc1NVRkJSQ3hGUVVGUFF5eE5RVUZRTEVWQlFXVkRMRXRCUVdZc1EwRkJXanRCUVVOQk96dEJRVU5HTzBGQlEwVkVMRTFCUVVGQkxFMUJRVTBzUTBGQlExTXNWMEZCVUN4SFFVRnhRbEFzU1VGQlNTeExRVUZMTEZGQlFWUXNTVUZCY1VKRUxFdEJRWEpDTEVkQlFUWkNRU3hMUVVFM1FpeEhRVUZ4UXl4RlFVRXhSRHRCUVZKS08wRkJWVVFpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZXlCa1lYUmhUV0Z3TENCeVpXMXZkbVZVWlcxd2JHRjBaU0I5SUdaeWIyMGdKeTR1TDNWMGFXeHpKenRjYmk4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCcGJYQnZjblF2Ym04dFkzbGpiR1ZjYm1sdGNHOXlkQ0J5WlhOdmJIWmxRWEp5WVhrc0lIc2dZWEp5WVhsTllYQWdmU0JtY205dElDY3VMMkZ5Y21GNUp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdjbVZ6YjJ4MlpWWmhiSFZsS0dodmMzUXNJSFJoY21kbGRDd2dkbUZzZFdVcElIdGNiaUFnWTI5dWMzUWdkSGx3WlNBOUlFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBJRDhnSjJGeWNtRjVKeUE2SUhSNWNHVnZaaUIyWVd4MVpUdGNiaUFnYkdWMElHUmhkR0VnUFNCa1lYUmhUV0Z3TG1kbGRDaDBZWEpuWlhRc0lIdDlLVHRjYmx4dUlDQnBaaUFvWkdGMFlTNTBlWEJsSUNFOVBTQjBlWEJsS1NCN1hHNGdJQ0FnY21WdGIzWmxWR1Z0Y0d4aGRHVW9kR0Z5WjJWMEtUdGNiaUFnSUNCcFppQW9kSGx3WlNBOVBUMGdKMkZ5Y21GNUp5a2dZWEp5WVhsTllYQXVaR1ZzWlhSbEtIUmhjbWRsZENrN1hHNWNiaUFnSUNCa1lYUmhJRDBnWkdGMFlVMWhjQzV6WlhRb2RHRnlaMlYwTENCN0lIUjVjR1VnZlNrN1hHNWNiaUFnSUNCcFppQW9kR0Z5WjJWMExuUmxlSFJEYjI1MFpXNTBJQ0U5UFNBbkp5a2dlMXh1SUNBZ0lDQWdkR0Z5WjJWMExuUmxlSFJEYjI1MFpXNTBJRDBnSnljN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdZMkZ6WlNBblpuVnVZM1JwYjI0bk9seHVJQ0FnSUNBZ2RtRnNkV1VvYUc5emRDd2dkR0Z5WjJWMEtUdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oyRnljbUY1SnpwY2JpQWdJQ0FnSUhKbGMyOXNkbVZCY25KaGVTaG9iM04wTENCMFlYSm5aWFFzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0IwWVhKblpYUXVkR1Y0ZEVOdmJuUmxiblFnUFNCMGVYQmxJRDA5UFNBbmJuVnRZbVZ5SnlCOGZDQjJZV3gxWlNBL0lIWmhiSFZsSURvZ0p5YzdYRzRnSUgxY2JuMWNiaUpkZlE9PSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciB0YXJnZXRzID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGhvc3QsIHRhcmdldCwgdmFsdWUsIGxhc3RWYWx1ZSkge1xuICAgIGlmIChsYXN0VmFsdWUpIHtcbiAgICAgIHZhciBldmVudE1hcCA9IHRhcmdldHMuZ2V0KHRhcmdldCk7XG5cbiAgICAgIGlmIChldmVudE1hcCkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50TWFwLmdldChsYXN0VmFsdWUpLCBsYXN0VmFsdWUub3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gbGFzdFZhbHVlLm9wdGlvbnMgOiBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiRXZlbnQgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uOiBcIi5jb25jYXQoX3R5cGVvZih2YWx1ZSkpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9ldmVudE1hcCA9IHRhcmdldHMuZ2V0KHRhcmdldCk7XG5cbiAgICAgIGlmICghX2V2ZW50TWFwKSB7XG4gICAgICAgIF9ldmVudE1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgIHRhcmdldHMuc2V0KHRhcmdldCwgX2V2ZW50TWFwKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGxiYWNrID0gdmFsdWUuYmluZChudWxsLCBob3N0KTtcblxuICAgICAgX2V2ZW50TWFwLnNldCh2YWx1ZSwgY2FsbGJhY2spO1xuXG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB2YWx1ZS5vcHRpb25zICE9PSB1bmRlZmluZWQgPyB2YWx1ZS5vcHRpb25zIDogZmFsc2UpO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTkwWlcxd2JHRjBaUzl5WlhOdmJIWmxjbk12WlhabGJuUXVhbk1pWFN3aWJtRnRaWE1pT2xzaWRHRnlaMlYwY3lJc0lsZGxZV3ROWVhBaUxDSnlaWE52YkhabFJYWmxiblJNYVhOMFpXNWxjaUlzSW1WMlpXNTBWSGx3WlNJc0ltaHZjM1FpTENKMFlYSm5aWFFpTENKMllXeDFaU0lzSW14aGMzUldZV3gxWlNJc0ltVjJaVzUwVFdGd0lpd2laMlYwSWl3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpSXNJbTl3ZEdsdmJuTWlMQ0oxYm1SbFptbHVaV1FpTENKRmNuSnZjaUlzSW5ObGRDSXNJbU5oYkd4aVlXTnJJaXdpWW1sdVpDSXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzU1VGQlRVRXNUMEZCVHl4SFFVRkhMRWxCUVVsRExFOUJRVW9zUlVGQmFFSTdRVUZGUVN4bFFVRmxMRk5CUVZORExHOUNRVUZVTEVOQlFUaENReXhUUVVFNVFpeEZRVUY1UXp0QlFVTjBSQ3hUUVVGUExGVkJRVU5ETEVsQlFVUXNSVUZCVDBNc1RVRkJVQ3hGUVVGbFF5eExRVUZtTEVWQlFYTkNReXhUUVVGMFFpeEZRVUZ2UXp0QlFVTjZReXhSUVVGSlFTeFRRVUZLTEVWQlFXVTdRVUZEWWl4VlFVRk5ReXhSUVVGUkxFZEJRVWRTTEU5QlFVOHNRMEZCUTFNc1IwRkJVaXhEUVVGWlNpeE5RVUZhTEVOQlFXcENPenRCUVVOQkxGVkJRVWxITEZGQlFVb3NSVUZCWXp0QlFVTmFTQ3hSUVVGQlFTeE5RVUZOTEVOQlFVTkxMRzFDUVVGUUxFTkJRMFZRTEZOQlJFWXNSVUZGUlVzc1VVRkJVU3hEUVVGRFF5eEhRVUZVTEVOQlFXRkdMRk5CUVdJc1EwRkdSaXhGUVVkRlFTeFRRVUZUTEVOQlFVTkpMRTlCUVZZc1MwRkJjMEpETEZOQlFYUkNMRWRCUVd0RFRDeFRRVUZUTEVOQlFVTkpMRTlCUVRWRExFZEJRWE5FTEV0QlNIaEVPMEZCUzBRN1FVRkRSanM3UVVGRlJDeFJRVUZKVEN4TFFVRktMRVZCUVZjN1FVRkRWQ3hWUVVGSkxFOUJRVTlCTEV0QlFWQXNTMEZCYVVJc1ZVRkJja0lzUlVGQmFVTTdRVUZETDBJc1kwRkJUVThzUzBGQlN5eHpSRUZCT0VOUUxFdEJRVGxETEVkQlFWZzdRVUZEUkRzN1FVRkZSQ3hWUVVGSlJTeFRRVUZSTEVkQlFVZFNMRTlCUVU4c1EwRkJRMU1zUjBGQlVpeERRVUZaU2l4TlFVRmFMRU5CUVdZN08wRkJRMEVzVlVGQlNTeERRVUZEUnl4VFFVRk1MRVZCUVdVN1FVRkRZa0VzVVVGQlFVRXNVMEZCVVN4SFFVRkhMRWxCUVVsUUxFOUJRVW9zUlVGQldEdEJRVU5CUkN4UlFVRkJRU3hQUVVGUExFTkJRVU5qTEVkQlFWSXNRMEZCV1ZRc1RVRkJXaXhGUVVGdlFrY3NVMEZCY0VJN1FVRkRSRHM3UVVGRlJDeFZRVUZOVHl4UlFVRlJMRWRCUVVkVUxFdEJRVXNzUTBGQlExVXNTVUZCVGl4RFFVRlhMRWxCUVZnc1JVRkJhVUphTEVsQlFXcENMRU5CUVdwQ096dEJRVU5CU1N4TlFVRkJRU3hUUVVGUkxFTkJRVU5OTEVkQlFWUXNRMEZCWVZJc1MwRkJZaXhGUVVGdlFsTXNVVUZCY0VJN08wRkJSVUZXTEUxQlFVRkJMRTFCUVUwc1EwRkJRMWtzWjBKQlFWQXNRMEZEUldRc1UwRkVSaXhGUVVWRldTeFJRVVpHTEVWQlIwVlVMRXRCUVVzc1EwRkJRMHNzVDBGQlRpeExRVUZyUWtNc1UwRkJiRUlzUjBGQk9FSk9MRXRCUVVzc1EwRkJRMHNzVDBGQmNFTXNSMEZCT0VNc1MwRklhRVE3UVVGTFJEdEJRVU5HTEVkQmFFTkVPMEZCYVVORUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMjl1YzNRZ2RHRnlaMlYwY3lBOUlHNWxkeUJYWldGclRXRndLQ2s3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKbGMyOXNkbVZGZG1WdWRFeHBjM1JsYm1WeUtHVjJaVzUwVkhsd1pTa2dlMXh1SUNCeVpYUjFjbTRnS0dodmMzUXNJSFJoY21kbGRDd2dkbUZzZFdVc0lHeGhjM1JXWVd4MVpTa2dQVDRnZTF4dUlDQWdJR2xtSUNoc1lYTjBWbUZzZFdVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdWMlpXNTBUV0Z3SUQwZ2RHRnlaMlYwY3k1blpYUW9kR0Z5WjJWMEtUdGNiaUFnSUNBZ0lHbG1JQ2hsZG1WdWRFMWhjQ2tnZTF4dUlDQWdJQ0FnSUNCMFlYSm5aWFF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEZSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUk5ZWEF1WjJWMEtHeGhjM1JXWVd4MVpTa3NYRzRnSUNBZ0lDQWdJQ0FnYkdGemRGWmhiSFZsTG05d2RHbHZibk1nSVQwOUlIVnVaR1ZtYVc1bFpDQS9JR3hoYzNSV1lXeDFaUzV2Y0hScGIyNXpJRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lFVnljbTl5S0dCRmRtVnVkQ0JzYVhOMFpXNWxjaUJ0ZFhOMElHSmxJR0VnWm5WdVkzUnBiMjQ2SUNSN2RIbHdaVzltSUhaaGJIVmxmV0FwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc1pYUWdaWFpsYm5STllYQWdQU0IwWVhKblpYUnpMbWRsZENoMFlYSm5aWFFwTzF4dUlDQWdJQ0FnYVdZZ0tDRmxkbVZ1ZEUxaGNDa2dlMXh1SUNBZ0lDQWdJQ0JsZG1WdWRFMWhjQ0E5SUc1bGR5QlhaV0ZyVFdGd0tDazdYRzRnSUNBZ0lDQWdJSFJoY21kbGRITXVjMlYwS0hSaGNtZGxkQ3dnWlhabGJuUk5ZWEFwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCamIyNXpkQ0JqWVd4c1ltRmpheUE5SUhaaGJIVmxMbUpwYm1Rb2JuVnNiQ3dnYUc5emRDazdYRzRnSUNBZ0lDQmxkbVZ1ZEUxaGNDNXpaWFFvZG1Gc2RXVXNJR05oYkd4aVlXTnJLVHRjYmx4dUlDQWdJQ0FnZEdGeVoyVjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YRzRnSUNBZ0lDQWdJR1YyWlc1MFZIbHdaU3hjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxMbTl3ZEdsdmJuTWdJVDA5SUhWdVpHVm1hVzVsWkNBL0lIWmhiSFZsTG05d2RHbHZibk1nT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVmVnh1SWwxOSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIHZhciBzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG5ldyBTZXQoKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBzZXQuYWRkKGNsYXNzTmFtZSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodmFsdWUgIT09IG51bGwgJiYgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlW2tleV0gJiYgc2V0LmFkZChrZXkpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNldC5hZGQodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxudmFyIGNsYXNzTWFwID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVDbGFzc0xpc3QoaG9zdCwgdGFyZ2V0LCB2YWx1ZSkge1xuICB2YXIgcHJldmlvdXNMaXN0ID0gY2xhc3NNYXAuZ2V0KHRhcmdldCkgfHwgbmV3IFNldCgpO1xuICB2YXIgbGlzdCA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgY2xhc3NNYXAuc2V0KHRhcmdldCwgbGlzdCk7XG4gIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICBwcmV2aW91c0xpc3QuZGVsZXRlKGNsYXNzTmFtZSk7XG4gIH0pO1xuICBwcmV2aW91c0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5eVpYTnZiSFpsY25NdlkyeGhjM011YW5NaVhTd2libUZ0WlhNaU9sc2libTl5YldGc2FYcGxWbUZzZFdVaUxDSjJZV3gxWlNJc0luTmxkQ0lzSWxObGRDSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbVp2Y2tWaFkyZ2lMQ0pqYkdGemMwNWhiV1VpTENKaFpHUWlMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2lhMlY1SWl3aVkyeGhjM05OWVhBaUxDSlhaV0ZyVFdGd0lpd2ljbVZ6YjJ4MlpVTnNZWE56VEdsemRDSXNJbWh2YzNRaUxDSjBZWEpuWlhRaUxDSndjbVYyYVc5MWMweHBjM1FpTENKblpYUWlMQ0pzYVhOMElpd2lZMnhoYzNOTWFYTjBJaXdpWkdWc1pYUmxJaXdpY21WdGIzWmxJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEZOQlFWTkJMR05CUVZRc1EwRkJkMEpETEV0QlFYaENMRVZCUVdkRU8wRkJRVUVzVFVGQmFrSkRMRWRCUVdsQ0xIVkZRVUZZTEVsQlFVbERMRWRCUVVvc1JVRkJWenM3UVVGRE9VTXNUVUZCU1VNc1MwRkJTeXhEUVVGRFF5eFBRVUZPTEVOQlFXTktMRXRCUVdRc1EwRkJTaXhGUVVFd1FqdEJRVU40UWtFc1NVRkJRVUVzUzBGQlN5eERRVUZEU3l4UFFVRk9MRU5CUVdNc1ZVRkJRME1zVTBGQlJEdEJRVUZCTEdGQlFXVk1MRWRCUVVjc1EwRkJRMDBzUjBGQlNpeERRVUZSUkN4VFFVRlNMRU5CUVdZN1FVRkJRU3hMUVVGa08wRkJRMFFzUjBGR1JDeE5RVVZQTEVsQlFVbE9MRXRCUVVzc1MwRkJTeXhKUVVGV0xFbEJRV3RDTEZGQlFVOUJMRXRCUVZBc1RVRkJhVUlzVVVGQmRrTXNSVUZCYVVRN1FVRkRkRVJSTEVsQlFVRkJMRTFCUVUwc1EwRkJRME1zU1VGQlVDeERRVUZaVkN4TFFVRmFMRVZCUVcxQ1N5eFBRVUZ1UWl4RFFVRXlRaXhWUVVGRFN5eEhRVUZFTzBGQlFVRXNZVUZCVTFZc1MwRkJTeXhEUVVGRFZTeEhRVUZFTEVOQlFVd3NTVUZCWTFRc1IwRkJSeXhEUVVGRFRTeEhRVUZLTEVOQlFWRkhMRWRCUVZJc1EwRkJka0k3UVVGQlFTeExRVUV6UWp0QlFVTkVMRWRCUmswc1RVRkZRVHRCUVVOTVZDeEpRVUZCUVN4SFFVRkhMRU5CUVVOTkxFZEJRVW9zUTBGQlVWQXNTMEZCVWp0QlFVTkVPenRCUVVWRUxGTkJRVTlETEVkQlFWQTdRVUZEUkRzN1FVRkZSQ3hKUVVGTlZTeFJRVUZSTEVkQlFVY3NTVUZCU1VNc1QwRkJTaXhGUVVGcVFqdEJRVVZCTEdWQlFXVXNVMEZCVTBNc1owSkJRVlFzUTBGQk1FSkRMRWxCUVRGQ0xFVkJRV2REUXl4TlFVRm9ReXhGUVVGM1EyWXNTMEZCZUVNc1JVRkJLME03UVVGRE5VUXNUVUZCVFdkQ0xGbEJRVmtzUjBGQlIwd3NVVUZCVVN4RFFVRkRUU3hIUVVGVUxFTkJRV0ZHTEUxQlFXSXNTMEZCZDBJc1NVRkJTV0lzUjBGQlNpeEZRVUUzUXp0QlFVTkJMRTFCUVUxblFpeEpRVUZKTEVkQlFVZHVRaXhqUVVGakxFTkJRVU5ETEV0QlFVUXNRMEZCTTBJN1FVRkZRVmNzUlVGQlFVRXNVVUZCVVN4RFFVRkRWaXhIUVVGVUxFTkJRV0ZqTEUxQlFXSXNSVUZCY1VKSExFbEJRWEpDTzBGQlJVRkJMRVZCUVVGQkxFbEJRVWtzUTBGQlEySXNUMEZCVEN4RFFVRmhMRlZCUVVORExGTkJRVVFzUlVGQlpUdEJRVU14UWxNc1NVRkJRVUVzVFVGQlRTeERRVUZEU1N4VFFVRlFMRU5CUVdsQ1dpeEhRVUZxUWl4RFFVRnhRa1FzVTBGQmNrSTdRVUZEUVZVc1NVRkJRVUVzV1VGQldTeERRVUZEU1N4TlFVRmlMRU5CUVc5Q1pDeFRRVUZ3UWp0QlFVTkVMRWRCU0VRN1FVRkxRVlVzUlVGQlFVRXNXVUZCV1N4RFFVRkRXQ3hQUVVGaUxFTkJRWEZDTEZWQlFVTkRMRk5CUVVRc1JVRkJaVHRCUVVOc1ExTXNTVUZCUVVFc1RVRkJUU3hEUVVGRFNTeFRRVUZRTEVOQlFXbENSU3hOUVVGcVFpeERRVUYzUW1Zc1UwRkJlRUk3UVVGRFJDeEhRVVpFTzBGQlIwUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUptZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZXWVd4MVpTaDJZV3gxWlN3Z2MyVjBJRDBnYm1WM0lGTmxkQ2dwS1NCN1hHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbEtTa2dlMXh1SUNBZ0lIWmhiSFZsTG1admNrVmhZMmdvS0dOc1lYTnpUbUZ0WlNrZ1BUNGdjMlYwTG1Ga1pDaGpiR0Z6YzA1aGJXVXBLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaDJZV3gxWlNBaFBUMGdiblZzYkNBbUppQjBlWEJsYjJZZ2RtRnNkV1VnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ1QySnFaV04wTG10bGVYTW9kbUZzZFdVcExtWnZja1ZoWTJnb0tHdGxlU2tnUFQ0Z2RtRnNkV1ZiYTJWNVhTQW1KaUJ6WlhRdVlXUmtLR3RsZVNrcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lITmxkQzVoWkdRb2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhObGREdGNibjFjYmx4dVkyOXVjM1FnWTJ4aGMzTk5ZWEFnUFNCdVpYY2dWMlZoYTAxaGNDZ3BPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJ5WlhOdmJIWmxRMnhoYzNOTWFYTjBLR2h2YzNRc0lIUmhjbWRsZEN3Z2RtRnNkV1VwSUh0Y2JpQWdZMjl1YzNRZ2NISmxkbWx2ZFhOTWFYTjBJRDBnWTJ4aGMzTk5ZWEF1WjJWMEtIUmhjbWRsZENrZ2ZId2dibVYzSUZObGRDZ3BPMXh1SUNCamIyNXpkQ0JzYVhOMElEMGdibTl5YldGc2FYcGxWbUZzZFdVb2RtRnNkV1VwTzF4dVhHNGdJR05zWVhOelRXRndMbk5sZENoMFlYSm5aWFFzSUd4cGMzUXBPMXh1WEc0Z0lHeHBjM1F1Wm05eVJXRmphQ2dvWTJ4aGMzTk9ZVzFsS1NBOVBpQjdYRzRnSUNBZ2RHRnlaMlYwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9ZMnhoYzNOT1lXMWxLVHRjYmlBZ0lDQndjbVYyYVc5MWMweHBjM1F1WkdWc1pYUmxLR05zWVhOelRtRnRaU2s3WEc0Z0lIMHBPMXh1WEc0Z0lIQnlaWFpwYjNWelRHbHpkQzVtYjNKRllXTm9LQ2hqYkdGemMwNWhiV1VwSUQwK0lIdGNiaUFnSUNCMFlYSm5aWFF1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hqYkdGemMwNWhiV1VwTzF4dUlDQjlLVHRjYm4xY2JpSmRmUT09IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgY2FtZWxUb0Rhc2gsIHN0cmluZ2lmeUVsZW1lbnQgfSBmcm9tICcuLi8uLi91dGlscyc7XG52YXIgc3R5bGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVN0eWxlKGhvc3QsIHRhcmdldCwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IF90eXBlb2YodmFsdWUpICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IFR5cGVFcnJvcihcIlN0eWxlIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0IGluIFwiLmNvbmNhdChzdHJpbmdpZnlFbGVtZW50KHRhcmdldCksIFwiOlwiKSwgdmFsdWUpO1xuICB9XG5cbiAgdmFyIHByZXZpb3VzTWFwID0gc3R5bGVNYXAuZ2V0KHRhcmdldCkgfHwgbmV3IE1hcCgpO1xuICB2YXIgbmV4dE1hcCA9IE9iamVjdC5rZXlzKHZhbHVlKS5yZWR1Y2UoZnVuY3Rpb24gKG1hcCwga2V5KSB7XG4gICAgdmFyIGRhc2hLZXkgPSBjYW1lbFRvRGFzaChrZXkpO1xuICAgIHZhciBzdHlsZVZhbHVlID0gdmFsdWVba2V5XTtcblxuICAgIGlmICghc3R5bGVWYWx1ZSAmJiBzdHlsZVZhbHVlICE9PSAwKSB7XG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoZGFzaEtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5zdHlsZS5zZXRQcm9wZXJ0eShkYXNoS2V5LCBzdHlsZVZhbHVlKTtcbiAgICB9XG5cbiAgICBtYXAuc2V0KGRhc2hLZXksIHN0eWxlVmFsdWUpO1xuICAgIHByZXZpb3VzTWFwLmRlbGV0ZShkYXNoS2V5KTtcbiAgICByZXR1cm4gbWFwO1xuICB9LCBuZXcgTWFwKCkpO1xuICBwcmV2aW91c01hcC5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZVZhbHVlLCBrZXkpIHtcbiAgICB0YXJnZXQuc3R5bGVba2V5XSA9ICcnO1xuICB9KTtcbiAgc3R5bGVNYXAuc2V0KHRhcmdldCwgbmV4dE1hcCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5eVpYTnZiSFpsY25NdmMzUjViR1V1YW5NaVhTd2libUZ0WlhNaU9sc2lZMkZ0Wld4VWIwUmhjMmdpTENKemRISnBibWRwWm5sRmJHVnRaVzUwSWl3aWMzUjViR1ZOWVhBaUxDSlhaV0ZyVFdGd0lpd2ljbVZ6YjJ4MlpWTjBlV3hsSWl3aWFHOXpkQ0lzSW5SaGNtZGxkQ0lzSW5aaGJIVmxJaXdpVkhsd1pVVnljbTl5SWl3aWNISmxkbWx2ZFhOTllYQWlMQ0puWlhRaUxDSk5ZWEFpTENKdVpYaDBUV0Z3SWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW5KbFpIVmpaU0lzSW0xaGNDSXNJbXRsZVNJc0ltUmhjMmhMWlhraUxDSnpkSGxzWlZaaGJIVmxJaXdpYzNSNWJHVWlMQ0p5WlcxdmRtVlFjbTl3WlhKMGVTSXNJbk5sZEZCeWIzQmxjblI1SWl3aWMyVjBJaXdpWkdWc1pYUmxJaXdpWm05eVJXRmphQ0pkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4VFFVRlRRU3hYUVVGVUxFVkJRWE5DUXl4blFrRkJkRUlzVVVGQk9FTXNZVUZCT1VNN1FVRkZRU3hKUVVGTlF5eFJRVUZSTEVkQlFVY3NTVUZCU1VNc1QwRkJTaXhGUVVGcVFqdEJRVVZCTEdWQlFXVXNVMEZCVTBNc1dVRkJWQ3hEUVVGelFrTXNTVUZCZEVJc1JVRkJORUpETEUxQlFUVkNMRVZCUVc5RFF5eExRVUZ3UXl4RlFVRXlRenRCUVVONFJDeE5RVUZKUVN4TFFVRkxMRXRCUVVzc1NVRkJWaXhKUVVGclFpeFJRVUZQUVN4TFFVRlFMRTFCUVdsQ0xGRkJRWFpETEVWQlFXbEVPMEZCUXk5RExGVkJRVTFETEZOQlFWTXNORU5CUVhGRFVDeG5Ra0ZCWjBJc1EwRkJRMHNzVFVGQlJDeERRVUZ5UkN4UlFVRnJSVU1zUzBGQmJFVXNRMEZCWmp0QlFVTkVPenRCUVVWRUxFMUJRVTFGTEZkQlFWY3NSMEZCUjFBc1VVRkJVU3hEUVVGRFVTeEhRVUZVTEVOQlFXRktMRTFCUVdJc1MwRkJkMElzU1VGQlNVc3NSMEZCU2l4RlFVRTFRenRCUVVWQkxFMUJRVTFETEU5QlFVOHNSMEZCUjBNc1RVRkJUU3hEUVVGRFF5eEpRVUZRTEVOQlFWbFFMRXRCUVZvc1JVRkJiVUpSTEUxQlFXNUNMRU5CUVRCQ0xGVkJRVU5ETEVkQlFVUXNSVUZCVFVNc1IwRkJUaXhGUVVGak8wRkJRM1JFTEZGQlFVMURMRTlCUVU4c1IwRkJSMnhDTEZkQlFWY3NRMEZCUTJsQ0xFZEJRVVFzUTBGQk0wSTdRVUZEUVN4UlFVRk5SU3hWUVVGVkxFZEJRVWRhTEV0QlFVc3NRMEZCUTFVc1IwRkJSQ3hEUVVGNFFqczdRVUZGUVN4UlFVRkpMRU5CUVVORkxGVkJRVVFzU1VGQlpVRXNWVUZCVlN4TFFVRkxMRU5CUVd4RExFVkJRWEZETzBGQlEyNURZaXhOUVVGQlFTeE5RVUZOTEVOQlFVTmpMRXRCUVZBc1EwRkJZVU1zWTBGQllpeERRVUUwUWtnc1QwRkJOVUk3UVVGRFJDeExRVVpFTEUxQlJVODdRVUZEVEZvc1RVRkJRVUVzVFVGQlRTeERRVUZEWXl4TFFVRlFMRU5CUVdGRkxGZEJRV0lzUTBGQmVVSktMRTlCUVhwQ0xFVkJRV3REUXl4VlFVRnNRenRCUVVORU96dEJRVVZFU0N4SlFVRkJRU3hIUVVGSExFTkJRVU5QTEVkQlFVb3NRMEZCVVV3c1QwRkJVaXhGUVVGcFFrTXNWVUZCYWtJN1FVRkRRVllzU1VGQlFVRXNWMEZCVnl4RFFVRkRaU3hOUVVGYUxFTkJRVzFDVGl4UFFVRnVRanRCUVVWQkxGZEJRVTlHTEVkQlFWQTdRVUZEUkN4SFFXUmxMRVZCWTJJc1NVRkJTVXdzUjBGQlNpeEZRV1JoTEVOQlFXaENPMEZCWjBKQlJpeEZRVUZCUVN4WFFVRlhMRU5CUVVOblFpeFBRVUZhTEVOQlFXOUNMRlZCUVVOT0xGVkJRVVFzUlVGQllVWXNSMEZCWWl4RlFVRnhRanRCUVVGRldDeEpRVUZCUVN4TlFVRk5MRU5CUVVOakxFdEJRVkFzUTBGQllVZ3NSMEZCWWl4SlFVRnZRaXhGUVVGd1FqdEJRVUY1UWl4SFFVRndSVHRCUVVWQlppeEZRVUZCUVN4UlFVRlJMRU5CUVVOeFFpeEhRVUZVTEVOQlFXRnFRaXhOUVVGaUxFVkJRWEZDVFN4UFFVRnlRanRCUVVORUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dZMkZ0Wld4VWIwUmhjMmdzSUhOMGNtbHVaMmxtZVVWc1pXMWxiblFnZlNCbWNtOXRJQ2N1TGk4dUxpOTFkR2xzY3ljN1hHNWNibU52Ym5OMElITjBlV3hsVFdGd0lEMGdibVYzSUZkbFlXdE5ZWEFvS1R0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z2NtVnpiMngyWlZOMGVXeGxLR2h2YzNRc0lIUmhjbWRsZEN3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0haaGJIVmxJRDA5UFNCdWRXeHNJSHg4SUhSNWNHVnZaaUIyWVd4MVpTQWhQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0IwYUhKdmR5QlVlWEJsUlhKeWIzSW9ZRk4wZVd4bElIWmhiSFZsSUcxMWMzUWdZbVVnWVc0Z2IySnFaV04wSUdsdUlDUjdjM1J5YVc1bmFXWjVSV3hsYldWdWRDaDBZWEpuWlhRcGZUcGdMQ0IyWVd4MVpTazdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQndjbVYyYVc5MWMwMWhjQ0E5SUhOMGVXeGxUV0Z3TG1kbGRDaDBZWEpuWlhRcElIeDhJRzVsZHlCTllYQW9LVHRjYmx4dUlDQmpiMjV6ZENCdVpYaDBUV0Z3SUQwZ1QySnFaV04wTG10bGVYTW9kbUZzZFdVcExuSmxaSFZqWlNnb2JXRndMQ0JyWlhrcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCa1lYTm9TMlY1SUQwZ1kyRnRaV3hVYjBSaGMyZ29hMlY1S1R0Y2JpQWdJQ0JqYjI1emRDQnpkSGxzWlZaaGJIVmxJRDBnZG1Gc2RXVmJhMlY1WFR0Y2JseHVJQ0FnSUdsbUlDZ2hjM1I1YkdWV1lXeDFaU0FtSmlCemRIbHNaVlpoYkhWbElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCMFlYSm5aWFF1YzNSNWJHVXVjbVZ0YjNabFVISnZjR1Z5ZEhrb1pHRnphRXRsZVNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJoY21kbGRDNXpkSGxzWlM1elpYUlFjbTl3WlhKMGVTaGtZWE5vUzJWNUxDQnpkSGxzWlZaaGJIVmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnRZWEF1YzJWMEtHUmhjMmhMWlhrc0lITjBlV3hsVm1Gc2RXVXBPMXh1SUNBZ0lIQnlaWFpwYjNWelRXRndMbVJsYkdWMFpTaGtZWE5vUzJWNUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdFlYQTdYRzRnSUgwc0lHNWxkeUJOWVhBb0tTazdYRzVjYmlBZ2NISmxkbWx2ZFhOTllYQXVabTl5UldGamFDZ29jM1I1YkdWV1lXeDFaU3dnYTJWNUtTQTlQaUI3SUhSaGNtZGxkQzV6ZEhsc1pWdHJaWGxkSUQwZ0p5YzdJSDBwTzF4dVhHNGdJSE4wZVd4bFRXRndMbk5sZENoMFlYSm5aWFFzSUc1bGVIUk5ZWEFwTzF4dWZWeHVJbDE5IiwiaW1wb3J0IHJlc29sdmVFdmVudExpc3RlbmVyIGZyb20gJy4vZXZlbnQnO1xuaW1wb3J0IHJlc29sdmVDbGFzc0xpc3QgZnJvbSAnLi9jbGFzcyc7XG5pbXBvcnQgcmVzb2x2ZVN0eWxlTGlzdCBmcm9tICcuL3N0eWxlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0eShhdHRyTmFtZSwgcHJvcGVydHlOYW1lLCBpc1NWRykge1xuICBpZiAocHJvcGVydHlOYW1lLnN1YnN0cigwLCAyKSA9PT0gJ29uJykge1xuICAgIHZhciBldmVudFR5cGUgPSBwcm9wZXJ0eU5hbWUuc3Vic3RyKDIpO1xuICAgIHJldHVybiByZXNvbHZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUpO1xuICB9XG5cbiAgc3dpdGNoIChhdHRyTmFtZSkge1xuICAgIGNhc2UgJ2NsYXNzJzpcbiAgICAgIHJldHVybiByZXNvbHZlQ2xhc3NMaXN0O1xuXG4gICAgY2FzZSAnc3R5bGUnOlxuICAgICAgcmV0dXJuIHJlc29sdmVTdHlsZUxpc3Q7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChob3N0LCB0YXJnZXQsIHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNTVkcgJiYgISh0YXJnZXQgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSAmJiBwcm9wZXJ0eU5hbWUgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgaWYgKHRhcmdldFtwcm9wZXJ0eU5hbWVdICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYXR0clZhbHVlID0gdmFsdWUgPT09IHRydWUgPyAnJyA6IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OTBaVzF3YkdGMFpTOXlaWE52YkhabGNuTXZjSEp2Y0dWeWRIa3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnpiMngyWlVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0p5WlhOdmJIWmxRMnhoYzNOTWFYTjBJaXdpY21WemIyeDJaVk4wZVd4bFRHbHpkQ0lzSW5KbGMyOXNkbVZRY205d1pYSjBlU0lzSW1GMGRISk9ZVzFsSWl3aWNISnZjR1Z5ZEhsT1lXMWxJaXdpYVhOVFZrY2lMQ0p6ZFdKemRISWlMQ0psZG1WdWRGUjVjR1VpTENKb2IzTjBJaXdpZEdGeVoyVjBJaXdpZG1Gc2RXVWlMQ0pUVmtkRmJHVnRaVzUwSWl3aWRXNWtaV1pwYm1Wa0lpd2ljbVZ0YjNabFFYUjBjbWxpZFhSbElpd2lZWFIwY2xaaGJIVmxJaXdpVTNSeWFXNW5JaXdpYzJWMFFYUjBjbWxpZFhSbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFBRVUZQUVN4dlFrRkJVQ3hOUVVGcFF5eFRRVUZxUXp0QlFVTkJMRTlCUVU5RExHZENRVUZRTEUxQlFUWkNMRk5CUVRkQ08wRkJRMEVzVDBGQlQwTXNaMEpCUVZBc1RVRkJOa0lzVTBGQk4wSTdRVUZGUVN4bFFVRmxMRk5CUVZORExHVkJRVlFzUTBGQmVVSkRMRkZCUVhwQ0xFVkJRVzFEUXl4WlFVRnVReXhGUVVGcFJFTXNTMEZCYWtRc1JVRkJkMFE3UVVGRGNrVXNUVUZCU1VRc1dVRkJXU3hEUVVGRFJTeE5RVUZpTEVOQlFXOUNMRU5CUVhCQ0xFVkJRWFZDTEVOQlFYWkNMRTFCUVRoQ0xFbEJRV3hETEVWQlFYZERPMEZCUTNSRExGRkJRVTFETEZOQlFWTXNSMEZCUjBnc1dVRkJXU3hEUVVGRFJTeE5RVUZpTEVOQlFXOUNMRU5CUVhCQ0xFTkJRV3hDTzBGQlEwRXNWMEZCVDFBc2IwSkJRVzlDTEVOQlFVTlJMRk5CUVVRc1EwRkJNMEk3UVVGRFJEczdRVUZGUkN4VlFVRlJTaXhSUVVGU08wRkJRMFVzVTBGQlN5eFBRVUZNTzBGQlFXTXNZVUZCVDBnc1owSkJRVkE3TzBGQlEyUXNVMEZCU3l4UFFVRk1PMEZCUVdNc1lVRkJUME1zWjBKQlFWQTdPMEZCUTJRN1FVRkRSU3hoUVVGUExGVkJRVU5QTEVsQlFVUXNSVUZCVDBNc1RVRkJVQ3hGUVVGbFF5eExRVUZtTEVWQlFYbENPMEZCUXpsQ0xGbEJRVWtzUTBGQlEwd3NTMEZCUkN4SlFVRlZMRVZCUVVWSkxFMUJRVTBzV1VGQldVVXNWVUZCY0VJc1EwRkJWaXhKUVVFNFExQXNXVUZCV1N4SlFVRkpTeXhOUVVGc1JTeEZRVUV5UlR0QlFVTjZSU3hqUVVGSlFTeE5RVUZOTEVOQlFVTk1MRmxCUVVRc1EwRkJUaXhMUVVGNVFrMHNTMEZCTjBJc1JVRkJiME03UVVGRGJFTkVMRmxCUVVGQkxFMUJRVTBzUTBGQlEwd3NXVUZCUkN4RFFVRk9MRWRCUVhWQ1RTeExRVUYyUWp0QlFVTkVPMEZCUTBZc1UwRktSQ3hOUVVsUExFbEJRVWxCTEV0QlFVc3NTMEZCU3l4TFFVRldMRWxCUVcxQ1FTeExRVUZMTEV0QlFVdEZMRk5CUVRkQ0xFbEJRVEJEUml4TFFVRkxMRXRCUVVzc1NVRkJlRVFzUlVGQk9FUTdRVUZEYmtWRUxGVkJRVUZCTEUxQlFVMHNRMEZCUTBrc1pVRkJVQ3hEUVVGMVFsWXNVVUZCZGtJN1FVRkRSQ3hUUVVaTkxFMUJSVUU3UVVGRFRDeGpRVUZOVnl4VFFVRlRMRWRCUVVkS0xFdEJRVXNzUzBGQlN5eEpRVUZXTEVkQlFXbENMRVZCUVdwQ0xFZEJRWE5DU3l4TlFVRk5MRU5CUVVOTUxFdEJRVVFzUTBGQk9VTTdRVUZEUVVRc1ZVRkJRVUVzVFVGQlRTeERRVUZEVHl4WlFVRlFMRU5CUVc5Q1lpeFJRVUZ3UWl4RlFVRTRRbGNzVTBGQk9VSTdRVUZEUkR0QlFVTkdMRTlCV0VRN1FVRktTanRCUVdsQ1JDSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQnlaWE52YkhabFJYWmxiblJNYVhOMFpXNWxjaUJtY205dElDY3VMMlYyWlc1MEp6dGNibWx0Y0c5eWRDQnlaWE52YkhabFEyeGhjM05NYVhOMElHWnliMjBnSnk0dlkyeGhjM01uTzF4dWFXMXdiM0owSUhKbGMyOXNkbVZUZEhsc1pVeHBjM1FnWm5KdmJTQW5MaTl6ZEhsc1pTYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJSEpsYzI5c2RtVlFjbTl3WlhKMGVTaGhkSFJ5VG1GdFpTd2djSEp2Y0dWeWRIbE9ZVzFsTENCcGMxTldSeWtnZTF4dUlDQnBaaUFvY0hKdmNHVnlkSGxPWVcxbExuTjFZbk4wY2lnd0xDQXlLU0E5UFQwZ0oyOXVKeWtnZTF4dUlDQWdJR052Ym5OMElHVjJaVzUwVkhsd1pTQTlJSEJ5YjNCbGNuUjVUbUZ0WlM1emRXSnpkSElvTWlrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzI5c2RtVkZkbVZ1ZEV4cGMzUmxibVZ5S0dWMlpXNTBWSGx3WlNrN1hHNGdJSDFjYmx4dUlDQnpkMmwwWTJnZ0tHRjBkSEpPWVcxbEtTQjdYRzRnSUNBZ1kyRnpaU0FuWTJ4aGMzTW5PaUJ5WlhSMWNtNGdjbVZ6YjJ4MlpVTnNZWE56VEdsemREdGNiaUFnSUNCallYTmxJQ2R6ZEhsc1pTYzZJSEpsZEhWeWJpQnlaWE52YkhabFUzUjViR1ZNYVhOME8xeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLR2h2YzNRc0lIUmhjbWRsZEN3Z2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGcGMxTldSeUFtSmlBaEtIUmhjbWRsZENCcGJuTjBZVzVqWlc5bUlGTldSMFZzWlcxbGJuUXBJQ1ltSUNod2NtOXdaWEowZVU1aGJXVWdhVzRnZEdGeVoyVjBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gwWVhKblpYUmJjSEp2Y0dWeWRIbE9ZVzFsWFNBaFBUMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRnR3Y205d1pYSjBlVTVoYldWZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0haaGJIVmxJRDA5UFNCbVlXeHpaU0I4ZkNCMllXeDFaU0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJSFpoYkhWbElEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaGhkSFJ5VG1GdFpTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZWFIwY2xaaGJIVmxJRDBnZG1Gc2RXVWdQVDA5SUhSeWRXVWdQeUFuSnlBNklGTjBjbWx1WnloMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2RHRnlaMlYwTG5ObGRFRjBkSEpwWW5WMFpTaGhkSFJ5VG1GdFpTd2dZWFIwY2xaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlR0Y2JpQWdmVnh1ZlZ4dUlsMTkiLCJmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICghKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikpIHsgcmV0dXJuOyB9IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgc3RyaW5naWZ5RWxlbWVudCwgc2hhZHlDU1MsIElTX0lFIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgZGF0YU1hcCwgcmVtb3ZlVGVtcGxhdGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCByZXNvbHZlVmFsdWUgZnJvbSAnLi9yZXNvbHZlcnMvdmFsdWUnO1xuaW1wb3J0IHJlc29sdmVQcm9wZXJ0eSBmcm9tICcuL3Jlc29sdmVycy9wcm9wZXJ0eSc7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG50cnkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOVjtcbn0gY2F0Y2ggKGUpIHtcbiAgdmFyIHByb2Nlc3MgPSB7XG4gICAgZW52OiB7XG4gICAgICBOT0RFX0VOVjogJ3Byb2R1Y3Rpb24nXG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cblxudmFyIFRJTUVTVEFNUCA9IERhdGUubm93KCk7XG5leHBvcnQgdmFyIGdldFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gZ2V0UGxhY2Vob2xkZXIoKSB7XG4gIHZhciBpZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgcmV0dXJuIFwie3toLVwiLmNvbmNhdChUSU1FU1RBTVAsIFwiLVwiKS5jb25jYXQoaWQsIFwifX1cIik7XG59O1xudmFyIFBMQUNFSE9MREVSX1JFR0VYUF9URVhUID0gZ2V0UGxhY2Vob2xkZXIoJyhcXFxcZCspJyk7XG52YXIgUExBQ0VIT0xERVJfUkVHRVhQX0VRVUFMID0gbmV3IFJlZ0V4cChcIl5cIi5jb25jYXQoUExBQ0VIT0xERVJfUkVHRVhQX1RFWFQsIFwiJFwiKSk7XG52YXIgUExBQ0VIT0xERVJfUkVHRVhQX0FMTCA9IG5ldyBSZWdFeHAoUExBQ0VIT0xERVJfUkVHRVhQX1RFWFQsICdnJyk7XG52YXIgQVRUUl9QUkVGSVggPSBcIi0tXCIuY29uY2F0KFRJTUVTVEFNUCwgXCItLVwiKTtcbnZhciBBVFRSX1JFR0VYUCA9IG5ldyBSZWdFeHAoQVRUUl9QUkVGSVgsICdnJyk7XG52YXIgcHJlcGFyZWRUZW1wbGF0ZXMgPSBuZXcgV2Vha01hcCgpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuZnVuY3Rpb24gYXBwbHlTaGFkeUNTUyh0ZW1wbGF0ZSwgdGFnTmFtZSkge1xuICBpZiAoIXRhZ05hbWUpIHJldHVybiB0ZW1wbGF0ZTtcbiAgcmV0dXJuIHNoYWR5Q1NTKGZ1bmN0aW9uIChzaGFkeSkge1xuICAgIHZhciBtYXAgPSBwcmVwYXJlZFRlbXBsYXRlcy5nZXQodGVtcGxhdGUpO1xuXG4gICAgaWYgKCFtYXApIHtcbiAgICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIHByZXBhcmVkVGVtcGxhdGVzLnNldCh0ZW1wbGF0ZSwgbWFwKTtcbiAgICB9XG5cbiAgICB2YXIgY2xvbmUgPSBtYXAuZ2V0KHRhZ05hbWUpO1xuXG4gICAgaWYgKCFjbG9uZSkge1xuICAgICAgY2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgICAgY2xvbmUuY29udGVudC5hcHBlbmRDaGlsZCh0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICBtYXAuc2V0KHRhZ05hbWUsIGNsb25lKTtcbiAgICAgIHZhciBzdHlsZXMgPSBjbG9uZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7XG4gICAgICBBcnJheS5mcm9tKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gc3R5bGUuY2hpbGROb2Rlcy5sZW5ndGggKyAxO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgIHN0eWxlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGdldFBsYWNlaG9sZGVyKCkpLCBzdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc2hhZHkucHJlcGFyZVRlbXBsYXRlKGNsb25lLCB0YWdOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZTtcbiAgfSwgdGVtcGxhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduYXR1cmUocGFydHMsIHN0eWxlcykge1xuICB2YXIgc2lnbmF0dXJlID0gcGFydHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBhcnQsIGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gcGFydDtcbiAgICB9XG5cbiAgICBpZiAocGFydHMuc2xpY2UoaW5kZXgpLmpvaW4oJycpLm1hdGNoKC9eXFxzKjxcXC9cXHMqKHRhYmxlfHRyfHRoZWFkfHRib2R5fHRmb290fGNvbGdyb3VwKT4vKSkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFjYywgXCI8IS0tXCIpLmNvbmNhdChnZXRQbGFjZWhvbGRlcihpbmRleCAtIDEpLCBcIi0tPlwiKS5jb25jYXQocGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYyArIGdldFBsYWNlaG9sZGVyKGluZGV4IC0gMSkgKyBwYXJ0O1xuICB9LCAnJyk7XG5cbiAgaWYgKHN0eWxlcykge1xuICAgIHNpZ25hdHVyZSArPSBcIjxzdHlsZT5cXG5cIi5jb25jYXQoc3R5bGVzLmpvaW4oJ1xcbi8qLS0tLS0tKi9cXG4nKSwgXCJcXG48L3N0eWxlPlwiKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG4gIGlmIChJU19JRSkge1xuICAgIHJldHVybiBzaWduYXR1cmUucmVwbGFjZSgvc3R5bGVcXHMqPVxccyooW1wiXVteXCJdK1tcIl18WyddW14nXStbJ118W15cXHNcIic8Pi9dKykvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoQVRUUl9QUkVGSVgpLmNvbmNhdChtYXRjaCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc2lnbmF0dXJlO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxzKj1cXHMqWydcIl0qJC9nLCAnJykuc3BsaXQoJyAnKS5wb3AoKTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUNvbW1lbnRzKGZyYWdtZW50KSB7XG4gIHZhciBpdGVyYXRvciA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihmcmFnbWVudCwgTm9kZUZpbHRlci5TSE9XX0NPTU1FTlQsIG51bGwsIGZhbHNlKTtcbiAgdmFyIG5vZGU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25kLWFzc2lnblxuXG4gIHdoaWxlIChub2RlID0gaXRlcmF0b3IubmV4dE5vZGUoKSkge1xuICAgIGlmIChQTEFDRUhPTERFUl9SRUdFWFBfRVFVQUwudGVzdChub2RlLnRleHRDb250ZW50KSkge1xuICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShub2RlLnRleHRDb250ZW50KSwgbm9kZSk7XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbFdhbGtlcihjb250ZXh0KSB7XG4gIHZhciBub2RlO1xuICByZXR1cm4ge1xuICAgIGdldCBjdXJyZW50Tm9kZSgpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG5cbiAgICBuZXh0Tm9kZTogZnVuY3Rpb24gbmV4dE5vZGUoKSB7XG4gICAgICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUgPSBjb250ZXh0LmNoaWxkTm9kZXNbMF07XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1swXTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBub2RlID0gcGFyZW50Tm9kZS5uZXh0U2libGluZztcblxuICAgICAgICB3aGlsZSAoIW5vZGUgJiYgcGFyZW50Tm9kZSAhPT0gY29udGV4dCkge1xuICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgbm9kZSA9IHBhcmVudE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICEhbm9kZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV4dGVybmFsV2Fsa2VyKGNvbnRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoY29udGV4dCwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQgfCBOb2RlRmlsdGVyLlNIT1dfVEVYVCwgbnVsbCwgZmFsc2UpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG52YXIgY3JlYXRlV2Fsa2VyID0gX3R5cGVvZih3aW5kb3cuU2hhZHlET00pID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuU2hhZHlET00uaW5Vc2UgPyBjcmVhdGVJbnRlcm5hbFdhbGtlciA6IGNyZWF0ZUV4dGVybmFsV2Fsa2VyO1xudmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZShyYXdQYXJ0cywgaXNTVkcsIHN0eWxlcykge1xuICB2YXIgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICB2YXIgcGFydHMgPSBbXTtcbiAgdmFyIHNpZ25hdHVyZSA9IGNyZWF0ZVNpZ25hdHVyZShyYXdQYXJ0cywgc3R5bGVzKTtcbiAgaWYgKGlzU1ZHKSBzaWduYXR1cmUgPSBcIjxzdmc+XCIuY29uY2F0KHNpZ25hdHVyZSwgXCI8L3N2Zz5cIik7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG4gIGlmIChJU19JRSkge1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHNpZ25hdHVyZTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gXCI8dGVtcGxhdGU+XCIuY29uY2F0KHNpZ25hdHVyZSwgXCI8L3RlbXBsYXRlPlwiKTtcbiAgICB0ZW1wbGF0ZS5jb250ZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lci5jaGlsZHJlblswXS5jb250ZW50KTtcbiAgfVxuXG4gIGlmIChpc1NWRykge1xuICAgIHZhciBzdmdSb290ID0gdGVtcGxhdGUuY29udGVudC5maXJzdENoaWxkO1xuICAgIHRlbXBsYXRlLmNvbnRlbnQucmVtb3ZlQ2hpbGQoc3ZnUm9vdCk7XG4gICAgQXJyYXkuZnJvbShzdmdSb290LmNoaWxkTm9kZXMpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVwbGFjZUNvbW1lbnRzKHRlbXBsYXRlLmNvbnRlbnQpO1xuICB2YXIgY29tcGlsZVdhbGtlciA9IGNyZWF0ZVdhbGtlcih0ZW1wbGF0ZS5jb250ZW50KTtcbiAgdmFyIGNvbXBpbGVJbmRleCA9IDA7XG5cbiAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgdmFyIG5vZGUgPSBjb21waWxlV2Fsa2VyLmN1cnJlbnROb2RlO1xuXG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICB2YXIgdGV4dCA9IG5vZGUudGV4dENvbnRlbnQ7XG5cbiAgICAgIGlmICghdGV4dC5tYXRjaChQTEFDRUhPTERFUl9SRUdFWFBfRVFVQUwpKSB7XG4gICAgICAgIHZhciByZXN1bHRzID0gdGV4dC5tYXRjaChQTEFDRUhPTERFUl9SRUdFWFBfQUxMKTtcblxuICAgICAgICBpZiAocmVzdWx0cykge1xuICAgICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgcmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIHZhciBfYWNjJHBvcCRzcGxpdCA9IGFjYy5wb3AoKS5zcGxpdChwbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgX2FjYyRwb3Akc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX2FjYyRwb3Akc3BsaXQsIDIpLFxuICAgICAgICAgICAgICAgIGJlZm9yZSA9IF9hY2MkcG9wJHNwbGl0MlswXSxcbiAgICAgICAgICAgICAgICBuZXh0ID0gX2FjYyRwb3Akc3BsaXQyWzFdO1xuXG4gICAgICAgICAgICBpZiAoYmVmb3JlKSBhY2MucHVzaChiZWZvcmUpO1xuICAgICAgICAgICAgYWNjLnB1c2gocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgaWYgKG5leHQpIGFjYy5wdXNoKG5leHQpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICB9LCBbdGV4dF0pLmZvckVhY2goZnVuY3Rpb24gKHBhcnQsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgY3VycmVudE5vZGUudGV4dENvbnRlbnQgPSBwYXJ0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwYXJ0KSwgY3VycmVudE5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBlcXVhbCA9IG5vZGUudGV4dENvbnRlbnQubWF0Y2goUExBQ0VIT0xERVJfUkVHRVhQX0VRVUFMKTtcblxuICAgICAgaWYgKGVxdWFsKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmICghSVNfSUUpIG5vZGUudGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgcGFydHNbZXF1YWxbMV1dID0gW2NvbXBpbGVJbmRleCwgcmVzb2x2ZVZhbHVlXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lbHktaWZcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICBBcnJheS5mcm9tKG5vZGUuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWUudHJpbSgpO1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbiAgICAgICAgICB2YXIgbmFtZSA9IElTX0lFID8gYXR0ci5uYW1lLnJlcGxhY2UoQVRUUl9QUkVGSVgsICcnKSA6IGF0dHIubmFtZTtcbiAgICAgICAgICB2YXIgZXF1YWwgPSB2YWx1ZS5tYXRjaChQTEFDRUhPTERFUl9SRUdFWFBfRVFVQUwpO1xuXG4gICAgICAgICAgaWYgKGVxdWFsKSB7XG4gICAgICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gZ2V0UHJvcGVydHlOYW1lKHJhd1BhcnRzW2VxdWFsWzFdXSk7XG4gICAgICAgICAgICBwYXJ0c1tlcXVhbFsxXV0gPSBbY29tcGlsZUluZGV4LCByZXNvbHZlUHJvcGVydHkobmFtZSwgcHJvcGVydHlOYW1lLCBpc1NWRyldO1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9yZXN1bHRzID0gdmFsdWUubWF0Y2goUExBQ0VIT0xERVJfUkVHRVhQX0FMTCk7XG5cbiAgICAgICAgICAgIGlmIChfcmVzdWx0cykge1xuICAgICAgICAgICAgICB2YXIgcGFydGlhbE5hbWUgPSBcImF0dHJfX1wiLmNvbmNhdChuYW1lKTtcblxuICAgICAgICAgICAgICBfcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZWhvbGRlciwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3BsYWNlaG9sZGVyJG1hdGNoID0gcGxhY2Vob2xkZXIubWF0Y2goUExBQ0VIT0xERVJfUkVHRVhQX0VRVUFMKSxcbiAgICAgICAgICAgICAgICAgICAgX3BsYWNlaG9sZGVyJG1hdGNoMiA9IF9zbGljZWRUb0FycmF5KF9wbGFjZWhvbGRlciRtYXRjaCwgMiksXG4gICAgICAgICAgICAgICAgICAgIGlkID0gX3BsYWNlaG9sZGVyJG1hdGNoMlsxXTtcblxuICAgICAgICAgICAgICAgIHBhcnRzW2lkXSA9IFtjb21waWxlSW5kZXgsIGZ1bmN0aW9uIChob3N0LCB0YXJnZXQsIGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBkYXRhTWFwLmdldCh0YXJnZXQsIHt9KTtcbiAgICAgICAgICAgICAgICAgIGRhdGFbcGFydGlhbE5hbWVdID0gKGRhdGFbcGFydGlhbE5hbWVdIHx8IHZhbHVlKS5yZXBsYWNlKHBsYWNlaG9sZGVyLCBhdHRyVmFsdWUgPT0gbnVsbCA/ICcnIDogYXR0clZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKF9yZXN1bHRzLmxlbmd0aCA9PT0gMSB8fCBpbmRleCArIDEgPT09IF9yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKG5hbWUsIGRhdGFbcGFydGlhbE5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtwYXJ0aWFsTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGF0dHIudmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuICAgICAgICAgICAgICBpZiAoSVNfSUUgJiYgbmFtZSAhPT0gYXR0ci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKTtcbiAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBpbGVJbmRleCArPSAxO1xuICB9O1xuXG4gIHdoaWxlIChjb21waWxlV2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICBfbG9vcCgpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVRlbXBsYXRlSW5zdGFuY2UoaG9zdCwgdGFyZ2V0LCBhcmdzKSB7XG4gICAgdmFyIGRhdGEgPSBkYXRhTWFwLmdldCh0YXJnZXQsIHtcbiAgICAgIHR5cGU6ICdmdW5jdGlvbidcbiAgICB9KTtcblxuICAgIGlmICh0ZW1wbGF0ZSAhPT0gZGF0YS50ZW1wbGF0ZSkge1xuICAgICAgaWYgKGRhdGEudGVtcGxhdGUgfHwgdGFyZ2V0Lm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmVtb3ZlVGVtcGxhdGUodGFyZ2V0KTtcbiAgICAgIGRhdGEucHJldkFyZ3MgPSBudWxsO1xuICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuaW1wb3J0Tm9kZShhcHBseVNoYWR5Q1NTKHRlbXBsYXRlLCBob3N0LnRhZ05hbWUpLmNvbnRlbnQsIHRydWUpO1xuICAgICAgdmFyIHJlbmRlcldhbGtlciA9IGNyZWF0ZVdhbGtlcihmcmFnbWVudCk7XG4gICAgICB2YXIgY2xvbmVkUGFydHMgPSBwYXJ0cy5zbGljZSgwKTtcbiAgICAgIHZhciByZW5kZXJJbmRleCA9IDA7XG4gICAgICB2YXIgY3VycmVudFBhcnQgPSBjbG9uZWRQYXJ0cy5zaGlmdCgpO1xuICAgICAgdmFyIG1hcmtlcnMgPSBbXTtcbiAgICAgIGRhdGEudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgIGRhdGEubWFya2VycyA9IG1hcmtlcnM7XG5cbiAgICAgIHdoaWxlIChyZW5kZXJXYWxrZXIubmV4dE5vZGUoKSkge1xuICAgICAgICB2YXIgbm9kZSA9IHJlbmRlcldhbGtlci5jdXJyZW50Tm9kZTtcblxuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIGlmIChQTEFDRUhPTERFUl9SRUdFWFBfRVFVQUwudGVzdChub2RlLnRleHRDb250ZW50KSkge1xuICAgICAgICAgICAgbm9kZS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoSVNfSUUpIHtcbiAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoQVRUUl9SRUdFWFAsICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgIGlmIChub2RlLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEgJiYgIWN1c3RvbUVsZW1lbnRzLmdldChub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiTWlzc2luZyAnXCIuY29uY2F0KHN0cmluZ2lmeUVsZW1lbnQobm9kZSksIFwiJyBlbGVtZW50IGRlZmluaXRpb24gaW4gJ1wiKS5jb25jYXQoc3RyaW5naWZ5RWxlbWVudChob3N0KSwgXCInXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoY3VycmVudFBhcnQgJiYgY3VycmVudFBhcnRbMF0gPT09IHJlbmRlckluZGV4KSB7XG4gICAgICAgICAgbWFya2Vycy5wdXNoKFtub2RlLCBjdXJyZW50UGFydFsxXV0pO1xuICAgICAgICAgIGN1cnJlbnRQYXJ0ID0gY2xvbmVkUGFydHMuc2hpZnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlckluZGV4ICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXQubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIGRhdGEuc3RhcnROb2RlID0gZnJhZ21lbnQuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgZGF0YS5lbmROb2RlID0gZnJhZ21lbnQuY2hpbGROb2Rlc1tmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgcHJldmlvdXNDaGlsZCA9IHRhcmdldDtcbiAgICAgICAgdmFyIGNoaWxkID0gZnJhZ21lbnQuY2hpbGROb2Rlc1swXTtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGQsIHByZXZpb3VzQ2hpbGQubmV4dFNpYmxpbmcpO1xuICAgICAgICAgIHByZXZpb3VzQ2hpbGQgPSBjaGlsZDtcbiAgICAgICAgICBjaGlsZCA9IGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZBcmdzID0gZGF0YS5wcmV2QXJncztcbiAgICBkYXRhLnByZXZBcmdzID0gYXJncztcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBkYXRhLm1hcmtlcnMubGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICB2YXIgX2RhdGEkbWFya2VycyRpbmRleCA9IF9zbGljZWRUb0FycmF5KGRhdGEubWFya2Vyc1tpbmRleF0sIDIpLFxuICAgICAgICAgIF9ub2RlID0gX2RhdGEkbWFya2VycyRpbmRleFswXSxcbiAgICAgICAgICBtYXJrZXIgPSBfZGF0YSRtYXJrZXJzJGluZGV4WzFdO1xuXG4gICAgICBpZiAoIXByZXZBcmdzIHx8IHByZXZBcmdzW2luZGV4XSAhPT0gYXJnc1tpbmRleF0pIHtcbiAgICAgICAgbWFya2VyKGhvc3QsIF9ub2RlLCBhcmdzW2luZGV4XSwgcHJldkFyZ3MgPyBwcmV2QXJnc1tpbmRleF0gOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0YXJnZXQubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICBzaGFkeUNTUyhmdW5jdGlvbiAoc2hhZHkpIHtcbiAgICAgICAgaWYgKGhvc3Quc2hhZG93Um9vdCkge1xuICAgICAgICAgIGlmIChwcmV2QXJncykge1xuICAgICAgICAgICAgc2hhZHkuc3R5bGVTdWJ0cmVlKGhvc3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFkeS5zdHlsZUVsZW1lbnQoaG9zdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTkwWlcxd2JHRjBaUzlqYjNKbExtcHpJbDBzSW01aGJXVnpJanBiSW5OMGNtbHVaMmxtZVVWc1pXMWxiblFpTENKemFHRmtlVU5UVXlJc0lrbFRYMGxGSWl3aVpHRjBZVTFoY0NJc0luSmxiVzkyWlZSbGJYQnNZWFJsSWl3aWNtVnpiMngyWlZaaGJIVmxJaXdpY21WemIyeDJaVkJ5YjNCbGNuUjVJaXdpY0hKdlkyVnpjeUlzSW1WdWRpSXNJazVQUkVWZlJVNVdJaXdpWlNJc0lsUkpUVVZUVkVGTlVDSXNJa1JoZEdVaUxDSnViM2NpTENKblpYUlFiR0ZqWldodmJHUmxjaUlzSW1sa0lpd2lVRXhCUTBWSVQweEVSVkpmVWtWSFJWaFFYMVJGV0ZRaUxDSlFURUZEUlVoUFRFUkZVbDlTUlVkRldGQmZSVkZWUVV3aUxDSlNaV2RGZUhBaUxDSlFURUZEUlVoUFRFUkZVbDlTUlVkRldGQmZRVXhNSWl3aVFWUlVVbDlRVWtWR1NWZ2lMQ0pCVkZSU1gxSkZSMFZZVUNJc0luQnlaWEJoY21Wa1ZHVnRjR3hoZEdWeklpd2lWMlZoYTAxaGNDSXNJbUZ3Y0d4NVUyaGhaSGxEVTFNaUxDSjBaVzF3YkdGMFpTSXNJblJoWjA1aGJXVWlMQ0p6YUdGa2VTSXNJbTFoY0NJc0ltZGxkQ0lzSWsxaGNDSXNJbk5sZENJc0ltTnNiMjVsSWl3aVpHOWpkVzFsYm5RaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVkyOXVkR1Z1ZENJc0ltRndjR1Z1WkVOb2FXeGtJaXdpWTJ4dmJtVk9iMlJsSWl3aWMzUjViR1Z6SWl3aWNYVmxjbmxUWld4bFkzUnZja0ZzYkNJc0lrRnljbUY1SWl3aVpuSnZiU0lzSW1admNrVmhZMmdpTENKemRIbHNaU0lzSW1OdmRXNTBJaXdpWTJocGJHUk9iMlJsY3lJc0lteGxibWQwYUNJc0lta2lMQ0p3WVhKbGJuUk9iMlJsSWl3aWFXNXpaWEowUW1WbWIzSmxJaXdpWTNKbFlYUmxWR1Y0ZEU1dlpHVWlMQ0p3Y21Wd1lYSmxWR1Z0Y0d4aGRHVWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0ltTnlaV0YwWlZOcFoyNWhkSFZ5WlNJc0luQmhjblJ6SWl3aWMybG5ibUYwZFhKbElpd2ljbVZrZFdObElpd2lZV05qSWl3aWNHRnlkQ0lzSW1sdVpHVjRJaXdpYzJ4cFkyVWlMQ0pxYjJsdUlpd2liV0YwWTJnaUxDSnlaWEJzWVdObElpd2laMlYwVUhKdmNHVnlkSGxPWVcxbElpd2ljM1J5YVc1bklpd2ljM0JzYVhRaUxDSndiM0FpTENKeVpYQnNZV05sUTI5dGJXVnVkSE1pTENKbWNtRm5iV1Z1ZENJc0ltbDBaWEpoZEc5eUlpd2lZM0psWVhSbFRtOWtaVWwwWlhKaGRHOXlJaXdpVG05a1pVWnBiSFJsY2lJc0lsTklUMWRmUTA5TlRVVk9WQ0lzSW01dlpHVWlMQ0p1WlhoMFRtOWtaU0lzSW5SbGMzUWlMQ0owWlhoMFEyOXVkR1Z1ZENJc0luSmxiVzkyWlVOb2FXeGtJaXdpWTNKbFlYUmxTVzUwWlhKdVlXeFhZV3hyWlhJaUxDSmpiMjUwWlhoMElpd2lZM1Z5Y21WdWRFNXZaR1VpTENKMWJtUmxabWx1WldRaUxDSnVaWGgwVTJsaWJHbHVaeUlzSW1OeVpXRjBaVVY0ZEdWeWJtRnNWMkZzYTJWeUlpd2lZM0psWVhSbFZISmxaVmRoYkd0bGNpSXNJbE5JVDFkZlJVeEZUVVZPVkNJc0lsTklUMWRmVkVWWVZDSXNJbU55WldGMFpWZGhiR3RsY2lJc0luZHBibVJ2ZHlJc0lsTm9ZV1I1UkU5Tklpd2lhVzVWYzJVaUxDSmpiMjUwWVdsdVpYSWlMQ0pqYjIxd2FXeGxWR1Z0Y0d4aGRHVWlMQ0p5WVhkUVlYSjBjeUlzSW1selUxWkhJaXdpYVc1dVpYSklWRTFNSWl3aVkyaHBiR1J5Wlc0aUxDSnpkbWRTYjI5MElpd2labWx5YzNSRGFHbHNaQ0lzSW1OdmJYQnBiR1ZYWVd4clpYSWlMQ0pqYjIxd2FXeGxTVzVrWlhnaUxDSnViMlJsVkhsd1pTSXNJazV2WkdVaUxDSlVSVmhVWDA1UFJFVWlMQ0owWlhoMElpd2ljbVZ6ZFd4MGN5SXNJbkJzWVdObGFHOXNaR1Z5SWl3aVltVm1iM0psSWl3aWJtVjRkQ0lzSW5CMWMyZ2lMQ0psY1hWaGJDSXNJa1ZNUlUxRlRsUmZUazlFUlNJc0ltRjBkSEpwWW5WMFpYTWlMQ0poZEhSeUlpd2lkbUZzZFdVaUxDSjBjbWx0SWl3aWJtRnRaU0lzSW5CeWIzQmxjblI1VG1GdFpTSXNJbkpsYlc5MlpVRjBkSEpwWW5WMFpTSXNJbkJoY25ScFlXeE9ZVzFsSWl3aWFHOXpkQ0lzSW5SaGNtZGxkQ0lzSW1GMGRISldZV3gxWlNJc0ltUmhkR0VpTENKelpYUkJkSFJ5YVdKMWRHVWlMQ0oxY0dSaGRHVlVaVzF3YkdGMFpVbHVjM1JoYm1ObElpd2lZWEpuY3lJc0luUjVjR1VpTENKd2NtVjJRWEpuY3lJc0ltbHRjRzl5ZEU1dlpHVWlMQ0p5Wlc1a1pYSlhZV3hyWlhJaUxDSmpiRzl1WldSUVlYSjBjeUlzSW5KbGJtUmxja2x1WkdWNElpd2lZM1Z5Y21WdWRGQmhjblFpTENKemFHbG1kQ0lzSW0xaGNtdGxjbk1pTENKcGJtUmxlRTltSWl3aVkzVnpkRzl0Uld4bGJXVnVkSE1pTENKRmNuSnZjaUlzSW5OMFlYSjBUbTlrWlNJc0ltVnVaRTV2WkdVaUxDSndjbVYyYVc5MWMwTm9hV3hrSWl3aVkyaHBiR1FpTENKdFlYSnJaWElpTENKemFHRmtiM2RTYjI5MElpd2ljM1I1YkdWVGRXSjBjbVZsSWl3aWMzUjViR1ZGYkdWdFpXNTBJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08wRkJRVUVzVTBGQlUwRXNaMEpCUVZRc1JVRkJNa0pETEZGQlFUTkNMRVZCUVhGRFF5eExRVUZ5UXl4UlFVRnJSQ3hWUVVGc1JEdEJRVU5CTEZOQlFWTkRMRTlCUVZRc1JVRkJhMEpETEdOQlFXeENMRkZCUVhkRExGTkJRWGhETzBGQlJVRXNUMEZCVDBNc1dVRkJVQ3hOUVVGNVFpeHRRa0ZCZWtJN1FVRkRRU3hQUVVGUFF5eGxRVUZRTEUxQlFUUkNMSE5DUVVFMVFqdEJRVVZCT3p0QlFVTkJMRWxCUVVrN1FVRkJSVU1zUlVGQlFVRXNUMEZCVHl4RFFVRkRReXhIUVVGU0xFTkJRVmxETEZGQlFWbzdRVUZCYzBJc1EwRkJOVUlzUTBGQk5rSXNUMEZCVFVNc1EwRkJUaXhGUVVGVE8wRkJRVVVzVFVGQlNVZ3NUMEZCVHl4SFFVRkhPMEZCUVVWRExFbEJRVUZCTEVkQlFVY3NSVUZCUlR0QlFVRkZReXhOUVVGQlFTeFJRVUZSTEVWQlFVVTdRVUZCV2p0QlFVRlFMRWRCUVdRN1FVRkJiMFFzUXl4RFFVRkRPenM3UVVGRk4wWXNTVUZCVFVVc1UwRkJVeXhIUVVGSFF5eEpRVUZKTEVOQlFVTkRMRWRCUVV3c1JVRkJiRUk3UVVGRlFTeFBRVUZQTEVsQlFVMURMR05CUVdNc1IwRkJSeXhUUVVGcVFrRXNZMEZCYVVJN1FVRkJRU3hOUVVGRFF5eEZRVUZFTEhWRlFVRk5MRU5CUVU0N1FVRkJRU3gxUWtGQmJVSktMRk5CUVc1Q0xHTkJRV2REU1N4RlFVRm9RenRCUVVGQkxFTkJRWFpDTzBGQlJWQXNTVUZCVFVNc2RVSkJRWFZDTEVkQlFVZEdMR05CUVdNc1EwRkJReXhSUVVGRUxFTkJRVGxETzBGQlEwRXNTVUZCVFVjc2QwSkJRWGRDTEVkQlFVY3NTVUZCU1VNc1RVRkJTaXhaUVVGbFJpeDFRa0ZCWml4UFFVRnFRenRCUVVOQkxFbEJRVTFITEhOQ1FVRnpRaXhIUVVGSExFbEJRVWxFTEUxQlFVb3NRMEZCVjBZc2RVSkJRVmdzUlVGQmIwTXNSMEZCY0VNc1EwRkJMMEk3UVVGRlFTeEpRVUZOU1N4WFFVRlhMR1ZCUVZGVUxGTkJRVklzVDBGQmFrSTdRVUZEUVN4SlFVRk5WU3hYUVVGWExFZEJRVWNzU1VGQlNVZ3NUVUZCU2l4RFFVRlhSU3hYUVVGWUxFVkJRWGRDTEVkQlFYaENMRU5CUVhCQ08wRkJSVUVzU1VGQlRVVXNhVUpCUVdsQ0xFZEJRVWNzU1VGQlNVTXNUMEZCU2l4RlFVRXhRanRCUVVWQk96dEJRVU5CTEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUpETEZGQlFYWkNMRVZCUVdsRFF5eFBRVUZxUXl4RlFVRXdRenRCUVVONFF5eE5RVUZKTEVOQlFVTkJMRTlCUVV3c1JVRkJZeXhQUVVGUFJDeFJRVUZRTzBGQlJXUXNVMEZCVDNoQ0xGRkJRVkVzUTBGQlF5eFZRVUZETUVJc1MwRkJSQ3hGUVVGWE8wRkJRM3BDTEZGQlFVbERMRWRCUVVjc1IwRkJSMDRzYVVKQlFXbENMRU5CUVVOUExFZEJRV3hDTEVOQlFYTkNTaXhSUVVGMFFpeERRVUZXT3p0QlFVTkJMRkZCUVVrc1EwRkJRMGNzUjBGQlRDeEZRVUZWTzBGQlExSkJMRTFCUVVGQkxFZEJRVWNzUjBGQlJ5eEpRVUZKUlN4SFFVRktMRVZCUVU0N1FVRkRRVklzVFVGQlFVRXNhVUpCUVdsQ0xFTkJRVU5UTEVkQlFXeENMRU5CUVhOQ1RpeFJRVUYwUWl4RlFVRm5RMGNzUjBGQmFFTTdRVUZEUkRzN1FVRkZSQ3hSUVVGSlNTeExRVUZMTEVkQlFVZEtMRWRCUVVjc1EwRkJRME1zUjBGQlNpeERRVUZSU0N4UFFVRlNMRU5CUVZvN08wRkJSVUVzVVVGQlNTeERRVUZEVFN4TFFVRk1MRVZCUVZrN1FVRkRWa0VzVFVGQlFVRXNTMEZCU3l4SFFVRkhReXhSUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1ZVRkJka0lzUTBGQlVqdEJRVU5CUml4TlFVRkJRU3hMUVVGTExFTkJRVU5ITEU5QlFVNHNRMEZCWTBNc1YwRkJaQ3hEUVVFd1FsZ3NVVUZCVVN4RFFVRkRWU3hQUVVGVUxFTkJRV2xDUlN4VFFVRnFRaXhEUVVFeVFpeEpRVUV6UWl4RFFVRXhRanRCUVVWQlZDeE5RVUZCUVN4SFFVRkhMRU5CUVVOSExFZEJRVW9zUTBGQlVVd3NUMEZCVWl4RlFVRnBRazBzUzBGQmFrSTdRVUZGUVN4VlFVRk5UU3hOUVVGTkxFZEJRVWRPTEV0QlFVc3NRMEZCUTBjc1QwRkJUaXhEUVVGalNTeG5Ra0ZCWkN4RFFVRXJRaXhQUVVFdlFpeERRVUZtTzBGQlJVRkRMRTFCUVVGQkxFdEJRVXNzUTBGQlEwTXNTVUZCVGl4RFFVRlhTQ3hOUVVGWUxFVkJRVzFDU1N4UFFVRnVRaXhEUVVFeVFpeFZRVUZEUXl4TFFVRkVMRVZCUVZjN1FVRkRjRU1zV1VGQlRVTXNTMEZCU3l4SFFVRkhSQ3hMUVVGTExFTkJRVU5GTEZWQlFVNHNRMEZCYVVKRExFMUJRV3BDTEVkQlFUQkNMRU5CUVhoRE96dEJRVU5CTEdGQlFVc3NTVUZCU1VNc1EwRkJReXhIUVVGSExFTkJRV0lzUlVGQlowSkJMRU5CUVVNc1IwRkJSMGdzUzBGQmNFSXNSVUZCTWtKSExFTkJRVU1zU1VGQlNTeERRVUZvUXl4RlFVRnRRenRCUVVOcVEwb3NWVUZCUVVFc1MwRkJTeXhEUVVGRFN5eFZRVUZPTEVOQlFXbENReXhaUVVGcVFpeERRVUU0UW1oQ0xGRkJRVkVzUTBGQlEybENMR05CUVZRc1EwRkJkMEp3UXl4alFVRmpMRVZCUVhSRExFTkJRVGxDTEVWQlFYbEZOa0lzUzBGQmVrVTdRVUZEUkR0QlFVTkdMRTlCVEVRN1FVRlBRV2hDTEUxQlFVRkJMRXRCUVVzc1EwRkJRM2RDTEdWQlFVNHNRMEZCYzBKdVFpeExRVUYwUWl4RlFVRTJRazRzVDBGQlR5eERRVUZETUVJc1YwRkJVaXhGUVVFM1FqdEJRVU5FT3p0QlFVTkVMRmRCUVU5d1FpeExRVUZRTzBGQlEwUXNSMEV6UW1Nc1JVRXlRbHBRTEZGQk0wSlpMRU5CUVdZN1FVRTBRa1E3TzBGQlJVUXNVMEZCVXpSQ0xHVkJRVlFzUTBGQmVVSkRMRXRCUVhwQ0xFVkJRV2REYUVJc1RVRkJhRU1zUlVGQmQwTTdRVUZEZEVNc1RVRkJTV2xDTEZOQlFWTXNSMEZCUjBRc1MwRkJTeXhEUVVGRFJTeE5RVUZPTEVOQlFXRXNWVUZCUTBNc1IwRkJSQ3hGUVVGTlF5eEpRVUZPTEVWQlFWbERMRXRCUVZvc1JVRkJjMEk3UVVGRGFrUXNVVUZCU1VFc1MwRkJTeXhMUVVGTExFTkJRV1FzUlVGQmFVSTdRVUZEWml4aFFVRlBSQ3hKUVVGUU8wRkJRMFE3TzBGQlJVUXNVVUZCU1Vvc1MwRkJTeXhEUVVGRFRTeExRVUZPTEVOQlFWbEVMRXRCUVZvc1JVRkJiVUpGTEVsQlFXNUNMRU5CUVhkQ0xFVkJRWGhDTEVWQlFUUkNReXhMUVVFMVFpeERRVUZyUXl4clJFRkJiRU1zUTBGQlNpeEZRVUV5Ump0QlFVTjZSaXgxUWtGQlZVd3NSMEZCVml4cFFrRkJiMEl6UXl4alFVRmpMRU5CUVVNMlF5eExRVUZMTEVkQlFVY3NRMEZCVkN4RFFVRnNReXhuUWtGQmJVUkVMRWxCUVc1RU8wRkJRMFE3TzBGQlEwUXNWMEZCVDBRc1IwRkJSeXhIUVVGSE0wTXNZMEZCWXl4RFFVRkROa01zUzBGQlN5eEhRVUZITEVOQlFWUXNRMEZCY0VJc1IwRkJhME5FTEVsQlFYcERPMEZCUTBRc1IwRlVaU3hGUVZOaUxFVkJWR0VzUTBGQmFFSTdPMEZCVjBFc1RVRkJTWEJDTEUxQlFVb3NSVUZCV1R0QlFVTldhVUlzU1VGQlFVRXNVMEZCVXl4MVFrRkJaMEpxUWl4TlFVRk5MRU5CUVVOMVFpeEpRVUZRTEVOQlFWa3NaMEpCUVZvc1EwRkJhRUlzWlVGQlZEdEJRVU5FTzBGQlJVUTdPenRCUVVOQkxFMUJRVWt6UkN4TFFVRktMRVZCUVZjN1FVRkRWQ3hYUVVGUGNVUXNVMEZCVXl4RFFVRkRVU3hQUVVGV0xFTkJRMHdzYjBSQlJFc3NSVUZGVEN4VlFVRkRSQ3hMUVVGRU8wRkJRVUVzZFVKQlFXTXhReXhYUVVGa0xGTkJRVFJDTUVNc1MwRkJOVUk3UVVGQlFTeExRVVpMTEVOQlFWQTdRVUZKUkRzN1FVRkZSQ3hUUVVGUFVDeFRRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVMU1zWlVGQlZDeERRVUY1UWtNc1RVRkJla0lzUlVGQmFVTTdRVUZETDBJc1UwRkJUMEVzVFVGQlRTeERRVUZEUml4UFFVRlFMRU5CUVdVc1owSkJRV1lzUlVGQmFVTXNSVUZCYWtNc1JVRkJjVU5ITEV0QlFYSkRMRU5CUVRKRExFZEJRVE5ETEVWQlFXZEVReXhIUVVGb1JDeEZRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVME1zWlVGQlZDeERRVUY1UWtNc1VVRkJla0lzUlVGQmJVTTdRVUZEYWtNc1RVRkJUVU1zVVVGQlVTeEhRVUZIY2tNc1VVRkJVU3hEUVVGRGMwTXNhMEpCUVZRc1EwRkJORUpHTEZGQlFUVkNMRVZCUVhORFJ5eFZRVUZWTEVOQlFVTkRMRmxCUVdwRUxFVkJRU3RFTEVsQlFTOUVMRVZCUVhGRkxFdEJRWEpGTEVOQlFXcENPMEZCUTBFc1RVRkJTVU1zU1VGQlNpeERRVVpwUXl4RFFVZHFRenM3UVVGRFFTeFRRVUZQUVN4SlFVRkpMRWRCUVVkS0xGRkJRVkVzUTBGQlEwc3NVVUZCVkN4RlFVRmtMRVZCUVcxRE8wRkJRMnBETEZGQlFVa3hSQ3gzUWtGQmQwSXNRMEZCUXpKRUxFbEJRWHBDTEVOQlFUaENSaXhKUVVGSkxFTkJRVU5ITEZkQlFXNURMRU5CUVVvc1JVRkJjVVE3UVVGRGJrUklMRTFCUVVGQkxFbEJRVWtzUTBGQlF6RkNMRlZCUVV3c1EwRkJaMEpETEZsQlFXaENMRU5CUVRaQ2FFSXNVVUZCVVN4RFFVRkRhVUlzWTBGQlZDeERRVUYzUW5kQ0xFbEJRVWtzUTBGQlEwY3NWMEZCTjBJc1EwRkJOMElzUlVGQmQwVklMRWxCUVhoRk8wRkJRMEZCTEUxQlFVRkJMRWxCUVVrc1EwRkJRekZDTEZWQlFVd3NRMEZCWjBJNFFpeFhRVUZvUWl4RFFVRTBRa29zU1VGQk5VSTdRVUZEUkR0QlFVTkdPMEZCUTBZN08wRkJSVVFzVDBGQlR5eFRRVUZUU3l4dlFrRkJWQ3hEUVVFNFFrTXNUMEZCT1VJc1JVRkJkVU03UVVGRE5VTXNUVUZCU1U0c1NVRkJTanRCUVVWQkxGTkJRVTg3UVVGRFRDeFJRVUZKVHl4WFFVRktMRWRCUVd0Q08wRkJRVVVzWVVGQlQxQXNTVUZCVUR0QlFVRmpMRXRCUkRkQ096dEJRVVZNUXl4SlFVRkJRU3hSUVVaTExITkNRVVZOTzBGQlExUXNWVUZCU1VRc1NVRkJTU3hMUVVGTFVTeFRRVUZpTEVWQlFYZENPMEZCUTNSQ1VpeFJRVUZCUVN4SlFVRkpMRWRCUVVkTkxFOUJRVThzUTBGQlEyNURMRlZCUVZJc1EwRkJiVUlzUTBGQmJrSXNRMEZCVUR0QlFVTkVMRTlCUmtRc1RVRkZUeXhKUVVGSk5rSXNTVUZCU1N4RFFVRkROMElzVlVGQlRDeERRVUZuUWtNc1RVRkJjRUlzUlVGQk5FSTdRVUZEYWtNMFFpeFJRVUZCUVN4SlFVRkpMRWRCUVVkQkxFbEJRVWtzUTBGQlF6ZENMRlZCUVV3c1EwRkJaMElzUTBGQmFFSXNRMEZCVUR0QlFVTkVMRTlCUmswc1RVRkZRU3hKUVVGSk5rSXNTVUZCU1N4RFFVRkRVeXhYUVVGVUxFVkJRWE5DTzBGQlF6TkNWQ3hSUVVGQlFTeEpRVUZKTEVkQlFVZEJMRWxCUVVrc1EwRkJRMU1zVjBGQldqdEJRVU5FTEU5QlJrMHNUVUZGUVR0QlFVTk1MRmxCUVVsdVF5eFZRVUZWTEVkQlFVY3dRaXhKUVVGSkxFTkJRVU14UWl4VlFVRjBRanRCUVVOQk1FSXNVVUZCUVVFc1NVRkJTU3hIUVVGSE1VSXNWVUZCVlN4RFFVRkRiVU1zVjBGQmJFSTdPMEZCUlVFc1pVRkJUeXhEUVVGRFZDeEpRVUZFTEVsQlFWTXhRaXhWUVVGVkxFdEJRVXRuUXl4UFFVRXZRaXhGUVVGM1F6dEJRVU4wUTJoRExGVkJRVUZCTEZWQlFWVXNSMEZCUjBFc1ZVRkJWU3hEUVVGRFFTeFZRVUY0UWp0QlFVTkJNRUlzVlVGQlFVRXNTVUZCU1N4SFFVRkhNVUlzVlVGQlZTeERRVUZEYlVNc1YwRkJiRUk3UVVGRFJEdEJRVU5HT3p0QlFVVkVMR0ZCUVU4c1EwRkJReXhEUVVGRFZDeEpRVUZVTzBGQlEwUTdRVUZ3UWtrc1IwRkJVRHRCUVhOQ1JEczdRVUZGUkN4VFFVRlRWU3h2UWtGQlZDeERRVUU0UWtvc1QwRkJPVUlzUlVGQmRVTTdRVUZEY2tNc1UwRkJUeTlETEZGQlFWRXNRMEZCUTI5RUxHZENRVUZVTEVOQlEweE1MRTlCUkVzc1JVRkZURHRCUVVOQlVpeEZRVUZCUVN4VlFVRlZMRU5CUVVOakxGbEJRVmdzUjBGQk1FSmtMRlZCUVZVc1EwRkJRMlVzVTBGSWFFTXNSVUZKVEN4SlFVcExMRVZCUzB3c1MwRk1TeXhEUVVGUU8wRkJUMFE3UVVGRlJEczdPMEZCUTBFc1NVRkJUVU1zV1VGQldTeEhRVUZITEZGQlFVOURMRTFCUVUwc1EwRkJRME1zVVVGQlpDeE5RVUV5UWl4UlFVRXpRaXhKUVVGMVEwUXNUVUZCVFN4RFFVRkRReXhSUVVGUUxFTkJRV2RDUXl4TFFVRjJSQ3hIUVVFclJGb3NiMEpCUVM5RUxFZEJRWE5HU3l4dlFrRkJNMGM3UVVGRlFTeEpRVUZOVVN4VFFVRlRMRWRCUVVjelJDeFJRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzUzBGQmRrSXNRMEZCYkVJN1FVRkRRU3hQUVVGUExGTkJRVk15UkN4bFFVRlVMRU5CUVhsQ1F5eFJRVUY2UWl4RlFVRnRRME1zUzBGQmJrTXNSVUZCTUVONlJDeE5RVUV4UXl4RlFVRnJSRHRCUVVOMlJDeE5RVUZOWWl4UlFVRlJMRWRCUVVkUkxGRkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhWUVVGMlFpeERRVUZxUWp0QlFVTkJMRTFCUVUxdlFpeExRVUZMTEVkQlFVY3NSVUZCWkR0QlFVVkJMRTFCUVVsRExGTkJRVk1zUjBGQlIwWXNaVUZCWlN4RFFVRkRlVU1zVVVGQlJDeEZRVUZYZUVRc1RVRkJXQ3hEUVVFdlFqdEJRVU5CTEUxQlFVbDVSQ3hMUVVGS0xFVkJRVmQ0UXl4VFFVRlRMR3RDUVVGWFFTeFRRVUZZTEZkQlFWUTdRVUZGV0RzN1FVRkRRU3hOUVVGSmNrUXNTMEZCU2l4RlFVRlhPMEZCUTFSMVFpeEpRVUZCUVN4UlFVRlJMRU5CUVVOMVJTeFRRVUZVTEVkQlFYRkNla01zVTBGQmNrSTdRVUZEUkN4SFFVWkVMRTFCUlU4N1FVRkRUSEZETEVsQlFVRkJMRk5CUVZNc1EwRkJRMGtzVTBGQlZpeDFRa0ZCYlVONlF5eFRRVUZ1UXp0QlFVTkJPVUlzU1VGQlFVRXNVVUZCVVN4RFFVRkRWU3hQUVVGVUxFTkJRV2xDUXl4WFFVRnFRaXhEUVVFMlFuZEVMRk5CUVZNc1EwRkJRMHNzVVVGQlZpeERRVUZ0UWl4RFFVRnVRaXhGUVVGelFqbEVMRTlCUVc1RU8wRkJRMFE3TzBGQlJVUXNUVUZCU1RSRUxFdEJRVW9zUlVGQlZ6dEJRVU5VTEZGQlFVMUhMRTlCUVU4c1IwRkJSM3BGTEZGQlFWRXNRMEZCUTFVc1QwRkJWQ3hEUVVGcFFtZEZMRlZCUVdwRE8wRkJRMEV4UlN4SlFVRkJRU3hSUVVGUkxFTkJRVU5WTEU5QlFWUXNRMEZCYVVJeVF5eFhRVUZxUWl4RFFVRTJRbTlDTEU5QlFUZENPMEZCUTBFeFJDeEpRVUZCUVN4TFFVRkxMRU5CUVVORExFbEJRVTRzUTBGQlYzbEVMRTlCUVU4c1EwRkJRM0pFTEZWQlFXNUNMRVZCUVN0Q1NDeFBRVUV2UWl4RFFVRjFReXhWUVVGRFowTXNTVUZCUkR0QlFVRkJMR0ZCUVZWcVJDeFJRVUZSTEVOQlFVTlZMRTlCUVZRc1EwRkJhVUpETEZkQlFXcENMRU5CUVRaQ2MwTXNTVUZCTjBJc1EwRkJWanRCUVVGQkxFdEJRWFpETzBGQlEwUTdPMEZCUlVST0xFVkJRVUZCTEdWQlFXVXNRMEZCUXpORExGRkJRVkVzUTBGQlExVXNUMEZCVml4RFFVRm1PMEZCUlVFc1RVRkJUV2xGTEdGQlFXRXNSMEZCUjFvc1dVRkJXU3hEUVVGREwwUXNVVUZCVVN4RFFVRkRWU3hQUVVGV0xFTkJRV3hETzBGQlEwRXNUVUZCU1d0RkxGbEJRVmtzUjBGQlJ5eERRVUZ1UWpzN1FVRjRRblZFTzBGQk1rSnlSQ3hSUVVGTk0wSXNTVUZCU1N4SFFVRkhNRUlzWVVGQllTeERRVUZEYmtJc1YwRkJNMEk3TzBGQlJVRXNVVUZCU1ZBc1NVRkJTU3hEUVVGRE5FSXNVVUZCVEN4TFFVRnJRa01zU1VGQlNTeERRVUZEUXl4VFFVRXpRaXhGUVVGelF6dEJRVU53UXl4VlFVRk5ReXhKUVVGSkxFZEJRVWN2UWl4SlFVRkpMRU5CUVVOSExGZEJRV3hDT3p0QlFVVkJMRlZCUVVrc1EwRkJRelJDTEVsQlFVa3NRMEZCUXpORExFdEJRVXdzUTBGQlZ6ZERMSGRDUVVGWUxFTkJRVXdzUlVGQk1rTTdRVUZEZWtNc1dVRkJUWGxHTEU5QlFVOHNSMEZCUjBRc1NVRkJTU3hEUVVGRE0wTXNTMEZCVEN4RFFVRlhNME1zYzBKQlFWZ3NRMEZCYUVJN08wRkJRMEVzV1VGQlNYVkdMRTlCUVVvc1JVRkJZVHRCUVVOWUxHTkJRVWw2UWl4WFFVRlhMRWRCUVVkUUxFbEJRV3hDTzBGQlEwRm5ReXhWUVVGQlFTeFBRVUZQTEVOQlEwcHNSQ3hOUVVSSUxFTkJRMVVzVlVGQlEwTXNSMEZCUkN4RlFVRk5hMFFzVjBGQlRpeEZRVUZ6UWp0QlFVRkJMR2xEUVVOTWJFUXNSMEZCUnl4RFFVRkRWU3hIUVVGS0xFZEJRVlZFTEV0QlFWWXNRMEZCWjBKNVF5eFhRVUZvUWl4RFFVUkxPMEZCUVVFN1FVRkJRU3huUWtGRGNrSkRMRTFCUkhGQ08wRkJRVUVzWjBKQlEySkRMRWxCUkdFN08wRkJSVFZDTEdkQ1FVRkpSQ3hOUVVGS0xFVkJRVmx1UkN4SFFVRkhMRU5CUVVOeFJDeEpRVUZLTEVOQlFWTkdMRTFCUVZRN1FVRkRXbTVFTEZsQlFVRkJMRWRCUVVjc1EwRkJRM0ZFTEVsQlFVb3NRMEZCVTBnc1YwRkJWRHRCUVVOQkxHZENRVUZKUlN4SlFVRktMRVZCUVZWd1JDeEhRVUZITEVOQlFVTnhSQ3hKUVVGS0xFTkJRVk5FTEVsQlFWUTdRVUZEVml4dFFrRkJUM0JFTEVkQlFWQTdRVUZEUkN4WFFWQklMRVZCVDBzc1EwRkJRMmRFTEVsQlFVUXNRMEZRVEN4RlFWRkhMMFFzVDBGU1NDeERRVkZYTEZWQlFVTm5RaXhKUVVGRUxFVkJRVTlETEV0QlFWQXNSVUZCYVVJN1FVRkRlRUlzWjBKQlFVbEJMRXRCUVVzc1MwRkJTeXhEUVVGa0xFVkJRV2xDTzBGQlEyWnpRaXhqUVVGQlFTeFhRVUZYTEVOQlFVTktMRmRCUVZvc1IwRkJNRUp1UWl4SlFVRXhRanRCUVVORUxHRkJSa1FzVFVGRlR6dEJRVU5NZFVJc1kwRkJRVUVzVjBGQlZ5eEhRVUZIUVN4WFFVRlhMRU5CUVVOcVF5eFZRVUZhTEVOQlExaERMRmxCUkZjc1EwRkRSV2hDTEZGQlFWRXNRMEZCUTJsQ0xHTkJRVlFzUTBGQmQwSlJMRWxCUVhoQ0xFTkJSRVlzUlVGRGFVTjFRaXhYUVVGWExFTkJRVU5GTEZkQlJEZERMRU5CUVdRN1FVRkZSRHRCUVVOR0xGZEJaa2c3UVVGblFrUTdRVUZEUmpzN1FVRkZSQ3hWUVVGTk5FSXNTMEZCU3l4SFFVRkhja01zU1VGQlNTeERRVUZEUnl4WFFVRk1MRU5CUVdsQ1ppeExRVUZxUWl4RFFVRjFRamRETEhkQ1FVRjJRaXhEUVVGa096dEJRVU5CTEZWQlFVazRSaXhMUVVGS0xFVkJRVmM3UVVGRFZEdEJRVU5CTEZsQlFVa3NRMEZCUXpkSExFdEJRVXdzUlVGQldYZEZMRWxCUVVrc1EwRkJRMGNzVjBGQlRDeEhRVUZ0UWl4RlFVRnVRanRCUVVOYWRrSXNVVUZCUVVFc1MwRkJTeXhEUVVGRGVVUXNTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGTUxFZEJRV3RDTEVOQlFVTldMRmxCUVVRc1JVRkJaV2hITEZsQlFXWXNRMEZCYkVJN1FVRkRSRHRCUVVOR0xFdEJhRU5FTEUxQlowTlBPMEZCUTB3N1FVRkJNa0k3UVVGRE0wSXNWVUZCU1hGRkxFbEJRVWtzUTBGQlF6UkNMRkZCUVV3c1MwRkJhMEpETEVsQlFVa3NRMEZCUTFNc1dVRkJNMElzUlVGQmVVTTdRVUZEZGtONFJTeFJRVUZCUVN4TFFVRkxMRU5CUVVORExFbEJRVTRzUTBGQlYybERMRWxCUVVrc1EwRkJRM1ZETEZWQlFXaENMRVZCUVRSQ2RrVXNUMEZCTlVJc1EwRkJiME1zVlVGQlEzZEZMRWxCUVVRc1JVRkJWVHRCUVVNMVF5eGpRVUZOUXl4TFFVRkxMRWRCUVVkRUxFbEJRVWtzUTBGQlEwTXNTMEZCVEN4RFFVRlhReXhKUVVGWUxFVkJRV1E3UVVGRFFUczdRVUZEUVN4alFVRk5ReXhKUVVGSkxFZEJRVWR1U0N4TFFVRkxMRWRCUVVkblNDeEpRVUZKTEVOQlFVTkhMRWxCUVV3c1EwRkJWWFJFTEU5QlFWWXNRMEZCYTBJelF5eFhRVUZzUWl4RlFVRXJRaXhGUVVFdlFpeERRVUZJTEVkQlFYZERPRVlzU1VGQlNTeERRVUZEUnl4SlFVRXZSRHRCUVVOQkxHTkJRVTFPTEV0QlFVc3NSMEZCUjBrc1MwRkJTeXhEUVVGRGNrUXNTMEZCVGl4RFFVRlpOME1zZDBKQlFWb3NRMEZCWkRzN1FVRkRRU3hqUVVGSk9FWXNTMEZCU2l4RlFVRlhPMEZCUTFRc1owSkJRVTFQTEZsQlFWa3NSMEZCUjNSRUxHVkJRV1VzUTBGQlF6aENMRkZCUVZFc1EwRkJRMmxDTEV0QlFVc3NRMEZCUXl4RFFVRkVMRU5CUVU0c1EwRkJWQ3hEUVVGd1F6dEJRVU5CZWtRc1dVRkJRVUVzUzBGQlN5eERRVUZEZVVRc1MwRkJTeXhEUVVGRExFTkJRVVFzUTBGQlRpeERRVUZNTEVkQlFXdENMRU5CUVVOV0xGbEJRVVFzUlVGQlpTOUdMR1ZCUVdVc1EwRkJReXRITEVsQlFVUXNSVUZCVDBNc1dVRkJVQ3hGUVVGeFFuWkNMRXRCUVhKQ0xFTkJRVGxDTEVOQlFXeENPMEZCUTBGeVFpeFpRVUZCUVN4SlFVRkpMRU5CUVVNMlF5eGxRVUZNTEVOQlFYRkNUQ3hKUVVGSkxFTkJRVU5ITEVsQlFURkNPMEZCUTBRc1YwRktSQ3hOUVVsUE8wRkJRMHdzWjBKQlFVMVlMRkZCUVU4c1IwRkJSMU1zUzBGQlN5eERRVUZEY2tRc1MwRkJUaXhEUVVGWk0wTXNjMEpCUVZvc1EwRkJhRUk3TzBGQlEwRXNaMEpCUVVsMVJpeFJRVUZLTEVWQlFXRTdRVUZEV0N4clFrRkJUV01zVjBGQlZ5eHRRa0ZCV1Vnc1NVRkJXaXhEUVVGcVFqczdRVUZGUVZnc1kwRkJRVUVzVVVGQlR5eERRVUZEYUVVc1QwRkJVaXhEUVVGblFpeFZRVUZEYVVVc1YwRkJSQ3hGUVVGamFFUXNTMEZCWkN4RlFVRjNRanRCUVVGQkxIbERRVU4yUW1kRUxGZEJRVmNzUTBGQlF6ZERMRXRCUVZvc1EwRkJhMEkzUXl4M1FrRkJiRUlzUTBGRWRVSTdRVUZCUVR0QlFVRkJMRzlDUVVNM1FrWXNSVUZFTmtJN08wRkJSWFJEZFVNc1owSkJRVUZCTEV0QlFVc3NRMEZCUTNaRExFVkJRVVFzUTBGQlRDeEhRVUZaTEVOQlFVTnpSaXhaUVVGRUxFVkJRV1VzVlVGQlEyOUNMRWxCUVVRc1JVRkJUME1zVFVGQlVDeEZRVUZsUXl4VFFVRm1MRVZCUVRaQ08wRkJRM1JFTEhOQ1FVRk5ReXhKUVVGSkxFZEJRVWQ2U0N4UFFVRlBMRU5CUVVNd1FpeEhRVUZTTEVOQlFWazJSaXhOUVVGYUxFVkJRVzlDTEVWQlFYQkNMRU5CUVdJN1FVRkRRVVVzYTBKQlFVRkJMRWxCUVVrc1EwRkJRMG9zVjBGQlJDeERRVUZLTEVkQlFXOUNMRU5CUVVOSkxFbEJRVWtzUTBGQlEwb3NWMEZCUkN4RFFVRktMRWxCUVhGQ1RDeExRVUYwUWl4RlFVRTJRbkJFTEU5QlFUZENMRU5CUVhGRE5FTXNWMEZCY2tNc1JVRkJhMFJuUWl4VFFVRlRMRWxCUVVrc1NVRkJZaXhIUVVGdlFpeEZRVUZ3UWl4SFFVRjVRa0VzVTBGQk0wVXNRMEZCY0VJN08wRkJSVUVzYzBKQlFVdHFRaXhSUVVGUExFTkJRVU0xUkN4TlFVRlNMRXRCUVcxQ0xFTkJRWEJDTEVsQlFUSkNZU3hMUVVGTExFZEJRVWNzUTBGQlVpeExRVUZqSzBNc1VVRkJUeXhEUVVGRE5VUXNUVUZCY2tRc1JVRkJPRVE3UVVGRE5VUTBSU3h2UWtGQlFVRXNUVUZCVFN4RFFVRkRSeXhaUVVGUUxFTkJRVzlDVWl4SlFVRndRaXhGUVVFd1FrOHNTVUZCU1N4RFFVRkRTaXhYUVVGRUxFTkJRVGxDTzBGQlEwRkpMRzlDUVVGQlFTeEpRVUZKTEVOQlFVTktMRmRCUVVRc1EwRkJTaXhIUVVGdlFuUkRMRk5CUVhCQ08wRkJRMFE3UVVGRFJpeHBRa0ZTVnl4RFFVRmFPMEZCVTBRc1pVRllSRHM3UVVGaFFXZERMR05CUVVGQkxFbEJRVWtzUTBGQlEwTXNTMEZCVEN4SFFVRmhMRVZCUVdJN1FVRkZRVHM3UVVGRFFTeHJRa0ZCU1dwSUxFdEJRVXNzU1VGQlNXMUlMRWxCUVVrc1MwRkJTMGdzU1VGQlNTeERRVUZEUnl4SlFVRXpRaXhGUVVGcFF6dEJRVU12UWpORExHZENRVUZCUVN4SlFVRkpMRU5CUVVNMlF5eGxRVUZNTEVOQlFYRkNUQ3hKUVVGSkxFTkJRVU5ITEVsQlFURkNPMEZCUTBFelF5eG5Ra0ZCUVVFc1NVRkJTU3hEUVVGRGJVUXNXVUZCVEN4RFFVRnJRbElzU1VGQmJFSXNSVUZCZDBJc1JVRkJlRUk3UVVGRFJEdEJRVU5HTzBGQlEwWTdRVUZEUml4VFFYQkRSRHRCUVhGRFJEdEJRVU5HT3p0QlFVVkVhRUlzU1VGQlFVRXNXVUZCV1N4SlFVRkpMRU5CUVdoQ08wRkJlRWR4UkRzN1FVRXdRblpFTEZOQlFVOUVMR0ZCUVdFc1EwRkJRM3BDTEZGQlFXUXNSVUZCVUN4RlFVRnBRenRCUVVGQk8wRkJLMFZvUXpzN1FVRkZSQ3hUUVVGUExGTkJRVk50UkN4elFrRkJWQ3hEUVVGblEwd3NTVUZCYUVNc1JVRkJjME5ETEUxQlFYUkRMRVZCUVRoRFN5eEpRVUU1UXl4RlFVRnZSRHRCUVVONlJDeFJRVUZOU0N4SlFVRkpMRWRCUVVkNlNDeFBRVUZQTEVOQlFVTXdRaXhIUVVGU0xFTkJRVmsyUml4TlFVRmFMRVZCUVc5Q08wRkJRVVZOTEUxQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVGU0xFdEJRWEJDTEVOQlFXSTdPMEZCUlVFc1VVRkJTWFpITEZGQlFWRXNTMEZCUzIxSExFbEJRVWtzUTBGQlEyNUhMRkZCUVhSQ0xFVkJRV2RETzBGQlF6bENMRlZCUVVsdFJ5eEpRVUZKTEVOQlFVTnVSeXhSUVVGTUxFbEJRV2xDYVVjc1RVRkJUU3hEUVVGRGNFSXNVVUZCVUN4TFFVRnZRa01zU1VGQlNTeERRVUZEVXl4WlFVRTVReXhGUVVFMFJEVkhMR05CUVdNc1EwRkJRM05JTEUxQlFVUXNRMEZCWkR0QlFVTTFSRVVzVFVGQlFVRXNTVUZCU1N4RFFVRkRTeXhSUVVGTUxFZEJRV2RDTEVsQlFXaENPMEZCUlVFc1ZVRkJUVFZFTEZGQlFWRXNSMEZCUjNCRExGRkJRVkVzUTBGQlEybEhMRlZCUVZRc1EwRkJiMEl4Unl4aFFVRmhMRU5CUVVORExGRkJRVVFzUlVGQlYyZEhMRWxCUVVrc1EwRkJReTlHTEU5QlFXaENMRU5CUVdJc1EwRkJjME5UTEU5QlFURkVMRVZCUVcxRkxFbEJRVzVGTEVOQlFXcENPMEZCUlVFc1ZVRkJUV2RITEZsQlFWa3NSMEZCUnpORExGbEJRVmtzUTBGQlEyNUNMRkZCUVVRc1EwRkJha003UVVGRFFTeFZRVUZOSzBRc1YwRkJWeXhIUVVGSE9VVXNTMEZCU3l4RFFVRkRUU3hMUVVGT0xFTkJRVmtzUTBGQldpeERRVUZ3UWp0QlFVVkJMRlZCUVVsNVJTeFhRVUZYTEVkQlFVY3NRMEZCYkVJN1FVRkRRU3hWUVVGSlF5eFhRVUZYTEVkQlFVZEdMRmRCUVZjc1EwRkJRMGNzUzBGQldpeEZRVUZzUWp0QlFVVkJMRlZCUVUxRExFOUJRVThzUjBGQlJ5eEZRVUZvUWp0QlFVVkJXaXhOUVVGQlFTeEpRVUZKTEVOQlFVTnVSeXhSUVVGTUxFZEJRV2RDUVN4UlFVRm9RanRCUVVOQmJVY3NUVUZCUVVFc1NVRkJTU3hEUVVGRFdTeFBRVUZNTEVkQlFXVkJMRTlCUVdZN08wRkJSVUVzWVVGQlQwd3NXVUZCV1N4RFFVRkRlRVFzVVVGQllpeEZRVUZRTEVWQlFXZERPMEZCUXpsQ0xGbEJRVTFFTEVsQlFVa3NSMEZCUjNsRUxGbEJRVmtzUTBGQlEyeEVMRmRCUVRGQ096dEJRVVZCTEZsQlFVbFFMRWxCUVVrc1EwRkJRelJDTEZGQlFVd3NTMEZCYTBKRExFbEJRVWtzUTBGQlEwTXNVMEZCTTBJc1JVRkJjME03UVVGRGNFTTdRVUZEUVN4alFVRkpka1lzZDBKQlFYZENMRU5CUVVNeVJDeEpRVUY2UWl4RFFVRTRRa1lzU1VGQlNTeERRVUZEUnl4WFFVRnVReXhEUVVGS0xFVkJRWEZFTzBGQlEyNUVTQ3haUVVGQlFTeEpRVUZKTEVOQlFVTkhMRmRCUVV3c1IwRkJiVUlzUlVGQmJrSTdRVUZEUkN4WFFVWkVMRTFCUlU4c1NVRkJTVE5GTEV0QlFVb3NSVUZCVnp0QlFVTm9RbmRGTEZsQlFVRkJMRWxCUVVrc1EwRkJRMGNzVjBGQlRDeEhRVUZ0UWtnc1NVRkJTU3hEUVVGRFJ5eFhRVUZNTEVOQlFXbENaQ3hQUVVGcVFpeERRVUY1UWpGRExGZEJRWHBDTEVWQlFYTkRMRVZCUVhSRExFTkJRVzVDTzBGQlEwUTdRVUZEUml4VFFWQkVMRTFCVDA4c1NVRkJTV1FzVDBGQlR5eERRVUZEUXl4SFFVRlNMRU5CUVZsRExGRkJRVm9zUzBGQmVVSXNXVUZCZWtJc1NVRkJlVU5wUlN4SlFVRkpMRU5CUVVNMFFpeFJRVUZNTEV0QlFXdENReXhKUVVGSkxFTkJRVU5UTEZsQlFYQkZMRVZCUVd0R08wRkJRM1pHTEdOQlFVbDBReXhKUVVGSkxFTkJRVU5vUkN4UFFVRk1MRU5CUVdFclJ5eFBRVUZpTEVOQlFYRkNMRWRCUVhKQ0xFbEJRVFJDTEVOQlFVTXNRMEZCTjBJc1NVRkJhME1zUTBGQlEwTXNZMEZCWXl4RFFVRkROMGNzUjBGQlppeERRVUZ0UWpaRExFbEJRVWtzUTBGQlEyaEVMRTlCUVV3c1EwRkJZVEJDTEZkQlFXSXNSVUZCYmtJc1EwRkJka01zUlVGQmRVWTdRVUZEY2tZc2EwSkJRVTExUml4TFFVRkxMRzlDUVVGaE0wa3NaMEpCUVdkQ0xFTkJRVU13UlN4SlFVRkVMRU5CUVRkQ0xITkRRVUVyUkRGRkxHZENRVUZuUWl4RFFVRkRlVWdzU1VGQlJDeERRVUV2UlN4UFFVRllPMEZCUTBRN1FVRkRSanM3UVVGRlJDeGxRVUZQWVN4WFFVRlhMRWxCUVVsQkxGZEJRVmNzUTBGQlF5eERRVUZFTEVOQlFWZ3NTMEZCYlVKRUxGZEJRWHBETEVWQlFYTkVPMEZCUTNCRVJ5eFZRVUZCUVN4UFFVRlBMRU5CUVVNeFFpeEpRVUZTTEVOQlFXRXNRMEZCUTNCRExFbEJRVVFzUlVGQlR6UkVMRmRCUVZjc1EwRkJReXhEUVVGRUxFTkJRV3hDTEVOQlFXSTdRVUZEUVVFc1ZVRkJRVUVzVjBGQlZ5eEhRVUZIUml4WFFVRlhMRU5CUVVOSExFdEJRVm9zUlVGQlpEdEJRVU5FT3p0QlFVVkVSaXhSUVVGQlFTeFhRVUZYTEVsQlFVa3NRMEZCWmp0QlFVTkVPenRCUVVWRUxGVkJRVWxZTEUxQlFVMHNRMEZCUTNCQ0xGRkJRVkFzUzBGQmIwSkRMRWxCUVVrc1EwRkJRME1zVTBGQk4wSXNSVUZCZDBNN1FVRkRkRU52UWl4UlFVRkJRU3hKUVVGSkxFTkJRVU5uUWl4VFFVRk1MRWRCUVdsQ2RrVXNVVUZCVVN4RFFVRkRlRUlzVlVGQlZDeERRVUZ2UWl4RFFVRndRaXhEUVVGcVFqdEJRVU5CSzBVc1VVRkJRVUVzU1VGQlNTeERRVUZEYVVJc1QwRkJUQ3hIUVVGbGVFVXNVVUZCVVN4RFFVRkRlRUlzVlVGQlZDeERRVUZ2UW5kQ0xGRkJRVkVzUTBGQlEzaENMRlZCUVZRc1EwRkJiMEpETEUxQlFYQkNMRWRCUVRaQ0xFTkJRV3BFTEVOQlFXWTdRVUZGUVN4WlFVRkpaMGNzWVVGQllTeEhRVUZIY0VJc1RVRkJjRUk3UVVGRlFTeFpRVUZKY1VJc1MwRkJTeXhIUVVGSE1VVXNVVUZCVVN4RFFVRkRlRUlzVlVGQlZDeERRVUZ2UWl4RFFVRndRaXhEUVVGYU96dEJRVU5CTEdWQlFVOXJSeXhMUVVGUUxFVkJRV003UVVGRFduSkNMRlZCUVVGQkxFMUJRVTBzUTBGQlF6RkZMRlZCUVZBc1EwRkJhMEpETEZsQlFXeENMRU5CUVN0Q09FWXNTMEZCTDBJc1JVRkJjME5FTEdGQlFXRXNRMEZCUXpORUxGZEJRWEJFTzBGQlEwRXlSQ3hWUVVGQlFTeGhRVUZoTEVkQlFVZERMRXRCUVdoQ08wRkJRMEZCTEZWQlFVRkJMRXRCUVVzc1IwRkJSekZGTEZGQlFWRXNRMEZCUTNoQ0xGVkJRVlFzUTBGQmIwSXNRMEZCY0VJc1EwRkJVanRCUVVORU8wRkJRMFlzVDBGYVJDeE5RVmxQTzBGQlEwdzJSU3hSUVVGQlFTeE5RVUZOTEVOQlFVTjBSaXhYUVVGUUxFTkJRVzFDYVVNc1VVRkJia0k3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRkZCUVUwMFJDeFJRVUZSTEVkQlFVZE1MRWxCUVVrc1EwRkJRMHNzVVVGQmRFSTdRVUZEUVV3c1NVRkJRVUVzU1VGQlNTeERRVUZEU3l4UlFVRk1MRWRCUVdkQ1JpeEpRVUZvUWpzN1FVRkZRU3hUUVVGTExFbEJRVWx3UlN4TFFVRkxMRWRCUVVjc1EwRkJha0lzUlVGQmIwSkJMRXRCUVVzc1IwRkJSMmxGTEVsQlFVa3NRMEZCUTFrc1QwRkJUQ3hEUVVGaE1VWXNUVUZCZWtNc1JVRkJhVVJoTEV0QlFVc3NTVUZCU1N4RFFVRXhSQ3hGUVVFMlJEdEJRVUZCTEN0RFFVTndRMmxGTEVsQlFVa3NRMEZCUTFrc1QwRkJUQ3hEUVVGaE4wVXNTMEZCWWl4RFFVUnZRenRCUVVGQkxGVkJRM0JFWlN4TFFVUnZSRHRCUVVGQkxGVkJRemxEYzBVc1RVRkVPRU03TzBGQlJUTkVMRlZCUVVrc1EwRkJRMllzVVVGQlJDeEpRVUZoUVN4UlFVRlJMRU5CUVVOMFJTeExRVUZFTEVOQlFWSXNTMEZCYjBKdlJTeEpRVUZKTEVOQlFVTndSU3hMUVVGRUxFTkJRWHBETEVWQlFXdEVPMEZCUTJoRWNVWXNVVUZCUVVFc1RVRkJUU3hEUVVGRGRrSXNTVUZCUkN4RlFVRlBMME1zUzBGQlVDeEZRVUZoY1VRc1NVRkJTU3hEUVVGRGNFVXNTMEZCUkN4RFFVRnFRaXhGUVVFd1FuTkZMRkZCUVZFc1IwRkJSMEVzVVVGQlVTeERRVUZEZEVVc1MwRkJSQ3hEUVVGWUxFZEJRWEZDZFVJc1UwRkJka1FzUTBGQlRqdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1VVRkJTWGRETEUxQlFVMHNRMEZCUTNCQ0xGRkJRVkFzUzBGQmIwSkRMRWxCUVVrc1EwRkJRME1zVTBGQk4wSXNSVUZCZDBNN1FVRkRkRU4yUnl4TlFVRkJRU3hSUVVGUkxFTkJRVU1zVlVGQlF6QkNMRXRCUVVRc1JVRkJWenRCUVVOc1FpeFpRVUZKT0VZc1NVRkJTU3hEUVVGRGQwSXNWVUZCVkN4RlFVRnhRanRCUVVOdVFpeGpRVUZKYUVJc1VVRkJTaXhGUVVGak8wRkJRMXAwUnl4WlFVRkJRU3hMUVVGTExFTkJRVU4xU0N4WlFVRk9MRU5CUVcxQ2VrSXNTVUZCYmtJN1FVRkRSQ3hYUVVaRUxFMUJSVTg3UVVGRFREbEdMRmxCUVVGQkxFdEJRVXNzUTBGQlEzZElMRmxCUVU0c1EwRkJiVUl4UWl4SlFVRnVRanRCUVVORU8wRkJRMFk3UVVGRFJpeFBRVkpQTEVOQlFWSTdRVUZUUkR0QlFVTkdMRWRCYkVaRU8wRkJiVVpFSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ2MzUnlhVzVuYVdaNVJXeGxiV1Z1ZEN3Z2MyaGhaSGxEVTFNc0lFbFRYMGxGSUgwZ1puSnZiU0FuTGk0dmRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ1pHRjBZVTFoY0N3Z2NtVnRiM1psVkdWdGNHeGhkR1VnZlNCbWNtOXRJQ2N1TDNWMGFXeHpKenRjYmx4dWFXMXdiM0owSUhKbGMyOXNkbVZXWVd4MVpTQm1jbTl0SUNjdUwzSmxjMjlzZG1WeWN5OTJZV3gxWlNjN1hHNXBiWEJ2Y25RZ2NtVnpiMngyWlZCeWIzQmxjblI1SUdaeWIyMGdKeTR2Y21WemIyeDJaWEp6TDNCeWIzQmxjblI1Snp0Y2JseHVMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiblJ5ZVNCN0lIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJSDBnWTJGMFkyZ29aU2tnZXlCMllYSWdjSEp2WTJWemN5QTlJSHNnWlc1Mk9pQjdJRTVQUkVWZlJVNVdPaUFuY0hKdlpIVmpkR2x2YmljZ2ZTQjlPeUI5SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVmNibHh1WTI5dWMzUWdWRWxOUlZOVVFVMVFJRDBnUkdGMFpTNXViM2NvS1R0Y2JseHVaWGh3YjNKMElHTnZibk4wSUdkbGRGQnNZV05sYUc5c1pHVnlJRDBnS0dsa0lEMGdNQ2tnUFQ0Z1lIdDdhQzBrZTFSSlRVVlRWRUZOVUgwdEpIdHBaSDE5ZldBN1hHNWNibU52Ym5OMElGQk1RVU5GU0U5TVJFVlNYMUpGUjBWWVVGOVVSVmhVSUQwZ1oyVjBVR3hoWTJWb2IyeGtaWElvSnloY1hGeGNaQ3NwSnlrN1hHNWpiMjV6ZENCUVRFRkRSVWhQVEVSRlVsOVNSVWRGV0ZCZlJWRlZRVXdnUFNCdVpYY2dVbVZuUlhod0tHQmVKSHRRVEVGRFJVaFBURVJGVWw5U1JVZEZXRkJmVkVWWVZIMGtZQ2s3WEc1amIyNXpkQ0JRVEVGRFJVaFBURVJGVWw5U1JVZEZXRkJmUVV4TUlEMGdibVYzSUZKbFowVjRjQ2hRVEVGRFJVaFBURVJGVWw5U1JVZEZXRkJmVkVWWVZDd2dKMmNuS1R0Y2JseHVZMjl1YzNRZ1FWUlVVbDlRVWtWR1NWZ2dQU0JnTFMwa2UxUkpUVVZUVkVGTlVIMHRMV0E3WEc1amIyNXpkQ0JCVkZSU1gxSkZSMFZZVUNBOUlHNWxkeUJTWldkRmVIQW9RVlJVVWw5UVVrVkdTVmdzSUNkbkp5azdYRzVjYm1OdmJuTjBJSEJ5WlhCaGNtVmtWR1Z0Y0d4aGRHVnpJRDBnYm1WM0lGZGxZV3ROWVhBb0tUdGNibHh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYm1aMWJtTjBhVzl1SUdGd2NHeDVVMmhoWkhsRFUxTW9kR1Z0Y0d4aGRHVXNJSFJoWjA1aGJXVXBJSHRjYmlBZ2FXWWdLQ0YwWVdkT1lXMWxLU0J5WlhSMWNtNGdkR1Z0Y0d4aGRHVTdYRzVjYmlBZ2NtVjBkWEp1SUhOb1lXUjVRMU5US0NoemFHRmtlU2tnUFQ0Z2UxeHVJQ0FnSUd4bGRDQnRZWEFnUFNCd2NtVndZWEpsWkZSbGJYQnNZWFJsY3k1blpYUW9kR1Z0Y0d4aGRHVXBPMXh1SUNBZ0lHbG1JQ2doYldGd0tTQjdYRzRnSUNBZ0lDQnRZWEFnUFNCdVpYY2dUV0Z3S0NrN1hHNGdJQ0FnSUNCd2NtVndZWEpsWkZSbGJYQnNZWFJsY3k1elpYUW9kR1Z0Y0d4aGRHVXNJRzFoY0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElHTnNiMjVsSUQwZ2JXRndMbWRsZENoMFlXZE9ZVzFsS1R0Y2JseHVJQ0FnSUdsbUlDZ2hZMnh2Ym1VcElIdGNiaUFnSUNBZ0lHTnNiMjVsSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duZEdWdGNHeGhkR1VuS1R0Y2JpQWdJQ0FnSUdOc2IyNWxMbU52Ym5SbGJuUXVZWEJ3Wlc1a1EyaHBiR1FvZEdWdGNHeGhkR1V1WTI5dWRHVnVkQzVqYkc5dVpVNXZaR1VvZEhKMVpTa3BPMXh1WEc0Z0lDQWdJQ0J0WVhBdWMyVjBLSFJoWjA1aGJXVXNJR05zYjI1bEtUdGNibHh1SUNBZ0lDQWdZMjl1YzNRZ2MzUjViR1Z6SUQwZ1kyeHZibVV1WTI5dWRHVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2R6ZEhsc1pTY3BPMXh1WEc0Z0lDQWdJQ0JCY25KaGVTNW1jbTl0S0hOMGVXeGxjeWt1Wm05eVJXRmphQ2dvYzNSNWJHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5MWJuUWdQU0J6ZEhsc1pTNWphR2xzWkU1dlpHVnpMbXhsYm1kMGFDQXJJREU3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z1kyOTFiblE3SUdrZ0t6MGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lITjBlV3hsTG5CaGNtVnVkRTV2WkdVdWFXNXpaWEowUW1WbWIzSmxLR1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtHZGxkRkJzWVdObGFHOXNaR1Z5S0NrcExDQnpkSGxzWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0J6YUdGa2VTNXdjbVZ3WVhKbFZHVnRjR3hoZEdVb1kyeHZibVVzSUhSaFowNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJqYkc5dVpUdGNiaUFnZlN3Z2RHVnRjR3hoZEdVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZUYVdkdVlYUjFjbVVvY0dGeWRITXNJSE4wZVd4bGN5a2dlMXh1SUNCc1pYUWdjMmxuYm1GMGRYSmxJRDBnY0dGeWRITXVjbVZrZFdObEtDaGhZMk1zSUhCaGNuUXNJR2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0dsdVpHVjRJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NHRnlkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvY0dGeWRITXVjMnhwWTJVb2FXNWtaWGdwTG1wdmFXNG9KeWNwTG0xaGRHTm9LQzllWEZ4ektqeGNYQzljWEhNcUtIUmhZbXhsZkhSeWZIUm9aV0ZrZkhSaWIyUjVmSFJtYjI5MGZHTnZiR2R5YjNWd0tUNHZLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0FrZTJGalkzMDhJUzB0Skh0blpYUlFiR0ZqWldodmJHUmxjaWhwYm1SbGVDQXRJREVwZlMwdFBpUjdjR0Z5ZEgxZ08xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZV05qSUNzZ1oyVjBVR3hoWTJWb2IyeGtaWElvYVc1a1pYZ2dMU0F4S1NBcklIQmhjblE3WEc0Z0lIMHNJQ2NuS1R0Y2JseHVJQ0JwWmlBb2MzUjViR1Z6S1NCN1hHNGdJQ0FnYzJsbmJtRjBkWEpsSUNzOUlHQThjM1I1YkdVK1hGeHVKSHR6ZEhsc1pYTXVhbTlwYmlnblhGeHVMeW90TFMwdExTMHFMMXhjYmljcGZWeGNiand2YzNSNWJHVStZRHRjYmlBZ2ZWeHVYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNCcFppQW9TVk5mU1VVcElIdGNiaUFnSUNCeVpYUjFjbTRnYzJsbmJtRjBkWEpsTG5KbGNHeGhZMlVvWEc0Z0lDQWdJQ0F2YzNSNWJHVmNYSE1xUFZ4Y2N5b29XMXdpWFZ0ZVhDSmRLMXRjSWwxOFd5ZGRXMTRuWFN0YkoxMThXMTVjWEhOY0lpYzhQaTlkS3lrdlp5eGNiaUFnSUNBZ0lDaHRZWFJqYUNrZ1BUNGdZQ1I3UVZSVVVsOVFVa1ZHU1ZoOUpIdHRZWFJqYUgxZ0xGeHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2MybG5ibUYwZFhKbE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUlFjbTl3WlhKMGVVNWhiV1VvYzNSeWFXNW5LU0I3WEc0Z0lISmxkSFZ5YmlCemRISnBibWN1Y21Wd2JHRmpaU2d2WEZ4ektqMWNYSE1xV3lkY0lsMHFKQzluTENBbkp5a3VjM0JzYVhRb0p5QW5LUzV3YjNBb0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVndiR0ZqWlVOdmJXMWxiblJ6S0daeVlXZHRaVzUwS1NCN1hHNGdJR052Ym5OMElHbDBaWEpoZEc5eUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFRtOWtaVWwwWlhKaGRHOXlLR1p5WVdkdFpXNTBMQ0JPYjJSbFJtbHNkR1Z5TGxOSVQxZGZRMDlOVFVWT1ZDd2diblZzYkN3Z1ptRnNjMlVwTzF4dUlDQnNaWFFnYm05a1pUdGNiaUFnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXTnZibVF0WVhOemFXZHVYRzRnSUhkb2FXeGxJQ2h1YjJSbElEMGdhWFJsY21GMGIzSXVibVY0ZEU1dlpHVW9LU2tnZTF4dUlDQWdJR2xtSUNoUVRFRkRSVWhQVEVSRlVsOVNSVWRGV0ZCZlJWRlZRVXd1ZEdWemRDaHViMlJsTG5SbGVIUkRiMjUwWlc1MEtTa2dlMXh1SUNBZ0lDQWdibTlrWlM1d1lYSmxiblJPYjJSbExtbHVjMlZ5ZEVKbFptOXlaU2hrYjJOMWJXVnVkQzVqY21WaGRHVlVaWGgwVG05a1pTaHViMlJsTG5SbGVIUkRiMjUwWlc1MEtTd2dibTlrWlNrN1hHNGdJQ0FnSUNCdWIyUmxMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2JtOWtaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqY21WaGRHVkpiblJsY201aGJGZGhiR3RsY2loamIyNTBaWGgwS1NCN1hHNGdJR3hsZENCdWIyUmxPMXh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnWjJWMElHTjFjbkpsYm5ST2IyUmxLQ2tnZXlCeVpYUjFjbTRnYm05a1pUc2dmU3hjYmlBZ0lDQnVaWGgwVG05a1pTZ3BJSHRjYmlBZ0lDQWdJR2xtSUNodWIyUmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdibTlrWlNBOUlHTnZiblJsZUhRdVkyaHBiR1JPYjJSbGMxc3dYVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYm05a1pTNWphR2xzWkU1dlpHVnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0J1YjJSbElEMGdibTlrWlM1amFHbHNaRTV2WkdWeld6QmRPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbExtNWxlSFJUYVdKc2FXNW5LU0I3WEc0Z0lDQWdJQ0FnSUc1dlpHVWdQU0J1YjJSbExtNWxlSFJUYVdKc2FXNW5PMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhCaGNtVnVkRTV2WkdVZ1BTQnViMlJsTG5CaGNtVnVkRTV2WkdVN1hHNGdJQ0FnSUNBZ0lHNXZaR1VnUFNCd1lYSmxiblJPYjJSbExtNWxlSFJUYVdKc2FXNW5PMXh1WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2doYm05a1pTQW1KaUJ3WVhKbGJuUk9iMlJsSUNFOVBTQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY0dGeVpXNTBUbTlrWlNBOUlIQmhjbVZ1ZEU1dlpHVXVjR0Z5Wlc1MFRtOWtaVHRjYmlBZ0lDQWdJQ0FnSUNCdWIyUmxJRDBnY0dGeVpXNTBUbTlrWlM1dVpYaDBVMmxpYkdsdVp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdJU0Z1YjJSbE8xeHVJQ0FnSUgwc1hHNGdJSDA3WEc1OVhHNWNibVoxYm1OMGFXOXVJR055WldGMFpVVjRkR1Z5Ym1Gc1YyRnNhMlZ5S0dOdmJuUmxlSFFwSUh0Y2JpQWdjbVYwZFhKdUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlZSeVpXVlhZV3hyWlhJb1hHNGdJQ0FnWTI5dWRHVjRkQ3hjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0WW1sMGQybHpaVnh1SUNBZ0lFNXZaR1ZHYVd4MFpYSXVVMGhQVjE5RlRFVk5SVTVVSUh3Z1RtOWtaVVpwYkhSbGNpNVRTRTlYWDFSRldGUXNYRzRnSUNBZ2JuVnNiQ3hjYmlBZ0lDQm1ZV3h6WlN4Y2JpQWdLVHRjYm4xY2JseHVMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNibU52Ym5OMElHTnlaV0YwWlZkaGJHdGxjaUE5SUhSNWNHVnZaaUIzYVc1a2IzY3VVMmhoWkhsRVQwMGdQVDA5SUNkdlltcGxZM1FuSUNZbUlIZHBibVJ2ZHk1VGFHRmtlVVJQVFM1cGJsVnpaU0EvSUdOeVpXRjBaVWx1ZEdWeWJtRnNWMkZzYTJWeUlEb2dZM0psWVhSbFJYaDBaWEp1WVd4WFlXeHJaWEk3WEc1Y2JtTnZibk4wSUdOdmJuUmhhVzVsY2lBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJScGRpY3BPMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR052YlhCcGJHVlVaVzF3YkdGMFpTaHlZWGRRWVhKMGN5d2dhWE5UVmtjc0lITjBlV3hsY3lrZ2UxeHVJQ0JqYjI1emRDQjBaVzF3YkdGMFpTQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUmxiWEJzWVhSbEp5azdYRzRnSUdOdmJuTjBJSEJoY25SeklEMGdXMTA3WEc1Y2JpQWdiR1YwSUhOcFoyNWhkSFZ5WlNBOUlHTnlaV0YwWlZOcFoyNWhkSFZ5WlNoeVlYZFFZWEowY3l3Z2MzUjViR1Z6S1R0Y2JpQWdhV1lnS0dselUxWkhLU0J6YVdkdVlYUjFjbVVnUFNCZ1BITjJaejRrZTNOcFoyNWhkSFZ5WlgwOEwzTjJaejVnTzF4dVhHNGdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JwWmlBcUwxeHVJQ0JwWmlBb1NWTmZTVVVwSUh0Y2JpQWdJQ0IwWlcxd2JHRjBaUzVwYm01bGNraFVUVXdnUFNCemFXZHVZWFIxY21VN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1kyOXVkR0ZwYm1WeUxtbHVibVZ5U0ZSTlRDQTlJR0E4ZEdWdGNHeGhkR1UrSkh0emFXZHVZWFIxY21WOVBDOTBaVzF3YkdGMFpUNWdPMXh1SUNBZ0lIUmxiWEJzWVhSbExtTnZiblJsYm5RdVlYQndaVzVrUTJocGJHUW9ZMjl1ZEdGcGJtVnlMbU5vYVd4a2NtVnVXekJkTG1OdmJuUmxiblFwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6VTFaSEtTQjdYRzRnSUNBZ1kyOXVjM1FnYzNablVtOXZkQ0E5SUhSbGJYQnNZWFJsTG1OdmJuUmxiblF1Wm1seWMzUkRhR2xzWkR0Y2JpQWdJQ0IwWlcxd2JHRjBaUzVqYjI1MFpXNTBMbkpsYlc5MlpVTm9hV3hrS0hOMloxSnZiM1FwTzF4dUlDQWdJRUZ5Y21GNUxtWnliMjBvYzNablVtOXZkQzVqYUdsc1pFNXZaR1Z6S1M1bWIzSkZZV05vS0NodWIyUmxLU0E5UGlCMFpXMXdiR0YwWlM1amIyNTBaVzUwTG1Gd2NHVnVaRU5vYVd4a0tHNXZaR1VwS1R0Y2JpQWdmVnh1WEc0Z0lISmxjR3hoWTJWRGIyMXRaVzUwY3loMFpXMXdiR0YwWlM1amIyNTBaVzUwS1R0Y2JseHVJQ0JqYjI1emRDQmpiMjF3YVd4bFYyRnNhMlZ5SUQwZ1kzSmxZWFJsVjJGc2EyVnlLSFJsYlhCc1lYUmxMbU52Ym5SbGJuUXBPMXh1SUNCc1pYUWdZMjl0Y0dsc1pVbHVaR1Y0SUQwZ01EdGNibHh1SUNCM2FHbHNaU0FvWTI5dGNHbHNaVmRoYkd0bGNpNXVaWGgwVG05a1pTZ3BLU0I3WEc0Z0lDQWdZMjl1YzNRZ2JtOWtaU0E5SUdOdmJYQnBiR1ZYWVd4clpYSXVZM1Z5Y21WdWRFNXZaR1U3WEc1Y2JpQWdJQ0JwWmlBb2JtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ1RtOWtaUzVVUlZoVVgwNVBSRVVwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSFJsZUhRZ1BTQnViMlJsTG5SbGVIUkRiMjUwWlc1ME8xeHVYRzRnSUNBZ0lDQnBaaUFvSVhSbGVIUXViV0YwWTJnb1VFeEJRMFZJVDB4RVJWSmZVa1ZIUlZoUVgwVlJWVUZNS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTjFiSFJ6SUQwZ2RHVjRkQzV0WVhSamFDaFFURUZEUlVoUFRFUkZVbDlTUlVkRldGQmZRVXhNS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RITXBJSHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdZM1Z5Y21WdWRFNXZaR1VnUFNCdWIyUmxPMXh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkSE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDNXlaV1IxWTJVb0tHRmpZeXdnY0d4aFkyVm9iMnhrWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1cySmxabTl5WlN3Z2JtVjRkRjBnUFNCaFkyTXVjRzl3S0NrdWMzQnNhWFFvY0d4aFkyVm9iMnhrWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZbVZtYjNKbEtTQmhZMk11Y0hWemFDaGlaV1p2Y21VcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkyTXVjSFZ6YUNod2JHRmpaV2h2YkdSbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1WlhoMEtTQmhZMk11Y0hWemFDaHVaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqWXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUZ0MFpYaDBYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNW1iM0pGWVdOb0tDaHdZWEowTENCcGJtUmxlQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hVzVrWlhnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVG05a1pTNTBaWGgwUTI5dWRHVnVkQ0E5SUhCaGNuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEU1dlpHVWdQU0JqZFhKeVpXNTBUbTlrWlM1d1lYSmxiblJPYjJSbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVhVzV6WlhKMFFtVm1iM0psS0dSdlkzVnRaVzUwTG1OeVpXRjBaVlJsZUhST2IyUmxLSEJoY25RcExDQmpkWEp5Wlc1MFRtOWtaUzV1WlhoMFUybGliR2x1WnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk4wSUdWeGRXRnNJRDBnYm05a1pTNTBaWGgwUTI5dWRHVnVkQzV0WVhSamFDaFFURUZEUlVoUFRFUkZVbDlTUlVkRldGQmZSVkZWUVV3cE8xeHVJQ0FnSUNBZ2FXWWdLR1Z4ZFdGc0tTQjdYRzRnSUNBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0JsYkhObElDb3ZYRzRnSUNBZ0lDQWdJR2xtSUNnaFNWTmZTVVVwSUc1dlpHVXVkR1Y0ZEVOdmJuUmxiblFnUFNBbkp6dGNiaUFnSUNBZ0lDQWdjR0Z5ZEhOYlpYRjFZV3hiTVYxZElEMGdXMk52YlhCcGJHVkpibVJsZUN3Z2NtVnpiMngyWlZaaGJIVmxYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k4Z0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMV3h2Ym1Wc2VTMXBabHh1SUNBZ0lDQWdhV1lnS0c1dlpHVXVibTlrWlZSNWNHVWdQVDA5SUU1dlpHVXVSVXhGVFVWT1ZGOU9UMFJGS1NCN1hHNGdJQ0FnSUNBZ0lFRnljbUY1TG1aeWIyMG9ibTlrWlM1aGRIUnlhV0oxZEdWektTNW1iM0pGWVdOb0tDaGhkSFJ5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdVZ1BTQmhkSFJ5TG5aaGJIVmxMblJ5YVcwb0tUdGNiaUFnSUNBZ0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzVoYldVZ1BTQkpVMTlKUlNBL0lHRjBkSEl1Ym1GdFpTNXlaWEJzWVdObEtFRlVWRkpmVUZKRlJrbFlMQ0FuSnlrZ09pQmhkSFJ5TG01aGJXVTdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaWEYxWVd3Z1BTQjJZV3gxWlM1dFlYUmphQ2hRVEVGRFJVaFBURVJGVWw5U1JVZEZXRkJmUlZGVlFVd3BPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGxjWFZoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjSEp2Y0dWeWRIbE9ZVzFsSUQwZ1oyVjBVSEp2Y0dWeWRIbE9ZVzFsS0hKaGQxQmhjblJ6VzJWeGRXRnNXekZkWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhKMGMxdGxjWFZoYkZzeFhWMGdQU0JiWTI5dGNHbHNaVWx1WkdWNExDQnlaWE52YkhabFVISnZjR1Z5ZEhrb2JtRnRaU3dnY0hKdmNHVnlkSGxPWVcxbExDQnBjMU5XUnlsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb1lYUjBjaTV1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBjeUE5SUhaaGJIVmxMbTFoZEdOb0tGQk1RVU5GU0U5TVJFVlNYMUpGUjBWWVVGOUJURXdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjR0Z5ZEdsaGJFNWhiV1VnUFNCZ1lYUjBjbDlmSkh0dVlXMWxmV0E3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBjeTVtYjNKRllXTm9LQ2h3YkdGalpXaHZiR1JsY2l3Z2FXNWtaWGdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCYkxDQnBaRjBnUFNCd2JHRmpaV2h2YkdSbGNpNXRZWFJqYUNoUVRFRkRSVWhQVEVSRlVsOVNSVWRGV0ZCZlJWRlZRVXdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGNuUnpXMmxrWFNBOUlGdGpiMjF3YVd4bFNXNWtaWGdzSUNob2IzTjBMQ0IwWVhKblpYUXNJR0YwZEhKV1lXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUdSaGRHRk5ZWEF1WjJWMEtIUmhjbWRsZEN3Z2UzMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWdHdZWEowYVdGc1RtRnRaVjBnUFNBb1pHRjBZVnR3WVhKMGFXRnNUbUZ0WlYwZ2ZId2dkbUZzZFdVcExuSmxjR3hoWTJVb2NHeGhZMlZvYjJ4a1pYSXNJR0YwZEhKV1lXeDFaU0E5UFNCdWRXeHNJRDhnSnljZ09pQmhkSFJ5Vm1Gc2RXVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9LSEpsYzNWc2RITXViR1Z1WjNSb0lEMDlQU0F4S1NCOGZDQW9hVzVrWlhnZ0t5QXhJRDA5UFNCeVpYTjFiSFJ6TG14bGJtZDBhQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMExuTmxkRUYwZEhKcFluVjBaU2h1WVcxbExDQmtZWFJoVzNCaGNuUnBZV3hPWVcxbFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmJjR0Z5ZEdsaGJFNWhiV1ZkSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUnlMblpoYkhWbElEMGdKeWM3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VsVFgwbEZJQ1ltSUc1aGJXVWdJVDA5SUdGMGRISXVibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1Y21WdGIzWmxRWFIwY21saWRYUmxLR0YwZEhJdWJtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNXpaWFJCZEhSeWFXSjFkR1VvYm1GdFpTd2dKeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCamIyMXdhV3hsU1c1a1pYZ2dLejBnTVR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCMWNHUmhkR1ZVWlcxd2JHRjBaVWx1YzNSaGJtTmxLR2h2YzNRc0lIUmhjbWRsZEN3Z1lYSm5jeWtnZTF4dUlDQWdJR052Ym5OMElHUmhkR0VnUFNCa1lYUmhUV0Z3TG1kbGRDaDBZWEpuWlhRc0lIc2dkSGx3WlRvZ0oyWjFibU4wYVc5dUp5QjlLVHRjYmx4dUlDQWdJR2xtSUNoMFpXMXdiR0YwWlNBaFBUMGdaR0YwWVM1MFpXMXdiR0YwWlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1JoZEdFdWRHVnRjR3hoZEdVZ2ZId2dkR0Z5WjJWMExtNXZaR1ZVZVhCbElEMDlQU0JPYjJSbExrVk1SVTFGVGxSZlRrOUVSU2tnY21WdGIzWmxWR1Z0Y0d4aGRHVW9kR0Z5WjJWMEtUdGNiaUFnSUNBZ0lHUmhkR0V1Y0hKbGRrRnlaM01nUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0JqYjI1emRDQm1jbUZuYldWdWRDQTlJR1J2WTNWdFpXNTBMbWx0Y0c5eWRFNXZaR1VvWVhCd2JIbFRhR0ZrZVVOVFV5aDBaVzF3YkdGMFpTd2dhRzl6ZEM1MFlXZE9ZVzFsS1M1amIyNTBaVzUwTENCMGNuVmxLVHRjYmx4dUlDQWdJQ0FnWTI5dWMzUWdjbVZ1WkdWeVYyRnNhMlZ5SUQwZ1kzSmxZWFJsVjJGc2EyVnlLR1p5WVdkdFpXNTBLVHRjYmlBZ0lDQWdJR052Ym5OMElHTnNiMjVsWkZCaGNuUnpJRDBnY0dGeWRITXVjMnhwWTJVb01DazdYRzVjYmlBZ0lDQWdJR3hsZENCeVpXNWtaWEpKYm1SbGVDQTlJREE3WEc0Z0lDQWdJQ0JzWlhRZ1kzVnljbVZ1ZEZCaGNuUWdQU0JqYkc5dVpXUlFZWEowY3k1emFHbG1kQ2dwTzF4dVhHNGdJQ0FnSUNCamIyNXpkQ0J0WVhKclpYSnpJRDBnVzEwN1hHNWNiaUFnSUNBZ0lHUmhkR0V1ZEdWdGNHeGhkR1VnUFNCMFpXMXdiR0YwWlR0Y2JpQWdJQ0FnSUdSaGRHRXViV0Z5YTJWeWN5QTlJRzFoY210bGNuTTdYRzVjYmlBZ0lDQWdJSGRvYVd4bElDaHlaVzVrWlhKWFlXeHJaWEl1Ym1WNGRFNXZaR1VvS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIyUmxJRDBnY21WdVpHVnlWMkZzYTJWeUxtTjFjbkpsYm5ST2IyUmxPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHViMlJsTG01dlpHVlVlWEJsSUQwOVBTQk9iMlJsTGxSRldGUmZUazlFUlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tGQk1RVU5GU0U5TVJFVlNYMUpGUjBWWVVGOUZVVlZCVEM1MFpYTjBLRzV2WkdVdWRHVjRkRU52Ym5SbGJuUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5SbGVIUkRiMjUwWlc1MElEMGdKeWM3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaEpVMTlKUlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNTBaWGgwUTI5dWRHVnVkQ0E5SUc1dlpHVXVkR1Y0ZEVOdmJuUmxiblF1Y21Wd2JHRmpaU2hCVkZSU1gxSkZSMFZZVUN3Z0p5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5JQ1ltSUc1dlpHVXVibTlrWlZSNWNHVWdQVDA5SUU1dlpHVXVSVXhGVFVWT1ZGOU9UMFJGS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0c1dlpHVXVkR0ZuVG1GdFpTNXBibVJsZUU5bUtDY3RKeWtnUGlBdE1TQW1KaUFoWTNWemRHOXRSV3hsYldWdWRITXVaMlYwS0c1dlpHVXVkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb1lFMXBjM05wYm1jZ0p5UjdjM1J5YVc1bmFXWjVSV3hsYldWdWRDaHViMlJsS1gwbklHVnNaVzFsYm5RZ1pHVm1hVzVwZEdsdmJpQnBiaUFuSkh0emRISnBibWRwWm5sRmJHVnRaVzUwS0dodmMzUXBmU2RnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvWTNWeWNtVnVkRkJoY25RZ0ppWWdZM1Z5Y21WdWRGQmhjblJiTUYwZ1BUMDlJSEpsYm1SbGNrbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdiV0Z5YTJWeWN5NXdkWE5vS0Z0dWIyUmxMQ0JqZFhKeVpXNTBVR0Z5ZEZzeFhWMHBPMXh1SUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJRWVhKMElEMGdZMnh2Ym1Wa1VHRnlkSE11YzJocFpuUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxibVJsY2tsdVpHVjRJQ3M5SURFN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwWVhKblpYUXVibTlrWlZSNWNHVWdQVDA5SUU1dlpHVXVWRVZZVkY5T1QwUkZLU0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRXVjM1JoY25ST2IyUmxJRDBnWm5KaFoyMWxiblF1WTJocGJHUk9iMlJsYzFzd1hUdGNiaUFnSUNBZ0lDQWdaR0YwWVM1bGJtUk9iMlJsSUQwZ1puSmhaMjFsYm5RdVkyaHBiR1JPYjJSbGMxdG1jbUZuYldWdWRDNWphR2xzWkU1dlpHVnpMbXhsYm1kMGFDQXRJREZkTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J3Y21WMmFXOTFjME5vYVd4a0lEMGdkR0Z5WjJWME8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCamFHbHNaQ0E5SUdaeVlXZHRaVzUwTG1Ob2FXeGtUbTlrWlhOYk1GMDdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaGphR2xzWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJoY21kbGRDNXdZWEpsYm5ST2IyUmxMbWx1YzJWeWRFSmxabTl5WlNoamFHbHNaQ3dnY0hKbGRtbHZkWE5EYUdsc1pDNXVaWGgwVTJsaWJHbHVaeWs3WEc0Z0lDQWdJQ0FnSUNBZ2NISmxkbWx2ZFhORGFHbHNaQ0E5SUdOb2FXeGtPMXh1SUNBZ0lDQWdJQ0FnSUdOb2FXeGtJRDBnWm5KaFoyMWxiblF1WTJocGJHUk9iMlJsYzFzd1hUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR0Z5WjJWMExtRndjR1Z1WkVOb2FXeGtLR1p5WVdkdFpXNTBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCd2NtVjJRWEpuY3lBOUlHUmhkR0V1Y0hKbGRrRnlaM003WEc0Z0lDQWdaR0YwWVM1d2NtVjJRWEpuY3lBOUlHRnlaM003WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQTlJREE3SUdsdVpHVjRJRHdnWkdGMFlTNXRZWEpyWlhKekxteGxibWQwYURzZ2FXNWtaWGdnS3owZ01Ta2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1cyNXZaR1VzSUcxaGNtdGxjbDBnUFNCa1lYUmhMbTFoY210bGNuTmJhVzVrWlhoZE8xeHVJQ0FnSUNBZ2FXWWdLQ0Z3Y21WMlFYSm5jeUI4ZkNCd2NtVjJRWEpuYzF0cGJtUmxlRjBnSVQwOUlHRnlaM05iYVc1a1pYaGRLU0I3WEc0Z0lDQWdJQ0FnSUcxaGNtdGxjaWhvYjNOMExDQnViMlJsTENCaGNtZHpXMmx1WkdWNFhTd2djSEpsZGtGeVozTWdQeUJ3Y21WMlFYSm5jMXRwYm1SbGVGMGdPaUIxYm1SbFptbHVaV1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMFlYSm5aWFF1Ym05a1pWUjVjR1VnSVQwOUlFNXZaR1V1VkVWWVZGOU9UMFJGS1NCN1hHNGdJQ0FnSUNCemFHRmtlVU5UVXlnb2MyaGhaSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0dodmMzUXVjMmhoWkc5M1VtOXZkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h3Y21WMlFYSm5jeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMmhoWkhrdWMzUjViR1ZUZFdKMGNtVmxLR2h2YzNRcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHRmtlUzV6ZEhsc1pVVnNaVzFsYm5Rb2FHOXpkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNTlYRzRpWFgwPSIsInZhciBzZXRDYWNoZSA9IG5ldyBNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBzZXQocHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICBpZiAoIXByb3BlcnR5TmFtZSkgdGhyb3cgRXJyb3IoXCJUYXJnZXQgcHJvcGVydHkgbmFtZSBtaXNzaW5nOiBcIi5jb25jYXQocHJvcGVydHlOYW1lKSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgIGhvc3RbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICB2YXIgZm4gPSBzZXRDYWNoZS5nZXQocHJvcGVydHlOYW1lKTtcblxuICBpZiAoIWZuKSB7XG4gICAgZm4gPSBmdW5jdGlvbiBmbihob3N0LCBfcmVmKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3JlZi50YXJnZXQ7XG4gICAgICBob3N0W3Byb3BlcnR5TmFtZV0gPSB0YXJnZXQudmFsdWU7XG4gICAgfTtcblxuICAgIHNldENhY2hlLnNldChwcm9wZXJ0eU5hbWUsIGZuKTtcbiAgfVxuXG4gIHJldHVybiBmbjtcbn1cbnZhciBwcm9taXNlTWFwID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKHByb21pc2UsIHBsYWNlaG9sZGVyKSB7XG4gIHZhciBkZWxheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMjAwO1xuICByZXR1cm4gZnVuY3Rpb24gKGhvc3QsIHRhcmdldCkge1xuICAgIHZhciB0aW1lb3V0O1xuXG4gICAgaWYgKHBsYWNlaG9sZGVyKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcGxhY2Vob2xkZXIoaG9zdCwgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfVxuXG4gICAgcHJvbWlzZU1hcC5zZXQodGFyZ2V0LCBwcm9taXNlKTtcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodGltZW91dCkgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXG4gICAgICBpZiAocHJvbWlzZU1hcC5nZXQodGFyZ2V0KSA9PT0gcHJvbWlzZSkge1xuICAgICAgICB0ZW1wbGF0ZShob3N0LCB0YXJnZXQpO1xuICAgICAgICBwcm9taXNlTWFwLnNldCh0YXJnZXQsIG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5MFpXMXdiR0YwWlM5b1pXeHdaWEp6TG1weklsMHNJbTVoYldWeklqcGJJbk5sZEVOaFkyaGxJaXdpVFdGd0lpd2ljMlYwSWl3aWNISnZjR1Z5ZEhsT1lXMWxJaXdpZG1Gc2RXVWlMQ0pGY25KdmNpSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW1odmMzUWlMQ0ptYmlJc0ltZGxkQ0lzSW5SaGNtZGxkQ0lzSW5CeWIyMXBjMlZOWVhBaUxDSlhaV0ZyVFdGd0lpd2ljbVZ6YjJ4MlpTSXNJbkJ5YjIxcGMyVWlMQ0p3YkdGalpXaHZiR1JsY2lJc0ltUmxiR0Y1SWl3aWRHbHRaVzkxZENJc0luTmxkRlJwYldWdmRYUWlMQ0oxYm1SbFptbHVaV1FpTENKeVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVWlMQ0owYUdWdUlpd2lkR1Z0Y0d4aGRHVWlMQ0pqYkdWaGNsUnBiV1Z2ZFhRaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVTFCTEZGQlFWRXNSMEZCUnl4SlFVRkpReXhIUVVGS0xFVkJRV3BDTzBGQlEwRXNUMEZCVHl4VFFVRlRReXhIUVVGVUxFTkJRV0ZETEZsQlFXSXNSVUZCTWtKRExFdEJRVE5DTEVWQlFXdERPMEZCUTNaRExFMUJRVWtzUTBGQlEwUXNXVUZCVEN4RlFVRnRRaXhOUVVGTlJTeExRVUZMTEhsRFFVRnJRMFlzV1VGQmJFTXNSVUZCV0RzN1FVRkZia0lzVFVGQlNVY3NVMEZCVXl4RFFVRkRReXhOUVVGV0xFdEJRWEZDTEVOQlFYcENMRVZCUVRSQ08wRkJRekZDTEZkQlFVOHNWVUZCUTBNc1NVRkJSQ3hGUVVGVk8wRkJRVVZCTEUxQlFVRkJMRWxCUVVrc1EwRkJRMHdzV1VGQlJDeERRVUZLTEVkQlFYRkNReXhMUVVGeVFqdEJRVUUyUWl4TFFVRm9SRHRCUVVORU96dEJRVVZFTEUxQlFVbExMRVZCUVVVc1IwRkJSMVFzVVVGQlVTeERRVUZEVlN4SFFVRlVMRU5CUVdGUUxGbEJRV0lzUTBGQlZEczdRVUZGUVN4TlFVRkpMRU5CUVVOTkxFVkJRVXdzUlVGQlV6dEJRVU5RUVN4SlFVRkJRU3hGUVVGRkxFZEJRVWNzV1VGQlEwUXNTVUZCUkN4UlFVRnpRanRCUVVGQkxGVkJRV0pITEUxQlFXRXNVVUZCWWtFc1RVRkJZVHRCUVVGRlNDeE5RVUZCUVN4SlFVRkpMRU5CUVVOTUxGbEJRVVFzUTBGQlNpeEhRVUZ4UWxFc1RVRkJUU3hEUVVGRFVDeExRVUUxUWp0QlFVRnZReXhMUVVGcVJUczdRVUZEUVVvc1NVRkJRVUVzVVVGQlVTeERRVUZEUlN4SFFVRlVMRU5CUVdGRExGbEJRV0lzUlVGQk1rSk5MRVZCUVROQ08wRkJRMFE3TzBGQlJVUXNVMEZCVDBFc1JVRkJVRHRCUVVORU8wRkJSVVFzU1VGQlRVY3NWVUZCVlN4SFFVRkhMRWxCUVVsRExFOUJRVW9zUlVGQmJrSTdRVUZEUVN4UFFVRlBMRk5CUVZORExFOUJRVlFzUTBGQmFVSkRMRTlCUVdwQ0xFVkJRVEJDUXl4WFFVRXhRaXhGUVVGdlJEdEJRVUZCTEUxQlFXSkRMRXRCUVdFc2RVVkJRVXdzUjBGQlN6dEJRVU42UkN4VFFVRlBMRlZCUVVOVUxFbEJRVVFzUlVGQlQwY3NUVUZCVUN4RlFVRnJRanRCUVVOMlFpeFJRVUZKVHl4UFFVRktPenRCUVVWQkxGRkJRVWxHTEZkQlFVb3NSVUZCYVVJN1FVRkRaa1VzVFVGQlFVRXNUMEZCVHl4SFFVRkhReXhWUVVGVkxFTkJRVU1zV1VGQlRUdEJRVU42UWtRc1VVRkJRVUVzVDBGQlR5eEhRVUZIUlN4VFFVRldPMEZCUlVGRExGRkJRVUZCTEhGQ1FVRnhRaXhEUVVGRExGbEJRVTA3UVVGRE1VSk1MRlZCUVVGQkxGZEJRVmNzUTBGQlExSXNTVUZCUkN4RlFVRlBSeXhOUVVGUUxFTkJRVmc3UVVGRFJDeFRRVVp2UWl4RFFVRnlRanRCUVVkRUxFOUJUbTFDTEVWQlRXcENUU3hMUVU1cFFpeERRVUZ3UWp0QlFVOUVPenRCUVVWRVRDeEpRVUZCUVN4VlFVRlZMRU5CUVVOV0xFZEJRVmdzUTBGQlpWTXNUVUZCWml4RlFVRjFRa2tzVDBGQmRrSTdRVUZGUVVFc1NVRkJRVUVzVDBGQlR5eERRVUZEVHl4SlFVRlNMRU5CUVdFc1ZVRkJRME1zVVVGQlJDeEZRVUZqTzBGQlEzcENMRlZCUVVsTUxFOUJRVW9zUlVGQllVMHNXVUZCV1N4RFFVRkRUaXhQUVVGRUxFTkJRVm83TzBGQlJXSXNWVUZCU1U0c1ZVRkJWU3hEUVVGRFJpeEhRVUZZTEVOQlFXVkRMRTFCUVdZc1RVRkJNa0pKTEU5QlFTOUNMRVZCUVhkRE8wRkJRM1JEVVN4UlFVRkJRU3hSUVVGUkxFTkJRVU5tTEVsQlFVUXNSVUZCVDBjc1RVRkJVQ3hEUVVGU08wRkJRMEZETEZGQlFVRkJMRlZCUVZVc1EwRkJRMVlzUjBGQldDeERRVUZsVXl4TlFVRm1MRVZCUVhWQ0xFbEJRWFpDTzBGQlEwUTdRVUZEUml4TFFWQkVPMEZCVVVRc1IwRjJRa1E3UVVGM1FrUWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpqYjI1emRDQnpaWFJEWVdOb1pTQTlJRzVsZHlCTllYQW9LVHRjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ6WlhRb2NISnZjR1Z5ZEhsT1lXMWxMQ0IyWVd4MVpTa2dlMXh1SUNCcFppQW9JWEJ5YjNCbGNuUjVUbUZ0WlNrZ2RHaHliM2NnUlhKeWIzSW9ZRlJoY21kbGRDQndjbTl3WlhKMGVTQnVZVzFsSUcxcGMzTnBibWM2SUNSN2NISnZjR1Z5ZEhsT1lXMWxmV0FwTzF4dVhHNGdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQwOVBTQXlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDaG9iM04wS1NBOVBpQjdJR2h2YzNSYmNISnZjR1Z5ZEhsT1lXMWxYU0E5SUhaaGJIVmxPeUI5TzF4dUlDQjlYRzVjYmlBZ2JHVjBJR1p1SUQwZ2MyVjBRMkZqYUdVdVoyVjBLSEJ5YjNCbGNuUjVUbUZ0WlNrN1hHNWNiaUFnYVdZZ0tDRm1iaWtnZTF4dUlDQWdJR1p1SUQwZ0tHaHZjM1FzSUhzZ2RHRnlaMlYwSUgwcElEMCtJSHNnYUc5emRGdHdjbTl3WlhKMGVVNWhiV1ZkSUQwZ2RHRnlaMlYwTG5aaGJIVmxPeUI5TzF4dUlDQWdJSE5sZEVOaFkyaGxMbk5sZENod2NtOXdaWEowZVU1aGJXVXNJR1p1S1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCbWJqdGNibjFjYmx4dVkyOXVjM1FnY0hKdmJXbHpaVTFoY0NBOUlHNWxkeUJYWldGclRXRndLQ2s3WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WemIyeDJaU2h3Y205dGFYTmxMQ0J3YkdGalpXaHZiR1JsY2l3Z1pHVnNZWGtnUFNBeU1EQXBJSHRjYmlBZ2NtVjBkWEp1SUNob2IzTjBMQ0IwWVhKblpYUXBJRDArSUh0Y2JpQWdJQ0JzWlhRZ2RHbHRaVzkxZER0Y2JseHVJQ0FnSUdsbUlDaHdiR0ZqWldodmJHUmxjaWtnZTF4dUlDQWdJQ0FnZEdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCMGFXMWxiM1YwSUQwZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSW9hRzl6ZEN3Z2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlMQ0JrWld4aGVTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NISnZiV2x6WlUxaGNDNXpaWFFvZEdGeVoyVjBMQ0J3Y205dGFYTmxLVHRjYmx4dUlDQWdJSEJ5YjIxcGMyVXVkR2hsYmlnb2RHVnRjR3hoZEdVcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoMGFXMWxiM1YwS1NCamJHVmhjbFJwYldWdmRYUW9kR2x0Wlc5MWRDazdYRzVjYmlBZ0lDQWdJR2xtSUNod2NtOXRhWE5sVFdGd0xtZGxkQ2gwWVhKblpYUXBJRDA5UFNCd2NtOXRhWE5sS1NCN1hHNGdJQ0FnSUNBZ0lIUmxiWEJzWVhSbEtHaHZjM1FzSUhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUhCeWIyMXBjMlZOWVhBdWMyVjBLSFJoY21kbGRDd2diblZzYkNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDA3WEc1OVhHNGlYWDA9IiwiaW1wb3J0IGRlZmluZUVsZW1lbnRzIGZyb20gJy4uL2RlZmluZSc7XG5pbXBvcnQgeyBjb21waWxlVGVtcGxhdGUsIGdldFBsYWNlaG9sZGVyIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnLi9oZWxwZXJzJztcbnZhciBQTEFDRUhPTERFUiA9IGdldFBsYWNlaG9sZGVyKCk7XG52YXIgU1ZHX1BMQUNFSE9MREVSID0gZ2V0UGxhY2Vob2xkZXIoJ3N2ZycpO1xudmFyIHRlbXBsYXRlc01hcCA9IG5ldyBNYXAoKTtcbnZhciBzdHlsZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xudmFyIG1ldGhvZHMgPSB7XG4gIGRlZmluZTogZnVuY3Rpb24gZGVmaW5lKGVsZW1lbnRzKSB7XG4gICAgZGVmaW5lRWxlbWVudHMoZWxlbWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBrZXk6IGZ1bmN0aW9uIGtleShpZCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgc3R5bGU6IGZ1bmN0aW9uIHN0eWxlKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBzdHlsZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgc3R5bGVzTWFwLnNldCh0aGlzLCBzdHlsZXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGUocGFydHMsIGFyZ3MsIGlzU1ZHKSB7XG4gIHZhciBjcmVhdGVUZW1wbGF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZVRlbXBsYXRlKGhvc3QpIHtcbiAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBob3N0O1xuICAgIHZhciBzdHlsZXMgPSBzdHlsZXNNYXAuZ2V0KGNyZWF0ZVRlbXBsYXRlKTtcbiAgICB2YXIgaWQgPSBwYXJ0cy5qb2luKFBMQUNFSE9MREVSKTtcbiAgICBpZiAoc3R5bGVzKSBpZCArPSBzdHlsZXMuam9pbihQTEFDRUhPTERFUik7XG4gICAgaWYgKGlzU1ZHKSBpZCArPSBTVkdfUExBQ0VIT0xERVI7XG4gICAgdmFyIHJlbmRlciA9IHRlbXBsYXRlc01hcC5nZXQoaWQpO1xuXG4gICAgaWYgKCFyZW5kZXIpIHtcbiAgICAgIHJlbmRlciA9IGNvbXBpbGVUZW1wbGF0ZShwYXJ0cywgaXNTVkcsIHN0eWxlcyk7XG4gICAgICB0ZW1wbGF0ZXNNYXAuc2V0KGlkLCByZW5kZXIpO1xuICAgIH1cblxuICAgIHJlbmRlcihob3N0LCB0YXJnZXQsIGFyZ3MpO1xuICB9O1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKGNyZWF0ZVRlbXBsYXRlLCBtZXRob2RzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh0bWwocGFydHMpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZShwYXJ0cywgYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3ZnKHBhcnRzKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGUocGFydHMsIGFyZ3MsIHRydWUpO1xufVxuT2JqZWN0LmFzc2lnbihodG1sLCBoZWxwZXJzKTtcbk9iamVjdC5hc3NpZ24oc3ZnLCBoZWxwZXJzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OTBaVzF3YkdGMFpTOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXeUprWldacGJtVkZiR1Z0Wlc1MGN5SXNJbU52YlhCcGJHVlVaVzF3YkdGMFpTSXNJbWRsZEZCc1lXTmxhRzlzWkdWeUlpd2lhR1ZzY0dWeWN5SXNJbEJNUVVORlNFOU1SRVZTSWl3aVUxWkhYMUJNUVVORlNFOU1SRVZTSWl3aWRHVnRjR3hoZEdWelRXRndJaXdpVFdGd0lpd2ljM1I1YkdWelRXRndJaXdpVjJWaGEwMWhjQ0lzSW0xbGRHaHZaSE1pTENKa1pXWnBibVVpTENKbGJHVnRaVzUwY3lJc0ltdGxlU0lzSW1sa0lpd2ljM1I1YkdVaUxDSnpkSGxzWlhNaUxDSnpaWFFpTENKamNtVmhkR1VpTENKd1lYSjBjeUlzSW1GeVozTWlMQ0pwYzFOV1J5SXNJbU55WldGMFpWUmxiWEJzWVhSbElpd2lhRzl6ZENJc0luUmhjbWRsZENJc0ltZGxkQ0lzSW1wdmFXNGlMQ0p5Wlc1a1pYSWlMQ0pQWW1wbFkzUWlMQ0poYzNOcFoyNGlMQ0pvZEcxc0lpd2ljM1puSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4UFFVRlBRU3hqUVVGUUxFMUJRVEpDTEZkQlFUTkNPMEZCUlVFc1UwRkJVME1zWlVGQlZDeEZRVUV3UWtNc1kwRkJNVUlzVVVGQlowUXNVVUZCYUVRN1FVRkRRU3hQUVVGUExFdEJRVXRETEU5QlFWb3NUVUZCZVVJc1YwRkJla0k3UVVGRlFTeEpRVUZOUXl4WFFVRlhMRWRCUVVkR0xHTkJRV01zUlVGQmJFTTdRVUZEUVN4SlFVRk5SeXhsUVVGbExFZEJRVWRJTEdOQlFXTXNRMEZCUXl4TFFVRkVMRU5CUVhSRE8wRkJSVUVzU1VGQlRVa3NXVUZCV1N4SFFVRkhMRWxCUVVsRExFZEJRVW9zUlVGQmNrSTdRVUZEUVN4SlFVRk5ReXhUUVVGVExFZEJRVWNzU1VGQlNVTXNUMEZCU2l4RlFVRnNRanRCUVVWQkxFbEJRVTFETEU5QlFVOHNSMEZCUnp0QlFVTmtReXhGUVVGQlFTeE5RVVJqTEd0Q1FVTlFReXhSUVVSUExFVkJRMGM3UVVGRFpsb3NTVUZCUVVFc1kwRkJZeXhEUVVGRFdTeFJRVUZFTEVOQlFXUTdRVUZEUVN4WFFVRlBMRWxCUVZBN1FVRkRSQ3hIUVVwaE8wRkJTMlJETEVWQlFVRkJMRWRCVEdNc1pVRkxWa01zUlVGTVZTeEZRVXRPTzBGQlEwNHNVMEZCUzBFc1JVRkJUQ3hIUVVGVlFTeEZRVUZXTzBGQlEwRXNWMEZCVHl4SlFVRlFPMEZCUTBRc1IwRlNZVHRCUVZOa1F5eEZRVUZCUVN4TFFWUmpMRzFDUVZOSE8wRkJRVUVzYzBOQlFWSkRMRTFCUVZFN1FVRkJVa0VzVFVGQlFVRXNUVUZCVVR0QlFVRkJPenRCUVVObVVpeEpRVUZCUVN4VFFVRlRMRU5CUVVOVExFZEJRVllzUTBGQll5eEpRVUZrTEVWQlFXOUNSQ3hOUVVGd1FqdEJRVU5CTEZkQlFVOHNTVUZCVUR0QlFVTkVPMEZCV21Fc1EwRkJhRUk3TzBGQlpVRXNVMEZCVTBVc1RVRkJWQ3hEUVVGblFrTXNTMEZCYUVJc1JVRkJkVUpETEVsQlFYWkNMRVZCUVRaQ1F5eExRVUUzUWl4RlFVRnZRenRCUVVOc1F5eE5RVUZOUXl4alFVRmpMRWRCUVVjc1UwRkJha0pCTEdOQlFXbENMRU5CUVVORExFbEJRVVFzUlVGQmVVSTdRVUZCUVN4UlFVRnNRa01zVFVGQmEwSXNkVVZCUVZSRUxFbEJRVk03UVVGRE9VTXNVVUZCVFZBc1RVRkJUU3hIUVVGSFVpeFRRVUZUTEVOQlFVTnBRaXhIUVVGV0xFTkJRV05JTEdOQlFXUXNRMEZCWmp0QlFVTkJMRkZCUVVsU0xFVkJRVVVzUjBGQlIwc3NTMEZCU3l4RFFVRkRUeXhKUVVGT0xFTkJRVmQwUWl4WFFVRllMRU5CUVZRN1FVRkRRU3hSUVVGSldTeE5RVUZLTEVWQlFWbEdMRVZCUVVVc1NVRkJTVVVzVFVGQlRTeERRVUZEVlN4SlFVRlFMRU5CUVZsMFFpeFhRVUZhTEVOQlFVNDdRVUZEV2l4UlFVRkphVUlzUzBGQlNpeEZRVUZYVUN4RlFVRkZMRWxCUVVsVUxHVkJRVTQ3UVVGRldDeFJRVUZKYzBJc1RVRkJUU3hIUVVGSGNrSXNXVUZCV1N4RFFVRkRiVUlzUjBGQllpeERRVUZwUWxnc1JVRkJha0lzUTBGQllqczdRVUZEUVN4UlFVRkpMRU5CUVVOaExFMUJRVXdzUlVGQllUdEJRVU5ZUVN4TlFVRkJRU3hOUVVGTkxFZEJRVWN4UWl4bFFVRmxMRU5CUVVOclFpeExRVUZFTEVWQlFWRkZMRXRCUVZJc1JVRkJaVXdzVFVGQlppeERRVUY0UWp0QlFVTkJWaXhOUVVGQlFTeFpRVUZaTEVOQlFVTlhMRWRCUVdJc1EwRkJhVUpJTEVWQlFXcENMRVZCUVhGQ1lTeE5RVUZ5UWp0QlFVTkVPenRCUVVWRVFTeEpRVUZCUVN4TlFVRk5MRU5CUVVOS0xFbEJRVVFzUlVGQlQwTXNUVUZCVUN4RlFVRmxTaXhKUVVGbUxFTkJRVTQ3UVVGRFJDeEhRV0pFT3p0QlFXVkJMRk5CUVU5UkxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVRmpVQ3hqUVVGa0xFVkJRVGhDV2l4UFFVRTVRaXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNUMEZCVHl4VFFVRlRiMElzU1VGQlZDeERRVUZqV0N4TFFVRmtMRVZCUVRoQ08wRkJRVUVzY1VOQlFVNURMRWxCUVUwN1FVRkJUa0VzU1VGQlFVRXNTVUZCVFR0QlFVRkJPenRCUVVOdVF5eFRRVUZQUml4TlFVRk5MRU5CUVVORExFdEJRVVFzUlVGQlVVTXNTVUZCVWl4RFFVRmlPMEZCUTBRN1FVRkZSQ3hQUVVGUExGTkJRVk5YTEVkQlFWUXNRMEZCWVZvc1MwRkJZaXhGUVVFMlFqdEJRVUZCTEhGRFFVRk9ReXhKUVVGTk8wRkJRVTVCTEVsQlFVRkJMRWxCUVUwN1FVRkJRVHM3UVVGRGJFTXNVMEZCVDBZc1RVRkJUU3hEUVVGRFF5eExRVUZFTEVWQlFWRkRMRWxCUVZJc1JVRkJZeXhKUVVGa0xFTkJRV0k3UVVGRFJEdEJRVVZFVVN4TlFVRk5MRU5CUVVORExFMUJRVkFzUTBGQlkwTXNTVUZCWkN4RlFVRnZRak5DTEU5QlFYQkNPMEZCUTBGNVFpeE5RVUZOTEVOQlFVTkRMRTFCUVZBc1EwRkJZMFVzUjBGQlpDeEZRVUZ0UWpWQ0xFOUJRVzVDSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUdSbFptbHVaVVZzWlcxbGJuUnpJR1p5YjIwZ0p5NHVMMlJsWm1sdVpTYzdYRzVjYm1sdGNHOXlkQ0I3SUdOdmJYQnBiR1ZVWlcxd2JHRjBaU3dnWjJWMFVHeGhZMlZvYjJ4a1pYSWdmU0JtY205dElDY3VMMk52Y21Vbk8xeHVhVzF3YjNKMElDb2dZWE1nYUdWc2NHVnljeUJtY205dElDY3VMMmhsYkhCbGNuTW5PMXh1WEc1amIyNXpkQ0JRVEVGRFJVaFBURVJGVWlBOUlHZGxkRkJzWVdObGFHOXNaR1Z5S0NrN1hHNWpiMjV6ZENCVFZrZGZVRXhCUTBWSVQweEVSVklnUFNCblpYUlFiR0ZqWldodmJHUmxjaWduYzNabkp5azdYRzVjYm1OdmJuTjBJSFJsYlhCc1lYUmxjMDFoY0NBOUlHNWxkeUJOWVhBb0tUdGNibU52Ym5OMElITjBlV3hsYzAxaGNDQTlJRzVsZHlCWFpXRnJUV0Z3S0NrN1hHNWNibU52Ym5OMElHMWxkR2h2WkhNZ1BTQjdYRzRnSUdSbFptbHVaU2hsYkdWdFpXNTBjeWtnZTF4dUlDQWdJR1JsWm1sdVpVVnNaVzFsYm5SektHVnNaVzFsYm5SektUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlN4Y2JpQWdhMlY1S0dsa0tTQjdYRzRnSUNBZ2RHaHBjeTVwWkNBOUlHbGtPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOUxGeHVJQ0J6ZEhsc1pTZ3VMaTV6ZEhsc1pYTXBJSHRjYmlBZ0lDQnpkSGxzWlhOTllYQXVjMlYwS0hSb2FYTXNJSE4wZVd4bGN5azdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgwc1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1VvY0dGeWRITXNJR0Z5WjNNc0lHbHpVMVpIS1NCN1hHNGdJR052Ym5OMElHTnlaV0YwWlZSbGJYQnNZWFJsSUQwZ0tHaHZjM1FzSUhSaGNtZGxkQ0E5SUdodmMzUXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnpkSGxzWlhNZ1BTQnpkSGxzWlhOTllYQXVaMlYwS0dOeVpXRjBaVlJsYlhCc1lYUmxLVHRjYmlBZ0lDQnNaWFFnYVdRZ1BTQndZWEowY3k1cWIybHVLRkJNUVVORlNFOU1SRVZTS1R0Y2JpQWdJQ0JwWmlBb2MzUjViR1Z6S1NCcFpDQXJQU0J6ZEhsc1pYTXVhbTlwYmloUVRFRkRSVWhQVEVSRlVpazdYRzRnSUNBZ2FXWWdLR2x6VTFaSEtTQnBaQ0FyUFNCVFZrZGZVRXhCUTBWSVQweEVSVkk3WEc1Y2JpQWdJQ0JzWlhRZ2NtVnVaR1Z5SUQwZ2RHVnRjR3hoZEdWelRXRndMbWRsZENocFpDazdYRzRnSUNBZ2FXWWdLQ0Z5Wlc1a1pYSXBJSHRjYmlBZ0lDQWdJSEpsYm1SbGNpQTlJR052YlhCcGJHVlVaVzF3YkdGMFpTaHdZWEowY3l3Z2FYTlRWa2NzSUhOMGVXeGxjeWs3WEc0Z0lDQWdJQ0IwWlcxd2JHRjBaWE5OWVhBdWMyVjBLR2xrTENCeVpXNWtaWElwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsYm1SbGNpaG9iM04wTENCMFlYSm5aWFFzSUdGeVozTXBPMXh1SUNCOU8xeHVYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVZWE56YVdkdUtHTnlaV0YwWlZSbGJYQnNZWFJsTENCdFpYUm9iMlJ6S1R0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2gwYld3b2NHRnlkSE1zSUM0dUxtRnlaM01wSUh0Y2JpQWdjbVYwZFhKdUlHTnlaV0YwWlNod1lYSjBjeXdnWVhKbmN5azdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCemRtY29jR0Z5ZEhNc0lDNHVMbUZ5WjNNcElIdGNiaUFnY21WMGRYSnVJR055WldGMFpTaHdZWEowY3l3Z1lYSm5jeXdnZEhKMVpTazdYRzU5WEc1Y2JrOWlhbVZqZEM1aGMzTnBaMjRvYUhSdGJDd2dhR1ZzY0dWeWN5azdYRzVQWW1wbFkzUXVZWE56YVdkdUtITjJaeXdnYUdWc2NHVnljeWs3WEc0aVhYMD0iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuLyoqXG4gKiBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXMgcmVwbGFjZWQgYnkgdGhlIG11bmdlZCBuYW1lIGZvciBvYmplY3RbcHJvcGVydHldXG4gKiBXZSBjYW5ub3QgYWxpYXMgdGhpcyBmdW5jdGlvbiwgc28gd2UgaGF2ZSB0byB1c2UgYSBzbWFsbCBzaGltIHRoYXQgaGFzIHRoZSBzYW1lIGJlaGF2aW9yIHdoZW4gbm90IGNvbXBpbGluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0gez9PYmplY3R9IG9iaiBSZWZlcmVuY2Ugb2JqZWN0XG4gKiBAcmV0dXJuIHtzdHJpbmd9IFBvdGVudGlhbGx5IHJlbmFtZWQgcHJvcGVydHkgbmFtZVxuICovXG53aW5kb3cuSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHByb3AsIG9iaikge1xuICByZXR1cm4gcHJvcDtcbn07XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cbmV4cG9ydCB7fTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmxldCBDU1NfVVJMX1JYID0gLyh1cmxcXCgpKFteKV0qKShcXCkpL2c7XG5sZXQgQUJTX1VSTCA9IC8oXlxcL1teXFwvXSl8KF4jKXwoXltcXHctXFxkXSo6KS87XG5sZXQgd29ya2luZ1VSTDtcbmxldCByZXNvbHZlRG9jO1xuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gVVJMIGFnYWluc3QgdGhlIHByb3ZpZGVkIGBiYXNlVXJpJy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBwZXJmb3JtcyBubyByZXNvbHV0aW9uIGZvciBVUkxzIHRoYXQgc3RhcnRcbiAqIHdpdGggYC9gIChhYnNvbHV0ZSBVUkxzKSBvciBgI2AgKGhhc2ggaWRlbnRpZmllcnMpLiAgRm9yIGdlbmVyYWwgcHVycG9zZVxuICogVVJMIHJlc29sdXRpb24sIHVzZSBgd2luZG93LlVSTGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBJbnB1dCBVUkwgdG8gcmVzb2x2ZVxuICogQHBhcmFtIHs/c3RyaW5nPX0gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVVcmwodXJsLCBiYXNlVVJJKSB7XG4gIGlmICh1cmwgJiYgQUJTX1VSTC50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGlmICh1cmwgPT09ICcvLycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIC8vIExhenkgZmVhdHVyZSBkZXRlY3Rpb24uXG4gIGlmICh3b3JraW5nVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICB3b3JraW5nVVJMID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKCdiJywgJ2h0dHA6Ly9hJyk7XG4gICAgICB1LnBhdGhuYW1lID0gJ2MlMjBkJztcbiAgICAgIHdvcmtpbmdVUkwgPSAodS5ocmVmID09PSAnaHR0cDovL2EvYyUyMGQnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzaWxlbnRseSBmYWlsXG4gICAgfVxuICB9XG4gIGlmICghYmFzZVVSSSkge1xuICAgIGJhc2VVUkkgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB9XG4gIGlmICh3b3JraW5nVVJMKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAobmV3IFVSTCh1cmwsIGJhc2VVUkkpKS5ocmVmO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEJhZCB1cmwgb3IgYmFzZVVSSSBzdHJ1Y3R1cmUuIERvIG5vdCBhdHRlbXB0IHRvIHJlc29sdmUuXG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfVxuICAvLyBGYWxsYmFjayB0byBjcmVhdGluZyBhbiBhbmNob3IgaW50byBhIGRpc2Nvbm5lY3RlZCBkb2N1bWVudC5cbiAgaWYgKCFyZXNvbHZlRG9jKSB7XG4gICAgcmVzb2x2ZURvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgndGVtcCcpO1xuICAgIHJlc29sdmVEb2MuYmFzZSA9IHJlc29sdmVEb2MuY3JlYXRlRWxlbWVudCgnYmFzZScpO1xuICAgIHJlc29sdmVEb2MuaGVhZC5hcHBlbmRDaGlsZChyZXNvbHZlRG9jLmJhc2UpO1xuICAgIHJlc29sdmVEb2MuYW5jaG9yID0gcmVzb2x2ZURvYy5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgcmVzb2x2ZURvYy5ib2R5LmFwcGVuZENoaWxkKHJlc29sdmVEb2MuYW5jaG9yKTtcbiAgfVxuICByZXNvbHZlRG9jLmJhc2UuaHJlZiA9IGJhc2VVUkk7XG4gIHJlc29sdmVEb2MuYW5jaG9yLmhyZWYgPSB1cmw7XG4gIHJldHVybiByZXNvbHZlRG9jLmFuY2hvci5ocmVmIHx8IHVybDtcblxufVxuXG4vKipcbiAqIFJlc29sdmVzIGFueSByZWxhdGl2ZSBVUkwncyBpbiB0aGUgZ2l2ZW4gQ1NTIHRleHQgYWdhaW5zdCB0aGUgcHJvdmlkZWRcbiAqIGBvd25lckRvY3VtZW50YCdzIGBiYXNlVVJJYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dCBDU1MgdGV4dCB0byBwcm9jZXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSB0byByZXNvbHZlIHRoZSBVUkwgYWdhaW5zdFxuICogQHJldHVybiB7c3RyaW5nfSBQcm9jZXNzZWQgQ1NTIHRleHQgd2l0aCByZXNvbHZlZCBVUkwnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNzcyhjc3NUZXh0LCBiYXNlVVJJKSB7XG4gIHJldHVybiBjc3NUZXh0LnJlcGxhY2UoQ1NTX1VSTF9SWCwgZnVuY3Rpb24obSwgcHJlLCB1cmwsIHBvc3QpIHtcbiAgICByZXR1cm4gcHJlICsgJ1xcJycgK1xuICAgICAgcmVzb2x2ZVVybCh1cmwucmVwbGFjZSgvW1wiJ10vZywgJycpLCBiYXNlVVJJKSArXG4gICAgICAnXFwnJyArIHBvc3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGZyb20gYSBnaXZlbiBgdXJsYC4gVGhlIHBhdGggaW5jbHVkZXMgdGhlIHRyYWlsaW5nXG4gKiBgL2AgZnJvbSB0aGUgdXJsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSW5wdXQgVVJMIHRvIHRyYW5zZm9ybVxuICogQHJldHVybiB7c3RyaW5nfSByZXNvbHZlZCBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRoRnJvbVVybCh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4vYm9vdC5qcyc7XG5cbmltcG9ydCB7IHBhdGhGcm9tVXJsIH0gZnJvbSAnLi9yZXNvbHZlLXVybC5qcyc7XG5leHBvcnQgY29uc3QgdXNlU2hhZG93ID0gISh3aW5kb3cuU2hhZHlET00pO1xuZXhwb3J0IGNvbnN0IHVzZU5hdGl2ZUNTU1Byb3BlcnRpZXMgPSBCb29sZWFuKCF3aW5kb3cuU2hhZHlDU1MgfHwgd2luZG93LlNoYWR5Q1NTLm5hdGl2ZUNzcyk7XG5leHBvcnQgY29uc3QgdXNlTmF0aXZlQ3VzdG9tRWxlbWVudHMgPSAhKHdpbmRvdy5jdXN0b21FbGVtZW50cy5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrKTtcblxuXG4vKipcbiAqIEdsb2JhbGx5IHNldHRhYmxlIHByb3BlcnR5IHRoYXQgaXMgYXV0b21hdGljYWxseSBhc3NpZ25lZCB0b1xuICogYEVsZW1lbnRNaXhpbmAgaW5zdGFuY2VzLCB1c2VmdWwgZm9yIGJpbmRpbmcgaW4gdGVtcGxhdGVzIHRvXG4gKiBtYWtlIFVSTCdzIHJlbGF0aXZlIHRvIGFuIGFwcGxpY2F0aW9uJ3Mgcm9vdC4gIERlZmF1bHRzIHRvIHRoZSBtYWluXG4gKiBkb2N1bWVudCBVUkwsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBieSB1c2Vycy4gIEl0IG1heSBiZSB1c2VmdWwgdG8gc2V0XG4gKiBgcm9vdFBhdGhgIHRvIHByb3ZpZGUgYSBzdGFibGUgYXBwbGljYXRpb24gbW91bnQgcGF0aCB3aGVuXG4gKiB1c2luZyBjbGllbnQgc2lkZSByb3V0aW5nLlxuICovXG5leHBvcnQgbGV0IHJvb3RQYXRoID0gcGF0aEZyb21VcmwoZG9jdW1lbnQuYmFzZVVSSSB8fCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbi8qKlxuICogU2V0cyB0aGUgZ2xvYmFsIHJvb3RQYXRoIHByb3BlcnR5IHVzZWQgYnkgYEVsZW1lbnRNaXhpbmAgYW5kXG4gKiBhdmFpbGFibGUgdmlhIGByb290UGF0aGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIG5ldyByb290IHBhdGhcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRSb290UGF0aCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcm9vdFBhdGggPSBwYXRoO1xufTtcblxuLyoqXG4gKiBBIGdsb2JhbCBjYWxsYmFjayB1c2VkIHRvIHNhbml0aXplIGFueSB2YWx1ZSBiZWZvcmUgaW5zZXJ0aW5nIGl0IGludG8gdGhlIERPTS5cbiAqIFRoZSBjYWxsYmFjayBzaWduYXR1cmUgaXM6XG4gKlxuICogIGZ1bmN0aW9uIHNhbml0aXplRE9NVmFsdWUodmFsdWUsIG5hbWUsIHR5cGUsIG5vZGUpIHsgLi4uIH1cbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiBgdmFsdWVgIGlzIHRoZSB2YWx1ZSB0byBzYW5pdGl6ZS5cbiAqIGBuYW1lYCBpcyB0aGUgbmFtZSBvZiBhbiBhdHRyaWJ1dGUgb3IgcHJvcGVydHkgKGZvciBleGFtcGxlLCBocmVmKS5cbiAqIGB0eXBlYCBpbmRpY2F0ZXMgd2hlcmUgdGhlIHZhbHVlIGlzIGJlaW5nIGluc2VydGVkOiBvbmUgb2YgcHJvcGVydHksIGF0dHJpYnV0ZSwgb3IgdGV4dC5cbiAqIGBub2RlYCBpcyB0aGUgbm9kZSB3aGVyZSB0aGUgdmFsdWUgaXMgYmVpbmcgaW5zZXJ0ZWQuXG4gKlxuICogQHR5cGUgeyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsTm9kZSk6Kil8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgbGV0IHNhbml0aXplRE9NVmFsdWUgPSB3aW5kb3cuUG9seW1lciAmJiB3aW5kb3cuUG9seW1lci5zYW5pdGl6ZURPTVZhbHVlIHx8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBTZXRzIHRoZSBnbG9iYWwgc2FuaXRpemVET01WYWx1ZSBhdmFpbGFibGUgdmlhIHRoaXMgbW9kdWxlJ3MgZXhwb3J0ZWRcbiAqIGBzYW5pdGl6ZURPTVZhbHVlYCB2YXJpYWJsZS5cbiAqXG4gKiBAcGFyYW0geyhmdW5jdGlvbigqLHN0cmluZyxzdHJpbmcsTm9kZSk6Kil8dW5kZWZpbmVkfSBuZXdTYW5pdGl6ZURPTVZhbHVlIHRoZSBnbG9iYWwgc2FuaXRpemVET01WYWx1ZSBjYWxsYmFja1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldFNhbml0aXplRE9NVmFsdWUgPSBmdW5jdGlvbihuZXdTYW5pdGl6ZURPTVZhbHVlKSB7XG4gIHNhbml0aXplRE9NVmFsdWUgPSBuZXdTYW5pdGl6ZURPTVZhbHVlO1xufTtcblxuLyoqXG4gKiBHbG9iYWxseSBzZXR0YWJsZSBwcm9wZXJ0eSB0byBtYWtlIFBvbHltZXIgR2VzdHVyZXMgdXNlIHBhc3NpdmUgVG91Y2hFdmVudCBsaXN0ZW5lcnMgd2hlbiByZWNvZ25pemluZyBnZXN0dXJlcy5cbiAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgZ2VzdHVyZXMgbWFkZSBmcm9tIHRvdWNoIHdpbGwgbm90IGJlIGFibGUgdG8gcHJldmVudCBzY3JvbGxpbmcsIGFsbG93aW5nIGZvciBzbW9vdGhlclxuICogc2Nyb2xsaW5nIHBlcmZvcm1hbmNlLlxuICogRGVmYXVsdHMgdG8gYGZhbHNlYCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBsZXQgcGFzc2l2ZVRvdWNoR2VzdHVyZXMgPSBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBwYXNzaXZlVG91Y2hHZXN0dXJlc2AgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50cyB1c2luZyBQb2x5bWVyIEdlc3R1cmVzLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlUGFzc2l2ZSBlbmFibGUgb3IgZGlzYWJsZSBwYXNzaXZlIHRvdWNoIGdlc3R1cmVzIGdsb2JhbGx5XG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0UGFzc2l2ZVRvdWNoR2VzdHVyZXMgPSBmdW5jdGlvbih1c2VQYXNzaXZlKSB7XG4gIHBhc3NpdmVUb3VjaEdlc3R1cmVzID0gdXNlUGFzc2l2ZTtcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBlbnN1cmUgUG9seW1lciB0ZW1wbGF0ZSBldmFsdWF0aW9uIG9ubHkgb2NjdXJzIGJhc2VkIG9uIHRlbXBhdGVzXG4gKiBkZWZpbmVkIGluIHRydXN0ZWQgc2NyaXB0LiAgV2hlbiB0cnVlLCBgPGRvbS1tb2R1bGU+YCByZS1yZWdpc3RyYXRpb24gaXNcbiAqIGRpc2FsbG93ZWQsIGA8ZG9tLWJpbmQ+YCBpcyBkaXNhYmxlZCwgYW5kIGA8ZG9tLWlmPmAvYDxkb20tcmVwZWF0PmBcbiAqIHRlbXBsYXRlcyB3aWxsIG9ubHkgZXZhbHVhdGUgaW4gdGhlIGNvbnRleHQgb2YgYSB0cnVzdGVkIGVsZW1lbnQgdGVtcGxhdGUuXG4gKi9cbmV4cG9ydCBsZXQgc3RyaWN0VGVtcGxhdGVQb2xpY3kgPSBmYWxzZTtcblxuLyoqXG4gKiBTZXRzIGBzdHJpY3RUZW1wbGF0ZVBvbGljeWAgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlU3RyaWN0UG9saWN5IGVuYWJsZSBvciBkaXNhYmxlIHN0cmljdCB0ZW1wbGF0ZSBwb2xpY3lcbiAqICAgZ2xvYmFsbHlcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRTdHJpY3RUZW1wbGF0ZVBvbGljeSA9IGZ1bmN0aW9uKHVzZVN0cmljdFBvbGljeSkge1xuICBzdHJpY3RUZW1wbGF0ZVBvbGljeSA9IHVzZVN0cmljdFBvbGljeTtcbn07XG5cbi8qKlxuICogU2V0dGluZyB0byBlbmFibGUgZG9tLW1vZHVsZSBsb29rdXAgZnJvbSBQb2x5bWVyLkVsZW1lbnQuICBCeSBkZWZhdWx0LFxuICogdGVtcGxhdGVzIG11c3QgYmUgZGVmaW5lZCBpbiBzY3JpcHQgdXNpbmcgdGhlIGBzdGF0aWMgZ2V0IHRlbXBsYXRlKClgXG4gKiBnZXR0ZXIgYW5kIHRoZSBgaHRtbGAgdGFnIGZ1bmN0aW9uLiAgVG8gZW5hYmxlIGxlZ2FjeSBsb2FkaW5nIG9mIHRlbXBsYXRlc1xuICogdmlhIGRvbS1tb2R1bGUsIHNldCB0aGlzIGZsYWcgdG8gdHJ1ZS5cbiAqL1xuZXhwb3J0IGxldCBhbGxvd1RlbXBsYXRlRnJvbURvbU1vZHVsZSA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYGxvb2t1cFRlbXBsYXRlRnJvbURvbU1vZHVsZWAgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dEb21Nb2R1bGUgZW5hYmxlIG9yIGRpc2FibGUgdGVtcGxhdGUgbG9va3VwXG4gKiAgIGdsb2JhbGx5XG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0QWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGUgPSBmdW5jdGlvbihhbGxvd0RvbU1vZHVsZSkge1xuICBhbGxvd1RlbXBsYXRlRnJvbURvbU1vZHVsZSA9IGFsbG93RG9tTW9kdWxlO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIHNraXAgcHJvY2Vzc2luZyBzdHlsZSBpbmNsdWRlcyBhbmQgcmUtd3JpdGluZyB1cmxzIGluIGNzcyBzdHlsZXMuXG4gKiBOb3JtYWxseSBcImluY2x1ZGVkXCIgc3R5bGVzIGFyZSBwdWxsZWQgaW50byB0aGUgZWxlbWVudCBhbmQgYWxsIHVybHMgaW4gc3R5bGVzXG4gKiBhcmUgcmUtd3JpdHRlbiB0byBiZSByZWxhdGl2ZSB0byB0aGUgY29udGFpbmluZyBzY3JpcHQgdXJsLlxuICogSWYgbm8gaW5jbHVkZXMgb3IgcmVsYXRpdmUgdXJscyBhcmUgdXNlZCBpbiBzdHlsZXMsIHRoZXNlIHN0ZXBzIGNhbiBiZVxuICogc2tpcHBlZCBhcyBhbiBvcHRpbWl6YXRpb24uXG4gKi9cbmV4cG9ydCBsZXQgbGVnYWN5T3B0aW1pemF0aW9ucyA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYGxlZ2FjeU9wdGltaXphdGlvbnNgIGdsb2JhbGx5IGZvciBhbGwgZWxlbWVudHMgdG8gZW5hYmxlIG9wdGltaXphdGlvbnNcbiAqIHdoZW4gb25seSBsZWdhY3kgYmFzZWQgZWxlbWVudHMgYXJlIHVzZWQuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VMZWdhY3lPcHRpbWl6YXRpb25zIGVuYWJsZSBvciBkaXNhYmxlIGxlZ2FjeSBvcHRpbWl6YXRpb25zXG4gKiBpbmNsdWRlcyBhbmQgdXJsIHJld3JpdGluZ1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHNldExlZ2FjeU9wdGltaXphdGlvbnMgPSBmdW5jdGlvbih1c2VMZWdhY3lPcHRpbWl6YXRpb25zKSB7XG4gIGxlZ2FjeU9wdGltaXphdGlvbnMgPSB1c2VMZWdhY3lPcHRpbWl6YXRpb25zO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIHBlcmZvcm0gaW5pdGlhbCByZW5kZXJpbmcgc3luY2hyb25vdXNseSB3aGVuIHJ1bm5pbmcgdW5kZXIgU2hhZHlET00uXG4gKiBUaGlzIG1hdGNoZXMgdGhlIGJlaGF2aW9yIG9mIFBvbHltZXIgMS5cbiAqL1xuZXhwb3J0IGxldCBzeW5jSW5pdGlhbFJlbmRlciA9IGZhbHNlO1xuXG4vKipcbiAqIFNldHMgYHN5bmNJbml0aWFsUmVuZGVyYCBnbG9iYWxseSBmb3IgYWxsIGVsZW1lbnRzIHRvIGVuYWJsZSBzeW5jaHJvbm91c1xuICogaW5pdGlhbCByZW5kZXJpbmcuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VTeW5jSW5pdGlhbFJlbmRlciBlbmFibGUgb3IgZGlzYWJsZSBzeW5jaHJvbm91cyBpbml0aWFsXG4gKiByZW5kZXJpbmcgZ2xvYmFsbHkuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3Qgc2V0U3luY0luaXRpYWxSZW5kZXIgPSBmdW5jdGlvbih1c2VTeW5jSW5pdGlhbFJlbmRlcikge1xuICBzeW5jSW5pdGlhbFJlbmRlciA9IHVzZVN5bmNJbml0aWFsUmVuZGVyO1xufTtcblxuLyoqXG4gKiBTZXR0aW5nIHRvIGNhbmNlbCBzeW50aGV0aWMgY2xpY2sgZXZlbnRzIGZpcmVkIGJ5IG9sZGVyIG1vYmlsZSBicm93c2Vycy4gTW9kZXJuIGJyb3dzZXJzXG4gKiBubyBsb25nZXIgZmlyZSBzeW50aGV0aWMgY2xpY2sgZXZlbnRzLCBhbmQgdGhlIGNhbmNlbGxhdGlvbiBiZWhhdmlvciBjYW4gaW50ZXJmZXJlXG4gKiB3aGVuIHByb2dyYW1tYXRpY2FsbHkgY2xpY2tpbmcgb24gZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBsZXQgY2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHMgPSB0cnVlO1xuXG4vKipcbiAqIFNldHMgYHNldENhbmNlbFN5bnRoZXRpY0V2ZW50c2AgZ2xvYmFsbHkgZm9yIGFsbCBlbGVtZW50cyB0byBjYW5jZWwgc3ludGhldGljIGNsaWNrIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzIGVuYWJsZSBvciBkaXNhYmxlIGNhbmNlbGxpbmcgc3ludGhldGljXG4gKiBldmVudHNcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBzZXRDYW5jZWxTeW50aGV0aWNDbGlja0V2ZW50cyA9IGZ1bmN0aW9uKHVzZUNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzKSB7XG4gIGNhbmNlbFN5bnRoZXRpY0NsaWNrRXZlbnRzID0gdXNlQ2FuY2VsU3ludGhldGljQ2xpY2tFdmVudHM7XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuLy8gdW5pcXVlIGdsb2JhbCBpZCBmb3IgZGVkdXBpbmcgbWl4aW5zLlxubGV0IGRlZHVwZUlkID0gMDtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIHtGdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIE1peGluRnVuY3Rpb24oKXt9XG4vKiogQHR5cGUgeyhXZWFrTWFwIHwgdW5kZWZpbmVkKX0gKi9cbk1peGluRnVuY3Rpb24ucHJvdG90eXBlLl9fbWl4aW5BcHBsaWNhdGlvbnM7XG4vKiogQHR5cGUgeyhPYmplY3QgfCB1bmRlZmluZWQpfSAqL1xuTWl4aW5GdW5jdGlvbi5wcm90b3R5cGUuX19taXhpblNldDtcblxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MgKi9cbi8qKlxuICogV3JhcHMgYW4gRVM2IGNsYXNzIGV4cHJlc3Npb24gbWl4aW4gc3VjaCB0aGF0IHRoZSBtaXhpbiBpcyBvbmx5IGFwcGxpZWRcbiAqIGlmIGl0IGhhcyBub3QgYWxyZWFkeSBiZWVuIGFwcGxpZWQgaXRzIGJhc2UgYXJndW1lbnQuIEFsc28gbWVtb2l6ZXMgbWl4aW5cbiAqIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSBtaXhpbiBFUzYgY2xhc3MgZXhwcmVzc2lvbiBtaXhpbiB0byB3cmFwXG4gKiBAcmV0dXJuIHtUfVxuICogQHN1cHByZXNzIHtpbnZhbGlkQ2FzdHN9XG4gKi9cbmV4cG9ydCBjb25zdCBkZWR1cGluZ01peGluID0gZnVuY3Rpb24obWl4aW4pIHtcbiAgbGV0IG1peGluQXBwbGljYXRpb25zID0gLyoqIEB0eXBlIHshTWl4aW5GdW5jdGlvbn0gKi8obWl4aW4pLl9fbWl4aW5BcHBsaWNhdGlvbnM7XG4gIGlmICghbWl4aW5BcHBsaWNhdGlvbnMpIHtcbiAgICBtaXhpbkFwcGxpY2F0aW9ucyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgLyoqIEB0eXBlIHshTWl4aW5GdW5jdGlvbn0gKi8obWl4aW4pLl9fbWl4aW5BcHBsaWNhdGlvbnMgPSBtaXhpbkFwcGxpY2F0aW9ucztcbiAgfVxuICAvLyBtYWludGFpbiBhIHVuaXF1ZSBpZCBmb3IgZWFjaCBtaXhpblxuICBsZXQgbWl4aW5EZWR1cGVJZCA9IGRlZHVwZUlkKys7XG4gIGZ1bmN0aW9uIGRlZHVwaW5nTWl4aW4oYmFzZSkge1xuICAgIGxldCBiYXNlU2V0ID0gLyoqIEB0eXBlIHshTWl4aW5GdW5jdGlvbn0gKi8oYmFzZSkuX19taXhpblNldDtcbiAgICBpZiAoYmFzZVNldCAmJiBiYXNlU2V0W21peGluRGVkdXBlSWRdKSB7XG4gICAgICByZXR1cm4gYmFzZTtcbiAgICB9XG4gICAgbGV0IG1hcCA9IG1peGluQXBwbGljYXRpb25zO1xuICAgIGxldCBleHRlbmRlZCA9IG1hcC5nZXQoYmFzZSk7XG4gICAgaWYgKCFleHRlbmRlZCkge1xuICAgICAgZXh0ZW5kZWQgPSAvKiogQHR5cGUgeyFGdW5jdGlvbn0gKi8obWl4aW4pKGJhc2UpO1xuICAgICAgbWFwLnNldChiYXNlLCBleHRlbmRlZCk7XG4gICAgfVxuICAgIC8vIGNvcHkgaW5oZXJpdGVkIG1peGluIHNldCBmcm9tIHRoZSBleHRlbmRlZCBjbGFzcywgb3IgdGhlIGJhc2UgY2xhc3NcbiAgICAvLyBOT1RFOiB3ZSBhdm9pZCB1c2Ugb2YgU2V0IGhlcmUgYmVjYXVzZSBzb21lIGJyb3dzZXIgKElFMTEpXG4gICAgLy8gY2Fubm90IGV4dGVuZCBhIGJhc2UgU2V0IHZpYSB0aGUgY29uc3RydWN0b3IuXG4gICAgbGV0IG1peGluU2V0ID0gT2JqZWN0LmNyZWF0ZSgvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhleHRlbmRlZCkuX19taXhpblNldCB8fCBiYXNlU2V0IHx8IG51bGwpO1xuICAgIG1peGluU2V0W21peGluRGVkdXBlSWRdID0gdHJ1ZTtcbiAgICAvKiogQHR5cGUgeyFNaXhpbkZ1bmN0aW9ufSAqLyhleHRlbmRlZCkuX19taXhpblNldCA9IG1peGluU2V0O1xuICAgIHJldHVybiBleHRlbmRlZDtcbiAgfVxuXG4gIHJldHVybiBkZWR1cGluZ01peGluO1xufTtcbi8qIGVzbGludC1lbmFibGUgdmFsaWQtanNkb2MgKi9cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyByZXNvbHZlVXJsLCBwYXRoRnJvbVVybCB9IGZyb20gJy4uL3V0aWxzL3Jlc29sdmUtdXJsLmpzJztcbmltcG9ydCB7IHN0cmljdFRlbXBsYXRlUG9saWN5IH0gZnJvbSAnLi4vdXRpbHMvc2V0dGluZ3MuanMnO1xuXG5sZXQgbW9kdWxlcyA9IHt9O1xubGV0IGxjTW9kdWxlcyA9IHt9O1xuLyoqXG4gKiBTZXRzIGEgZG9tLW1vZHVsZSBpbnRvIHRoZSBnbG9iYWwgcmVnaXN0cnkgYnkgaWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIGRvbS1tb2R1bGUgaWRcbiAqIEBwYXJhbSB7RG9tTW9kdWxlfSBtb2R1bGUgZG9tLW1vZHVsZSBpbnN0YW5jZVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gc2V0TW9kdWxlKGlkLCBtb2R1bGUpIHtcbiAgLy8gc3RvcmUgaWQgc2VwYXJhdGUgZnJvbSBsb3dlcmNhc2VkIGlkIHNvIHRoYXRcbiAgLy8gaW4gYWxsIGNhc2VzIG1peGVkQ2FzZSBpZCB3aWxsIHN0b3JlZCBkaXN0aW5jdGx5XG4gIC8vIGFuZCBsb3dlcmNhc2UgdmVyc2lvbiBpcyBhIGZhbGxiYWNrXG4gIG1vZHVsZXNbaWRdID0gbGNNb2R1bGVzW2lkLnRvTG93ZXJDYXNlKCldID0gbW9kdWxlO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBkb20tbW9kdWxlIGZyb20gdGhlIGdsb2JhbCByZWdpc3RyeSBieSBpZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgZG9tLW1vZHVsZSBpZFxuICogQHJldHVybiB7RG9tTW9kdWxlIX0gZG9tLW1vZHVsZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBmaW5kTW9kdWxlKGlkKSB7XG4gIHJldHVybiBtb2R1bGVzW2lkXSB8fCBsY01vZHVsZXNbaWQudG9Mb3dlckNhc2UoKV07XG59XG5cbmZ1bmN0aW9uIHN0eWxlT3V0c2lkZVRlbXBsYXRlQ2hlY2soaW5zdCkge1xuICBpZiAoaW5zdC5xdWVyeVNlbGVjdG9yKCdzdHlsZScpKSB7XG4gICAgY29uc29sZS53YXJuKCdkb20tbW9kdWxlICVzIGhhcyBzdHlsZSBvdXRzaWRlIHRlbXBsYXRlJywgaW5zdC5pZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYGRvbS1tb2R1bGVgIGVsZW1lbnQgcmVnaXN0ZXJzIHRoZSBkb20gaXQgY29udGFpbnMgdG8gdGhlIG5hbWUgZ2l2ZW5cbiAqIGJ5IHRoZSBtb2R1bGUncyBpZCBhdHRyaWJ1dGUuIEl0IHByb3ZpZGVzIGEgdW5pZmllZCBkYXRhYmFzZSBvZiBkb21cbiAqIGFjY2Vzc2libGUgdmlhIGl0cyBzdGF0aWMgYGltcG9ydGAgQVBJLlxuICpcbiAqIEEga2V5IHVzZSBjYXNlIG9mIGBkb20tbW9kdWxlYCBpcyBmb3IgcHJvdmlkaW5nIGN1c3RvbSBlbGVtZW50IGA8dGVtcGxhdGU+YHNcbiAqIHZpYSBIVE1MIGltcG9ydHMgdGhhdCBhcmUgcGFyc2VkIGJ5IHRoZSBuYXRpdmUgSFRNTCBwYXJzZXIsIHRoYXQgY2FuIGJlXG4gKiByZWxvY2F0ZWQgZHVyaW5nIGEgYnVuZGxpbmcgcGFzcyBhbmQgc3RpbGwgbG9va2VkIHVwIGJ5IGBpZGAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgPGRvbS1tb2R1bGUgaWQ9XCJmb29cIj5cbiAqICAgICAgIDxpbWcgc3JjPVwic3R1ZmYucG5nXCI+XG4gKiAgICAgPC9kb20tbW9kdWxlPlxuICpcbiAqIFRoZW4gaW4gY29kZSBpbiBzb21lIG90aGVyIGxvY2F0aW9uIHRoYXQgY2Fubm90IGFjY2VzcyB0aGUgZG9tLW1vZHVsZSBhYm92ZVxuICpcbiAqICAgICBsZXQgaW1nID0gY3VzdG9tRWxlbWVudHMuZ2V0KCdkb20tbW9kdWxlJykuaW1wb3J0KCdmb28nLCAnaW1nJyk7XG4gKlxuICogQGN1c3RvbUVsZW1lbnRcbiAqIEBleHRlbmRzIEhUTUxFbGVtZW50XG4gKiBAc3VtbWFyeSBDdXN0b20gZWxlbWVudCB0aGF0IHByb3ZpZGVzIGEgcmVnaXN0cnkgb2YgcmVsb2NhdGFibGUgRE9NIGNvbnRlbnRcbiAqICAgYnkgYGlkYCB0aGF0IGlzIGFnbm9zdGljIHRvIGJ1bmRsaW5nLlxuICogQHVucmVzdHJpY3RlZFxuICovXG5leHBvcnQgY2xhc3MgRG9tTW9kdWxlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7IHJldHVybiBbJ2lkJ107IH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBlbGVtZW50IHNwZWNpZmllZCBieSB0aGUgY3NzIGBzZWxlY3RvcmAgaW4gdGhlIG1vZHVsZVxuICAgKiByZWdpc3RlcmVkIGJ5IGBpZGAuIEZvciBleGFtcGxlLCB0aGlzLmltcG9ydCgnZm9vJywgJ2ltZycpO1xuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBkb20tbW9kdWxlIGluIHdoaWNoIHRvIHNlYXJjaC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzZWxlY3RvciBUaGUgY3NzIHNlbGVjdG9yIGJ5IHdoaWNoIHRvIGZpbmQgdGhlIGVsZW1lbnQuXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9IFJldHVybnMgdGhlIGVsZW1lbnQgd2hpY2ggbWF0Y2hlcyBgc2VsZWN0b3JgIGluIHRoZVxuICAgKiBtb2R1bGUgcmVnaXN0ZXJlZCBhdCB0aGUgc3BlY2lmaWVkIGBpZGAuXG4gICAqXG4gICAqIEBleHBvcnRcbiAgICogQG5vY29sbGFwc2UgUmVmZXJyZWQgdG8gaW5kaXJlY3RseSBpbiBzdHlsZS1nYXRoZXIuanNcbiAgICovXG4gIHN0YXRpYyBpbXBvcnQoaWQsIHNlbGVjdG9yKSB7XG4gICAgaWYgKGlkKSB7XG4gICAgICBsZXQgbSA9IGZpbmRNb2R1bGUoaWQpO1xuICAgICAgaWYgKG0gJiYgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG0ucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gb2xkIE9sZCB2YWx1ZSBvZiBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgQ3VycmVudCB2YWx1ZSBvZiBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZXNwYWNlIEF0dHJpYnV0ZSBuYW1lc3BhY2UuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUsIG5hbWVzcGFjZSkge1xuICAgIGlmIChvbGQgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVyKCk7XG4gICAgfVxuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWFyZ3MgKi9cblxuICAvKipcbiAgICogVGhlIGFic29sdXRlIFVSTCBvZiB0aGUgb3JpZ2luYWwgbG9jYXRpb24gb2YgdGhpcyBgZG9tLW1vZHVsZWAuXG4gICAqXG4gICAqIFRoaXMgdmFsdWUgd2lsbCBkaWZmZXIgZnJvbSB0aGlzIGVsZW1lbnQncyBgb3duZXJEb2N1bWVudGAgaW4gdGhlXG4gICAqIGZvbGxvd2luZyB3YXlzOlxuICAgKiAtIFRha2VzIGludG8gYWNjb3VudCBhbnkgYGFzc2V0cGF0aGAgYXR0cmlidXRlIGFkZGVkIGR1cmluZyBidW5kbGluZ1xuICAgKiAgIHRvIGluZGljYXRlIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiByZWxhdGl2ZSB0byB0aGUgYnVuZGxlZCBsb2NhdGlvblxuICAgKiAtIFVzZXMgdGhlIEhUTUxJbXBvcnRzIHBvbHlmaWxsJ3MgYGltcG9ydEZvckVsZW1lbnRgIEFQSSB0byBlbnN1cmVcbiAgICogICB0aGUgcGF0aCBpcyByZWxhdGl2ZSB0byB0aGUgaW1wb3J0IGRvY3VtZW50J3MgbG9jYXRpb24gc2luY2VcbiAgICogICBgb3duZXJEb2N1bWVudGAgaXMgbm90IGN1cnJlbnRseSBwb2x5ZmlsbGVkXG4gICAqL1xuICBnZXQgYXNzZXRwYXRoKCkge1xuICAgIC8vIERvbid0IG92ZXJyaWRlIGV4aXN0aW5nIGFzc2V0cGF0aC5cbiAgICBpZiAoIXRoaXMuX19hc3NldHBhdGgpIHtcbiAgICAgIC8vIG5vdGU6IGFzc2V0cGF0aCBzZXQgdmlhIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIHJlbGF0aXZlIHRvIHRoaXNcbiAgICAgIC8vIGVsZW1lbnQncyBsb2NhdGlvbjsgYWNjb21vZGF0ZSBwb2x5ZmlsbGVkIEhUTUxJbXBvcnRzXG4gICAgICBjb25zdCBvd25lciA9IHdpbmRvdy5IVE1MSW1wb3J0cyAmJiBIVE1MSW1wb3J0cy5pbXBvcnRGb3JFbGVtZW50ID9cbiAgICAgICAgSFRNTEltcG9ydHMuaW1wb3J0Rm9yRWxlbWVudCh0aGlzKSB8fCBkb2N1bWVudCA6IHRoaXMub3duZXJEb2N1bWVudDtcbiAgICAgIGNvbnN0IHVybCA9IHJlc29sdmVVcmwoXG4gICAgICAgIHRoaXMuZ2V0QXR0cmlidXRlKCdhc3NldHBhdGgnKSB8fCAnJywgb3duZXIuYmFzZVVSSSk7XG4gICAgICB0aGlzLl9fYXNzZXRwYXRoID0gcGF0aEZyb21VcmwodXJsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX19hc3NldHBhdGg7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHRoZSBkb20tbW9kdWxlIGF0IGEgZ2l2ZW4gaWQuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZFxuICAgKiB3aGVuIGEgZG9tLW1vZHVsZSBpcyBpbXBlcmF0aXZlbHkgY3JlYXRlZC4gRm9yXG4gICAqIGV4YW1wbGUsIGBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkb20tbW9kdWxlJykucmVnaXN0ZXIoJ2ZvbycpYC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBpZCBUaGUgaWQgYXQgd2hpY2ggdG8gcmVnaXN0ZXIgdGhlIGRvbS1tb2R1bGUuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICByZWdpc3RlcihpZCkge1xuICAgIGlkID0gaWQgfHwgdGhpcy5pZDtcbiAgICBpZiAoaWQpIHtcbiAgICAgIC8vIFVuZGVyIHN0cmljdFRlbXBsYXRlUG9saWN5LCByZWplY3QgYW5kIG51bGwgb3V0IGFueSByZS1yZWdpc3RlcmVkXG4gICAgICAvLyBkb20tbW9kdWxlIHNpbmNlIGl0IGlzIGFtYmlndW91cyB3aGV0aGVyIGZpcnN0LWluIG9yIGxhc3QtaW4gaXMgdHJ1c3RlZFxuICAgICAgaWYgKHN0cmljdFRlbXBsYXRlUG9saWN5ICYmIGZpbmRNb2R1bGUoaWQpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0TW9kdWxlKGlkLCBudWxsKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdHJpY3RUZW1wbGF0ZVBvbGljeTogZG9tLW1vZHVsZSAke2lkfSByZS1yZWdpc3RlcmVkYCk7XG4gICAgICB9XG4gICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICBzZXRNb2R1bGUoaWQsIHRoaXMpO1xuICAgICAgc3R5bGVPdXRzaWRlVGVtcGxhdGVDaGVjayh0aGlzKTtcbiAgICB9XG4gIH1cbn1cblxuRG9tTW9kdWxlLnByb3RvdHlwZVsnbW9kdWxlcyddID0gbW9kdWxlcztcblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdkb20tbW9kdWxlJywgRG9tTW9kdWxlKTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbi8qKlxuICogTW9kdWxlIHdpdGggdXRpbGl0aWVzIGZvciBjb2xsZWN0aW9uIENTUyB0ZXh0IGZyb20gYDx0ZW1wbGF0ZXM+YCwgZXh0ZXJuYWxcbiAqIHN0eWxlc2hlZXRzLCBhbmQgYGRvbS1tb2R1bGVgcy5cbiAqXG4gKiBAc3VtbWFyeSBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIGNvbGxlY3Rpb24gQ1NTIHRleHQgZnJvbSB2YXJpb3VzIHNvdXJjZXMuXG4gKi9cblxuaW1wb3J0IHsgRG9tTW9kdWxlIH0gZnJvbSAnLi4vZWxlbWVudHMvZG9tLW1vZHVsZS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlQ3NzIH0gZnJvbSAnLi9yZXNvbHZlLXVybC5qcyc7XG5cbmNvbnN0IE1PRFVMRV9TVFlMRV9MSU5LX1NFTEVDVE9SID0gJ2xpbmtbcmVsPWltcG9ydF1bdHlwZX49Y3NzXSc7XG5jb25zdCBJTkNMVURFX0FUVFIgPSAnaW5jbHVkZSc7XG5jb25zdCBTSEFEWV9VTlNDT1BFRF9BVFRSID0gJ3NoYWR5LXVuc2NvcGVkJztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSWQgLlxuICogQHJldHVybiB7P0RvbU1vZHVsZX0gLlxuICovXG5mdW5jdGlvbiBpbXBvcnRNb2R1bGUobW9kdWxlSWQpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7P0RvbU1vZHVsZX0gKi8oRG9tTW9kdWxlLmltcG9ydChtb2R1bGVJZCkpO1xufVxuXG5mdW5jdGlvbiBzdHlsZUZvckltcG9ydChpbXBvcnREb2MpIHtcbiAgLy8gTk9URTogcG9seWZpbGwgYWZmb3JkYW5jZS5cbiAgLy8gdW5kZXIgdGhlIEhUTUxJbXBvcnRzIHBvbHlmaWxsLCB0aGVyZSB3aWxsIGJlIG5vICdib2R5JyxcbiAgLy8gYnV0IHRoZSBpbXBvcnQgcHNldWRvLWRvYyBjYW4gYmUgdXNlZCBkaXJlY3RseS5cbiAgbGV0IGNvbnRhaW5lciA9IGltcG9ydERvYy5ib2R5ID8gaW1wb3J0RG9jLmJvZHkgOiBpbXBvcnREb2M7XG4gIGNvbnN0IGltcG9ydENzcyA9IHJlc29sdmVDc3MoY29udGFpbmVyLnRleHRDb250ZW50LFxuICAgIGltcG9ydERvYy5iYXNlVVJJKTtcbiAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50ZXh0Q29udGVudCA9IGltcG9ydENzcztcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vKiogQHR5cGVkZWYge3thc3NldHBhdGg6IHN0cmluZ319ICovXG5sZXQgdGVtcGxhdGVXaXRoQXNzZXRQYXRoOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiA8c3R5bGU+IGVsZW1lbnRzIGluIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgYGRvbS1tb2R1bGVgcy5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZHMgTGlzdCBvZiBkb20tbW9kdWxlIGlkJ3Mgd2l0aGluIHdoaWNoIHRvXG4gKiBzZWFyY2ggZm9yIGNzcy5cbiAqIEByZXR1cm4geyFBcnJheTwhSFRNTFN0eWxlRWxlbWVudD59IEFycmF5IG9mIGNvbnRhaW5lZCA8c3R5bGU+IGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZXNGcm9tTW9kdWxlcyhtb2R1bGVJZHMpIHtcbiBjb25zdCBtb2R1bGVzID0gbW9kdWxlSWRzLnRyaW0oKS5zcGxpdCgvXFxzKy8pO1xuIGNvbnN0IHN0eWxlcyA9IFtdO1xuIGZvciAobGV0IGk9MDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgIHN0eWxlcy5wdXNoKC4uLnN0eWxlc0Zyb21Nb2R1bGUobW9kdWxlc1tpXSkpO1xuIH1cbiByZXR1cm4gc3R5bGVzO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIDxzdHlsZT4gZWxlbWVudHMgaW4gYSBnaXZlbiBgZG9tLW1vZHVsZWAuXG4gKiBTdHlsZXMgaW4gYSBgZG9tLW1vZHVsZWAgY2FuIGNvbWUgZWl0aGVyIGZyb20gYDxzdHlsZT5gcyB3aXRoaW4gdGhlXG4gKiBmaXJzdCBgPHRlbXBsYXRlPmAsIG9yIGVsc2UgZnJvbSBvbmUgb3IgbW9yZVxuICogYDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5gIGxpbmtzIG91dHNpZGUgdGhlIHRlbXBsYXRlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBkb20tbW9kdWxlIGlkIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIHN0eWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlc0Zyb21Nb2R1bGUobW9kdWxlSWQpIHtcbiAgY29uc3QgbSA9IGltcG9ydE1vZHVsZShtb2R1bGVJZCk7XG5cbiAgaWYgKCFtKSB7XG4gICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCBzdHlsZSBkYXRhIGluIG1vZHVsZSBuYW1lZCcsIG1vZHVsZUlkKTtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBpZiAobS5fc3R5bGVzID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBbXTtcbiAgICAvLyBtb2R1bGUgaW1wb3J0czogPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPlxuICAgIHN0eWxlcy5wdXNoKC4uLl9zdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyhtKSk7XG4gICAgLy8gaW5jbHVkZSBjc3MgZnJvbSB0aGUgZmlyc3QgdGVtcGxhdGUgaW4gdGhlIG1vZHVsZVxuICAgIGNvbnN0IHRlbXBsYXRlID0gLyoqIEB0eXBlIHs/SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8oXG4gICAgICAgIG0ucXVlcnlTZWxlY3RvcigndGVtcGxhdGUnKSk7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBzdHlsZXMucHVzaCguLi5zdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsXG4gICAgICAgIC8qKiBAdHlwZSB7dGVtcGxhdGVXaXRoQXNzZXRQYXRofSAqLyhtKS5hc3NldHBhdGgpKTtcbiAgICB9XG5cbiAgICBtLl9zdHlsZXMgPSBzdHlsZXM7XG4gIH1cblxuICByZXR1cm4gbS5fc3R5bGVzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGA8c3R5bGU+YCBlbGVtZW50cyB3aXRoaW4gYSBnaXZlbiB0ZW1wbGF0ZS5cbiAqXG4gKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBnYXRoZXIgc3R5bGVzIGZyb21cbiAqIEBwYXJhbSB7c3RyaW5nPX0gYmFzZVVSSSBiYXNlVVJJIGZvciBzdHlsZSBjb250ZW50XG4gKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTdHlsZUVsZW1lbnQ+fSBBcnJheSBvZiBzdHlsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlc0Zyb21UZW1wbGF0ZSh0ZW1wbGF0ZSwgYmFzZVVSSSkge1xuICBpZiAoIXRlbXBsYXRlLl9zdHlsZXMpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBbXTtcbiAgICAvLyBpZiBlbGVtZW50IGlzIGEgdGVtcGxhdGUsIGdldCBjb250ZW50IGZyb20gaXRzIC5jb250ZW50XG4gICAgY29uc3QgZSQgPSB0ZW1wbGF0ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgZSQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlID0gZSRbaV07XG4gICAgICAvLyBzdXBwb3J0IHN0eWxlIHNoYXJpbmcgYnkgYWxsb3dpbmcgc3R5bGVzIHRvIFwiaW5jbHVkZVwiXG4gICAgICAvLyBvdGhlciBkb20tbW9kdWxlcyB0aGF0IGNvbnRhaW4gc3R5bGluZ1xuICAgICAgbGV0IGluY2x1ZGUgPSBlLmdldEF0dHJpYnV0ZShJTkNMVURFX0FUVFIpO1xuICAgICAgaWYgKGluY2x1ZGUpIHtcbiAgICAgICAgc3R5bGVzLnB1c2goLi4uc3R5bGVzRnJvbU1vZHVsZXMoaW5jbHVkZSkuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0sIGluZGV4LCBzZWxmKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZihpdGVtKSA9PT0gaW5kZXg7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlVVJJKSB7XG4gICAgICAgIGUudGV4dENvbnRlbnQgPVxuICAgICAgICAgICAgcmVzb2x2ZUNzcyhlLnRleHRDb250ZW50LCAvKiogQHR5cGUge3N0cmluZ30gKi8gKGJhc2VVUkkpKTtcbiAgICAgIH1cbiAgICAgIHN0eWxlcy5wdXNoKGUpO1xuICAgIH1cbiAgICB0ZW1wbGF0ZS5fc3R5bGVzID0gc3R5bGVzO1xuICB9XG4gIHJldHVybiB0ZW1wbGF0ZS5fc3R5bGVzO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIDxzdHlsZT4gZWxlbWVudHMgIGZyb20gc3R5bGVzaGVldHMgbG9hZGVkIHZpYSBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmAgbGlua3Mgd2l0aGluIHRoZSBzcGVjaWZpZWQgYGRvbS1tb2R1bGVgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBJZCBvZiBgZG9tLW1vZHVsZWAgdG8gZ2F0aGVyIENTUyBmcm9tXG4gKiBAcmV0dXJuIHshQXJyYXk8IUhUTUxTdHlsZUVsZW1lbnQ+fSBBcnJheSBvZiBjb250YWluZWQgc3R5bGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlSWQpIHtcbiBsZXQgbSA9IGltcG9ydE1vZHVsZShtb2R1bGVJZCk7XG4gcmV0dXJuIG0gPyBfc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMobSkgOiBbXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gbW9kdWxlIGRvbS1tb2R1bGUgZWxlbWVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5gIHN0eWxlc1xuICogQHJldHVybiB7IUFycmF5PCFIVE1MU3R5bGVFbGVtZW50Pn0gQXJyYXkgb2YgY29udGFpbmVkIHN0eWxlc1xuICovXG5mdW5jdGlvbiBfc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlKSB7XG4gIGNvbnN0IHN0eWxlcyA9IFtdO1xuICBjb25zdCBwJCA9IG1vZHVsZS5xdWVyeVNlbGVjdG9yQWxsKE1PRFVMRV9TVFlMRV9MSU5LX1NFTEVDVE9SKTtcbiAgZm9yIChsZXQgaT0wOyBpIDwgcCQubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcCA9IHAkW2ldO1xuICAgIGlmIChwLmltcG9ydCkge1xuICAgICAgY29uc3QgaW1wb3J0RG9jID0gcC5pbXBvcnQ7XG4gICAgICBjb25zdCB1bnNjb3BlZCA9IHAuaGFzQXR0cmlidXRlKFNIQURZX1VOU0NPUEVEX0FUVFIpO1xuICAgICAgaWYgKHVuc2NvcGVkICYmICFpbXBvcnREb2MuX3Vuc2NvcGVkU3R5bGUpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBzdHlsZUZvckltcG9ydChpbXBvcnREb2MpO1xuICAgICAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoU0hBRFlfVU5TQ09QRURfQVRUUiwgJycpO1xuICAgICAgICBpbXBvcnREb2MuX3Vuc2NvcGVkU3R5bGUgPSBzdHlsZTtcbiAgICAgIH0gZWxzZSBpZiAoIWltcG9ydERvYy5fc3R5bGUpIHtcbiAgICAgICAgaW1wb3J0RG9jLl9zdHlsZSA9IHN0eWxlRm9ySW1wb3J0KGltcG9ydERvYyk7XG4gICAgICB9XG4gICAgICBzdHlsZXMucHVzaCh1bnNjb3BlZCA/IGltcG9ydERvYy5fdW5zY29wZWRTdHlsZSA6IGltcG9ydERvYy5fc3R5bGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzO1xufVxuXG4vKipcbiAqXG4gKiBSZXR1cm5zIENTUyB0ZXh0IG9mIHN0eWxlcyBpbiBhIHNwYWNlLXNlcGFyYXRlZCBsaXN0IG9mIGBkb20tbW9kdWxlYHMuXG4gKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgYHN0eWxlc0Zyb21Nb2R1bGVzYCBpbnN0ZWFkLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSWRzIExpc3Qgb2YgZG9tLW1vZHVsZSBpZCdzIHdpdGhpbiB3aGljaCB0b1xuICogc2VhcmNoIGZvciBjc3MuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IENvbmNhdGVuYXRlZCBDU1MgY29udGVudCBmcm9tIHNwZWNpZmllZCBgZG9tLW1vZHVsZWBzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tTW9kdWxlcyhtb2R1bGVJZHMpIHtcbiBsZXQgbW9kdWxlcyA9IG1vZHVsZUlkcy50cmltKCkuc3BsaXQoL1xccysvKTtcbiBsZXQgY3NzVGV4dCA9ICcnO1xuIGZvciAobGV0IGk9MDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgIGNzc1RleHQgKz0gY3NzRnJvbU1vZHVsZShtb2R1bGVzW2ldKTtcbiB9XG4gcmV0dXJuIGNzc1RleHQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBDU1MgdGV4dCBvZiBzdHlsZXMgaW4gYSBnaXZlbiBgZG9tLW1vZHVsZWAuICBDU1MgaW4gYSBgZG9tLW1vZHVsZWBcbiAqIGNhbiBjb21lIGVpdGhlciBmcm9tIGA8c3R5bGU+YHMgd2l0aGluIHRoZSBmaXJzdCBgPHRlbXBsYXRlPmAsIG9yIGVsc2VcbiAqIGZyb20gb25lIG9yIG1vcmUgYDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5gIGxpbmtzIG91dHNpZGUgdGhlXG4gKiB0ZW1wbGF0ZS5cbiAqXG4gKiBBbnkgYDxzdHlsZXM+YCBwcm9jZXNzZWQgYXJlIHJlbW92ZWQgZnJvbSB0aGVpciBvcmlnaW5hbCBsb2NhdGlvbi5cbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVGcm9tTW9kdWxlYCBpbnN0ZWFkLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSWQgZG9tLW1vZHVsZSBpZCB0byBnYXRoZXIgc3R5bGVzIGZyb21cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gc3BlY2lmaWVkIGBkb20tbW9kdWxlYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3NzRnJvbU1vZHVsZShtb2R1bGVJZCkge1xuICBsZXQgbSA9IGltcG9ydE1vZHVsZShtb2R1bGVJZCk7XG4gIGlmIChtICYmIG0uX2Nzc1RleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIG1vZHVsZSBpbXBvcnRzOiA8bGluayByZWw9XCJpbXBvcnRcIiB0eXBlPVwiY3NzXCI+XG4gICAgbGV0IGNzc1RleHQgPSBfY3NzRnJvbU1vZHVsZUltcG9ydHMobSk7XG4gICAgLy8gaW5jbHVkZSBjc3MgZnJvbSB0aGUgZmlyc3QgdGVtcGxhdGUgaW4gdGhlIG1vZHVsZVxuICAgIGxldCB0ID0gLyoqIEB0eXBlIHs/SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8obS5xdWVyeVNlbGVjdG9yKCd0ZW1wbGF0ZScpKTtcbiAgICBpZiAodCkge1xuICAgICAgY3NzVGV4dCArPSBjc3NGcm9tVGVtcGxhdGUodCxcbiAgICAgICAgLyoqIEB0eXBlIHt0ZW1wbGF0ZVdpdGhBc3NldFBhdGh9ICovKG0pLmFzc2V0cGF0aCk7XG4gICAgfVxuICAgIG0uX2Nzc1RleHQgPSBjc3NUZXh0IHx8IG51bGw7XG4gIH1cbiAgaWYgKCFtKSB7XG4gICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCBzdHlsZSBkYXRhIGluIG1vZHVsZSBuYW1lZCcsIG1vZHVsZUlkKTtcbiAgfVxuICByZXR1cm4gbSAmJiBtLl9jc3NUZXh0IHx8ICcnO1xufVxuXG4vKipcbiAqIFJldHVybnMgQ1NTIHRleHQgb2YgYDxzdHlsZXM+YCB3aXRoaW4gYSBnaXZlbiB0ZW1wbGF0ZS5cbiAqXG4gKiBBbnkgYDxzdHlsZXM+YCBwcm9jZXNzZWQgYXJlIHJlbW92ZWQgZnJvbSB0aGVpciBvcmlnaW5hbCBsb2NhdGlvbi5cbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc3R5bGVGcm9tVGVtcGxhdGVgIGluc3RlYWQuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIGdhdGhlciBzdHlsZXMgZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkkgQmFzZSBVUkkgdG8gcmVzb2x2ZSB0aGUgVVJMIGFnYWluc3RcbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gc3BlY2lmaWVkIHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NGcm9tVGVtcGxhdGUodGVtcGxhdGUsIGJhc2VVUkkpIHtcbiAgbGV0IGNzc1RleHQgPSAnJztcbiAgY29uc3QgZSQgPSBzdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUsIGJhc2VVUkkpO1xuICAvLyBpZiBlbGVtZW50IGlzIGEgdGVtcGxhdGUsIGdldCBjb250ZW50IGZyb20gaXRzIC5jb250ZW50XG4gIGZvciAobGV0IGk9MDsgaSA8IGUkLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGUgPSBlJFtpXTtcbiAgICBpZiAoZS5wYXJlbnROb2RlKSB7XG4gICAgICBlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7XG4gICAgfVxuICAgIGNzc1RleHQgKz0gZS50ZXh0Q29udGVudDtcbiAgfVxuICByZXR1cm4gY3NzVGV4dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIENTUyB0ZXh0IGZyb20gc3R5bGVzaGVldHMgbG9hZGVkIHZpYSBgPGxpbmsgcmVsPVwiaW1wb3J0XCIgdHlwZT1cImNzc1wiPmBcbiAqIGxpbmtzIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGBkb20tbW9kdWxlYC5cbiAqXG4gKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLCB1c2UgYHN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzYCBpbnN0ZWFkLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIElkIG9mIGBkb20tbW9kdWxlYCB0byBnYXRoZXIgQ1NTIGZyb21cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIENTUyBjb250ZW50IGZyb20gbGlua3MgaW4gc3BlY2lmaWVkIGBkb20tbW9kdWxlYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3NzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlSWQpIHtcbiAgbGV0IG0gPSBpbXBvcnRNb2R1bGUobW9kdWxlSWQpO1xuICByZXR1cm4gbSA/IF9jc3NGcm9tTW9kdWxlSW1wb3J0cyhtKSA6ICcnO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gbW9kdWxlIGRvbS1tb2R1bGUgZWxlbWVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj5gIHN0eWxlc1xuICogQHJldHVybiB7c3RyaW5nfSBDb25jYXRlbmF0ZWQgQ1NTIGNvbnRlbnQgZnJvbSBsaW5rcyBpbiB0aGUgZG9tLW1vZHVsZVxuICovXG5mdW5jdGlvbiBfY3NzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlKSB7XG4gIGxldCBjc3NUZXh0ID0gJyc7XG4gIGxldCBzdHlsZXMgPSBfc3R5bGVzRnJvbU1vZHVsZUltcG9ydHMobW9kdWxlKTtcbiAgZm9yIChsZXQgaT0wOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY3NzVGV4dCArPSBzdHlsZXNbaV0udGV4dENvbnRlbnQ7XG4gIH1cbiAgcmV0dXJuIGNzc1RleHQ7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyAqL1xuLyoqXG4gKiBOb2RlIHdyYXBwZXIgdG8gZW5zdXJlIFNoYWRvd0RPTSBzYWZlIG9wZXJhdGlvbiByZWdhcmRsZXNzIG9mIHBvbHlmaWxsXG4gKiBwcmVzZW5jZSBvciBtb2RlLiBOb3RlIHRoYXQgd2l0aCB0aGUgaW50cm9kdWN0aW9uIG9mIGBTaGFkeURPTS5ub1BhdGNoYCxcbiAqIGEgbm9kZSB3cmFwcGVyIG11c3QgYmUgdXNlZCB0byBhY2Nlc3MgU2hhZG93RE9NIEFQSS5cbiAqIFRoaXMgaXMgc2ltaWxhciB0byB1c2luZyBgUG9seW1lci5kb21gIGJ1dCByZWxpZXMgZXhjbHVzaXZlbHlcbiAqIG9uIHRoZSBwcmVzZW5jZSBvZiB0aGUgU2hhZHlET00gcG9seWZpbGwgcmF0aGVyIHRoYW4gcmVxdWlyaW5nIHRoZSBsb2FkaW5nXG4gKiBvZiBsZWdhY3kgKFBvbHltZXIuZG9tKSBBUEkuXG4gKiBAdHlwZSB7ZnVuY3Rpb24oTm9kZSk6Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXAgPSAod2luZG93WydTaGFkeURPTSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnbm9QYXRjaCddICYmIHdpbmRvd1snU2hhZHlET00nXVsnd3JhcCddKSA/XG4gIHdpbmRvd1snU2hhZHlET00nXVsnd3JhcCddIDpcbiAgKHdpbmRvd1snU2hhZHlET00nXSA/IChuKSA9PiBTaGFkeURPTVsncGF0Y2gnXShuKSA6IChuKSA9PiBuKTtcblxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuLyoqXG4gKiBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBzdHJ1Y3R1cmVkIGRhdGEgcGF0aCBzdHJpbmdzLlxuICpcbiAqIEBzdW1tYXJ5IE1vZHVsZSB3aXRoIHV0aWxpdGllcyBmb3IgbWFuaXB1bGF0aW5nIHN0cnVjdHVyZWQgZGF0YSBwYXRoIHN0cmluZ3MuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyBhIHN0cnVjdHVyZWQgZGF0YSBwYXRoIChoYXMgZG90cykuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIGlzUGF0aCgnZm9vLmJhci5iYXonKSAvLyB0cnVlXG4gKiBpc1BhdGgoJ2ZvbycpICAgICAgICAgLy8gZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgY29udGFpbmVkIG9uZSBvciBtb3JlIGRvdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmluZGV4T2YoJy4nKSA+PSAwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJvb3QgcHJvcGVydHkgbmFtZSBmb3IgdGhlIGdpdmVuIHBhdGguXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIHJvb3QoJ2Zvby5iYXIuYmF6JykgLy8gJ2ZvbydcbiAqIHJvb3QoJ2ZvbycpICAgICAgICAgLy8gJ2ZvbydcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFJvb3QgcHJvcGVydHkgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm9vdChwYXRoKSB7XG4gIGxldCBkb3RJbmRleCA9IHBhdGguaW5kZXhPZignLicpO1xuICBpZiAoZG90SW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZG90SW5kZXgpO1xufVxuXG4vKipcbiAqIEdpdmVuIGBiYXNlYCBpcyBgZm9vLmJhcmAsIGBmb29gIGlzIGFuIGFuY2VzdG9yLCBgZm9vLmJhcmAgaXMgbm90XG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBhdGggaXMgYW4gYW5jZXN0b3Igb2YgdGhlIGJhc2UgcGF0aC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogaXNBbmNlc3RvcignZm9vLmJhcicsICdmb28nKSAgICAgICAgIC8vIHRydWVcbiAqIGlzQW5jZXN0b3IoJ2Zvby5iYXInLCAnZm9vLmJhcicpICAgICAvLyBmYWxzZVxuICogaXNBbmNlc3RvcignZm9vLmJhcicsICdmb28uYmFyLmJheicpIC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZSBQYXRoIHN0cmluZyB0byB0ZXN0IGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZyB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgcGF0aGAgaXMgYW4gYW5jZXN0b3Igb2YgYGJhc2VgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBbmNlc3RvcihiYXNlLCBwYXRoKSB7XG4gIC8vICAgICBiYXNlLnN0YXJ0c1dpdGgocGF0aCArICcuJyk7XG4gIHJldHVybiBiYXNlLmluZGV4T2YocGF0aCArICcuJykgPT09IDA7XG59XG5cbi8qKlxuICogR2l2ZW4gYGJhc2VgIGlzIGBmb28uYmFyYCwgYGZvby5iYXIuYmF6YCBpcyBhbiBkZXNjZW5kYW50XG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIGlzRGVzY2VuZGFudCgnZm9vLmJhcicsICdmb28uYmFyLmJheicpIC8vIHRydWVcbiAqIGlzRGVzY2VuZGFudCgnZm9vLmJhcicsICdmb28uYmFyJykgICAgIC8vIGZhbHNlXG4gKiBpc0Rlc2NlbmRhbnQoJ2Zvby5iYXInLCAnZm9vJykgICAgICAgICAvLyBmYWxzZVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2UgUGF0aCBzdHJpbmcgdG8gdGVzdCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBzdHJpbmcgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHBhdGhgIGlzIGEgZGVzY2VuZGFudCBvZiBgYmFzZWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Rlc2NlbmRhbnQoYmFzZSwgcGF0aCkge1xuICAvLyAgICAgcGF0aC5zdGFydHNXaXRoKGJhc2UgKyAnLicpO1xuICByZXR1cm4gcGF0aC5pbmRleE9mKGJhc2UgKyAnLicpID09PSAwO1xufVxuXG4vKipcbiAqIFJlcGxhY2VzIGEgcHJldmlvdXMgYmFzZSBwYXRoIHdpdGggYSBuZXcgYmFzZSBwYXRoLCBwcmVzZXJ2aW5nIHRoZVxuICogcmVtYWluZGVyIG9mIHRoZSBwYXRoLlxuICpcbiAqIFVzZXIgbXVzdCBlbnN1cmUgYHBhdGhgIGhhcyBhIHByZWZpeCBvZiBgYmFzZWAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIHRyYW5zbGF0ZSgnZm9vLmJhcicsICd6b3QnLCAnZm9vLmJhci5iYXonKSAvLyAnem90LmJheidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIEN1cnJlbnQgYmFzZSBzdHJpbmcgdG8gcmVtb3ZlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3QmFzZSBOZXcgYmFzZSBzdHJpbmcgdG8gcmVwbGFjZSB3aXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIHRyYW5zbGF0ZVxuICogQHJldHVybiB7c3RyaW5nfSBUcmFuc2xhdGVkIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKGJhc2UsIG5ld0Jhc2UsIHBhdGgpIHtcbiAgcmV0dXJuIG5ld0Jhc2UgKyBwYXRoLnNsaWNlKGJhc2UubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZSBQYXRoIHN0cmluZyB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggc3RyaW5nIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYHBhdGhgIGlzIGVxdWFsIHRvIGBiYXNlYFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hlcyhiYXNlLCBwYXRoKSB7XG4gIHJldHVybiAoYmFzZSA9PT0gcGF0aCkgfHxcbiAgICAgICAgIGlzQW5jZXN0b3IoYmFzZSwgcGF0aCkgfHxcbiAgICAgICAgIGlzRGVzY2VuZGFudChiYXNlLCBwYXRoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheS1iYXNlZCBwYXRocyB0byBmbGF0dGVuZWQgcGF0aC4gIFN0cmluZy1iYXNlZCBwYXRoc1xuICogYXJlIHJldHVybmVkIGFzLWlzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBub3JtYWxpemUoWydmb28uYmFyJywgMCwgJ2JheiddKSAgLy8gJ2Zvby5iYXIuMC5iYXonXG4gKiBub3JtYWxpemUoJ2Zvby5iYXIuMC5iYXonKSAgICAgICAgLy8gJ2Zvby5iYXIuMC5iYXonXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBJbnB1dCBwYXRoXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZsYXR0ZW5lZCBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgIGxldCBwYXJ0cyA9IFtdO1xuICAgIGZvciAobGV0IGk9MDsgaTxwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYXJncyA9IHBhdGhbaV0udG9TdHJpbmcoKS5zcGxpdCgnLicpO1xuICAgICAgZm9yIChsZXQgaj0wOyBqPGFyZ3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhcmdzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJy4nKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxufVxuXG4vKipcbiAqIFNwbGl0cyBhIHBhdGggaW50byBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy4gQWNjZXB0cyBlaXRoZXIgYXJyYXlzXG4gKiBvZiBwYXRoIHBhcnRzIG9yIHN0cmluZ3MuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIHNwbGl0KFsnZm9vLmJhcicsIDAsICdiYXonXSkgIC8vIFsnZm9vJywgJ2JhcicsICcwJywgJ2JheiddXG4gKiBzcGxpdCgnZm9vLmJhci4wLmJheicpICAgICAgICAvLyBbJ2ZvbycsICdiYXInLCAnMCcsICdiYXonXVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggSW5wdXQgcGF0aFxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59IEFycmF5IG9mIHBhdGggcGFydHNcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0KHBhdGgpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplKHBhdGgpLnNwbGl0KCcuJyk7XG4gIH1cbiAgcmV0dXJuIHBhdGgudG9TdHJpbmcoKS5zcGxpdCgnLicpO1xufVxuXG4vKipcbiAqIFJlYWRzIGEgdmFsdWUgZnJvbSBhIHBhdGguICBJZiBhbnkgc3ViLXByb3BlcnR5IGluIHRoZSBwYXRoIGlzIGB1bmRlZmluZWRgLFxuICogdGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYCAod2lsbCBuZXZlciB0aHJvdy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcm9vdCBPYmplY3QgZnJvbSB3aGljaCB0byBkZXJlZmVyZW5jZSBwYXRoIGZyb21cbiAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gcmVhZFxuICogQHBhcmFtIHtPYmplY3Q9fSBpbmZvIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCB0byBgaW5mb2AsIHRoZSBub3JtYWxpemVkXG4gKiAgKGZsYXR0ZW5lZCkgcGF0aCB3aWxsIGJlIHNldCB0byBgaW5mby5wYXRoYC5cbiAqIEByZXR1cm4geyp9IFZhbHVlIGF0IHBhdGgsIG9yIGB1bmRlZmluZWRgIGlmIHRoZSBwYXRoIGNvdWxkIG5vdCBiZVxuICogIGZ1bGx5IGRlcmVmZXJlbmNlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChyb290LCBwYXRoLCBpbmZvKSB7XG4gIGxldCBwcm9wID0gcm9vdDtcbiAgbGV0IHBhcnRzID0gc3BsaXQocGF0aCk7XG4gIC8vIExvb3Agb3ZlciBwYXRoIHBhcnRzWzAuLm4tMV0gYW5kIGRlcmVmZXJlbmNlXG4gIGZvciAobGV0IGk9MDsgaTxwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghcHJvcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGFydCA9IHBhcnRzW2ldO1xuICAgIHByb3AgPSBwcm9wW3BhcnRdO1xuICB9XG4gIGlmIChpbmZvKSB7XG4gICAgaW5mby5wYXRoID0gcGFydHMuam9pbignLicpO1xuICB9XG4gIHJldHVybiBwcm9wO1xufVxuXG4vKipcbiAqIFNldHMgYSB2YWx1ZSB0byBhIHBhdGguICBJZiBhbnkgc3ViLXByb3BlcnR5IGluIHRoZSBwYXRoIGlzIGB1bmRlZmluZWRgLFxuICogdGhpcyBtZXRob2Qgd2lsbCBuby1vcC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcm9vdCBPYmplY3QgZnJvbSB3aGljaCB0byBkZXJlZmVyZW5jZSBwYXRoIGZyb21cbiAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gc2V0XG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldCB0byBwYXRoXG4gKiBAcmV0dXJuIHtzdHJpbmcgfCB1bmRlZmluZWR9IFRoZSBub3JtYWxpemVkIHZlcnNpb24gb2YgdGhlIGlucHV0IHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChyb290LCBwYXRoLCB2YWx1ZSkge1xuICBsZXQgcHJvcCA9IHJvb3Q7XG4gIGxldCBwYXJ0cyA9IHNwbGl0KHBhdGgpO1xuICBsZXQgbGFzdCA9IHBhcnRzW3BhcnRzLmxlbmd0aC0xXTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAvLyBMb29wIG92ZXIgcGF0aCBwYXJ0c1swLi5uLTJdIGFuZCBkZXJlZmVyZW5jZVxuICAgIGZvciAobGV0IGk9MDsgaTxwYXJ0cy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICBsZXQgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgcHJvcCA9IHByb3BbcGFydF07XG4gICAgICBpZiAoIXByb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBTZXQgdmFsdWUgdG8gb2JqZWN0IGF0IGVuZCBvZiBwYXRoXG4gICAgcHJvcFtsYXN0XSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIFNpbXBsZSBwcm9wZXJ0eSBzZXRcbiAgICBwcm9wW3BhdGhdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJy4nKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyBhIHN0cnVjdHVyZWQgZGF0YSBwYXRoIChoYXMgZG90cykuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLiAgVXNlIGBpc1BhdGhgIGluc3RlYWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBcbiAqIGlzRGVlcCgnZm9vLmJhci5iYXonKSAvLyB0cnVlXG4gKiBpc0RlZXAoJ2ZvbycpICAgICAgICAgLy8gZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHN0cmluZ1xuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3RyaW5nIGNvbnRhaW5lZCBvbmUgb3IgbW9yZSBkb3RzXG4gKi9cbmV4cG9ydCBjb25zdCBpc0RlZXAgPSBpc1BhdGg7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG5jb25zdCBjYXNlTWFwID0ge307XG5jb25zdCBEQVNIX1RPX0NBTUVMID0gLy1bYS16XS9nO1xuY29uc3QgQ0FNRUxfVE9fREFTSCA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBNb2R1bGUgd2l0aCB1dGlsaXRpZXMgZm9yIGNvbnZlcnRpbmcgYmV0d2VlbiBcImRhc2gtY2FzZVwiIGFuZFxuICogXCJjYW1lbENhc2VcIiBpZGVudGlmaWVycy5cbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIFwiZGFzaC1jYXNlXCIgaWRlbnRpZmllciAoZS5nLiBgZm9vLWJhci1iYXpgKSB0byBcImNhbWVsQ2FzZVwiXG4gKiAoZS5nLiBgZm9vQmFyQmF6YCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhc2ggRGFzaC1jYXNlIGlkZW50aWZpZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gQ2FtZWwtY2FzZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgaWRlbnRpZmllclxuICovXG5leHBvcnQgZnVuY3Rpb24gZGFzaFRvQ2FtZWxDYXNlKGRhc2gpIHtcbiAgcmV0dXJuIGNhc2VNYXBbZGFzaF0gfHwgKFxuICAgIGNhc2VNYXBbZGFzaF0gPSBkYXNoLmluZGV4T2YoJy0nKSA8IDAgPyBkYXNoIDogZGFzaC5yZXBsYWNlKERBU0hfVE9fQ0FNRUwsXG4gICAgICAobSkgPT4gbVsxXS50b1VwcGVyQ2FzZSgpXG4gICAgKVxuICApO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIFwiY2FtZWxDYXNlXCIgaWRlbnRpZmllciAoZS5nLiBgZm9vQmFyQmF6YCkgdG8gXCJkYXNoLWNhc2VcIlxuICogKGUuZy4gYGZvby1iYXItYmF6YCkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhbWVsIENhbWVsLWNhc2UgaWRlbnRpZmllclxuICogQHJldHVybiB7c3RyaW5nfSBEYXNoLWNhc2UgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlkZW50aWZpZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsVG9EYXNoQ2FzZShjYW1lbCkge1xuICByZXR1cm4gY2FzZU1hcFtjYW1lbF0gfHwgKFxuICAgIGNhc2VNYXBbY2FtZWxdID0gY2FtZWwucmVwbGFjZShDQU1FTF9UT19EQVNILCAnLSQxJykudG9Mb3dlckNhc2UoKVxuICApO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYSBudW1iZXIgb2Ygc3RyYXRlZ2llcyBmb3IgZW5xdWV1aW5nIGFzeW5jaHJvbm91c1xuICogdGFza3MuIEVhY2ggc3ViLW1vZHVsZSBwcm92aWRlcyBhIHN0YW5kYXJkIGBydW4oZm4pYCBpbnRlcmZhY2UgdGhhdCByZXR1cm5zIGFcbiAqIGhhbmRsZSwgYW5kIGEgYGNhbmNlbChoYW5kbGUpYCBpbnRlcmZhY2UgZm9yIGNhbmNlbGluZyBhc3luYyB0YXNrcyBiZWZvcmVcbiAqIHRoZXkgcnVuLlxuICpcbiAqIEBzdW1tYXJ5IE1vZHVsZSB0aGF0IHByb3ZpZGVzIGEgbnVtYmVyIG9mIHN0cmF0ZWdpZXMgZm9yIGVucXVldWluZ1xuICogYXN5bmNocm9ub3VzIHRhc2tzLlxuICovXG5cbmltcG9ydCAnLi9ib290LmpzJztcblxuLy8gTWljcm90YXNrIGltcGxlbWVudGVkIHVzaW5nIE11dGF0aW9uIE9ic2VydmVyXG5sZXQgbWljcm90YXNrQ3VyckhhbmRsZSA9IDA7XG5sZXQgbWljcm90YXNrTGFzdEhhbmRsZSA9IDA7XG5sZXQgbWljcm90YXNrQ2FsbGJhY2tzID0gW107XG5sZXQgbWljcm90YXNrTm9kZUNvbnRlbnQgPSAwO1xubGV0IG1pY3JvdGFza05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG5uZXcgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIobWljcm90YXNrRmx1c2gpLm9ic2VydmUobWljcm90YXNrTm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTtcblxuZnVuY3Rpb24gbWljcm90YXNrRmx1c2goKSB7XG4gIGNvbnN0IGxlbiA9IG1pY3JvdGFza0NhbGxiYWNrcy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBsZXQgY2IgPSBtaWNyb3Rhc2tDYWxsYmFja3NbaV07XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhyb3cgZTsgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG1pY3JvdGFza0NhbGxiYWNrcy5zcGxpY2UoMCwgbGVuKTtcbiAgbWljcm90YXNrTGFzdEhhbmRsZSArPSBsZW47XG59XG5cbi8qKlxuICogQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGBzZXRUaW1lb3V0YC5cbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAc3VtbWFyeSBBc3luYyBpbnRlcmZhY2Ugd3JhcHBlciBhcm91bmQgYHNldFRpbWVvdXRgLlxuICovXG5jb25zdCB0aW1lT3V0ID0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIHN1Yi1tb2R1bGUgd2l0aCB0aGUgYXN5bmMgaW50ZXJmYWNlIHByb3ZpZGluZyB0aGUgcHJvdmlkZWRcbiAgICogZGVsYXkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiB0aW1lT3V0XG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gZGVsYXkgVGltZSB0byB3YWl0IGJlZm9yZSBjYWxsaW5nIGNhbGxiYWNrcyBpbiBtc1xuICAgKiBAcmV0dXJuIHshQXN5bmNJbnRlcmZhY2V9IEFuIGFzeW5jIHRpbWVvdXQgaW50ZXJmYWNlXG4gICAqL1xuICBhZnRlcihkZWxheSkge1xuICAgIHJldHVybiB7XG4gICAgICBydW4oZm4pIHsgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCBkZWxheSk7IH0sXG4gICAgICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgaW4gdGhlIG5leHQgdGFzay5cbiAgICpcbiAgICogQG1lbWJlcm9mIHRpbWVPdXRcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGZuIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcGFyYW0ge251bWJlcj19IGRlbGF5IERlbGF5IGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGZuLCBkZWxheSkge1xuICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChmbiwgZGVsYXkpO1xuICB9LFxuICAvKipcbiAgICogQ2FuY2VscyBhIHByZXZpb3VzbHkgZW5xdWV1ZWQgYHRpbWVPdXRgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgdGltZU91dFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFuZGxlIEhhbmRsZSByZXR1cm5lZCBmcm9tIGBydW5gIG9mIGNhbGxiYWNrIHRvIGNhbmNlbFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgY2FuY2VsKGhhbmRsZSkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcbiAgfVxufTtcbmV4cG9ydCB7dGltZU91dH07XG5cbi8qKlxuICogQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqIEBzdW1tYXJ5IEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYC5cbiAqL1xuY29uc3QgYW5pbWF0aW9uRnJhbWUgPSB7XG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBhIGZ1bmN0aW9uIGNhbGxlZCBhdCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCB0aW1pbmcuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBhbmltYXRpb25GcmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik6dm9pZH0gZm4gQ2FsbGJhY2sgdG8gcnVuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAqL1xuICBydW4oZm4pIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmbik7XG4gIH0sXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgYW5pbWF0aW9uRnJhbWVgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgYW5pbWF0aW9uRnJhbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbmRsZSBIYW5kbGUgcmV0dXJuZWQgZnJvbSBgcnVuYCBvZiBjYWxsYmFjayB0byBjYW5jZWxcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGNhbmNlbChoYW5kbGUpIHtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaGFuZGxlKTtcbiAgfVxufTtcbmV4cG9ydCB7YW5pbWF0aW9uRnJhbWV9O1xuXG4vKipcbiAqIEFzeW5jIGludGVyZmFjZSB3cmFwcGVyIGFyb3VuZCBgcmVxdWVzdElkbGVDYWxsYmFja2AuICBGYWxscyBiYWNrIHRvXG4gKiBgc2V0VGltZW91dGAgb24gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBgcmVxdWVzdElkbGVDYWxsYmFja2AuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIHdyYXBwZXIgYXJvdW5kIGByZXF1ZXN0SWRsZUNhbGxiYWNrYC5cbiAqL1xuY29uc3QgaWRsZVBlcmlvZCA9IHtcbiAgLyoqXG4gICAqIEVucXVldWVzIGEgZnVuY3Rpb24gY2FsbGVkIGF0IGByZXF1ZXN0SWRsZUNhbGxiYWNrYCB0aW1pbmcuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBpZGxlUGVyaW9kXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUlkbGVEZWFkbGluZSk6dm9pZH0gZm4gQ2FsbGJhY2sgdG8gcnVuXG4gICAqIEByZXR1cm4ge251bWJlcn0gSGFuZGxlIHVzZWQgZm9yIGNhbmNlbGluZyB0YXNrXG4gICAqL1xuICBydW4oZm4pIHtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgP1xuICAgICAgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soZm4pIDpcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCAxNik7XG4gIH0sXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgcHJldmlvdXNseSBlbnF1ZXVlZCBgaWRsZVBlcmlvZGAgY2FsbGJhY2suXG4gICAqXG4gICAqIEBtZW1iZXJvZiBpZGxlUGVyaW9kXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gYHJ1bmAgb2YgY2FsbGJhY2sgdG8gY2FuY2VsXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayA/XG4gICAgICB3aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrKGhhbmRsZSkgOlxuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUpO1xuICB9XG59O1xuZXhwb3J0IHtpZGxlUGVyaW9kfTtcblxuLyoqXG4gKiBBc3luYyBpbnRlcmZhY2UgZm9yIGVucXVldWluZyBjYWxsYmFja3MgdGhhdCBydW4gYXQgbWljcm90YXNrIHRpbWluZy5cbiAqXG4gKiBOb3RlIHRoYXQgbWljcm90YXNrIHRpbWluZyBpcyBhY2hpZXZlZCB2aWEgYSBzaW5nbGUgYE11dGF0aW9uT2JzZXJ2ZXJgLFxuICogYW5kIHRodXMgY2FsbGJhY2tzIGVucXVldWVkIHdpdGggdGhpcyBBUEkgd2lsbCBhbGwgcnVuIGluIGEgc2luZ2xlXG4gKiBiYXRjaCwgYW5kIG5vdCBpbnRlcmxlYXZlZCB3aXRoIG90aGVyIG1pY3JvdGFza3Mgc3VjaCBhcyBwcm9taXNlcy5cbiAqIFByb21pc2VzIGFyZSBhdm9pZGVkIGFzIGFuIGltcGxlbWVudGF0aW9uIGNob2ljZSBmb3IgdGhlIHRpbWUgYmVpbmdcbiAqIGR1ZSB0byBTYWZhcmkgYnVncyB0aGF0IGNhdXNlIFByb21pc2VzIHRvIGxhY2sgbWljcm90YXNrIGd1YXJhbnRlZXMuXG4gKlxuICogQG5hbWVzcGFjZVxuICogQHN1bW1hcnkgQXN5bmMgaW50ZXJmYWNlIGZvciBlbnF1ZXVpbmcgY2FsbGJhY2tzIHRoYXQgcnVuIGF0IG1pY3JvdGFza1xuICogICB0aW1pbmcuXG4gKi9cbmNvbnN0IG1pY3JvVGFzayA9IHtcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBmdW5jdGlvbiBjYWxsZWQgYXQgbWljcm90YXNrIHRpbWluZy5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1pY3JvVGFza1xuICAgKiBAcGFyYW0geyFGdW5jdGlvbj19IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1blxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEhhbmRsZSB1c2VkIGZvciBjYW5jZWxpbmcgdGFza1xuICAgKi9cbiAgcnVuKGNhbGxiYWNrKSB7XG4gICAgbWljcm90YXNrTm9kZS50ZXh0Q29udGVudCA9IG1pY3JvdGFza05vZGVDb250ZW50Kys7XG4gICAgbWljcm90YXNrQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBtaWNyb3Rhc2tDdXJySGFuZGxlKys7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbmNlbHMgYSBwcmV2aW91c2x5IGVucXVldWVkIGBtaWNyb1Rhc2tgIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbWljcm9UYXNrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYW5kbGUgSGFuZGxlIHJldHVybmVkIGZyb20gYHJ1bmAgb2YgY2FsbGJhY2sgdG8gY2FuY2VsXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoaGFuZGxlKSB7XG4gICAgY29uc3QgaWR4ID0gaGFuZGxlIC0gbWljcm90YXNrTGFzdEhhbmRsZTtcbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGlmICghbWljcm90YXNrQ2FsbGJhY2tzW2lkeF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFzeW5jIGhhbmRsZTogJyArIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBtaWNyb3Rhc2tDYWxsYmFja3NbaWR4XSA9IG51bGw7XG4gICAgfVxuICB9XG5cbn07XG5leHBvcnQge21pY3JvVGFza307XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgZGVkdXBpbmdNaXhpbiB9IGZyb20gJy4uL3V0aWxzL21peGluLmpzJztcbmltcG9ydCB7IG1pY3JvVGFzayB9IGZyb20gJy4uL3V0aWxzL2FzeW5jLmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcblxuLyoqIEBjb25zdCB7IUFzeW5jSW50ZXJmYWNlfSAqL1xuY29uc3QgbWljcm90YXNrID0gbWljcm9UYXNrO1xuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyBtZXRhLXByb2dyYW1taW5nIGZvciBjcmVhdGluZyBvbmVcbiAqIG9yIG1vcmUgcHJvcGVydHkgYWNjZXNzb3JzIChnZXR0ZXIvc2V0dGVyIHBhaXIpIHRoYXQgZW5xdWV1ZSBhbiBhc3luY1xuICogKGJhdGNoZWQpIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICpcbiAqIEZvciBiYXNpYyB1c2FnZSBvZiB0aGlzIG1peGluLCBjYWxsIGBNeUNsYXNzLmNyZWF0ZVByb3BlcnRpZXMocHJvcHMpYFxuICogb25jZSBhdCBjbGFzcyBkZWZpbml0aW9uIHRpbWUgdG8gY3JlYXRlIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgcHJvcGVydGllc1xuICogbmFtZWQgaW4gcHJvcHMsIGltcGxlbWVudCBgX3Byb3BlcnRpZXNDaGFuZ2VkYCB0byByZWFjdCBhcyBkZXNpcmVkIHRvXG4gKiBwcm9wZXJ0eSBjaGFuZ2VzLCBhbmQgaW1wbGVtZW50IGBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpYCBhbmRcbiAqIGluY2x1ZGUgbG93ZXJjYXNlIHZlcnNpb25zIG9mIGFueSBwcm9wZXJ0eSBuYW1lcyB0aGF0IHNob3VsZCBiZSBzZXQgZnJvbVxuICogYXR0cmlidXRlcy4gTGFzdCwgY2FsbCBgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpYCBpbiB0aGUgZWxlbWVudCdzXG4gKiBgY29ubmVjdGVkQ2FsbGJhY2tgIHRvIGVuYWJsZSB0aGUgYWNjZXNzb3JzLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQHN1bW1hcnkgRWxlbWVudCBjbGFzcyBtaXhpbiBmb3IgcmVhY3RpbmcgdG8gcHJvcGVydHkgY2hhbmdlcyBmcm9tXG4gKiAgIGdlbmVyYXRlZCBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgUHJvcGVydGllc0NoYW5nZWQgPSBkZWR1cGluZ01peGluKFxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIHdpdGggbWl4aW4gYXBwbGllZC5cbiAgICAgKi9cbiAgICAoc3VwZXJDbGFzcykgPT4ge1xuXG4gIC8qKlxuICAgKiBAcG9seW1lclxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgUHJvcGVydGllc0NoYW5nZWQgZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgcHJvcGVydHkgYWNjZXNzb3JzIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBwcm9wcyBPYmplY3Qgd2hvc2Uga2V5cyBhcmUgbmFtZXMgb2YgYWNjZXNzb3JzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgIGNvbnN0IHByb3RvID0gdGhpcy5wcm90b3R5cGU7XG4gICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgIC8vIGRvbid0IHN0b21wIGFuIGV4aXN0aW5nIGFjY2Vzc29yXG4gICAgICAgIGlmICghKHByb3AgaW4gcHJvdG8pKSB7XG4gICAgICAgICAgcHJvdG8uX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3IocHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSBuYW1lIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIFRoZSBhdHRyaWJ1dGUgbmFtZSBpcyB0aGUgbG93ZXJjYXNlZCBwcm9wZXJ0eSBuYW1lLiBPdmVycmlkZSB0b1xuICAgICAqIGN1c3RvbWl6ZSB0aGlzIG1hcHBpbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEF0dHJpYnV0ZSBuYW1lIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5LnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgcG9pbnQgdG8gcHJvdmlkZSBhIHR5cGUgdG8gd2hpY2ggdG8gZGVzZXJpYWxpemUgYSB2YWx1ZSB0b1xuICAgICAqIGEgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eVxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIHR5cGVGb3JQcm9wZXJ0eShuYW1lKSB7IH0gLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0dGVyL2dldHRlciBwYWlyIGZvciB0aGUgbmFtZWQgcHJvcGVydHkgd2l0aCBpdHMgb3duXG4gICAgICogbG9jYWwgc3RvcmFnZS4gIFRoZSBnZXR0ZXIgcmV0dXJucyB0aGUgdmFsdWUgaW4gdGhlIGxvY2FsIHN0b3JhZ2UsXG4gICAgICogYW5kIHRoZSBzZXR0ZXIgY2FsbHMgYF9zZXRQcm9wZXJ0eWAsIHdoaWNoIHVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICAgKiBmb3IgdGhlIHByb3BlcnR5IGFuZCBlbnF1ZXVlcyBhIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBvbiBhIHByb3RvdHlwZSBvciBhbiBpbnN0YW5jZS4gIENhbGxpbmdcbiAgICAgKiB0aGlzIG1ldGhvZCBtYXkgb3ZlcndyaXRlIGEgcHJvcGVydHkgdmFsdWUgdGhhdCBhbHJlYWR5IGV4aXN0cyBvblxuICAgICAqIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgYnkgY3JlYXRpbmcgdGhlIGFjY2Vzc29yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVhZE9ubHkgV2hlbiB0cnVlLCBubyBzZXR0ZXIgaXMgY3JlYXRlZDsgdGhlXG4gICAgICogICBwcm90ZWN0ZWQgYF9zZXRQcm9wZXJ0eWAgZnVuY3Rpb24gbXVzdCBiZSB1c2VkIHRvIHNldCB0aGUgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgcmVhZE9ubHkpIHtcbiAgICAgIHRoaXMuX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocHJvcGVydHkpO1xuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19fZGF0YUhhc0FjY2Vzc29yJywgdGhpcykpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhSGFzQWNjZXNzb3IgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yKTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0pIHtcbiAgICAgICAgdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV0gPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gYHByb3BlcnR5YCB0byBhIG1hcCBtYXRjaGluZyBhdHRyaWJ1dGUgbmFtZXNcbiAgICAgKiB0byBwcm9wZXJ0eSBuYW1lcywgdXNpbmcgYGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eWAuIFRoaXMgbWFwIGlzXG4gICAgICogdXNlZCB3aGVuIGRlc2VyaWFsaXppbmcgYXR0cmlidXRlIHZhbHVlcyB0byBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2FkZFByb3BlcnR5VG9BdHRyaWJ1dGVNYXAocHJvcGVydHkpIHtcbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX2RhdGFBdHRyaWJ1dGVzJywgdGhpcykpKSB7XG4gICAgICAgIHRoaXMuX19kYXRhQXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX19kYXRhQXR0cmlidXRlcyk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuX19kYXRhQXR0cmlidXRlc1twcm9wZXJ0eV0pIHtcbiAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgICAgdGhpcy5fX2RhdGFBdHRyaWJ1dGVzW2F0dHJdID0gcHJvcGVydHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIHByb3BlcnR5IGFjY2Vzc29yIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmVhZE9ubHkgV2hlbiB0cnVlLCBubyBzZXR0ZXIgaXMgY3JlYXRlZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgIF9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BlcnR5LCB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHZhbGlkLWpzZG9jICovXG4gICAgICAgIC8qKiBAdGhpcyB7UHJvcGVydGllc0NoYW5nZWR9ICovXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHRoaXMge1Byb3BlcnRpZXNDaGFuZ2VkfSAqL1xuICAgICAgICBzZXQ6IHJlYWRPbmx5ID8gZnVuY3Rpb24gKCkge30gOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuX19kYXRhRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGFSZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGFJbnZhbGlkID0gZmFsc2U7XG4gICAgICB0aGlzLl9fZGF0YSA9IHt9O1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhT2xkID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyA9IG51bGw7XG4gICAgICB0aGlzLl9fc2VyaWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVQcm9wZXJ0aWVzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlmZWN5Y2xlIGNhbGxiYWNrIGNhbGxlZCB3aGVuIHByb3BlcnRpZXMgYXJlIGVuYWJsZWQgdmlhXG4gICAgICogYF9lbmFibGVQcm9wZXJ0aWVzYC5cbiAgICAgKlxuICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIHRvIGltcGxlbWVudCBiZWhhdmlvciB0aGF0IGlzXG4gICAgICogZGVwZW5kZW50IG9uIHRoZSBlbGVtZW50IGhhdmluZyBpdHMgcHJvcGVydHkgZGF0YSBpbml0aWFsaXplZCwgZS5nLlxuICAgICAqIGZyb20gZGVmYXVsdHMgKGluaXRpYWxpemVkIGZyb20gYGNvbnN0cnVjdG9yYCwgYF9pbml0aWFsaXplUHJvcGVydGllc2ApLFxuICAgICAqIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLCBvciB2YWx1ZXMgcHJvcGFnYXRlZCBmcm9tIGhvc3QgZS5nLiB2aWFcbiAgICAgKiBiaW5kaW5ncy4gIGBzdXBlci5yZWFkeSgpYCBtdXN0IGJlIGNhbGxlZCB0byBlbnN1cmUgdGhlIGRhdGEgc3lzdGVtXG4gICAgICogYmVjb21lcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICB0aGlzLl9fZGF0YVJlYWR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBsb2NhbCBzdG9yYWdlIGZvciBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICpcbiAgICAgKiBQcm92aWRlZCBhcyBhbiBvdmVycmlkZSBwb2ludCBmb3IgcGVyZm9ybWluZyBhbnkgc2V0dXAgd29yayBwcmlvclxuICAgICAqIHRvIGluaXRpYWxpemluZyB0aGUgcHJvcGVydHkgYWNjZXNzb3Igc3lzdGVtLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm9wZXJ0aWVzKCkge1xuICAgICAgLy8gQ2FwdHVyZSBpbnN0YW5jZSBwcm9wZXJ0aWVzOyB0aGVzZSB3aWxsIGJlIHNldCBpbnRvIGFjY2Vzc29yc1xuICAgICAgLy8gZHVyaW5nIGZpcnN0IGZsdXNoLiBEb24ndCBzZXQgdGhlbSBoZXJlLCBzaW5jZSB3ZSB3YW50XG4gICAgICAvLyB0aGVzZSB0byBvdmVyd3JpdGUgZGVmYXVsdHMvY29uc3RydWN0b3IgYXNzaWdubWVudHNcbiAgICAgIGZvciAobGV0IHAgaW4gdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcikge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyA9IHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcyB8fCB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHNbcF0gPSB0aGlzW3BdO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzW3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGF0IHJlYWR5IHRpbWUgd2l0aCBiYWcgb2YgaW5zdGFuY2UgcHJvcGVydGllcyB0aGF0IG92ZXJ3cm90ZVxuICAgICAqIGFjY2Vzc29ycyB3aGVuIHRoZSBlbGVtZW50IHVwZ3JhZGVkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2V0cyB0aGVzZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGVcbiAgICAgKiBzZXR0ZXIgYXQgcmVhZHkgdGltZS4gIFRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGFuIG92ZXJyaWRlXG4gICAgICogcG9pbnQgZm9yIGN1c3RvbWl6aW5nIG9yIHByb3ZpZGluZyBtb3JlIGVmZmljaWVudCBpbml0aWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgcHJvcGVydHkgdmFsdWVzIHRoYXQgd2VyZSBvdmVyd3JpdHRlblxuICAgICAqICAgd2hlbiBjcmVhdGluZyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2UgZm9yIGEgcHJvcGVydHkgKHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWApXG4gICAgICogYW5kIGVucXVldWVzIGEgYF9wcm9lcHJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcGVydHksIHZhbHVlKSkge1xuICAgICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9nZXRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGxvY2FsIHN0b3JhZ2UgZm9yIGEgcHJvcGVydHksIHJlY29yZHMgdGhlIHByZXZpb3VzIHZhbHVlLFxuICAgICAqIGFuZCBhZGRzIGl0IHRvIHRoZSBzZXQgb2YgXCJwZW5kaW5nIGNoYW5nZXNcIiB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLiAgVGhpcyBtZXRob2QgZG9lcyBub3QgZW5xdWV1ZSB0aGVcbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZXh0IE5vdCB1c2VkIGhlcmU7IGFmZm9yZGFuY2UgZm9yIGNsb3N1cmVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIGV4dCkge1xuICAgICAgbGV0IG9sZCA9IHRoaXMuX19kYXRhW3Byb3BlcnR5XTtcbiAgICAgIGxldCBjaGFuZ2VkID0gdGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBvbGQpO1xuICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmcgPSB7fTtcbiAgICAgICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBvbGQgaXMgY2FwdHVyZWQgZnJvbSB0aGUgbGFzdCB0dXJuXG4gICAgICAgIGlmICh0aGlzLl9fZGF0YU9sZCAmJiAhKHByb3BlcnR5IGluIHRoaXMuX19kYXRhT2xkKSkge1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkW3Byb3BlcnR5XSA9IG9sZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgKi9cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBwcm9wZXJ0aWVzIGFzIGludmFsaWQsIGFuZCBlbnF1ZXVlcyBhbiBhc3luY1xuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKCF0aGlzLl9fZGF0YUludmFsaWQgJiYgdGhpcy5fX2RhdGFSZWFkeSkge1xuICAgICAgICB0aGlzLl9fZGF0YUludmFsaWQgPSB0cnVlO1xuICAgICAgICBtaWNyb3Rhc2sucnVuKCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5fX2RhdGFJbnZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGF0YUludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoUHJvcGVydGllcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCB0byBlbmFibGUgcHJvcGVydHkgYWNjZXNzb3IgcHJvY2Vzc2luZy4gQmVmb3JlIHRoaXMgbWV0aG9kIGlzXG4gICAgICogY2FsbGVkIGFjY2Vzc29yIHZhbHVlcyB3aWxsIGJlIHNldCBidXQgc2lkZSBlZmZlY3RzIGFyZVxuICAgICAqIHF1ZXVlZC4gV2hlbiBjYWxsZWQsIGFueSBwZW5kaW5nIHNpZGUgZWZmZWN0cyBvY2N1ciBpbW1lZGlhdGVseS5cbiAgICAgKiBGb3IgZWxlbWVudHMsIGdlbmVyYWxseSBgY29ubmVjdGVkQ2FsbGJhY2tgIGlzIGEgbm9ybWFsIHNwb3QgdG8gZG8gc28uXG4gICAgICogSXQgaXMgc2FmZSB0byBjYWxsIHRoaXMgbWV0aG9kIG11bHRpcGxlIHRpbWVzIGFzIGl0IG9ubHkgdHVybnMgb25cbiAgICAgKiBwcm9wZXJ0eSBhY2Nlc3NvcnMgb25jZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9lbmFibGVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKCF0aGlzLl9fZGF0YUVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19kYXRhSW5zdGFuY2VQcm9wcykge1xuICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVJbnN0YW5jZVByb3BlcnRpZXModGhpcy5fX2RhdGFJbnN0YW5jZVByb3BzKTtcbiAgICAgICAgICB0aGlzLl9fZGF0YUluc3RhbmNlUHJvcHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVhZHkoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxscyB0aGUgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2sgd2l0aCB0aGUgY3VycmVudCBzZXQgb2ZcbiAgICAgKiBwZW5kaW5nIGNoYW5nZXMgKGFuZCBvbGQgdmFsdWVzIHJlY29yZGVkIHdoZW4gcGVuZGluZyBjaGFuZ2VzIHdlcmVcbiAgICAgKiBzZXQpLCBhbmQgcmVzZXRzIHRoZSBwZW5kaW5nIHNldCBvZiBjaGFuZ2VzLiBHZW5lcmFsbHksIHRoaXMgbWV0aG9kXG4gICAgICogc2hvdWxkIG5vdCBiZSBjYWxsZWQgaW4gdXNlciBjb2RlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2ZsdXNoUHJvcGVydGllcygpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5fX2RhdGE7XG4gICAgICBjb25zdCBjaGFuZ2VkUHJvcHMgPSB0aGlzLl9fZGF0YVBlbmRpbmc7XG4gICAgICBjb25zdCBvbGQgPSB0aGlzLl9fZGF0YU9sZDtcbiAgICAgIGlmICh0aGlzLl9zaG91bGRQcm9wZXJ0aWVzQ2hhbmdlKHByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZCkpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2RhdGFPbGQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzQ2hhbmdlZChwcm9wcywgY2hhbmdlZFByb3BzLCBvbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBpbiBgX2ZsdXNoUHJvcGVydGllc2AgdG8gZGV0ZXJtaW5lIGlmIGBfcHJvcGVydGllc0NoYW5nZWRgXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcmV0dXJucyB0cnVlIGlmXG4gICAgICogcHJvcGVydGllcyBhcmUgcGVuZGluZy4gT3ZlcnJpZGUgdG8gY3VzdG9taXplIHdoZW5cbiAgICAgKiBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBpcyBjYWxsZWQuXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBjdXJyZW50UHJvcHMgQmFnIG9mIGFsbCBjdXJyZW50IGFjY2Vzc29yIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7P09iamVjdH0gY2hhbmdlZFByb3BzIEJhZyBvZiBwcm9wZXJ0aWVzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICAgKiAgIGNhbGwgdG8gYF9wcm9wZXJ0aWVzQ2hhbmdlZGBcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGVhY2ggcHJvcGVydHlcbiAgICAgKiAgIGluIGBjaGFuZ2VkUHJvcHNgXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBjaGFuZ2VkUHJvcHMgaXMgdHJ1dGh5XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3Nob3VsZFByb3BlcnRpZXNDaGFuZ2UoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBCb29sZWFuKGNoYW5nZWRQcm9wcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gYW55IHByb3BlcnRpZXMgd2l0aCBhY2Nlc3NvcnMgY3JlYXRlZCB2aWFcbiAgICAgKiBgX2NyZWF0ZVByb3BlcnR5QWNjZXNzb3JgIGhhdmUgYmVlbiBzZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IGN1cnJlbnRQcm9wcyBCYWcgb2YgYWxsIGN1cnJlbnQgYWNjZXNzb3IgdmFsdWVzXG4gICAgICogQHBhcmFtIHs/T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIHByb3BlcnRpZXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdFxuICAgICAqICAgY2FsbCB0byBgX3Byb3BlcnRpZXNDaGFuZ2VkYFxuICAgICAqIEBwYXJhbSB7P09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAqICAgaW4gYGNoYW5nZWRQcm9wc2BcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfcHJvcGVydGllc0NoYW5nZWQoY3VycmVudFByb3BzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRob2QgY2FsbGVkIHRvIGRldGVybWluZSB3aGV0aGVyIGEgcHJvcGVydHkgdmFsdWUgc2hvdWxkIGJlXG4gICAgICogY29uc2lkZXJlZCBhcyBhIGNoYW5nZSBhbmQgY2F1c2UgdGhlIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrXG4gICAgICogdG8gYmUgZW5xdWV1ZWQuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIGB0cnVlYCBpZiBhIHN0cmljdCBlcXVhbGl0eVxuICAgICAqIGNoZWNrIGZhaWxzLiBUaGUgbWV0aG9kIGFsd2F5cyByZXR1cm5zIGZhbHNlIGZvciBgTmFOYC5cbiAgICAgKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGUuZy4gcHJvdmlkZSBzdHJpY3RlciBjaGVja2luZyBmb3JcbiAgICAgKiBPYmplY3RzL0FycmF5cyB3aGVuIHVzaW5nIGltbXV0YWJsZSBwYXR0ZXJucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgcHJvcGVydHkgdmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZCBQcmV2aW91cyBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgY2hhbmdlXG4gICAgICogICBhbmQgZW5xdWV1ZSBhIGBfcHJvZXBydGllc0NoYW5nZWRgIGNhbGxiYWNrXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9zaG91bGRQcm9wZXJ0eUNoYW5nZShwcm9wZXJ0eSwgdmFsdWUsIG9sZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLy8gU3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAgICAgIChvbGQgIT09IHZhbHVlICYmXG4gICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgICAgICAgICAob2xkID09PSBvbGQgfHwgdmFsdWUgPT09IHZhbHVlKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50cyBuYXRpdmUgQ3VzdG9tIEVsZW1lbnRzIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIHRvXG4gICAgICogc2V0IGFuIGF0dHJpYnV0ZSB2YWx1ZSB0byBhIHByb3BlcnR5IHZpYSBgX2F0dHJpYnV0ZVRvUHJvcGVydHlgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBhdHRyaWJ1dGUgdGhhdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSBvbGQgT2xkIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgTmV3IGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZXNwYWNlIEF0dHJpYnV0ZSBuYW1lc3BhY2UuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBTdXBlciBtYXkgb3IgbWF5IG5vdCBpbXBsZW1lbnQgdGhlIGNhbGxiYWNrXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUsIG5hbWVzcGFjZSkge1xuICAgICAgaWYgKG9sZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKSB7XG4gICAgICAgIHN1cGVyLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGQsIHZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplcyBhbiBhdHRyaWJ1dGUgdG8gaXRzIGFzc29jaWF0ZWQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjYWxscyB0aGUgYF9kZXNlcmlhbGl6ZVZhbHVlYCBtZXRob2QgdG8gY29udmVydCB0aGUgc3RyaW5nIHRvXG4gICAgICogYSB0eXBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgTmFtZSBvZiBhdHRyaWJ1dGUgdG8gZGVzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7Kj19IHR5cGUgdHlwZSB0byBkZXNlcmlhbGl6ZSB0bywgZGVmYXVsdHMgdG8gdGhlIHZhbHVlXG4gICAgICogcmV0dXJuZWQgZnJvbSBgdHlwZUZvclByb3BlcnR5YFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2F0dHJpYnV0ZVRvUHJvcGVydHkoYXR0cmlidXRlLCB2YWx1ZSwgdHlwZSkge1xuICAgICAgaWYgKCF0aGlzLl9fc2VyaWFsaXppbmcpIHtcbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fX2RhdGFBdHRyaWJ1dGVzO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG1hcCAmJiBtYXBbYXR0cmlidXRlXSB8fCBhdHRyaWJ1dGU7XG4gICAgICAgIHRoaXNbcHJvcGVydHldID0gdGhpcy5fZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSB8fFxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IudHlwZUZvclByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyBhIHByb3BlcnR5IHRvIGl0cyBhc3NvY2lhdGVkIGF0dHJpYnV0ZS5cbiAgICAgKlxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfSBDbG9zdXJlIGNhbid0IGZpZ3VyZSBvdXQgYHRoaXNgIGlzIGFuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZSB0byByZWZsZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYXR0cmlidXRlIEF0dHJpYnV0ZSBuYW1lIHRvIHJlZmxlY3QgdG8uXG4gICAgICogQHBhcmFtIHsqPX0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gcmVmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3Byb3BlcnR5VG9BdHRyaWJ1dGUocHJvcGVydHksIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuX19zZXJpYWxpemluZyA9IHRydWU7XG4gICAgICB2YWx1ZSA9IChhcmd1bWVudHMubGVuZ3RoIDwgMykgPyB0aGlzW3Byb3BlcnR5XSA6IHZhbHVlO1xuICAgICAgdGhpcy5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpLCB2YWx1ZSxcbiAgICAgICAgYXR0cmlidXRlIHx8IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KSk7XG4gICAgICB0aGlzLl9fc2VyaWFsaXppbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdHlwZWQgdmFsdWUgdG8gYW4gSFRNTCBhdHRyaWJ1dGUgb24gYSBub2RlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FsbHMgdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCB0byBjb252ZXJ0IHRoZSB0eXBlZFxuICAgICAqIHZhbHVlIHRvIGEgc3RyaW5nLiAgSWYgdGhlIGBfc2VyaWFsaXplVmFsdWVgIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIHRoZSBhdHRyaWJ1dGUgd2lsbCBiZSByZW1vdmVkICh0aGlzIGlzIHRoZSBkZWZhdWx0IGZvciBib29sZWFuXG4gICAgICogdHlwZSBgZmFsc2VgKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSBFbGVtZW50IHRvIHNldCBhdHRyaWJ1dGUgdG8uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgbmFtZSB0byBzZXJpYWxpemUgdG8uXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfdmFsdWVUb05vZGVBdHRyaWJ1dGUobm9kZSwgdmFsdWUsIGF0dHJpYnV0ZSkge1xuICAgICAgY29uc3Qgc3RyID0gdGhpcy5fc2VyaWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gJ2NsYXNzJyB8fCBhdHRyaWJ1dGUgPT09ICduYW1lJyB8fCBhdHRyaWJ1dGUgPT09ICdzbG90Jykge1xuICAgICAgICBub2RlID0gLyoqIEB0eXBlIHs/RWxlbWVudH0gKi8od3JhcChub2RlKSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgc3RyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUgdG8gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiBzZXR0aW5nIEpTIHByb3BlcnR5IHZhbHVlcyB0b1xuICAgICAqIEhUTUwgYXR0cmlidXRlcy4gIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlXG4gICAgICogc2VyaWFsaXphdGlvbiBmb3IgY3VzdG9tIHR5cGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBQcm9wZXJ0eSB2YWx1ZSB0byBzZXJpYWxpemUuXG4gICAgICogQHJldHVybiB7c3RyaW5nIHwgdW5kZWZpbmVkfSBTdHJpbmcgc2VyaWFsaXplZCBmcm9tIHRoZSBwcm92aWRlZFxuICAgICAqIHByb3BlcnR5ICB2YWx1ZS5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfc2VyaWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgIHJldHVybiB2YWx1ZSA/ICcnIDogdW5kZWZpbmVkO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsID8gdmFsdWUudG9TdHJpbmcoKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiByZWFkaW5nIEhUTUwgYXR0cmlidXRlIHZhbHVlcyB0b1xuICAgICAqIEpTIHByb3BlcnRpZXMuICBVc2VycyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcHJvdmlkZVxuICAgICAqIGRlc2VyaWFsaXphdGlvbiBmb3IgY3VzdG9tIGB0eXBlYHMuIFR5cGVzIGZvciBgQm9vbGVhbmAsIGBTdHJpbmdgLFxuICAgICAqIGFuZCBgTnVtYmVyYCBjb252ZXJ0IGF0dHJpYnV0ZXMgdG8gdGhlIGV4cGVjdGVkIHR5cGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBkZXNlcmlhbGl6ZS5cbiAgICAgKiBAcGFyYW0geyo9fSB0eXBlIFR5cGUgdG8gZGVzZXJpYWxpemUgdGhlIHN0cmluZyB0by5cbiAgICAgKiBAcmV0dXJuIHsqfSBUeXBlZCB2YWx1ZSBkZXNlcmlhbGl6ZWQgZnJvbSB0aGUgcHJvdmlkZWQgc3RyaW5nLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9kZXNlcmlhbGl6ZVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICAgIHJldHVybiAodmFsdWUgIT09IG51bGwpO1xuICAgICAgICBjYXNlIE51bWJlcjpcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gUHJvcGVydGllc0NoYW5nZWQ7XG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgY2FtZWxUb0Rhc2hDYXNlLCBkYXNoVG9DYW1lbENhc2UgfSBmcm9tICcuLi91dGlscy9jYXNlLW1hcC5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzQ2hhbmdlZCB9IGZyb20gJy4vcHJvcGVydGllcy1jaGFuZ2VkLmpzJztcblxuLy8gU2F2ZSBtYXAgb2YgbmF0aXZlIHByb3BlcnRpZXM7IHRoaXMgZm9ybXMgYSBibGFja2xpc3Qgb3IgcHJvcGVydGllc1xuLy8gdGhhdCB3b24ndCBoYXZlIHRoZWlyIHZhbHVlcyBcInNhdmVkXCIgYnkgYHNhdmVBY2Nlc3NvclZhbHVlYCwgc2luY2Vcbi8vIHJlYWRpbmcgZnJvbSBhbiBIVE1MRWxlbWVudCBhY2Nlc3NvciBmcm9tIHRoZSBjb250ZXh0IG9mIGEgcHJvdG90eXBlIHRocm93c1xuY29uc3QgbmF0aXZlUHJvcGVydGllcyA9IHt9O1xubGV0IHByb3RvID0gSFRNTEVsZW1lbnQucHJvdG90eXBlO1xud2hpbGUgKHByb3RvKSB7XG4gIGxldCBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKTtcbiAgZm9yIChsZXQgaT0wOyBpPHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgbmF0aXZlUHJvcGVydGllc1twcm9wc1tpXV0gPSB0cnVlO1xuICB9XG4gIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbn1cblxuLyoqXG4gKiBVc2VkIHRvIHNhdmUgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgdGhhdCB3aWxsIGJlIG92ZXJyaWRkZW4gd2l0aFxuICogYW4gYWNjZXNzb3IuIElmIHRoZSBgbW9kZWxgIGlzIGEgcHJvdG90eXBlLCB0aGUgdmFsdWVzIHdpbGwgYmUgc2F2ZWRcbiAqIGluIGBfX2RhdGFQcm90b2AsIGFuZCBpdCdzIHVwIHRvIHRoZSB1c2VyIChvciBkb3duc3RyZWFtIG1peGluKSB0b1xuICogZGVjaWRlIGhvdy93aGVuIHRvIHNldCB0aGVzZSB2YWx1ZXMgYmFjayBpbnRvIHRoZSBhY2Nlc3NvcnMuXG4gKiBJZiBgbW9kZWxgIGlzIGFscmVhZHkgYW4gaW5zdGFuY2UgKGl0IGhhcyBhIGBfX2RhdGFgIHByb3BlcnR5KSwgdGhlblxuICogdGhlIHZhbHVlIHdpbGwgYmUgc2V0IGFzIGEgcGVuZGluZyBwcm9wZXJ0eSwgbWVhbmluZyB0aGUgdXNlciBzaG91bGRcbiAqIGNhbGwgYF9pbnZhbGlkYXRlUHJvcGVydGllc2Agb3IgYF9mbHVzaFByb3BlcnRpZXNgIHRvIHRha2UgZWZmZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1vZGVsIFByb3RvdHlwZSBvciBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlQWNjZXNzb3JWYWx1ZShtb2RlbCwgcHJvcGVydHkpIHtcbiAgLy8gRG9uJ3QgcmVhZC9zdG9yZSB2YWx1ZSBmb3IgYW55IG5hdGl2ZSBwcm9wZXJ0aWVzIHNpbmNlIHRoZXkgY291bGQgdGhyb3dcbiAgaWYgKCFuYXRpdmVQcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIGxldCB2YWx1ZSA9IG1vZGVsW3Byb3BlcnR5XTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG1vZGVsLl9fZGF0YSkge1xuICAgICAgICAvLyBBZGRpbmcgYWNjZXNzb3IgdG8gaW5zdGFuY2U7IHVwZGF0ZSB0aGUgcHJvcGVydHlcbiAgICAgICAgLy8gSXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0byBjYWxsIF9mbHVzaFByb3BlcnRpZXNcbiAgICAgICAgbW9kZWwuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWRkaW5nIGFjY2Vzc29yIHRvIHByb3RvOyBzYXZlIHByb3RvJ3MgdmFsdWUgZm9yIGluc3RhbmNlLXRpbWUgdXNlXG4gICAgICAgIGlmICghbW9kZWwuX19kYXRhUHJvdG8pIHtcbiAgICAgICAgICBtb2RlbC5fX2RhdGFQcm90byA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKCFtb2RlbC5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX2RhdGFQcm90bycsIG1vZGVsKSkpIHtcbiAgICAgICAgICBtb2RlbC5fX2RhdGFQcm90byA9IE9iamVjdC5jcmVhdGUobW9kZWwuX19kYXRhUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsLl9fZGF0YVByb3RvW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEVsZW1lbnQgY2xhc3MgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyBtZXRhLXByb2dyYW1taW5nIGZvciBjcmVhdGluZyBvbmVcbiAqIG9yIG1vcmUgcHJvcGVydHkgYWNjZXNzb3JzIChnZXR0ZXIvc2V0dGVyIHBhaXIpIHRoYXQgZW5xdWV1ZSBhbiBhc3luY1xuICogKGJhdGNoZWQpIGBfcHJvcGVydGllc0NoYW5nZWRgIGNhbGxiYWNrLlxuICpcbiAqIEZvciBiYXNpYyB1c2FnZSBvZiB0aGlzIG1peGluOlxuICpcbiAqIC0gICBEZWNsYXJlIGF0dHJpYnV0ZXMgdG8gb2JzZXJ2ZSB2aWEgdGhlIHN0YW5kYXJkIGBzdGF0aWMgZ2V0XG4gKiAgICAgb2JzZXJ2ZWRBdHRyaWJ1dGVzKClgLiBVc2UgYGRhc2gtY2FzZWAgYXR0cmlidXRlIG5hbWVzIHRvIHJlcHJlc2VudFxuICogICAgIGBjYW1lbENhc2VgIHByb3BlcnR5IG5hbWVzLlxuICogLSAgIEltcGxlbWVudCB0aGUgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgY2FsbGJhY2sgb24gdGhlIGNsYXNzLlxuICogLSAgIENhbGwgYE15Q2xhc3MuY3JlYXRlUHJvcGVydGllc0ZvckF0dHJpYnV0ZXMoKWAgKipvbmNlKiogb24gdGhlIGNsYXNzIHRvXG4gKiAgICAgZ2VuZXJhdGUgcHJvcGVydHkgYWNjZXNzb3JzIGZvciBlYWNoIG9ic2VydmVkIGF0dHJpYnV0ZS4gVGhpcyBtdXN0IGJlXG4gKiAgICAgY2FsbGVkIGJlZm9yZSB0aGUgZmlyc3QgaW5zdGFuY2UgaXMgY3JlYXRlZCwgZm9yIGV4YW1wbGUsIGJ5IGNhbGxpbmcgaXRcbiAqICAgICBiZWZvcmUgY2FsbGluZyBgY3VzdG9tRWxlbWVudHMuZGVmaW5lYC4gSXQgY2FuIGFsc28gYmUgY2FsbGVkIGxhemlseSBmcm9tXG4gKiAgICAgdGhlIGVsZW1lbnQncyBgY29uc3RydWN0b3JgLCBhcyBsb25nIGFzIGl0J3MgZ3VhcmRlZCBzbyB0aGF0IHRoZSBjYWxsIGlzXG4gKiAgICAgb25seSBtYWRlIG9uY2UsIHdoZW4gdGhlIGZpcnN0IGluc3RhbmNlIGlzIGNyZWF0ZWQuXG4gKiAtICAgQ2FsbCBgdGhpcy5fZW5hYmxlUHJvcGVydGllcygpYCBpbiB0aGUgZWxlbWVudCdzIGBjb25uZWN0ZWRDYWxsYmFja2AgdG9cbiAqICAgICBlbmFibGUgdGhlIGFjY2Vzc29ycy5cbiAqXG4gKiBBbnkgYG9ic2VydmVkQXR0cmlidXRlc2Agd2lsbCBhdXRvbWF0aWNhbGx5IGJlXG4gKiBkZXNlcmlhbGl6ZWQgdmlhIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIGFuZCBzZXQgdG8gdGhlIGFzc29jaWF0ZWRcbiAqIHByb3BlcnR5IHVzaW5nIGBkYXNoLWNhc2VgLXRvLWBjYW1lbENhc2VgIGNvbnZlbnRpb24uXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIFByb3BlcnRpZXNDaGFuZ2VkXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIGZvciByZWFjdGluZyB0byBwcm9wZXJ0eSBjaGFuZ2VzIGZyb21cbiAqICAgZ2VuZXJhdGVkIHByb3BlcnR5IGFjY2Vzc29ycy5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9wZXJ0eUFjY2Vzc29ycyA9IGRlZHVwaW5nTWl4aW4oc3VwZXJDbGFzcyA9PiB7XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzQ2hhbmdlZH1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgIGNvbnN0IGJhc2UgPSBQcm9wZXJ0aWVzQ2hhbmdlZChzdXBlckNsYXNzKTtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBleHRlbmRzIHtiYXNlfVxuICAgKiBAdW5yZXN0cmljdGVkXG4gICAqL1xuICBjbGFzcyBQcm9wZXJ0eUFjY2Vzc29ycyBleHRlbmRzIGJhc2Uge1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIHByb3BlcnR5IGFjY2Vzc29ycyBmb3IgYWxsIGF0dHJpYnV0ZXMgaW4gdGhlIHN0YW5kYXJkXG4gICAgICogc3RhdGljIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIGFycmF5LlxuICAgICAqXG4gICAgICogQXR0cmlidXRlIG5hbWVzIGFyZSBtYXBwZWQgdG8gcHJvcGVydHkgbmFtZXMgdXNpbmcgdGhlIGBkYXNoLWNhc2VgIHRvXG4gICAgICogYGNhbWVsQ2FzZWAgY29udmVudGlvblxuICAgICAqXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0aWVzRm9yQXR0cmlidXRlcygpIHtcbiAgICAgIGxldCBhJCA9ICAvKiogQHR5cGUgez99ICovICh0aGlzKS5vYnNlcnZlZEF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKGxldCBpPTA7IGkgPCBhJC5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlUHJvcGVydHlBY2Nlc3NvcihkYXNoVG9DYW1lbENhc2UoYSRbaV0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSBuYW1lIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqIEJ5IGRlZmF1bHQsIGNvbnZlcnRzIGNhbWVsIHRvIGRhc2ggY2FzZSwgZS5nLiBgZm9vQmFyYCB0byBgZm9vLWJhcmAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IEF0dHJpYnV0ZSBuYW1lIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGF0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIGNhbWVsVG9EYXNoQ2FzZShwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIFByb3BlcnRpZXNDaGFuZ2VkIGltcGxlbWVudGF0aW9uIHRvIGluaXRpYWxpemUgdmFsdWVzIGZvclxuICAgICAqIGFjY2Vzc29ycyBjcmVhdGVkIGZvciB2YWx1ZXMgdGhhdCBhbHJlYWR5IGV4aXN0ZWQgb24gdGhlIGVsZW1lbnRcbiAgICAgKiBwcm90b3R5cGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICBpZiAodGhpcy5fX2RhdGFQcm90bykge1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHRoaXMuX19kYXRhUHJvdG8pO1xuICAgICAgICB0aGlzLl9fZGF0YVByb3RvID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHN1cGVyLl9pbml0aWFsaXplUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhdCBpbnN0YW5jZSB0aW1lIHdpdGggYmFnIG9mIHByb3BlcnRpZXMgdGhhdCB3ZXJlIG92ZXJ3cml0dGVuXG4gICAgICogYnkgYWNjZXNzb3JzIG9uIHRoZSBwcm90b3R5cGUgd2hlbiBhY2Nlc3NvcnMgd2VyZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2V0cyB0aGVzZSBwcm9wZXJ0aWVzIGJhY2sgaW50byB0aGVcbiAgICAgKiBzZXR0ZXIgYXQgaW5zdGFuY2UgdGltZS4gIFRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIGFzIGFuIG92ZXJyaWRlXG4gICAgICogcG9pbnQgZm9yIGN1c3RvbWl6aW5nIG9yIHByb3ZpZGluZyBtb3JlIGVmZmljaWVudCBpbml0aWFsaXphdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgcHJvcGVydHkgdmFsdWVzIHRoYXQgd2VyZSBvdmVyd3JpdHRlblxuICAgICAqICAgd2hlbiBjcmVhdGluZyBwcm9wZXJ0eSBhY2Nlc3NvcnMuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2luaXRpYWxpemVQcm90b1Byb3BlcnRpZXMocHJvcHMpIHtcbiAgICAgIGZvciAobGV0IHAgaW4gcHJvcHMpIHtcbiAgICAgICAgdGhpcy5fc2V0UHJvcGVydHkocCwgcHJvcHNbcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgdGhlIGVsZW1lbnQgaGFzIHRoZSBnaXZlbiBhdHRyaWJ1dGUuIElmIGl0IGRvZXMgbm90LFxuICAgICAqIGFzc2lnbnMgdGhlIGdpdmVuIHZhbHVlIHRvIHRoZSBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c30gQ2xvc3VyZSBjYW4ndCBmaWd1cmUgb3V0IGB0aGlzYCBpcyBpbmZhY3QgYW5cbiAgICAgKiAgICAgZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBOYW1lIG9mIGF0dHJpYnV0ZSB0byBlbnN1cmUgaXMgc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX2Vuc3VyZUF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgICBjb25zdCBlbCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKTtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgdGhpcy5fdmFsdWVUb05vZGVBdHRyaWJ1dGUoZWwsIHZhbHVlLCBhdHRyaWJ1dGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBQcm9wZXJ0aWVzQ2hhbmdlZCBpbXBsZW1lbnRpb24gdG8gc2VyaWFsaXplIG9iamVjdHMgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgUHJvcGVydHkgdmFsdWUgdG8gc2VyaWFsaXplLlxuICAgICAqIEByZXR1cm4ge3N0cmluZyB8IHVuZGVmaW5lZH0gU3RyaW5nIHNlcmlhbGl6ZWQgZnJvbSB0aGUgcHJvdmlkZWQgcHJvcGVydHlcbiAgICAgKiAgICAgdmFsdWUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgfSBjYXRjaCh4KSB7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gc3VwZXIuX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIHN0cmluZyB0byBhIHR5cGVkIEphdmFTY3JpcHQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgUG9seW1lciB3aGVuIHJlYWRpbmcgSFRNTCBhdHRyaWJ1dGUgdmFsdWVzIHRvXG4gICAgICogSlMgcHJvcGVydGllcy4gIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCBvbiBQb2x5bWVyIGVsZW1lbnRcbiAgICAgKiBwcm90b3R5cGVzIHRvIHByb3ZpZGUgZGVzZXJpYWxpemF0aW9uIGZvciBjdXN0b20gYHR5cGVgcy4gIE5vdGUsXG4gICAgICogdGhlIGB0eXBlYCBhcmd1bWVudCBpcyB0aGUgdmFsdWUgb2YgdGhlIGB0eXBlYCBmaWVsZCBwcm92aWRlZCBpbiB0aGVcbiAgICAgKiBgcHJvcGVydGllc2AgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGEgZ2l2ZW4gcHJvcGVydHksIGFuZCBpc1xuICAgICAqIGJ5IGNvbnZlbnRpb24gdGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgdHlwZSB0byBkZXNlcmlhbGl6ZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/c3RyaW5nfSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWUgdG8gZGVzZXJpYWxpemUuXG4gICAgICogQHBhcmFtIHsqPX0gdHlwZSBUeXBlIHRvIGRlc2VyaWFsaXplIHRoZSBzdHJpbmcgdG8uXG4gICAgICogQHJldHVybiB7Kn0gVHlwZWQgdmFsdWUgZGVzZXJpYWxpemVkIGZyb20gdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7Kn1cbiAgICAgICAqL1xuICAgICAgbGV0IG91dFZhbHVlO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRWYWx1ZSA9IEpTT04ucGFyc2UoLyoqIEB0eXBlIHtzdHJpbmd9ICovKHZhbHVlKSk7XG4gICAgICAgICAgfSBjYXRjaCh4KSB7XG4gICAgICAgICAgICAvLyBhbGxvdyBub24tSlNPTiBsaXRlcmFscyBsaWtlIFN0cmluZ3MgYW5kIE51bWJlcnNcbiAgICAgICAgICAgIG91dFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRWYWx1ZSA9IEpTT04ucGFyc2UoLyoqIEB0eXBlIHtzdHJpbmd9ICovKHZhbHVlKSk7XG4gICAgICAgICAgfSBjYXRjaCh4KSB7XG4gICAgICAgICAgICBvdXRWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFBvbHltZXI6OkF0dHJpYnV0ZXM6IGNvdWxkbid0IGRlY29kZSBBcnJheSBhcyBKU09OOiAke3ZhbHVlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBEYXRlOlxuICAgICAgICAgIG91dFZhbHVlID0gaXNOYU4odmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3V0VmFsdWUgPSBuZXcgRGF0ZShvdXRWYWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgb3V0VmFsdWUgPSBzdXBlci5fZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0VmFsdWU7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tZmFsbHRocm91Z2ggKi9cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBQcm9wZXJ0aWVzQ2hhbmdlZCBpbXBsZW1lbnRhdGlvbiB0byBzYXZlIGV4aXN0aW5nIHByb3RvdHlwZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIHNvIHRoYXQgaXQgY2FuIGJlIHJlc2V0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlYWRPbmx5IFdoZW4gdHJ1ZSwgbm8gc2V0dGVyIGlzIGNyZWF0ZWRcbiAgICAgKlxuICAgICAqIFdoZW4gY2FsbGluZyBvbiBhIHByb3RvdHlwZSwgYW55IG92ZXJ3cml0dGVuIHZhbHVlcyBhcmUgc2F2ZWQgaW5cbiAgICAgKiBgX19kYXRhUHJvdG9gLCBhbmQgaXQgaXMgdXAgdG8gdGhlIHN1YmNsYXNzZXIgdG8gZGVjaWRlIGhvdy93aGVuXG4gICAgICogdG8gc2V0IHRob3NlIHByb3BlcnRpZXMgYmFjayBpbnRvIHRoZSBhY2Nlc3Nvci4gIFdoZW4gY2FsbGluZyBvbiBhblxuICAgICAqIGluc3RhbmNlLCB0aGUgb3ZlcndyaXR0ZW4gdmFsdWUgaXMgc2V0IHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWAsXG4gICAgICogYW5kIHRoZSB1c2VyIHNob3VsZCBjYWxsIGBfaW52YWxpZGF0ZVByb3BlcnRpZXNgIG9yIGBfZmx1c2hQcm9wZXJ0aWVzYFxuICAgICAqIGZvciB0aGUgdmFsdWVzIHRvIHRha2UgZWZmZWN0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9kZWZpbmVQcm9wZXJ0eUFjY2Vzc29yKHByb3BlcnR5LCByZWFkT25seSkge1xuICAgICAgc2F2ZUFjY2Vzc29yVmFsdWUodGhpcywgcHJvcGVydHkpO1xuICAgICAgc3VwZXIuX2RlZmluZVByb3BlcnR5QWNjZXNzb3IocHJvcGVydHksIHJlYWRPbmx5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBsaWJyYXJ5IGNyZWF0ZWQgYW4gYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBhY2Nlc3NvciB3YXMgY3JlYXRlZFxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9oYXNBY2Nlc3Nvcihwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhSGFzQWNjZXNzb3IgJiYgdGhpcy5fX2RhdGFIYXNBY2Nlc3Nvcltwcm9wZXJ0eV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgaGFzIGEgcGVuZGluZyBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBwcm9wZXJ0eSBoYXMgYSBwZW5kaW5nIGNoYW5nZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfaXNQcm9wZXJ0eVBlbmRpbmcocHJvcCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5fX2RhdGFQZW5kaW5nICYmIChwcm9wIGluIHRoaXMuX19kYXRhUGVuZGluZykpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIFByb3BlcnR5QWNjZXNzb3JzO1xuXG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgJy4uL3V0aWxzL2Jvb3QuanMnO1xuXG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuXG4vLyAxLnggYmFja3dhcmRzLWNvbXBhdGlibGUgYXV0by13cmFwcGVyIGZvciB0ZW1wbGF0ZSB0eXBlIGV4dGVuc2lvbnNcbi8vIFRoaXMgaXMgYSBjbGVhciBsYXllcmluZyB2aW9sYXRpb24gYW5kIGdpdmVzIGZhdm9yZWQtbmF0aW9uIHN0YXR1cyB0b1xuLy8gZG9tLWlmIGFuZCBkb20tcmVwZWF0IHRlbXBsYXRlcy4gIFRoaXMgaXMgYSBjb25jZWl0IHdlJ3JlIGNob29zaW5nIHRvIGtlZXBcbi8vIGEuKSB0byBlYXNlIDEueCBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBkdWUgdG8gbG9zcyBvZiBgaXNgLCBhbmRcbi8vIGIuKSB0byBtYWludGFpbiBpZi9yZXBlYXQgY2FwYWJpbGl0eSBpbiBwYXJzZXItY29uc3RyYWluZWQgZWxlbWVudHNcbi8vICAgICAoZS5nLiB0YWJsZSwgc2VsZWN0KSBpbiBsaWV1IG9mIG5hdGl2ZSBDRSB0eXBlIGV4dGVuc2lvbnMgd2l0aG91dFxuLy8gICAgIG1hc3NpdmUgbmV3IGludmVudGlvbiBpbiB0aGlzIHNwYWNlIChlLmcuIGRpcmVjdGl2ZSBzeXN0ZW0pXG5jb25zdCB0ZW1wbGF0ZUV4dGVuc2lvbnMgPSB7XG4gICdkb20taWYnOiB0cnVlLFxuICAnZG9tLXJlcGVhdCc6IHRydWVcbn07XG5cbmxldCBwbGFjZWhvbGRlckJ1Z0RldGVjdCA9IGZhbHNlO1xubGV0IHBsYWNlaG9sZGVyQnVnID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGhhc1BsYWNlaG9sZGVyQnVnKCkge1xuICBpZiAoIXBsYWNlaG9sZGVyQnVnRGV0ZWN0KSB7XG4gICAgcGxhY2Vob2xkZXJCdWdEZXRlY3QgPSB0cnVlO1xuICAgIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHQucGxhY2Vob2xkZXIgPSAnYSc7XG4gICAgcGxhY2Vob2xkZXJCdWcgPSB0LnBsYWNlaG9sZGVyID09PSB0LnRleHRDb250ZW50O1xuICB9XG4gIHJldHVybiBwbGFjZWhvbGRlckJ1Zztcbn1cblxuLyoqXG4gKiBTb21lIGJyb3dzZXJzIGhhdmUgYSBidWcgd2l0aCB0ZXh0YXJlYSwgd2hlcmUgcGxhY2Vob2xkZXIgdGV4dCBpcyBjb3BpZWQgYXNcbiAqIGEgdGV4dG5vZGUgY2hpbGQgb2YgdGhlIHRleHRhcmVhLlxuICpcbiAqIElmIHRoZSBwbGFjZWhvbGRlciBpcyBhIGJpbmRpbmcsIHRoaXMgY2FuIGJyZWFrIHRlbXBsYXRlIHN0YW1waW5nIGluIHR3b1xuICogd2F5cy5cbiAqXG4gKiBPbmUgaXNzdWUgaXMgdGhhdCB3aGVuIHRoZSBgcGxhY2Vob2xkZXJgIGF0dHJpYnV0ZSBpcyByZW1vdmVkIHdoZW4gdGhlXG4gKiBiaW5kaW5nIGlzIHByb2Nlc3NlZCwgdGhlIHRleHRub2RlIGNoaWxkIG9mIHRoZSB0ZXh0YXJlYSBpcyBkZWxldGVkLCBhbmQgdGhlXG4gKiB0ZW1wbGF0ZSBpbmZvIHRyaWVzIHRvIGJpbmQgaW50byB0aGF0IG5vZGUuXG4gKlxuICogV2l0aCBgbGVnYWN5T3B0aW1pemF0aW9uc2AgaW4gdXNlLCB3aGVuIHRoZSB0ZW1wbGF0ZSBpcyBzdGFtcGVkIGFuZCB0aGVcbiAqIGB0ZXh0YXJlYS50ZXh0Q29udGVudGAgYmluZGluZyBpcyBwcm9jZXNzZWQsIG5vIGNvcnJlc3BvbmRpbmcgbm9kZSBpcyBmb3VuZFxuICogYmVjYXVzZSBpdCB3YXMgcmVtb3ZlZCBkdXJpbmcgcGFyc2luZy4gQW4gZXhjZXB0aW9uIGlzIGdlbmVyYXRlZCB3aGVuIHRoaXNcbiAqIGJpbmRpbmcgaXMgdXBkYXRlZC5cbiAqXG4gKiBXaXRoIGBsZWdhY3lPcHRpbWl6YXRpb25zYCBub3QgaW4gdXNlLCB0aGUgdGVtcGxhdGUgaXMgY2xvbmVkIGJlZm9yZVxuICogcHJvY2Vzc2luZyBhbmQgdGhpcyBjaGFuZ2VzIHRoZSBhYm92ZSBiZWhhdmlvci4gVGhlIGNsb25lZCB0ZW1wbGF0ZSBhbHNvIGhhc1xuICogYSB2YWx1ZSBwcm9wZXJ0eSBzZXQgdG8gdGhlIHBsYWNlaG9sZGVyIGFuZCB0ZXh0Q29udGVudC4gVGhpcyBwcmV2ZW50cyB0aGVcbiAqIHJlbW92YWwgb2YgdGhlIHRleHRDb250ZW50IHdoZW4gdGhlIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBpcyByZW1vdmVkLlxuICogVGhlcmVmb3JlIHRoZSBleGNlcHRpb24gZG9lcyBub3Qgb2NjdXIuIEhvd2V2ZXIsIHRoZXJlIGlzIGFuIGV4dHJhXG4gKiB1bm5lY2Vzc2FyeSBiaW5kaW5nLlxuICpcbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgQ2hlY2sgbm9kZSBmb3IgcGxhY2Vob2xkZXIgYnVnXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5mdW5jdGlvbiBmaXhQbGFjZWhvbGRlcihub2RlKSB7XG4gIGlmIChoYXNQbGFjZWhvbGRlckJ1ZygpICYmIG5vZGUubG9jYWxOYW1lID09PSAndGV4dGFyZWEnICYmIG5vZGUucGxhY2Vob2xkZXJcbiAgICAgICAgJiYgbm9kZS5wbGFjZWhvbGRlciA9PT0gbm9kZS50ZXh0Q29udGVudCkge1xuICAgIG5vZGUudGV4dENvbnRlbnQgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBUZW1wbGF0ZUV4dGVuc2lvbihub2RlKSB7XG4gIGxldCBpcyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdpcycpO1xuICBpZiAoaXMgJiYgdGVtcGxhdGVFeHRlbnNpb25zW2lzXSkge1xuICAgIGxldCB0ID0gbm9kZTtcbiAgICB0LnJlbW92ZUF0dHJpYnV0ZSgnaXMnKTtcbiAgICBub2RlID0gdC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXMpO1xuICAgIHQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZSwgdCk7XG4gICAgbm9kZS5hcHBlbmRDaGlsZCh0KTtcbiAgICB3aGlsZSh0LmF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSh0LmF0dHJpYnV0ZXNbMF0ubmFtZSwgdC5hdHRyaWJ1dGVzWzBdLnZhbHVlKTtcbiAgICAgIHQucmVtb3ZlQXR0cmlidXRlKHQuYXR0cmlidXRlc1swXS5uYW1lKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGZpbmRUZW1wbGF0ZU5vZGUocm9vdCwgbm9kZUluZm8pIHtcbiAgLy8gcmVjdXJzaXZlbHkgYXNjZW5kIHRyZWUgdW50aWwgd2UgaGl0IHJvb3RcbiAgbGV0IHBhcmVudCA9IG5vZGVJbmZvLnBhcmVudEluZm8gJiYgZmluZFRlbXBsYXRlTm9kZShyb290LCBub2RlSW5mby5wYXJlbnRJbmZvKTtcbiAgLy8gdW53aW5kIHRoZSBzdGFjaywgcmV0dXJuaW5nIHRoZSBpbmRleGVkIG5vZGUgYXQgZWFjaCBsZXZlbFxuICBpZiAocGFyZW50KSB7XG4gICAgLy8gbm90ZTogbWFyZ2luYWxseSBmYXN0ZXIgdGhhbiBpbmRleGluZyB2aWEgY2hpbGROb2Rlc1xuICAgIC8vIChodHRwOi8vanNwZXJmLmNvbS9jaGlsZG5vZGVzLWxvb2t1cClcbiAgICBmb3IgKGxldCBuPXBhcmVudC5maXJzdENoaWxkLCBpPTA7IG47IG49bi5uZXh0U2libGluZykge1xuICAgICAgaWYgKG5vZGVJbmZvLnBhcmVudEluZGV4ID09PSBpKyspIHtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByb290O1xuICB9XG59XG5cbi8vIGNvbnN0cnVjdCBgJGAgbWFwIChmcm9tIGlkIGFubm90YXRpb25zKVxuZnVuY3Rpb24gYXBwbHlJZFRvTWFwKGluc3QsIG1hcCwgbm9kZSwgbm9kZUluZm8pIHtcbiAgaWYgKG5vZGVJbmZvLmlkKSB7XG4gICAgbWFwW25vZGVJbmZvLmlkXSA9IG5vZGU7XG4gIH1cbn1cblxuLy8gaW5zdGFsbCBldmVudCBsaXN0ZW5lcnMgKGZyb20gZXZlbnQgYW5ub3RhdGlvbnMpXG5mdW5jdGlvbiBhcHBseUV2ZW50TGlzdGVuZXIoaW5zdCwgbm9kZSwgbm9kZUluZm8pIHtcbiAgaWYgKG5vZGVJbmZvLmV2ZW50cyAmJiBub2RlSW5mby5ldmVudHMubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaj0wLCBlJD1ub2RlSW5mby5ldmVudHMsIGU7IChqPGUkLmxlbmd0aCkgJiYgKGU9ZSRbal0pOyBqKyspIHtcbiAgICAgIGluc3QuX2FkZE1ldGhvZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZS5uYW1lLCBlLnZhbHVlLCBpbnN0KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gcHVzaCBjb25maWd1cmF0aW9uIHJlZmVyZW5jZXMgYXQgY29uZmlndXJlIHRpbWVcbmZ1bmN0aW9uIGFwcGx5VGVtcGxhdGVDb250ZW50KGluc3QsIG5vZGUsIG5vZGVJbmZvKSB7XG4gIGlmIChub2RlSW5mby50ZW1wbGF0ZUluZm8pIHtcbiAgICBub2RlLl90ZW1wbGF0ZUluZm8gPSBub2RlSW5mby50ZW1wbGF0ZUluZm87XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZUV2ZW50SGFuZGxlcihjb250ZXh0LCBldmVudE5hbWUsIG1ldGhvZE5hbWUpIHtcbiAgLy8gSW5zdGFuY2VzIGNhbiBvcHRpb25hbGx5IGhhdmUgYSBfbWV0aG9kSG9zdCB3aGljaCBhbGxvd3MgcmVkaXJlY3Rpbmcgd2hlcmVcbiAgLy8gdG8gZmluZCBtZXRob2RzLiBDdXJyZW50bHkgdXNlZCBieSBgdGVtcGxhdGl6ZWAuXG4gIGNvbnRleHQgPSBjb250ZXh0Ll9tZXRob2RIb3N0IHx8IGNvbnRleHQ7XG4gIGxldCBoYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuICAgIGlmIChjb250ZXh0W21ldGhvZE5hbWVdKSB7XG4gICAgICBjb250ZXh0W21ldGhvZE5hbWVdKGUsIGUuZGV0YWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKCdsaXN0ZW5lciBtZXRob2QgYCcgKyBtZXRob2ROYW1lICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoYW5kbGVyO1xufVxuXG4vKipcbiAqIEVsZW1lbnQgbWl4aW4gdGhhdCBwcm92aWRlcyBiYXNpYyB0ZW1wbGF0ZSBwYXJzaW5nIGFuZCBzdGFtcGluZywgaW5jbHVkaW5nXG4gKiB0aGUgZm9sbG93aW5nIHRlbXBsYXRlLXJlbGF0ZWQgZmVhdHVyZXMgZm9yIHN0YW1wZWQgdGVtcGxhdGVzOlxuICpcbiAqIC0gRGVjbGFyYXRpdmUgZXZlbnQgbGlzdGVuZXJzIChgb24tZXZlbnRuYW1lPVwibGlzdGVuZXJcImApXG4gKiAtIE1hcCBvZiBub2RlIGlkJ3MgdG8gc3RhbXBlZCBub2RlIGluc3RhbmNlcyAoYHRoaXMuJC5pZGApXG4gKiAtIE5lc3RlZCB0ZW1wbGF0ZSBjb250ZW50IGNhY2hpbmcvcmVtb3ZhbCBhbmQgcmUtaW5zdGFsbGF0aW9uIChwZXJmb3JtYW5jZVxuICogICBvcHRpbWl6YXRpb24pXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgYmFzaWMgdGVtcGxhdGUgcGFyc2luZyBhbmQgc3RhbXBpbmdcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBUZW1wbGF0ZVN0YW1wID0gZGVkdXBpbmdNaXhpbihcbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3OlQpfSBzdXBlckNsYXNzIENsYXNzIHRvIGFwcGx5IG1peGluIHRvLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gICAgICovXG4gICAgKHN1cGVyQ2xhc3MpID0+IHtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfVGVtcGxhdGVTdGFtcH1cbiAgICovXG4gIGNsYXNzIFRlbXBsYXRlU3RhbXAgZXh0ZW5kcyBzdXBlckNsYXNzIHtcblxuICAgIC8qKlxuICAgICAqIFNjYW5zIGEgdGVtcGxhdGUgdG8gcHJvZHVjZSB0ZW1wbGF0ZSBtZXRhZGF0YS5cbiAgICAgKlxuICAgICAqIFRlbXBsYXRlLXNwZWNpZmljIG1ldGFkYXRhIGFyZSBzdG9yZWQgaW4gdGhlIG9iamVjdCByZXR1cm5lZCwgYW5kIG5vZGUtXG4gICAgICogc3BlY2lmaWMgbWV0YWRhdGEgYXJlIHN0b3JlZCBpbiBvYmplY3RzIGluIGl0cyBmbGF0dGVuZWQgYG5vZGVJbmZvTGlzdGBcbiAgICAgKiBhcnJheS4gIE9ubHkgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIHRoYXQgd2VyZSBwYXJzZWQgYXMgbm9kZXMgb2ZcbiAgICAgKiBpbnRlcmVzdCBjb250YWluIGFuIG9iamVjdCBpbiBgbm9kZUluZm9MaXN0YC4gIEVhY2ggYG5vZGVJbmZvYCBvYmplY3RcbiAgICAgKiBjb250YWlucyBhbiBgaW5kZXhgIChgY2hpbGROb2Rlc2AgaW5kZXggaW4gcGFyZW50KSBhbmQgb3B0aW9uYWxseVxuICAgICAqIGBwYXJlbnRgLCB3aGljaCBwb2ludHMgdG8gbm9kZSBpbmZvIG9mIGl0cyBwYXJlbnQgKGluY2x1ZGluZyBpdHMgaW5kZXgpLlxuICAgICAqXG4gICAgICogVGhlIHRlbXBsYXRlIG1ldGFkYXRhIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoaXMgbWV0aG9kIGhhcyB0aGUgZm9sbG93aW5nXG4gICAgICogc3RydWN0dXJlIChtYW55IGZpZWxkcyBvcHRpb25hbCk6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAge1xuICAgICAqICAgICAvLyBGbGF0dGVuZWQgbGlzdCBvZiBub2RlIG1ldGFkYXRhIChmb3Igbm9kZXMgdGhhdCBnZW5lcmF0ZWQgbWV0YWRhdGEpXG4gICAgICogICAgIG5vZGVJbmZvTGlzdDogW1xuICAgICAqICAgICAgIHtcbiAgICAgKiAgICAgICAgIC8vIGBpZGAgYXR0cmlidXRlIGZvciBhbnkgbm9kZXMgd2l0aCBpZCdzIGZvciBnZW5lcmF0aW5nIGAkYCBtYXBcbiAgICAgKiAgICAgICAgIGlkOiB7c3RyaW5nfSxcbiAgICAgKiAgICAgICAgIC8vIGBvbi1ldmVudD1cImhhbmRsZXJcImAgbWV0YWRhdGFcbiAgICAgKiAgICAgICAgIGV2ZW50czogW1xuICAgICAqICAgICAgICAgICB7XG4gICAgICogICAgICAgICAgICAgbmFtZToge3N0cmluZ30sICAgLy8gZXZlbnQgbmFtZVxuICAgICAqICAgICAgICAgICAgIHZhbHVlOiB7c3RyaW5nfSwgIC8vIGhhbmRsZXIgbWV0aG9kIG5hbWVcbiAgICAgKiAgICAgICAgICAgfSwgLi4uXG4gICAgICogICAgICAgICBdLFxuICAgICAqICAgICAgICAgLy8gTm90ZXMgd2hlbiB0aGUgdGVtcGxhdGUgY29udGFpbmVkIGEgYDxzbG90PmAgZm9yIHNoYWR5IERPTVxuICAgICAqICAgICAgICAgLy8gb3B0aW1pemF0aW9uIHB1cnBvc2VzXG4gICAgICogICAgICAgICBoYXNJbnNlcnRpb25Qb2ludDoge2Jvb2xlYW59LFxuICAgICAqICAgICAgICAgLy8gRm9yIG5lc3RlZCBgPHRlbXBsYXRlPmBgIG5vZGVzLCBuZXN0ZWQgdGVtcGxhdGUgbWV0YWRhdGFcbiAgICAgKiAgICAgICAgIHRlbXBsYXRlSW5mbzoge29iamVjdH0sIC8vIG5lc3RlZCB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAqICAgICAgICAgLy8gTWV0YWRhdGEgdG8gYWxsb3cgZWZmaWNpZW50IHJldHJpZXZhbCBvZiBpbnN0YW5jZWQgbm9kZVxuICAgICAqICAgICAgICAgLy8gY29ycmVzcG9uZGluZyB0byB0aGlzIG1ldGFkYXRhXG4gICAgICogICAgICAgICBwYXJlbnRJbmZvOiB7bnVtYmVyfSwgICAvLyByZWZlcmVuY2UgdG8gcGFyZW50IG5vZGVJbmZvPlxuICAgICAqICAgICAgICAgcGFyZW50SW5kZXg6IHtudW1iZXJ9LCAgLy8gaW5kZXggaW4gcGFyZW50J3MgYGNoaWxkTm9kZXNgIGNvbGxlY3Rpb25cbiAgICAgKiAgICAgICAgIGluZm9JbmRleDoge251bWJlcn0sICAgIC8vIGluZGV4IG9mIHRoaXMgYG5vZGVJbmZvYCBpbiBgdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdGBcbiAgICAgKiAgICAgICB9LFxuICAgICAqICAgICAgIC4uLlxuICAgICAqICAgICBdLFxuICAgICAqICAgICAvLyBXaGVuIHRydWUsIHRoZSB0ZW1wbGF0ZSBoYWQgdGhlIGBzdHJpcC13aGl0ZXNwYWNlYCBhdHRyaWJ1dGVcbiAgICAgKiAgICAgLy8gb3Igd2FzIG5lc3RlZCBpbiBhIHRlbXBsYXRlIHdpdGggdGhhdCBzZXR0aW5nXG4gICAgICogICAgIHN0cmlwV2hpdGVzcGFjZToge2Jvb2xlYW59LFxuICAgICAqICAgICAvLyBGb3IgbmVzdGVkIHRlbXBsYXRlcywgbmVzdGVkIHRlbXBsYXRlIGNvbnRlbnQgaXMgbW92ZWQgaW50b1xuICAgICAqICAgICAvLyBhIGRvY3VtZW50IGZyYWdtZW50IHN0b3JlZCBoZXJlOyB0aGlzIGlzIGFuIG9wdGltaXphdGlvbiB0b1xuICAgICAqICAgICAvLyBhdm9pZCB0aGUgY29zdCBvZiBuZXN0ZWQgdGVtcGxhdGUgY2xvbmluZ1xuICAgICAqICAgICBjb250ZW50OiB7RG9jdW1lbnRGcmFnbWVudH1cbiAgICAgKiAgIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGtpY2tzIG9mZiBhIHJlY3Vyc2l2ZSB0cmVld2FsayBhcyBmb2xsb3dzOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogICAgX3BhcnNlVGVtcGxhdGUgPC0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICAgKiAgICAgIF9wYXJzZVRlbXBsYXRlQ29udGVudCAgICAgICAgICAgICAgfFxuICAgICAqICAgICAgICBfcGFyc2VUZW1wbGF0ZU5vZGUgIDwtLS0tLS0tLS0tLS18LS0rXG4gICAgICogICAgICAgICAgX3BhcnNlVGVtcGxhdGVOZXN0ZWRUZW1wbGF0ZSAtLSsgIHxcbiAgICAgKiAgICAgICAgICBfcGFyc2VUZW1wbGF0ZUNoaWxkTm9kZXMgLS0tLS0tLS0tK1xuICAgICAqICAgICAgICAgIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZXNcbiAgICAgKiAgICAgICAgICAgIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZVxuICAgICAqXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBvdmVycmlkZGVuIHRvIGFkZCBjdXN0b20gbWV0YWRhdGEgYWJvdXQgdGVtcGxhdGVzXG4gICAgICogdG8gZWl0aGVyIGB0ZW1wbGF0ZUluZm9gIG9yIGBub2RlSW5mb2AuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgbWF5IGJlIGRlc3RydWN0aXZlIHRvIHRoZSB0ZW1wbGF0ZSwgaW4gdGhhdFxuICAgICAqIGUuZy4gZXZlbnQgYW5ub3RhdGlvbnMgbWF5IGJlIHJlbW92ZWQgYWZ0ZXIgYmVpbmcgbm90ZWQgaW4gdGhlXG4gICAgICogdGVtcGxhdGUgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZSBUZW1wbGF0ZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvPX0gb3V0ZXJUZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZnJvbSB0aGUgb3V0ZXJcbiAgICAgKiAgIHRlbXBsYXRlLCBmb3IgcGFyc2luZyBuZXN0ZWQgdGVtcGxhdGVzXG4gICAgICogQHJldHVybiB7IVRlbXBsYXRlSW5mb30gUGFyc2VkIHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGUodGVtcGxhdGUsIG91dGVyVGVtcGxhdGVJbmZvKSB7XG4gICAgICAvLyBzaW5jZSBhIHRlbXBsYXRlIG1heSBiZSByZS11c2VkLCBtZW1vLWl6ZSBtZXRhZGF0YVxuICAgICAgaWYgKCF0ZW1wbGF0ZS5fdGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIC8vIFRPRE8ocmljdGljKTogZml4IHR5cGluZ1xuICAgICAgICBsZXQgLyoqID8gKi8gdGVtcGxhdGVJbmZvID0gdGVtcGxhdGUuX3RlbXBsYXRlSW5mbyA9IHt9O1xuICAgICAgICB0ZW1wbGF0ZUluZm8ubm9kZUluZm9MaXN0ID0gW107XG4gICAgICAgIHRlbXBsYXRlSW5mby5zdHJpcFdoaXRlU3BhY2UgPVxuICAgICAgICAgIChvdXRlclRlbXBsYXRlSW5mbyAmJiBvdXRlclRlbXBsYXRlSW5mby5zdHJpcFdoaXRlU3BhY2UpIHx8XG4gICAgICAgICAgdGVtcGxhdGUuaGFzQXR0cmlidXRlKCdzdHJpcC13aGl0ZXNwYWNlJyk7XG4gICAgICAgICAvLyBUT0RPKHJpY3RpYyk6IGZpeCB0eXBpbmdcbiAgICAgICAgIHRoaXMuX3BhcnNlVGVtcGxhdGVDb250ZW50KFxuICAgICAgICAgICAgIHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIC8qKiBAdHlwZSB7P30gKi8gKHtwYXJlbnQ6IG51bGx9KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVtcGxhdGUuX3RlbXBsYXRlSW5mbztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWUgZG9jcyBmb3IgX3BhcnNlVGVtcGxhdGVOb2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgLlxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIC5cbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IC5cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZUNvbnRlbnQodGVtcGxhdGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJzZVRlbXBsYXRlTm9kZSh0ZW1wbGF0ZS5jb250ZW50LCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGVtcGxhdGUgbm9kZSBhbmQgYWRkcyB0ZW1wbGF0ZSBhbmQgbm9kZSBtZXRhZGF0YSBiYXNlZCBvblxuICAgICAqIHRoZSBjdXJyZW50IG5vZGUsIGFuZCBpdHMgYGNoaWxkTm9kZXNgIGFuZCBgYXR0cmlidXRlc2AuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBtYXkgYmUgb3ZlcnJpZGRlbiB0byBhZGQgY3VzdG9tIG5vZGUgb3IgdGVtcGxhdGUgc3BlY2lmaWNcbiAgICAgKiBtZXRhZGF0YSBiYXNlZCBvbiB0aGlzIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICBsZXQgbm90ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBlbGVtZW50ID0gLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKG5vZGUpO1xuICAgICAgaWYgKGVsZW1lbnQubG9jYWxOYW1lID09ICd0ZW1wbGF0ZScgJiYgIWVsZW1lbnQuaGFzQXR0cmlidXRlKCdwcmVzZXJ2ZS1jb250ZW50JykpIHtcbiAgICAgICAgbm90ZWQgPSB0aGlzLl9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUoZWxlbWVudCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykgfHwgbm90ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubG9jYWxOYW1lID09PSAnc2xvdCcpIHtcbiAgICAgICAgLy8gRm9yIFNoYWR5RG9tIG9wdGltaXphdGlvbiwgaW5kaWNhdGluZyB0aGVyZSBpcyBhbiBpbnNlcnRpb24gcG9pbnRcbiAgICAgICAgdGVtcGxhdGVJbmZvLmhhc0luc2VydGlvblBvaW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZpeFBsYWNlaG9sZGVyKGVsZW1lbnQpO1xuICAgICAgaWYgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICB0aGlzLl9wYXJzZVRlbXBsYXRlQ2hpbGROb2RlcyhlbGVtZW50LCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZXMgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgbm90ZWQgPSB0aGlzLl9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZXMoZWxlbWVudCwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykgfHwgbm90ZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRlbXBsYXRlIGNoaWxkIG5vZGVzIGZvciB0aGUgZ2l2ZW4gcm9vdCBub2RlLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgYWxzbyB3cmFwcyB3aGl0ZWxpc3RlZCBsZWdhY3kgdGVtcGxhdGUgZXh0ZW5zaW9uc1xuICAgICAqIChgaXM9XCJkb20taWZcImAgYW5kIGBpcz1cImRvbS1yZXBlYXRcImApIHdpdGggdGhlaXIgZXF1aXZhbGVudCBlbGVtZW50XG4gICAgICogd3JhcHBlcnMsIGNvbGxhcHNlcyB0ZXh0IG5vZGVzLCBhbmQgc3RyaXBzIHdoaXRlc3BhY2UgZnJvbSB0aGUgdGVtcGxhdGVcbiAgICAgKiBpZiB0aGUgYHRlbXBsYXRlSW5mby5zdHJpcFdoaXRlc3BhY2VgIHNldHRpbmcgd2FzIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlfSByb290IFJvb3Qgbm9kZSB3aG9zZSBgY2hpbGROb2Rlc2Agd2lsbCBiZSBwYXJzZWRcbiAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlQ2hpbGROb2Rlcyhyb290LCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICBpZiAocm9vdC5sb2NhbE5hbWUgPT09ICdzY3JpcHQnIHx8IHJvb3QubG9jYWxOYW1lID09PSAnc3R5bGUnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IG5vZGU9cm9vdC5maXJzdENoaWxkLCBwYXJlbnRJbmRleD0wLCBuZXh0OyBub2RlOyBub2RlPW5leHQpIHtcbiAgICAgICAgLy8gV3JhcCB0ZW1wbGF0ZXNcbiAgICAgICAgaWYgKG5vZGUubG9jYWxOYW1lID09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgICBub2RlID0gd3JhcFRlbXBsYXRlRXh0ZW5zaW9uKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbGxhcHNlIGFkamFjZW50IHRleHROb2RlczogZml4ZXMgYW4gSUUgaXNzdWUgdGhhdCBjYW4gY2F1c2VcbiAgICAgICAgLy8gdGV4dCBub2RlcyB0byBiZSBpbmV4cGxpY2FibHkgc3BsaXQgPShcbiAgICAgICAgLy8gbm90ZSB0aGF0IHJvb3Qubm9ybWFsaXplKCkgc2hvdWxkIHdvcmsgYnV0IGRvZXMgbm90IHNvIHdlIGRvIHRoaXNcbiAgICAgICAgLy8gbWFudWFsbHkuXG4gICAgICAgIG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgICBsZXQgLyoqIE5vZGUgKi8gbiA9IG5leHQ7XG4gICAgICAgICAgd2hpbGUgKG4gJiYgKG4ubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSkge1xuICAgICAgICAgICAgbm9kZS50ZXh0Q29udGVudCArPSBuLnRleHRDb250ZW50O1xuICAgICAgICAgICAgbmV4dCA9IG4ubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICByb290LnJlbW92ZUNoaWxkKG4pO1xuICAgICAgICAgICAgbiA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG9wdGlvbmFsbHkgc3RyaXAgd2hpdGVzcGFjZVxuICAgICAgICAgIGlmICh0ZW1wbGF0ZUluZm8uc3RyaXBXaGl0ZVNwYWNlICYmICFub2RlLnRleHRDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgICAgcm9vdC5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgY2hpbGRJbmZvID1cbiAgICAgICAgICAgIC8qKiBAdHlwZSB7IU5vZGVJbmZvfSAqLyAoe3BhcmVudEluZGV4LCBwYXJlbnRJbmZvOiBub2RlSW5mb30pO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGUobm9kZSwgdGVtcGxhdGVJbmZvLCBjaGlsZEluZm8pKSB7XG4gICAgICAgICAgY2hpbGRJbmZvLmluZm9JbmRleCA9IHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3QucHVzaChjaGlsZEluZm8pIC0gMTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbmNyZW1lbnQgaWYgbm90IHJlbW92ZWRcbiAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIHBhcmVudEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGVtcGxhdGUgY29udGVudCBmb3IgdGhlIGdpdmVuIG5lc3RlZCBgPHRlbXBsYXRlPmAuXG4gICAgICpcbiAgICAgKiBOZXN0ZWQgdGVtcGxhdGUgaW5mbyBpcyBzdG9yZWQgYXMgYHRlbXBsYXRlSW5mb2AgaW4gdGhlIGN1cnJlbnQgbm9kZSdzXG4gICAgICogYG5vZGVJbmZvYC4gYHRlbXBsYXRlLmNvbnRlbnRgIGlzIHJlbW92ZWQgYW5kIHN0b3JlZCBpbiBgdGVtcGxhdGVJbmZvYC5cbiAgICAgKiBJdCB3aWxsIHRoZW4gYmUgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBob3N0IHRvIHNldCBpdCBiYWNrIHRvIHRoZVxuICAgICAqIHRlbXBsYXRlIGFuZCBmb3IgdXNlcnMgc3RhbXBpbmcgbmVzdGVkIHRlbXBsYXRlcyB0byB1c2UgdGhlXG4gICAgICogYF9jb250ZW50Rm9yVGVtcGxhdGVgIG1ldGhvZCB0byByZXRyaWV2ZSB0aGUgY29udGVudCBmb3IgdGhpcyB0ZW1wbGF0ZVxuICAgICAqIChhbiBvcHRpbWl6YXRpb24gdG8gYXZvaWQgdGhlIGNvc3Qgb2YgY2xvbmluZyBuZXN0ZWQgdGVtcGxhdGUgY29udGVudCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZSAoYSA8dGVtcGxhdGU+KVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSBvdXRlclRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqICAgdGhhdCBpbmNsdWRlcyB0aGUgdGVtcGxhdGUgYG5vZGVgXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUobm9kZSwgb3V0ZXJUZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICAvLyBUT0RPKHJpY3RpYyk6IHRoZSB0eXBlIG9mIG5vZGUgc2hvdWxkIGJlIG5vbi1udWxsXG4gICAgICBsZXQgZWxlbWVudCA9IC8qKiBAdHlwZSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9ICovIChub2RlKTtcbiAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSB0aGlzLl9wYXJzZVRlbXBsYXRlKGVsZW1lbnQsIG91dGVyVGVtcGxhdGVJbmZvKTtcbiAgICAgIGxldCBjb250ZW50ID0gdGVtcGxhdGVJbmZvLmNvbnRlbnQgPVxuICAgICAgICAgIGVsZW1lbnQuY29udGVudC5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudC5jb250ZW50KTtcbiAgICAgIG5vZGVJbmZvLnRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0ZW1wbGF0ZSBub2RlIGF0dHJpYnV0ZXMgYW5kIGFkZHMgbm9kZSBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogZm9yIG5vZGVzIG9mIGludGVyZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIE5vZGUgdG8gcGFyc2VcbiAgICAgKiBAcGFyYW0geyFUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudFxuICAgICAqICAgICB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7IU5vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGVzKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIC8vIE1ha2UgY29weSBvZiBvcmlnaW5hbCBhdHRyaWJ1dGUgbGlzdCwgc2luY2UgdGhlIG9yZGVyIG1heSBjaGFuZ2VcbiAgICAgIC8vIGFzIGF0dHJpYnV0ZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkXG4gICAgICBsZXQgbm90ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBhdHRycyA9IEFycmF5LmZyb20obm9kZS5hdHRyaWJ1dGVzKTtcbiAgICAgIGZvciAobGV0IGk9YXR0cnMubGVuZ3RoLTEsIGE7IChhPWF0dHJzW2ldKTsgaS0tKSB7XG4gICAgICAgIG5vdGVkID0gdGhpcy5fcGFyc2VUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgYS5uYW1lLCBhLnZhbHVlKSB8fCBub3RlZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzaW5nbGUgdGVtcGxhdGUgbm9kZSBhdHRyaWJ1dGUgYW5kIGFkZHMgbm9kZSBtZXRhZGF0YSB0b1xuICAgICAqIGBub2RlSW5mb2AgZm9yIGF0dHJpYnV0ZXMgb2YgaW50ZXJlc3QuXG4gICAgICpcbiAgICAgKiBUaGlzIGltcGxlbWVudGF0aW9uIGFkZHMgbWV0YWRhdGEgZm9yIGBvbi1ldmVudD1cImhhbmRsZXJcImAgYXR0cmlidXRlc1xuICAgICAqIGFuZCBgaWRgIGF0dHJpYnV0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7IVRlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshTm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQXR0cmlidXRlIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2aXNpdGVkIG5vZGUgYWRkZWQgbm9kZS1zcGVjaWZpY1xuICAgICAqICAgbWV0YWRhdGEgdG8gYG5vZGVJbmZvYFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgLy8gZXZlbnRzIChvbi0qKVxuICAgICAgaWYgKG5hbWUuc2xpY2UoMCwgMykgPT09ICdvbi0nKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICBub2RlSW5mby5ldmVudHMgPSBub2RlSW5mby5ldmVudHMgfHwgW107XG4gICAgICAgIG5vZGVJbmZvLmV2ZW50cy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBuYW1lLnNsaWNlKDMpLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIHN0YXRpYyBpZFxuICAgICAgZWxzZSBpZiAobmFtZSA9PT0gJ2lkJykge1xuICAgICAgICBub2RlSW5mby5pZCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgY29udGVudGAgZG9jdW1lbnQgZnJhZ21lbnQgZm9yIGEgZ2l2ZW4gdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBGb3IgbmVzdGVkIHRlbXBsYXRlcywgUG9seW1lciBwZXJmb3JtcyBhbiBvcHRpbWl6YXRpb24gdG8gY2FjaGUgbmVzdGVkXG4gICAgICogdGVtcGxhdGUgY29udGVudCB0byBhdm9pZCB0aGUgY29zdCBvZiBjbG9uaW5nIGRlZXBseSBuZXN0ZWQgdGVtcGxhdGVzLlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHJpZXZlcyB0aGUgY2FjaGVkIGNvbnRlbnQgZm9yIGEgZ2l2ZW4gdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIHJldHJpZXZlIGBjb250ZW50YCBmb3JcbiAgICAgKiBAcmV0dXJuIHtEb2N1bWVudEZyYWdtZW50fSBDb250ZW50IGZyYWdtZW50XG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2NvbnRlbnRGb3JUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgbGV0IHRlbXBsYXRlSW5mbyA9IC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudFdpdGhJbmZvfSAqLyAodGVtcGxhdGUpLl90ZW1wbGF0ZUluZm87XG4gICAgICByZXR1cm4gKHRlbXBsYXRlSW5mbyAmJiB0ZW1wbGF0ZUluZm8uY29udGVudCkgfHwgdGVtcGxhdGUuY29udGVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZXMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIGNvbnRlbnQgYW5kIHJldHVybnMgYSBkb2N1bWVudCBmcmFnbWVudFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIGNsb25lZCBkb20uXG4gICAgICpcbiAgICAgKiBUaGUgdGVtcGxhdGUgaXMgcGFyc2VkIChvbmNlIGFuZCBtZW1vaXplZCkgdXNpbmcgdGhpcyBsaWJyYXJ5J3NcbiAgICAgKiB0ZW1wbGF0ZSBwYXJzaW5nIGZlYXR1cmVzLCBhbmQgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyB2YWx1ZS1hZGRlZFxuICAgICAqIGZlYXR1cmVzOlxuICAgICAqICogQWRkcyBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMgZm9yIGBvbi1ldmVudD1cImhhbmRsZXJcImAgYXR0cmlidXRlc1xuICAgICAqICogR2VuZXJhdGVzIGFuIFwiaWQgbWFwXCIgZm9yIGFsbCBub2RlcyB3aXRoIGlkJ3MgdW5kZXIgYCRgIG9uIHJldHVybmVkXG4gICAgICogICBkb2N1bWVudCBmcmFnbWVudFxuICAgICAqICogUGFzc2VzIHRlbXBsYXRlIGluZm8gaW5jbHVkaW5nIGBjb250ZW50YCBiYWNrIHRvIHRlbXBsYXRlcyBhc1xuICAgICAqICAgYF90ZW1wbGF0ZUluZm9gIChhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0byBhdm9pZCBkZWVwIHRlbXBsYXRlXG4gICAgICogICBjbG9uaW5nKVxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoZSBtZW1vaXplZCB0ZW1wbGF0ZSBwYXJzaW5nIHByb2Nlc3MgaXMgZGVzdHJ1Y3RpdmUgdG8gdGhlXG4gICAgICogdGVtcGxhdGU6IGF0dHJpYnV0ZXMgZm9yIGJpbmRpbmdzIGFuZCBkZWNsYXJhdGl2ZSBldmVudCBsaXN0ZW5lcnMgYXJlXG4gICAgICogcmVtb3ZlZCBhZnRlciBiZWluZyBub3RlZCBpbiBub3RlcywgYW5kIGFueSBuZXN0ZWQgYDx0ZW1wbGF0ZT4uY29udGVudGBcbiAgICAgKiBpcyByZW1vdmVkIGFuZCBzdG9yZWQgaW4gbm90ZXMgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIHN0YW1wXG4gICAgICogQHJldHVybiB7IVN0YW1wZWRUZW1wbGF0ZX0gQ2xvbmVkIHRlbXBsYXRlIGNvbnRlbnRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfc3RhbXBUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgLy8gUG9seWZpbGwgc3VwcG9ydDogYm9vdHN0cmFwIHRoZSB0ZW1wbGF0ZSBpZiBpdCBoYXMgbm90IGFscmVhZHkgYmVlblxuICAgICAgaWYgKHRlbXBsYXRlICYmICF0ZW1wbGF0ZS5jb250ZW50ICYmXG4gICAgICAgICAgd2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQgJiYgSFRNTFRlbXBsYXRlRWxlbWVudC5kZWNvcmF0ZSkge1xuICAgICAgICBIVE1MVGVtcGxhdGVFbGVtZW50LmRlY29yYXRlKHRlbXBsYXRlKTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZW1wbGF0ZUluZm8gPSB0aGlzLmNvbnN0cnVjdG9yLl9wYXJzZVRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIGxldCBub2RlSW5mbyA9IHRlbXBsYXRlSW5mby5ub2RlSW5mb0xpc3Q7XG4gICAgICBsZXQgY29udGVudCA9IHRlbXBsYXRlSW5mby5jb250ZW50IHx8IHRlbXBsYXRlLmNvbnRlbnQ7XG4gICAgICBsZXQgZG9tID0gLyoqIEB0eXBlIHtEb2N1bWVudEZyYWdtZW50fSAqLyAoZG9jdW1lbnQuaW1wb3J0Tm9kZShjb250ZW50LCB0cnVlKSk7XG4gICAgICAvLyBOT1RFOiBTaGFkeURvbSBvcHRpbWl6YXRpb24gaW5kaWNhdGluZyB0aGVyZSBpcyBhbiBpbnNlcnRpb24gcG9pbnRcbiAgICAgIGRvbS5fX25vSW5zZXJ0aW9uUG9pbnQgPSAhdGVtcGxhdGVJbmZvLmhhc0luc2VydGlvblBvaW50O1xuICAgICAgbGV0IG5vZGVzID0gZG9tLm5vZGVMaXN0ID0gbmV3IEFycmF5KG5vZGVJbmZvLmxlbmd0aCk7XG4gICAgICBkb20uJCA9IHt9O1xuICAgICAgZm9yIChsZXQgaT0wLCBsPW5vZGVJbmZvLmxlbmd0aCwgaW5mbzsgKGk8bCkgJiYgKGluZm89bm9kZUluZm9baV0pOyBpKyspIHtcbiAgICAgICAgbGV0IG5vZGUgPSBub2Rlc1tpXSA9IGZpbmRUZW1wbGF0ZU5vZGUoZG9tLCBpbmZvKTtcbiAgICAgICAgYXBwbHlJZFRvTWFwKHRoaXMsIGRvbS4kLCBub2RlLCBpbmZvKTtcbiAgICAgICAgYXBwbHlUZW1wbGF0ZUNvbnRlbnQodGhpcywgbm9kZSwgaW5mbyk7XG4gICAgICAgIGFwcGx5RXZlbnRMaXN0ZW5lcih0aGlzLCBub2RlLCBpbmZvKTtcbiAgICAgIH1cbiAgICAgIGRvbSA9IC8qKiBAdHlwZSB7IVN0YW1wZWRUZW1wbGF0ZX0gKi8oZG9tKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWFzc2lnblxuICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIGJ5IG1ldGhvZCBuYW1lIGZvciB0aGUgZXZlbnQgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBnZW5lcmF0ZXMgYSBoYW5kbGVyIGZ1bmN0aW9uIHRoYXQgbG9va3MgdXAgdGhlIG1ldGhvZFxuICAgICAqIG5hbWUgYXQgaGFuZGxpbmcgdGltZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gYWRkIGxpc3RlbmVyIG9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgTmFtZSBvZiBtZXRob2RcbiAgICAgKiBAcGFyYW0geyo9fSBjb250ZXh0IENvbnRleHQgdGhlIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBvbiAoZGVmYXVsdHNcbiAgICAgKiAgIHRvIGBub2RlYClcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gR2VuZXJhdGVkIGhhbmRsZXIgZnVuY3Rpb25cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfYWRkTWV0aG9kRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIG1ldGhvZE5hbWUsIGNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IG5vZGU7XG4gICAgICBsZXQgaGFuZGxlciA9IGNyZWF0ZU5vZGVFdmVudEhhbmRsZXIoY29udGV4dCwgZXZlbnROYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJUb05vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHBvaW50IGZvciBhZGRpbmcgY3VzdG9tIG9yIHNpbXVsYXRlZCBldmVudCBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gYWRkIGV2ZW50IGxpc3RlbmVyIHRvXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIGV2ZW50XG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpOnZvaWR9IGhhbmRsZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBfYWRkRXZlbnRMaXN0ZW5lclRvTm9kZShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHBvaW50IGZvciBhZGRpbmcgY3VzdG9tIG9yIHNpbXVsYXRlZCBldmVudCBoYW5kbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBub2RlIE5vZGUgdG8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGZyb21cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgZXZlbnRcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCk6dm9pZH0gaGFuZGxlciBMaXN0ZW5lciBmdW5jdGlvbiB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9yZW1vdmVFdmVudExpc3RlbmVyRnJvbU5vZGUobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBUZW1wbGF0ZVN0YW1wO1xuXG59KTtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQHN1cHByZXNzIHtjaGVja1Byb3RvdHlwYWxUeXBlc31cbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuLi91dGlscy93cmFwLmpzJztcbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgeyByb290LCBpc0FuY2VzdG9yLCBpc0Rlc2NlbmRhbnQsIGdldCwgdHJhbnNsYXRlLCBpc1BhdGgsIHNldCwgbm9ybWFsaXplIH0gZnJvbSAnLi4vdXRpbHMvcGF0aC5qcyc7XG4vKiBmb3Igbm90aWZ5LCByZWZsZWN0ICovXG5pbXBvcnQgeyBjYW1lbFRvRGFzaENhc2UsIGRhc2hUb0NhbWVsQ2FzZSB9IGZyb20gJy4uL3V0aWxzL2Nhc2UtbWFwLmpzJztcbmltcG9ydCB7IFByb3BlcnR5QWNjZXNzb3JzIH0gZnJvbSAnLi9wcm9wZXJ0eS1hY2Nlc3NvcnMuanMnO1xuLyogZm9yIGFubm90YXRlZCBlZmZlY3RzICovXG5pbXBvcnQgeyBUZW1wbGF0ZVN0YW1wIH0gZnJvbSAnLi90ZW1wbGF0ZS1zdGFtcC5qcyc7XG5pbXBvcnQgeyBzYW5pdGl6ZURPTVZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvc2V0dGluZ3MuanMnO1xuXG4vLyBNb25vdG9uaWNhbGx5IGluY3JlYXNpbmcgdW5pcXVlIElEIHVzZWQgZm9yIGRlLWR1cGluZyBlZmZlY3RzIHRyaWdnZXJlZFxuLy8gZnJvbSBtdWx0aXBsZSBwcm9wZXJ0aWVzIGluIHRoZSBzYW1lIHR1cm5cbmxldCBkZWR1cGVJZCA9IDA7XG5cbi8qKlxuICogUHJvcGVydHkgZWZmZWN0IHR5cGVzOyBlZmZlY3RzIGFyZSBzdG9yZWQgb24gdGhlIHByb3RvdHlwZSB1c2luZyB0aGVzZSBrZXlzXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5jb25zdCBUWVBFUyA9IHtcbiAgQ09NUFVURTogJ19fY29tcHV0ZUVmZmVjdHMnLFxuICBSRUZMRUNUOiAnX19yZWZsZWN0RWZmZWN0cycsXG4gIE5PVElGWTogJ19fbm90aWZ5RWZmZWN0cycsXG4gIFBST1BBR0FURTogJ19fcHJvcGFnYXRlRWZmZWN0cycsXG4gIE9CU0VSVkU6ICdfX29ic2VydmVFZmZlY3RzJyxcbiAgUkVBRF9PTkxZOiAnX19yZWFkT25seSdcbn07XG5cbi8qKiBAY29uc3QgeyFSZWdFeHB9ICovXG5jb25zdCBjYXBpdGFsQXR0cmlidXRlUmVnZXggPSAvW0EtWl0vO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiBuYW1lOiAoc3RyaW5nIHwgdW5kZWZpbmVkKSxcbiAqIHN0cnVjdHVyZWQ6IChib29sZWFuIHwgdW5kZWZpbmVkKSxcbiAqIHdpbGRjYXJkOiAoYm9vbGVhbiB8IHVuZGVmaW5lZClcbiAqIH19XG4gKi9cbmxldCBEYXRhVHJpZ2dlcjsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqIGluZm86ID8sXG4gKiB0cmlnZ2VyOiAoIURhdGFUcmlnZ2VyIHwgdW5kZWZpbmVkKSxcbiAqIGZuOiAoIUZ1bmN0aW9uIHwgdW5kZWZpbmVkKVxuICogfX1cbiAqL1xubGV0IERhdGFFZmZlY3Q7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCB0aGUgbW9kZWwgaGFzIGFuIG93bi1wcm9wZXJ0eSBtYXAgb2YgZWZmZWN0cyBmb3IgdGhlIGdpdmVuIHR5cGUuXG4gKiBUaGUgbW9kZWwgbWF5IGJlIGEgcHJvdG90eXBlIG9yIGFuIGluc3RhbmNlLlxuICpcbiAqIFByb3BlcnR5IGVmZmVjdHMgYXJlIHN0b3JlZCBhcyBhcnJheXMgb2YgZWZmZWN0cyBieSBwcm9wZXJ0eSBpbiBhIG1hcCxcbiAqIGJ5IG5hbWVkIHR5cGUgb24gdGhlIG1vZGVsLiBlLmcuXG4gKlxuICogICBfX2NvbXB1dGVFZmZlY3RzOiB7XG4gKiAgICAgZm9vOiBbIC4uLiBdLFxuICogICAgIGJhcjogWyAuLi4gXVxuICogICB9XG4gKlxuICogSWYgdGhlIG1vZGVsIGRvZXMgbm90IHlldCBoYXZlIGFuIGVmZmVjdCBtYXAgZm9yIHRoZSB0eXBlLCBvbmUgaXMgY3JlYXRlZFxuICogYW5kIHJldHVybmVkLiAgSWYgaXQgZG9lcywgYnV0IGl0IGlzIG5vdCBhbiBvd24gcHJvcGVydHkgKGkuZS4gdGhlXG4gKiBwcm90b3R5cGUgaGFkIGVmZmVjdHMpLCB0aGUgdGhlIG1hcCBpcyBkZWVwbHkgY2xvbmVkIGFuZCB0aGUgY29weSBpc1xuICogc2V0IG9uIHRoZSBtb2RlbCBhbmQgcmV0dXJuZWQsIHJlYWR5IGZvciBuZXcgZWZmZWN0cyB0byBiZSBhZGRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kZWwgUHJvdG90eXBlIG9yIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBQcm9wZXJ0eSBlZmZlY3QgdHlwZVxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgb3duLXByb3BlcnR5IG1hcCBvZiBlZmZlY3RzIGZvciB0aGUgZ2l2ZW4gdHlwZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5zdXJlT3duRWZmZWN0TWFwKG1vZGVsLCB0eXBlKSB7XG4gIGxldCBlZmZlY3RzID0gbW9kZWxbdHlwZV07XG4gIGlmICghZWZmZWN0cykge1xuICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IHt9O1xuICB9IGVsc2UgaWYgKCFtb2RlbC5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkge1xuICAgIGVmZmVjdHMgPSBtb2RlbFt0eXBlXSA9IE9iamVjdC5jcmVhdGUobW9kZWxbdHlwZV0pO1xuICAgIGZvciAobGV0IHAgaW4gZWZmZWN0cykge1xuICAgICAgbGV0IHByb3RvRnggPSBlZmZlY3RzW3BdO1xuICAgICAgbGV0IGluc3RGeCA9IGVmZmVjdHNbcF0gPSBBcnJheShwcm90b0Z4Lmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpPTA7IGk8cHJvdG9GeC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnN0RnhbaV0gPSBwcm90b0Z4W2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZWZmZWN0cztcbn1cblxuLy8gLS0gZWZmZWN0cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogUnVucyBhbGwgZWZmZWN0cyBvZiBhIGdpdmVuIHR5cGUgZm9yIHRoZSBnaXZlbiBzZXQgb2YgcHJvcGVydHkgY2hhbmdlc1xuICogb24gYW4gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHdpdGggZWZmZWN0cyB0byBydW5cbiAqIEBwYXJhbSB7P09iamVjdH0gZWZmZWN0cyBPYmplY3QgbWFwIG9mIHByb3BlcnR5LXRvLUFycmF5IG9mIGVmZmVjdHNcbiAqIEBwYXJhbSB7P09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHs/T2JqZWN0PX0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHBhcmFtIHsqPX0gZXh0cmFBcmdzIEFkZGl0aW9uYWwgbWV0YWRhdGEgdG8gcGFzcyB0byBlZmZlY3QgZnVuY3Rpb25cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW4gZWZmZWN0IHJhbiBmb3IgdGhpcyBwcm9wZXJ0eVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuRWZmZWN0cyhpbnN0LCBlZmZlY3RzLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzLCBleHRyYUFyZ3MpIHtcbiAgaWYgKGVmZmVjdHMpIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgbGV0IGlkID0gZGVkdXBlSWQrKztcbiAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICBpZiAocnVuRWZmZWN0c0ZvclByb3BlcnR5KFxuICAgICAgICAgICAgICBpbnN0LCAvKiogQHR5cGUgeyFPYmplY3R9ICovIChlZmZlY3RzKSwgaWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcyxcbiAgICAgICAgICAgICAgaGFzUGF0aHMsIGV4dHJhQXJncykpIHtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhbjtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUnVucyBhIGxpc3Qgb2YgZWZmZWN0cyBmb3IgYSBnaXZlbiBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2Ugd2l0aCBlZmZlY3RzIHRvIHJ1blxuICogQHBhcmFtIHshT2JqZWN0fSBlZmZlY3RzIE9iamVjdCBtYXAgb2YgcHJvcGVydHktdG8tQXJyYXkgb2YgZWZmZWN0c1xuICogQHBhcmFtIHtudW1iZXJ9IGRlZHVwZUlkIENvdW50ZXIgdXNlZCBmb3IgZGUtZHVwaW5nIGVmZmVjdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIE5hbWUgb2YgY2hhbmdlZCBwcm9wZXJ0eVxuICogQHBhcmFtIHsqfSBwcm9wcyBDaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Kn0gb2xkUHJvcHMgT2xkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcGFyYW0geyo9fSBleHRyYUFyZ3MgQWRkaXRpb25hbCBtZXRhZGF0YSB0byBwYXNzIHRvIGVmZmVjdCBmdW5jdGlvblxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbiBlZmZlY3QgcmFuIGZvciB0aGlzIHByb3BlcnR5XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5FZmZlY3RzRm9yUHJvcGVydHkoaW5zdCwgZWZmZWN0cywgZGVkdXBlSWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMsIGV4dHJhQXJncykge1xuICBsZXQgcmFuID0gZmFsc2U7XG4gIGxldCByb290UHJvcGVydHkgPSBoYXNQYXRocyA/IHJvb3QocHJvcCkgOiBwcm9wO1xuICBsZXQgZnhzID0gZWZmZWN0c1tyb290UHJvcGVydHldO1xuICBpZiAoZnhzKSB7XG4gICAgZm9yIChsZXQgaT0wLCBsPWZ4cy5sZW5ndGgsIGZ4OyAoaTxsKSAmJiAoZng9ZnhzW2ldKTsgaSsrKSB7XG4gICAgICBpZiAoKCFmeC5pbmZvIHx8IGZ4LmluZm8ubGFzdFJ1biAhPT0gZGVkdXBlSWQpICYmXG4gICAgICAgICAgKCFoYXNQYXRocyB8fCBwYXRoTWF0Y2hlc1RyaWdnZXIocHJvcCwgZngudHJpZ2dlcikpKSB7XG4gICAgICAgIGlmIChmeC5pbmZvKSB7XG4gICAgICAgICAgZnguaW5mby5sYXN0UnVuID0gZGVkdXBlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZnguZm4oaW5zdCwgcHJvcCwgcHJvcHMsIG9sZFByb3BzLCBmeC5pbmZvLCBoYXNQYXRocywgZXh0cmFBcmdzKTtcbiAgICAgICAgcmFuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJhbjtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBwcm9wZXJ0eS9wYXRoIHRoYXQgaGFzIGNoYW5nZWQgbWF0Y2hlcyB0aGUgdHJpZ2dlclxuICogY3JpdGVyaWEgZm9yIGFuIGVmZmVjdC4gIEEgdHJpZ2dlciBpcyBhIGRlc2NyaXB0b3Igd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBzdHJ1Y3R1cmUsIHdoaWNoIG1hdGNoZXMgdGhlIGRlc2NyaXB0b3JzIHJldHVybmVkIGZyb20gYHBhcnNlQXJnYC5cbiAqIGUuZy4gZm9yIGBmb28uYmFyLipgOlxuICogYGBgXG4gKiB0cmlnZ2VyOiB7XG4gKiAgIG5hbWU6ICdhLmInLFxuICogICBzdHJ1Y3R1cmVkOiB0cnVlLFxuICogICB3aWxkY2FyZDogdHJ1ZVxuICogfVxuICogYGBgXG4gKiBJZiBubyB0cmlnZ2VyIGlzIGdpdmVuLCB0aGUgcGF0aCBpcyBkZWVtZWQgdG8gbWF0Y2guXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBvciBwcm9wZXJ0eSB0aGF0IGNoYW5nZWRcbiAqIEBwYXJhbSB7P0RhdGFUcmlnZ2VyfSB0cmlnZ2VyIERlc2NyaXB0b3JcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBhdGggbWF0Y2hlZCB0aGUgdHJpZ2dlclxuICovXG5mdW5jdGlvbiBwYXRoTWF0Y2hlc1RyaWdnZXIocGF0aCwgdHJpZ2dlcikge1xuICBpZiAodHJpZ2dlcikge1xuICAgIGxldCB0cmlnZ2VyUGF0aCA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodHJpZ2dlci5uYW1lKTtcbiAgICByZXR1cm4gKHRyaWdnZXJQYXRoID09IHBhdGgpIHx8XG4gICAgICAgICEhKHRyaWdnZXIuc3RydWN0dXJlZCAmJiBpc0FuY2VzdG9yKHRyaWdnZXJQYXRoLCBwYXRoKSkgfHxcbiAgICAgICAgISEodHJpZ2dlci53aWxkY2FyZCAmJiBpc0Rlc2NlbmRhbnQodHJpZ2dlclBhdGgsIHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwib2JzZXJ2ZXJcIiBlZmZlY3QuXG4gKlxuICogQ2FsbHMgdGhlIG1ldGhvZCB3aXRoIGBpbmZvLm1ldGhvZE5hbWVgIG9uIHRoZSBpbnN0YW5jZSwgcGFzc2luZyB0aGVcbiAqIG5ldyBhbmQgb2xkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuT2JzZXJ2ZXJFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICBsZXQgZm4gPSB0eXBlb2YgaW5mby5tZXRob2QgPT09IFwic3RyaW5nXCIgPyBpbnN0W2luZm8ubWV0aG9kXSA6IGluZm8ubWV0aG9kO1xuICBsZXQgY2hhbmdlZFByb3AgPSBpbmZvLnByb3BlcnR5O1xuICBpZiAoZm4pIHtcbiAgICBmbi5jYWxsKGluc3QsIGluc3QuX19kYXRhW2NoYW5nZWRQcm9wXSwgb2xkUHJvcHNbY2hhbmdlZFByb3BdKTtcbiAgfSBlbHNlIGlmICghaW5mby5keW5hbWljRm4pIHtcbiAgICBjb25zb2xlLndhcm4oJ29ic2VydmVyIG1ldGhvZCBgJyArIGluZm8ubWV0aG9kICsgJ2Agbm90IGRlZmluZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgXCJub3RpZnlcIiBlZmZlY3RzIGZvciBhIHNldCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMuXG4gKlxuICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIHRoZSBnZW5lcmljIGBydW5FZmZlY3RzYCBtZXRob2QgaW4gdGhhdCBpdFxuICogd2lsbCBkaXNwYXRjaCBwYXRoIG5vdGlmaWNhdGlvbiBldmVudHMgaW4gdGhlIGNhc2UgdGhhdCB0aGUgcHJvcGVydHlcbiAqIGNoYW5nZWQgd2FzIGEgcGF0aCBhbmQgdGhlIHJvb3QgcHJvcGVydHkgZm9yIHRoYXQgcGF0aCBkaWRuJ3QgaGF2ZSBhXG4gKiBcIm5vdGlmeVwiIGVmZmVjdC4gIFRoaXMgaXMgdG8gbWFpbnRhaW4gMS4wIGJlaGF2aW9yIHRoYXQgZGlkIG5vdCByZXF1aXJlXG4gKiBgbm90aWZ5OiB0cnVlYCB0byBlbnN1cmUgb2JqZWN0IHN1Yi1wcm9wZXJ0eSBub3RpZmljYXRpb25zIHdlcmVcbiAqIHNlbnQuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHdpdGggZWZmZWN0cyB0byBydW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBub3RpZnlQcm9wcyBCYWcgb2YgcHJvcGVydGllcyB0byBub3RpZnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuTm90aWZ5RWZmZWN0cyhpbnN0LCBub3RpZnlQcm9wcywgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykge1xuICAvLyBOb3RpZnlcbiAgbGV0IGZ4cyA9IGluc3RbVFlQRVMuTk9USUZZXTtcbiAgbGV0IG5vdGlmaWVkO1xuICBsZXQgaWQgPSBkZWR1cGVJZCsrO1xuICAvLyBUcnkgbm9ybWFsIG5vdGlmeSBlZmZlY3RzOyBpZiBub25lLCBmYWxsIGJhY2sgdG8gdHJ5IHBhdGggbm90aWZpY2F0aW9uXG4gIGZvciAobGV0IHByb3AgaW4gbm90aWZ5UHJvcHMpIHtcbiAgICBpZiAobm90aWZ5UHJvcHNbcHJvcF0pIHtcbiAgICAgIGlmIChmeHMgJiYgcnVuRWZmZWN0c0ZvclByb3BlcnR5KGluc3QsIGZ4cywgaWQsIHByb3AsIHByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpKSB7XG4gICAgICAgIG5vdGlmaWVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzUGF0aHMgJiYgbm90aWZ5UGF0aChpbnN0LCBwcm9wLCBwcm9wcykpIHtcbiAgICAgICAgbm90aWZpZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBGbHVzaCBob3N0IGlmIHdlIGFjdHVhbGx5IG5vdGlmaWVkIGFuZCBob3N0IHdhcyBiYXRjaGluZ1xuICAvLyBBbmQgdGhlIGhvc3QgaGFzIGFscmVhZHkgaW5pdGlhbGl6ZWQgY2xpZW50czsgdGhpcyBwcmV2ZW50c1xuICAvLyBhbiBpc3N1ZSB3aXRoIGEgaG9zdCBvYnNlcnZpbmcgZGF0YSBjaGFuZ2VzIGJlZm9yZSBjbGllbnRzIGFyZSByZWFkeS5cbiAgbGV0IGhvc3Q7XG4gIGlmIChub3RpZmllZCAmJiAoaG9zdCA9IGluc3QuX19kYXRhSG9zdCkgJiYgaG9zdC5faW52YWxpZGF0ZVByb3BlcnRpZXMpIHtcbiAgICBob3N0Ll9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlcyB7cHJvcGVydHl9LWNoYW5nZWQgZXZlbnRzIHdpdGggcGF0aCBpbmZvcm1hdGlvbiBpbiB0aGUgZGV0YWlsXG4gKiBvYmplY3QgdG8gaW5kaWNhdGUgYSBzdWItcGF0aCBvZiB0aGUgcHJvcGVydHkgd2FzIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGVsZW1lbnQgZnJvbSB3aGljaCB0byBmaXJlIHRoZVxuICogICAgIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCB0aGF0IHdhcyBjaGFuZ2VkXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBwYXRoIHdhcyBub3RpZmllZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm90aWZ5UGF0aChpbnN0LCBwYXRoLCBwcm9wcykge1xuICBsZXQgcm9vdFByb3BlcnR5ID0gcm9vdChwYXRoKTtcbiAgaWYgKHJvb3RQcm9wZXJ0eSAhPT0gcGF0aCkge1xuICAgIGxldCBldmVudE5hbWUgPSBjYW1lbFRvRGFzaENhc2Uocm9vdFByb3BlcnR5KSArICctY2hhbmdlZCc7XG4gICAgZGlzcGF0Y2hOb3RpZnlFdmVudChpbnN0LCBldmVudE5hbWUsIHByb3BzW3BhdGhdLCBwYXRoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlcyB7cHJvcGVydHl9LWNoYW5nZWQgZXZlbnRzIHRvIGluZGljYXRlIGEgcHJvcGVydHkgKG9yIHBhdGgpXG4gKiBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBlbGVtZW50IGZyb20gd2hpY2ggdG8gZmlyZSB0aGVcbiAqICAgICBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gc2VuZFxuICogICAgICgne3Byb3BlcnR5fS1jaGFuZ2VkJylcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBjaGFuZ2VkIHByb3BlcnR5XG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IHBhdGggSWYgYSBzdWItcGF0aCBvZiB0aGlzIHByb3BlcnR5XG4gKiAgICAgY2hhbmdlZCwgdGhlIHBhdGggdGhhdCBjaGFuZ2VkIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzfVxuICovXG5mdW5jdGlvbiBkaXNwYXRjaE5vdGlmeUV2ZW50KGluc3QsIGV2ZW50TmFtZSwgdmFsdWUsIHBhdGgpIHtcbiAgbGV0IGRldGFpbCA9IHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgcXVldWVQcm9wZXJ0eTogdHJ1ZVxuICB9O1xuICBpZiAocGF0aCkge1xuICAgIGRldGFpbC5wYXRoID0gcGF0aDtcbiAgfVxuICB3cmFwKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyhpbnN0KSkuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7IGRldGFpbCB9KSk7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJub3RpZnlcIiBlZmZlY3QuXG4gKlxuICogRGlzcGF0Y2hlcyBhIG5vbi1idWJibGluZyBldmVudCBuYW1lZCBgaW5mby5ldmVudE5hbWVgIG9uIHRoZSBpbnN0YW5jZVxuICogd2l0aCBhIGRldGFpbCBvYmplY3QgY29udGFpbmluZyB0aGUgbmV3IGB2YWx1ZWAuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICogQHBhcmFtIHtib29sZWFufSBoYXNQYXRocyBUcnVlIHdpdGggYHByb3BzYCBjb250YWlucyBvbmUgb3IgbW9yZSBwYXRoc1xuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bk5vdGlmeUVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvLCBoYXNQYXRocykge1xuICBsZXQgcm9vdFByb3BlcnR5ID0gaGFzUGF0aHMgPyByb290KHByb3BlcnR5KSA6IHByb3BlcnR5O1xuICBsZXQgcGF0aCA9IHJvb3RQcm9wZXJ0eSAhPSBwcm9wZXJ0eSA/IHByb3BlcnR5IDogbnVsbDtcbiAgbGV0IHZhbHVlID0gcGF0aCA/IGdldChpbnN0LCBwYXRoKSA6IGluc3QuX19kYXRhW3Byb3BlcnR5XTtcbiAgaWYgKHBhdGggJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gcHJvcHNbcHJvcGVydHldOyAgLy8gc3BlY2lmaWNhbGx5IGZvciAuc3BsaWNlc1xuICB9XG4gIGRpc3BhdGNoTm90aWZ5RXZlbnQoaW5zdCwgaW5mby5ldmVudE5hbWUsIHZhbHVlLCBwYXRoKTtcbn1cblxuLyoqXG4gKiBIYW5kbGVyIGZ1bmN0aW9uIGZvciAyLXdheSBub3RpZmljYXRpb24gZXZlbnRzLiBSZWNlaXZlcyBjb250ZXh0XG4gKiBpbmZvcm1hdGlvbiBjYXB0dXJlZCBpbiB0aGUgYGFkZE5vdGlmeUxpc3RlbmVyYCBjbG9zdXJlIGZyb20gdGhlXG4gKiBgX19ub3RpZnlMaXN0ZW5lcnNgIG1ldGFkYXRhLlxuICpcbiAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBub3RpZmllZCBwcm9wZXJ0eSB0byB0aGUgaG9zdCBwcm9wZXJ0eSBvciBwYXRoLiAgSWZcbiAqIHRoZSBldmVudCBjb250YWluZWQgcGF0aCBpbmZvcm1hdGlvbiwgdHJhbnNsYXRlIHRoYXQgcGF0aCB0byB0aGUgaG9zdFxuICogc2NvcGUncyBuYW1lIGZvciB0aGF0IHBhdGggZmlyc3QuXG4gKlxuICogQHBhcmFtIHtDdXN0b21FdmVudH0gZXZlbnQgTm90aWZpY2F0aW9uIGV2ZW50IChlLmcuICc8cHJvcGVydHk+LWNoYW5nZWQnKVxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgSG9zdCBlbGVtZW50IGluc3RhbmNlIGhhbmRsaW5nIHRoZVxuICogICAgIG5vdGlmaWNhdGlvbiBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGZyb21Qcm9wIENoaWxkIGVsZW1lbnQgcHJvcGVydHkgdGhhdCB3YXMgYm91bmRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b1BhdGggSG9zdCBwcm9wZXJ0eS9wYXRoIHRoYXQgd2FzIGJvdW5kXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG5lZ2F0ZSBXaGV0aGVyIHRoZSBiaW5kaW5nIHdhcyBuZWdhdGVkXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaGFuZGxlTm90aWZpY2F0aW9uKGV2ZW50LCBpbnN0LCBmcm9tUHJvcCwgdG9QYXRoLCBuZWdhdGUpIHtcbiAgbGV0IHZhbHVlO1xuICBsZXQgZGV0YWlsID0gLyoqIEB0eXBlIHtPYmplY3R9ICovKGV2ZW50LmRldGFpbCk7XG4gIGxldCBmcm9tUGF0aCA9IGRldGFpbCAmJiBkZXRhaWwucGF0aDtcbiAgaWYgKGZyb21QYXRoKSB7XG4gICAgdG9QYXRoID0gdHJhbnNsYXRlKGZyb21Qcm9wLCB0b1BhdGgsIGZyb21QYXRoKTtcbiAgICB2YWx1ZSA9IGRldGFpbCAmJiBkZXRhaWwudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBldmVudC5jdXJyZW50VGFyZ2V0W2Zyb21Qcm9wXTtcbiAgfVxuICB2YWx1ZSA9IG5lZ2F0ZSA/ICF2YWx1ZSA6IHZhbHVlO1xuICBpZiAoIWluc3RbVFlQRVMuUkVBRF9PTkxZXSB8fCAhaW5zdFtUWVBFUy5SRUFEX09OTFldW3RvUGF0aF0pIHtcbiAgICBpZiAoaW5zdC5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHRvUGF0aCwgdmFsdWUsIHRydWUsIEJvb2xlYW4oZnJvbVBhdGgpKVxuICAgICAgJiYgKCFkZXRhaWwgfHwgIWRldGFpbC5xdWV1ZVByb3BlcnR5KSkge1xuICAgICAgaW5zdC5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcInJlZmxlY3RcIiBlZmZlY3QuXG4gKlxuICogU2V0cyB0aGUgYXR0cmlidXRlIG5hbWVkIGBpbmZvLmF0dHJOYW1lYCB0byB0aGUgZ2l2ZW4gcHJvcGVydHkgdmFsdWUuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHs/fSBpbmZvIEVmZmVjdCBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1blJlZmxlY3RFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICBsZXQgdmFsdWUgPSBpbnN0Ll9fZGF0YVtwcm9wZXJ0eV07XG4gIGlmIChzYW5pdGl6ZURPTVZhbHVlKSB7XG4gICAgdmFsdWUgPSBzYW5pdGl6ZURPTVZhbHVlKHZhbHVlLCBpbmZvLmF0dHJOYW1lLCAnYXR0cmlidXRlJywgLyoqIEB0eXBlIHtOb2RlfSAqLyhpbnN0KSk7XG4gIH1cbiAgaW5zdC5fcHJvcGVydHlUb0F0dHJpYnV0ZShwcm9wZXJ0eSwgaW5mby5hdHRyTmFtZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIFJ1bnMgXCJjb21wdXRlZFwiIGVmZmVjdHMgZm9yIGEgc2V0IG9mIGNoYW5nZWQgcHJvcGVydGllcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gdGhlIGdlbmVyaWMgYHJ1bkVmZmVjdHNgIG1ldGhvZCBpbiB0aGF0IGl0XG4gKiBjb250aW51ZXMgdG8gcnVuIGNvbXB1dGVkIGVmZmVjdHMgYmFzZWQgb24gdGhlIG91dHB1dCBvZiBlYWNoIHBhc3MgdW50aWxcbiAqIHRoZXJlIGFyZSBubyBtb3JlIG5ld2x5IGNvbXB1dGVkIHByb3BlcnRpZXMuICBUaGlzIGVuc3VyZXMgdGhhdCBhbGxcbiAqIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIGNvbXB1dGVkIGJ5IHRoZSBpbml0aWFsIHNldCBvZiBjaGFuZ2VzIGFyZVxuICogY29tcHV0ZWQgYmVmb3JlIG90aGVyIGVmZmVjdHMgKGJpbmRpbmcgcHJvcGFnYXRpb24sIG9ic2VydmVycywgYW5kIG5vdGlmeSlcbiAqIHJ1bi5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHs/T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIGNoYW5nZWQgcHJvcGVydGllc1xuICogQHBhcmFtIHs/T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBydW5Db21wdXRlZEVmZmVjdHMoaW5zdCwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpIHtcbiAgbGV0IGNvbXB1dGVFZmZlY3RzID0gaW5zdFtUWVBFUy5DT01QVVRFXTtcbiAgaWYgKGNvbXB1dGVFZmZlY3RzKSB7XG4gICAgbGV0IGlucHV0UHJvcHMgPSBjaGFuZ2VkUHJvcHM7XG4gICAgd2hpbGUgKHJ1bkVmZmVjdHMoaW5zdCwgY29tcHV0ZUVmZmVjdHMsIGlucHV0UHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocykpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAob2xkUHJvcHMpLCBpbnN0Ll9fZGF0YU9sZCk7XG4gICAgICBPYmplY3QuYXNzaWduKC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGNoYW5nZWRQcm9wcyksIGluc3QuX19kYXRhUGVuZGluZyk7XG4gICAgICBpbnB1dFByb3BzID0gaW5zdC5fX2RhdGFQZW5kaW5nO1xuICAgICAgaW5zdC5fX2RhdGFQZW5kaW5nID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcImNvbXB1dGVkIHByb3BlcnR5XCIgZWZmZWN0IGJ5IHJ1bm5pbmcgdGhlIG1ldGhvZCB3aXRoIHRoZVxuICogdmFsdWVzIG9mIHRoZSBhcmd1bWVudHMgc3BlY2lmaWVkIGluIHRoZSBgaW5mb2Agb2JqZWN0IGFuZCBzZXR0aW5nIHRoZVxuICogcmV0dXJuIHZhbHVlIHRvIHRoZSBjb21wdXRlZCBwcm9wZXJ0eSBzcGVjaWZpZWQuXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgVGhlIGluc3RhbmNlIHRoZSBlZmZlY3Qgd2lsbCBiZSBydW4gb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIHByb3BlcnR5XG4gKiBAcGFyYW0gez9PYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7P09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuQ29tcHV0ZWRFZmZlY3QoaW5zdCwgcHJvcGVydHksIHByb3BzLCBvbGRQcm9wcywgaW5mbykge1xuICBsZXQgcmVzdWx0ID0gcnVuTWV0aG9kRWZmZWN0KGluc3QsIHByb3BlcnR5LCBwcm9wcywgb2xkUHJvcHMsIGluZm8pO1xuICBsZXQgY29tcHV0ZWRQcm9wID0gaW5mby5tZXRob2RJbmZvO1xuICBpZiAoaW5zdC5fX2RhdGFIYXNBY2Nlc3NvciAmJiBpbnN0Ll9fZGF0YUhhc0FjY2Vzc29yW2NvbXB1dGVkUHJvcF0pIHtcbiAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHkoY29tcHV0ZWRQcm9wLCByZXN1bHQsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGluc3RbY29tcHV0ZWRQcm9wXSA9IHJlc3VsdDtcbiAgfVxufVxuXG4vKipcbiAqIENvbXB1dGVzIHBhdGggY2hhbmdlcyBiYXNlZCBvbiBwYXRoIGxpbmtzIHNldCB1cCB1c2luZyB0aGUgYGxpbmtQYXRoc2BcbiAqIEFQSS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2Ugd2hvc2UgcHJvcHMgYXJlIGNoYW5naW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRoYXQgaGFzIGNoYW5nZWRcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb2YgY2hhbmdlZCBwYXRoXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUxpbmtlZFBhdGhzKGluc3QsIHBhdGgsIHZhbHVlKSB7XG4gIGxldCBsaW5rcyA9IGluc3QuX19kYXRhTGlua2VkUGF0aHM7XG4gIGlmIChsaW5rcykge1xuICAgIGxldCBsaW5rO1xuICAgIGZvciAobGV0IGEgaW4gbGlua3MpIHtcbiAgICAgIGxldCBiID0gbGlua3NbYV07XG4gICAgICBpZiAoaXNEZXNjZW5kYW50KGEsIHBhdGgpKSB7XG4gICAgICAgIGxpbmsgPSB0cmFuc2xhdGUoYSwgYiwgcGF0aCk7XG4gICAgICAgIGluc3QuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChsaW5rLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVzY2VuZGFudChiLCBwYXRoKSkge1xuICAgICAgICBsaW5rID0gdHJhbnNsYXRlKGIsIGEsIHBhdGgpO1xuICAgICAgICBpbnN0Ll9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgobGluaywgdmFsdWUsIHRydWUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyAtLSBiaW5kaW5ncyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQWRkcyBiaW5kaW5nIG1ldGFkYXRhIHRvIHRoZSBjdXJyZW50IGBub2RlSW5mb2AsIGFuZCBiaW5kaW5nIGVmZmVjdHNcbiAqIGZvciBhbGwgcGFydCBkZXBlbmRlbmNpZXMgdG8gYHRlbXBsYXRlSW5mb2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ2xhc3MgdGhhdCBgX3BhcnNlVGVtcGxhdGVgIGlzIGN1cnJlbnRseVxuICogICBydW5uaW5nIG9uXG4gKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBraW5kIEJpbmRpbmcga2luZCwgZWl0aGVyICdwcm9wZXJ0eScsICdhdHRyaWJ1dGUnLCBvciAndGV4dCdcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXQgVGFyZ2V0IHByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB7IUFycmF5PCFCaW5kaW5nUGFydD59IHBhcnRzIEFycmF5IG9mIGJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHBhcmFtIHtzdHJpbmc9fSBsaXRlcmFsIExpdGVyYWwgdGV4dCBzdXJyb3VuZGluZyBiaW5kaW5nIHBhcnRzIChzcGVjaWZpZWRcbiAqICAgb25seSBmb3IgJ3Byb3BlcnR5JyBiaW5kaW5ncywgc2luY2UgdGhlc2UgbXVzdCBiZSBpbml0aWFsaXplZCBhcyBwYXJ0XG4gKiAgIG9mIGJvb3QtdXApXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkQmluZGluZyhjb25zdHJ1Y3RvciwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywga2luZCwgdGFyZ2V0LCBwYXJ0cywgbGl0ZXJhbCkge1xuICAvLyBDcmVhdGUgYmluZGluZyBtZXRhZGF0YSBhbmQgYWRkIHRvIG5vZGVJbmZvXG4gIG5vZGVJbmZvLmJpbmRpbmdzID0gbm9kZUluZm8uYmluZGluZ3MgfHwgW107XG4gIGxldCAvKiogQmluZGluZyAqLyBiaW5kaW5nID0geyBraW5kLCB0YXJnZXQsIHBhcnRzLCBsaXRlcmFsLCBpc0NvbXBvdW5kOiAocGFydHMubGVuZ3RoICE9PSAxKSB9O1xuICBub2RlSW5mby5iaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAvLyBBZGQgbGlzdGVuZXIgaW5mbyB0byBiaW5kaW5nIG1ldGFkYXRhXG4gIGlmIChzaG91bGRBZGRMaXN0ZW5lcihiaW5kaW5nKSkge1xuICAgIGxldCB7ZXZlbnQsIG5lZ2F0ZX0gPSBiaW5kaW5nLnBhcnRzWzBdO1xuICAgIGJpbmRpbmcubGlzdGVuZXJFdmVudCA9IGV2ZW50IHx8IChjYW1lbFRvRGFzaENhc2UodGFyZ2V0KSArICctY2hhbmdlZCcpO1xuICAgIGJpbmRpbmcubGlzdGVuZXJOZWdhdGUgPSBuZWdhdGU7XG4gIH1cbiAgLy8gQWRkIFwicHJvcGFnYXRlXCIgcHJvcGVydHkgZWZmZWN0cyB0byB0ZW1wbGF0ZUluZm9cbiAgbGV0IGluZGV4ID0gdGVtcGxhdGVJbmZvLm5vZGVJbmZvTGlzdC5sZW5ndGg7XG4gIGZvciAobGV0IGk9MDsgaTxiaW5kaW5nLnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHBhcnQgPSBiaW5kaW5nLnBhcnRzW2ldO1xuICAgIHBhcnQuY29tcG91bmRJbmRleCA9IGk7XG4gICAgYWRkRWZmZWN0Rm9yQmluZGluZ1BhcnQoY29uc3RydWN0b3IsIHRlbXBsYXRlSW5mbywgYmluZGluZywgcGFydCwgaW5kZXgpO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBwcm9wZXJ0eSBlZmZlY3RzIHRvIHRoZSBnaXZlbiBgdGVtcGxhdGVJbmZvYCBmb3IgdGhlIGdpdmVuIGJpbmRpbmdcbiAqIHBhcnQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ2xhc3MgdGhhdCBgX3BhcnNlVGVtcGxhdGVgIGlzIGN1cnJlbnRseVxuICogICBydW5uaW5nIG9uXG4gKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlXG4gKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGludG8gYG5vZGVJbmZvTGlzdGAgZm9yIHRoaXMgbm9kZVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gYWRkRWZmZWN0Rm9yQmluZGluZ1BhcnQoY29uc3RydWN0b3IsIHRlbXBsYXRlSW5mbywgYmluZGluZywgcGFydCwgaW5kZXgpIHtcbiAgaWYgKCFwYXJ0LmxpdGVyYWwpIHtcbiAgICBpZiAoYmluZGluZy5raW5kID09PSAnYXR0cmlidXRlJyAmJiBiaW5kaW5nLnRhcmdldFswXSA9PT0gJy0nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCBzZXQgYXR0cmlidXRlICcgKyBiaW5kaW5nLnRhcmdldCArXG4gICAgICAgICcgYmVjYXVzZSBcIi1cIiBpcyBub3QgYSB2YWxpZCBhdHRyaWJ1dGUgc3RhcnRpbmcgY2hhcmFjdGVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkZXBlbmRlbmNpZXMgPSBwYXJ0LmRlcGVuZGVuY2llcztcbiAgICAgIGxldCBpbmZvID0geyBpbmRleCwgYmluZGluZywgcGFydCwgZXZhbHVhdG9yOiBjb25zdHJ1Y3RvciB9O1xuICAgICAgZm9yIChsZXQgaj0wOyBqPGRlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuICAgICAgICBsZXQgdHJpZ2dlciA9IGRlcGVuZGVuY2llc1tqXTtcbiAgICAgICAgaWYgKHR5cGVvZiB0cmlnZ2VyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdHJpZ2dlciA9IHBhcnNlQXJnKHRyaWdnZXIpO1xuICAgICAgICAgIHRyaWdnZXIud2lsZGNhcmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0cnVjdG9yLl9hZGRUZW1wbGF0ZVByb3BlcnR5RWZmZWN0KHRlbXBsYXRlSW5mbywgdHJpZ2dlci5yb290UHJvcGVydHksIHtcbiAgICAgICAgICBmbjogcnVuQmluZGluZ0VmZmVjdCxcbiAgICAgICAgICBpbmZvLCB0cmlnZ2VyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiYmluZGluZ1wiIChwcm9wZXJ0eS9wYXRoIGJpbmRpbmcpIGVmZmVjdC5cbiAqXG4gKiBOb3RlIHRoYXQgYmluZGluZyBzeW50YXggaXMgb3ZlcnJpZGFibGUgdmlhIGBfcGFyc2VCaW5kaW5nc2AgYW5kXG4gKiBgX2V2YWx1YXRlQmluZGluZ2AuICBUaGlzIG1ldGhvZCB3aWxsIGNhbGwgYF9ldmFsdWF0ZUJpbmRpbmdgIGZvciBhbnlcbiAqIG5vbi1saXRlcmFsIHBhcnRzIHJldHVybmVkIGZyb20gYF9wYXJzZUJpbmRpbmdzYC4gIEhvd2V2ZXIsXG4gKiB0aGVyZSBpcyBubyBzdXBwb3J0IGZvciBfcGF0aF8gYmluZGluZ3MgdmlhIGN1c3RvbSBiaW5kaW5nIHBhcnRzLFxuICogYXMgdGhpcyBpcyBzcGVjaWZpYyB0byBQb2x5bWVyJ3MgcGF0aCBiaW5kaW5nIHN5bnRheC5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7P30gaW5mbyBFZmZlY3QgbWV0YWRhdGFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAqIEBwYXJhbSB7QXJyYXl9IG5vZGVMaXN0IExpc3Qgb2Ygbm9kZXMgYXNzb2NpYXRlZCB3aXRoIGBub2RlSW5mb0xpc3RgIHRlbXBsYXRlXG4gKiAgIG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcnVuQmluZGluZ0VmZmVjdChpbnN0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGluZm8sIGhhc1BhdGhzLCBub2RlTGlzdCkge1xuICBsZXQgbm9kZSA9IG5vZGVMaXN0W2luZm8uaW5kZXhdO1xuICBsZXQgYmluZGluZyA9IGluZm8uYmluZGluZztcbiAgbGV0IHBhcnQgPSBpbmZvLnBhcnQ7XG4gIC8vIFN1YnBhdGggbm90aWZpY2F0aW9uOiB0cmFuc2Zvcm0gcGF0aCBhbmQgc2V0IHRvIGNsaWVudFxuICAvLyBlLmcuOiBmb289XCJ7e29iai5zdWJ9fVwiLCBwYXRoOiAnb2JqLnN1Yi5wcm9wJywgc2V0ICdmb28ucHJvcCc9b2JqLnN1Yi5wcm9wXG4gIGlmIChoYXNQYXRocyAmJiBwYXJ0LnNvdXJjZSAmJiAocGF0aC5sZW5ndGggPiBwYXJ0LnNvdXJjZS5sZW5ndGgpICYmXG4gICAgICAoYmluZGluZy5raW5kID09ICdwcm9wZXJ0eScpICYmICFiaW5kaW5nLmlzQ29tcG91bmQgJiZcbiAgICAgIG5vZGUuX19pc1Byb3BlcnR5RWZmZWN0c0NsaWVudCAmJlxuICAgICAgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvciAmJiBub2RlLl9fZGF0YUhhc0FjY2Vzc29yW2JpbmRpbmcudGFyZ2V0XSkge1xuICAgIGxldCB2YWx1ZSA9IHByb3BzW3BhdGhdO1xuICAgIHBhdGggPSB0cmFuc2xhdGUocGFydC5zb3VyY2UsIGJpbmRpbmcudGFyZ2V0LCBwYXRoKTtcbiAgICBpZiAobm9kZS5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHZhbHVlLCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgIGluc3QuX2VucXVldWVDbGllbnQobm9kZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCB2YWx1ZSA9IGluZm8uZXZhbHVhdG9yLl9ldmFsdWF0ZUJpbmRpbmcoaW5zdCwgcGFydCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgLy8gUHJvcGFnYXRlIHZhbHVlIHRvIGNoaWxkXG4gICAgYXBwbHlCaW5kaW5nVmFsdWUoaW5zdCwgbm9kZSwgYmluZGluZywgcGFydCwgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgZm9yIGFuIFwiYmluZGluZ1wiIChiaW5kaW5nKSBlZmZlY3QgdG8gYSBub2RlLFxuICogZWl0aGVyIGFzIGEgcHJvcGVydHkgb3IgYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IFRoZSBpbnN0YW5jZSBvd25pbmcgdGhlIGJpbmRpbmcgZWZmZWN0XG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGFyZ2V0IG5vZGUgZm9yIGJpbmRpbmdcbiAqIEBwYXJhbSB7IUJpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHBhcmFtIHshQmluZGluZ1BhcnR9IHBhcnQgQmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFwcGx5QmluZGluZ1ZhbHVlKGluc3QsIG5vZGUsIGJpbmRpbmcsIHBhcnQsIHZhbHVlKSB7XG4gIHZhbHVlID0gY29tcHV0ZUJpbmRpbmdWYWx1ZShub2RlLCB2YWx1ZSwgYmluZGluZywgcGFydCk7XG4gIGlmIChzYW5pdGl6ZURPTVZhbHVlKSB7XG4gICAgdmFsdWUgPSBzYW5pdGl6ZURPTVZhbHVlKHZhbHVlLCBiaW5kaW5nLnRhcmdldCwgYmluZGluZy5raW5kLCBub2RlKTtcbiAgfVxuICBpZiAoYmluZGluZy5raW5kID09ICdhdHRyaWJ1dGUnKSB7XG4gICAgLy8gQXR0cmlidXRlIGJpbmRpbmdcbiAgICBpbnN0Ll92YWx1ZVRvTm9kZUF0dHJpYnV0ZSgvKiogQHR5cGUge0VsZW1lbnR9ICovKG5vZGUpLCB2YWx1ZSwgYmluZGluZy50YXJnZXQpO1xuICB9IGVsc2Uge1xuICAgIC8vIFByb3BlcnR5IGJpbmRpbmdcbiAgICBsZXQgcHJvcCA9IGJpbmRpbmcudGFyZ2V0O1xuICAgIGlmIChub2RlLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgJiZcbiAgICAgICAgbm9kZS5fX2RhdGFIYXNBY2Nlc3NvciAmJiBub2RlLl9fZGF0YUhhc0FjY2Vzc29yW3Byb3BdKSB7XG4gICAgICBpZiAoIW5vZGVbVFlQRVMuUkVBRF9PTkxZXSB8fCAhbm9kZVtUWVBFUy5SRUFEX09OTFldW3Byb3BdKSB7XG4gICAgICAgIGlmIChub2RlLl9zZXRQZW5kaW5nUHJvcGVydHkocHJvcCwgdmFsdWUpKSB7XG4gICAgICAgICAgaW5zdC5fZW5xdWV1ZUNsaWVudChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSAge1xuICAgICAgaW5zdC5fc2V0VW5tYW5hZ2VkUHJvcGVydHlUb05vZGUobm9kZSwgcHJvcCwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgYW4gXCJiaW5kaW5nXCIgZWZmZWN0IHZhbHVlIGJhc2VkIG9uIGNvbXBvdW5kICYgbmVnYXRpb25cbiAqIGVmZmVjdCBtZXRhZGF0YSwgYXMgd2VsbCBhcyBoYW5kbGluZyBmb3Igc3BlY2lhbC1jYXNlIHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0aGUgdmFsdWUgd2lsbCBiZSBzZXQgdG9cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEBwYXJhbSB7IUJpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICogQHJldHVybiB7Kn0gVHJhbnNmb3JtZWQgdmFsdWUgdG8gc2V0XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjb21wdXRlQmluZGluZ1ZhbHVlKG5vZGUsIHZhbHVlLCBiaW5kaW5nLCBwYXJ0KSB7XG4gIGlmIChiaW5kaW5nLmlzQ29tcG91bmQpIHtcbiAgICBsZXQgc3RvcmFnZSA9IG5vZGUuX19kYXRhQ29tcG91bmRTdG9yYWdlW2JpbmRpbmcudGFyZ2V0XTtcbiAgICBzdG9yYWdlW3BhcnQuY29tcG91bmRJbmRleF0gPSB2YWx1ZTtcbiAgICB2YWx1ZSA9IHN0b3JhZ2Uuam9pbignJyk7XG4gIH1cbiAgaWYgKGJpbmRpbmcua2luZCAhPT0gJ2F0dHJpYnV0ZScpIHtcbiAgICAvLyBTb21lIGJyb3dzZXJzIHNlcmlhbGl6ZSBgdW5kZWZpbmVkYCB0byBgXCJ1bmRlZmluZWRcImBcbiAgICBpZiAoYmluZGluZy50YXJnZXQgPT09ICd0ZXh0Q29udGVudCcgfHxcbiAgICAgICAgKGJpbmRpbmcudGFyZ2V0ID09PSAndmFsdWUnICYmXG4gICAgICAgICAgKG5vZGUubG9jYWxOYW1lID09PSAnaW5wdXQnIHx8IG5vZGUubG9jYWxOYW1lID09PSAndGV4dGFyZWEnKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgPT0gdW5kZWZpbmVkID8gJycgOiB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGJpbmRpbmcncyBtZXRhZGF0YSBtZWV0cyBhbGwgdGhlIHJlcXVpcmVtZW50cyB0byBhbGxvd1xuICogMi13YXkgYmluZGluZywgYW5kIHRoZXJlZm9yZSBhIGA8cHJvcGVydHk+LWNoYW5nZWRgIGV2ZW50IGxpc3RlbmVyIHNob3VsZCBiZVxuICogYWRkZWQ6XG4gKiAtIHVzZWQgY3VybHkgYnJhY2VzXG4gKiAtIGlzIGEgcHJvcGVydHkgKG5vdCBhdHRyaWJ1dGUpIGJpbmRpbmdcbiAqIC0gaXMgbm90IGEgdGV4dENvbnRlbnQgYmluZGluZ1xuICogLSBpcyBub3QgY29tcG91bmRcbiAqXG4gKiBAcGFyYW0geyFCaW5kaW5nfSBiaW5kaW5nIEJpbmRpbmcgbWV0YWRhdGFcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgMi13YXkgbGlzdGVuZXIgc2hvdWxkIGJlIGFkZGVkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzaG91bGRBZGRMaXN0ZW5lcihiaW5kaW5nKSB7XG4gIHJldHVybiBCb29sZWFuKGJpbmRpbmcudGFyZ2V0KSAmJlxuICAgICAgICAgYmluZGluZy5raW5kICE9ICdhdHRyaWJ1dGUnICYmXG4gICAgICAgICBiaW5kaW5nLmtpbmQgIT0gJ3RleHQnICYmXG4gICAgICAgICAhYmluZGluZy5pc0NvbXBvdW5kICYmXG4gICAgICAgICBiaW5kaW5nLnBhcnRzWzBdLm1vZGUgPT09ICd7Jztcbn1cblxuLyoqXG4gKiBTZXR1cCBjb21wb3VuZCBiaW5kaW5nIHN0b3JhZ2Ugc3RydWN0dXJlcywgbm90aWZ5IGxpc3RlbmVycywgYW5kIGRhdGFIb3N0XG4gKiByZWZlcmVuY2VzIG9udG8gdGhlIGJvdW5kIG5vZGVMaXN0LlxuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IEluc3RhbmNlIHRoYXQgYmFzIGJlZW4gcHJldmlvdXNseVxuICogICAgIGJvdW5kXG4gKiBAcGFyYW0ge1RlbXBsYXRlSW5mb30gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBCaW5kaW5ncyhpbnN0LCB0ZW1wbGF0ZUluZm8pIHtcbiAgLy8gU2V0dXAgY29tcG91bmQgc3RvcmFnZSwgZGF0YUhvc3QsIGFuZCBub3RpZnkgbGlzdGVuZXJzXG4gIGxldCB7bm9kZUxpc3QsIG5vZGVJbmZvTGlzdH0gPSB0ZW1wbGF0ZUluZm87XG4gIGlmIChub2RlSW5mb0xpc3QubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZUluZm9MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgaW5mbyA9IG5vZGVJbmZvTGlzdFtpXTtcbiAgICAgIGxldCBub2RlID0gbm9kZUxpc3RbaV07XG4gICAgICBsZXQgYmluZGluZ3MgPSBpbmZvLmJpbmRpbmdzO1xuICAgICAgaWYgKGJpbmRpbmdzKSB7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgICAgICAgc2V0dXBDb21wb3VuZFN0b3JhZ2Uobm9kZSwgYmluZGluZyk7XG4gICAgICAgICAgYWRkTm90aWZ5TGlzdGVuZXIobm9kZSwgaW5zdCwgYmluZGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUuX19kYXRhSG9zdCA9IGluc3Q7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYF9fZGF0YUNvbXBvdW5kU3RvcmFnZWAgbG9jYWwgc3RvcmFnZSBvbiBhIGJvdW5kIG5vZGUgd2l0aFxuICogaW5pdGlhbCBsaXRlcmFsIGRhdGEgZm9yIGNvbXBvdW5kIGJpbmRpbmdzLCBhbmQgc2V0cyB0aGUgam9pbmVkXG4gKiBsaXRlcmFsIHBhcnRzIHRvIHRoZSBib3VuZCBwcm9wZXJ0eS5cbiAqXG4gKiBXaGVuIGNoYW5nZXMgdG8gY29tcG91bmQgcGFydHMgb2NjdXIsIHRoZXkgYXJlIGZpcnN0IHNldCBpbnRvIHRoZSBjb21wb3VuZFxuICogc3RvcmFnZSBhcnJheSBmb3IgdGhhdCBwcm9wZXJ0eSwgYW5kIHRoZW4gdGhlIGFycmF5IGlzIGpvaW5lZCB0byByZXN1bHQgaW5cbiAqIHRoZSBmaW5hbCB2YWx1ZSBzZXQgdG8gdGhlIHByb3BlcnR5L2F0dHJpYnV0ZS5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgQm91bmQgbm9kZSB0byBpbml0aWFsaXplXG4gKiBAcGFyYW0ge0JpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwQ29tcG91bmRTdG9yYWdlKG5vZGUsIGJpbmRpbmcpIHtcbiAgaWYgKGJpbmRpbmcuaXNDb21wb3VuZCkge1xuICAgIC8vIENyZWF0ZSBjb21wb3VuZCBzdG9yYWdlIG1hcFxuICAgIGxldCBzdG9yYWdlID0gbm9kZS5fX2RhdGFDb21wb3VuZFN0b3JhZ2UgfHxcbiAgICAgIChub2RlLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSA9IHt9KTtcbiAgICBsZXQgcGFydHMgPSBiaW5kaW5nLnBhcnRzO1xuICAgIC8vIENvcHkgbGl0ZXJhbHMgZnJvbSBwYXJ0cyBpbnRvIHN0b3JhZ2UgZm9yIHRoaXMgYmluZGluZ1xuICAgIGxldCBsaXRlcmFscyA9IG5ldyBBcnJheShwYXJ0cy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGo9MDsgajxwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgbGl0ZXJhbHNbal0gPSBwYXJ0c1tqXS5saXRlcmFsO1xuICAgIH1cbiAgICBsZXQgdGFyZ2V0ID0gYmluZGluZy50YXJnZXQ7XG4gICAgc3RvcmFnZVt0YXJnZXRdID0gbGl0ZXJhbHM7XG4gICAgLy8gQ29uZmlndXJlIHByb3BlcnRpZXMgd2l0aCB0aGVpciBsaXRlcmFsIHBhcnRzXG4gICAgaWYgKGJpbmRpbmcubGl0ZXJhbCAmJiBiaW5kaW5nLmtpbmQgPT0gJ3Byb3BlcnR5Jykge1xuICAgICAgLy8gTm90ZSwgY2xhc3NOYW1lIG5lZWRzIHN0eWxlIHNjb3Bpbmcgc28gdGhpcyBuZWVkcyB3cmFwcGluZy5cbiAgICAgIC8vIFdlIG1heSBhbHNvIHdhbnQgdG8gY29uc2lkZXIgZG9pbmcgdGhpcyBmb3IgYHRleHRDb250ZW50YCBhbmRcbiAgICAgIC8vIGBpbm5lckhUTUxgLlxuICAgICAgaWYgKHRhcmdldCA9PT0gJ2NsYXNzTmFtZScpIHtcbiAgICAgICAgbm9kZSA9IHdyYXAobm9kZSk7XG4gICAgICB9XG4gICAgICBub2RlW3RhcmdldF0gPSBiaW5kaW5nLmxpdGVyYWw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWRkcyBhIDItd2F5IGJpbmRpbmcgbm90aWZpY2F0aW9uIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBub2RlIHNwZWNpZmllZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBub2RlIENoaWxkIGVsZW1lbnQgdG8gYWRkIGxpc3RlbmVyIHRvXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBIb3N0IGVsZW1lbnQgaW5zdGFuY2UgdG8gaGFuZGxlXG4gKiAgICAgbm90aWZpY2F0aW9uIGV2ZW50XG4gKiBAcGFyYW0ge0JpbmRpbmd9IGJpbmRpbmcgQmluZGluZyBtZXRhZGF0YVxuICogQHJldHVybiB7dm9pZH1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZE5vdGlmeUxpc3RlbmVyKG5vZGUsIGluc3QsIGJpbmRpbmcpIHtcbiAgaWYgKGJpbmRpbmcubGlzdGVuZXJFdmVudCkge1xuICAgIGxldCBwYXJ0ID0gYmluZGluZy5wYXJ0c1swXTtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoYmluZGluZy5saXN0ZW5lckV2ZW50LCBmdW5jdGlvbihlKSB7XG4gICAgICBoYW5kbGVOb3RpZmljYXRpb24oZSwgaW5zdCwgYmluZGluZy50YXJnZXQsIHBhcnQuc291cmNlLCBwYXJ0Lm5lZ2F0ZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLy8gLS0gZm9yIG1ldGhvZC1iYXNlZCBlZmZlY3RzIChjb21wbGV4T2JzZXJ2ZXIgJiBjb21wdXRlZCkgLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBBZGRzIHByb3BlcnR5IGVmZmVjdHMgZm9yIGVhY2ggYXJndW1lbnQgaW4gdGhlIG1ldGhvZCBzaWduYXR1cmUgKGFuZFxuICogb3B0aW9uYWxseSwgZm9yIHRoZSBtZXRob2QgbmFtZSBpZiBgZHluYW1pY2AgaXMgdHJ1ZSkgdGhhdCBjYWxscyB0aGVcbiAqIHByb3ZpZGVkIGVmZmVjdCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnQgfCBPYmplY3R9IG1vZGVsIFByb3RvdHlwZSBvciBpbnN0YW5jZVxuICogQHBhcmFtIHshTWV0aG9kU2lnbmF0dXJlfSBzaWcgTWV0aG9kIHNpZ25hdHVyZSBtZXRhZGF0YVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSBvZiBwcm9wZXJ0eSBlZmZlY3QgdG8gYWRkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlZmZlY3RGbiBGdW5jdGlvbiB0byBydW4gd2hlbiBhcmd1bWVudHMgY2hhbmdlXG4gKiBAcGFyYW0geyo9fSBtZXRob2RJbmZvIEVmZmVjdC1zcGVjaWZpYyBpbmZvcm1hdGlvbiB0byBiZSBpbmNsdWRlZCBpblxuICogICBtZXRob2QgZWZmZWN0IG1ldGFkYXRhXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0PX0gZHluYW1pY0ZuIEJvb2xlYW4gb3Igb2JqZWN0IG1hcCBpbmRpY2F0aW5nIHdoZXRoZXJcbiAqICAgbWV0aG9kIG5hbWVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC4gTm90ZSxcbiAqICAgZGVmYXVsdHMgdG8gdHJ1ZSBpZiB0aGUgc2lnbmF0dXJlIGlzIHN0YXRpYyAoc2lnLnN0YXRpYyBpcyB0cnVlKS5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVNZXRob2RFZmZlY3QobW9kZWwsIHNpZywgdHlwZSwgZWZmZWN0Rm4sIG1ldGhvZEluZm8sIGR5bmFtaWNGbikge1xuICBkeW5hbWljRm4gPSBzaWcuc3RhdGljIHx8IChkeW5hbWljRm4gJiZcbiAgICAodHlwZW9mIGR5bmFtaWNGbiAhPT0gJ29iamVjdCcgfHwgZHluYW1pY0ZuW3NpZy5tZXRob2ROYW1lXSkpO1xuICBsZXQgaW5mbyA9IHtcbiAgICBtZXRob2ROYW1lOiBzaWcubWV0aG9kTmFtZSxcbiAgICBhcmdzOiBzaWcuYXJncyxcbiAgICBtZXRob2RJbmZvLFxuICAgIGR5bmFtaWNGblxuICB9O1xuICBmb3IgKGxldCBpPTAsIGFyZzsgKGk8c2lnLmFyZ3MubGVuZ3RoKSAmJiAoYXJnPXNpZy5hcmdzW2ldKTsgaSsrKSB7XG4gICAgaWYgKCFhcmcubGl0ZXJhbCkge1xuICAgICAgbW9kZWwuX2FkZFByb3BlcnR5RWZmZWN0KGFyZy5yb290UHJvcGVydHksIHR5cGUsIHtcbiAgICAgICAgZm46IGVmZmVjdEZuLCBpbmZvOiBpbmZvLCB0cmlnZ2VyOiBhcmdcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoZHluYW1pY0ZuKSB7XG4gICAgbW9kZWwuX2FkZFByb3BlcnR5RWZmZWN0KHNpZy5tZXRob2ROYW1lLCB0eXBlLCB7XG4gICAgICBmbjogZWZmZWN0Rm4sIGluZm86IGluZm9cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENhbGxzIGEgbWV0aG9kIHdpdGggYXJndW1lbnRzIG1hcnNoYWxlZCBmcm9tIHByb3BlcnRpZXMgb24gdGhlIGluc3RhbmNlXG4gKiBiYXNlZCBvbiB0aGUgbWV0aG9kIHNpZ25hdHVyZSBjb250YWluZWQgaW4gdGhlIGVmZmVjdCBtZXRhZGF0YS5cbiAqXG4gKiBNdWx0aS1wcm9wZXJ0eSBvYnNlcnZlcnMsIGNvbXB1dGVkIHByb3BlcnRpZXMsIGFuZCBpbmxpbmUgY29tcHV0aW5nXG4gKiBmdW5jdGlvbnMgY2FsbCB0aGlzIGZ1bmN0aW9uIHRvIGludm9rZSB0aGUgbWV0aG9kLCB0aGVuIHVzZSB0aGUgcmV0dXJuXG4gKiB2YWx1ZSBhY2NvcmRpbmdseS5cbiAqXG4gKiBAcGFyYW0geyFQb2x5bWVyX1Byb3BlcnR5RWZmZWN0c30gaW5zdCBUaGUgaW5zdGFuY2UgdGhlIGVmZmVjdCB3aWxsIGJlIHJ1biBvblxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IE5hbWUgb2YgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBCYWcgb2YgY3VycmVudCBwcm9wZXJ0eSBjaGFuZ2VzXG4gKiBAcGFyYW0ge09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gez99IGluZm8gRWZmZWN0IG1ldGFkYXRhXG4gKiBAcmV0dXJuIHsqfSBSZXR1cm5zIHRoZSByZXR1cm4gdmFsdWUgZnJvbSB0aGUgbWV0aG9kIGludm9jYXRpb25cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1bk1ldGhvZEVmZmVjdChpbnN0LCBwcm9wZXJ0eSwgcHJvcHMsIG9sZFByb3BzLCBpbmZvKSB7XG4gIC8vIEluc3RhbmNlcyBjYW4gb3B0aW9uYWxseSBoYXZlIGEgX21ldGhvZEhvc3Qgd2hpY2ggYWxsb3dzIHJlZGlyZWN0aW5nIHdoZXJlXG4gIC8vIHRvIGZpbmQgbWV0aG9kcy4gQ3VycmVudGx5IHVzZWQgYnkgYHRlbXBsYXRpemVgLlxuICBsZXQgY29udGV4dCA9IGluc3QuX21ldGhvZEhvc3QgfHwgaW5zdDtcbiAgbGV0IGZuID0gY29udGV4dFtpbmZvLm1ldGhvZE5hbWVdO1xuICBpZiAoZm4pIHtcbiAgICBsZXQgYXJncyA9IGluc3QuX21hcnNoYWxBcmdzKGluZm8uYXJncywgcHJvcGVydHksIHByb3BzKTtcbiAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSBpZiAoIWluZm8uZHluYW1pY0ZuKSB7XG4gICAgY29uc29sZS53YXJuKCdtZXRob2QgYCcgKyBpbmZvLm1ldGhvZE5hbWUgKyAnYCBub3QgZGVmaW5lZCcpO1xuICB9XG59XG5cbmNvbnN0IGVtcHR5QXJyYXkgPSBbXTtcblxuLy8gUmVndWxhciBleHByZXNzaW9ucyB1c2VkIGZvciBiaW5kaW5nXG5jb25zdCBJREVOVCAgPSAnKD86JyArICdbYS16QS1aXyRdW1xcXFx3LjokXFxcXC0qXSonICsgJyknO1xuY29uc3QgTlVNQkVSID0gJyg/OicgKyAnWy0rXT9bMC05XSpcXFxcLj9bMC05XSsoPzpbZUVdWy0rXT9bMC05XSspPycgKyAnKSc7XG5jb25zdCBTUVVPVEVfU1RSSU5HID0gJyg/OicgKyAnXFwnKD86W15cXCdcXFxcXFxcXF18XFxcXFxcXFwuKSpcXCcnICsgJyknO1xuY29uc3QgRFFVT1RFX1NUUklORyA9ICcoPzonICsgJ1wiKD86W15cIlxcXFxcXFxcXXxcXFxcXFxcXC4pKlwiJyArICcpJztcbmNvbnN0IFNUUklORyA9ICcoPzonICsgU1FVT1RFX1NUUklORyArICd8JyArIERRVU9URV9TVFJJTkcgKyAnKSc7XG5jb25zdCBBUkdVTUVOVCA9ICcoPzooJyArIElERU5UICsgJ3wnICsgTlVNQkVSICsgJ3wnICsgIFNUUklORyArICcpXFxcXHMqJyArICcpJztcbmNvbnN0IEFSR1VNRU5UUyA9ICcoPzonICsgQVJHVU1FTlQgKyAnKD86LFxcXFxzKicgKyBBUkdVTUVOVCArICcpKicgKyAnKSc7XG5jb25zdCBBUkdVTUVOVF9MSVNUID0gJyg/OicgKyAnXFxcXChcXFxccyonICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoPzonICsgQVJHVU1FTlRTICsgJz8nICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxcXClcXFxccyonICsgJyknO1xuY29uc3QgQklORElORyA9ICcoJyArIElERU5UICsgJ1xcXFxzKicgKyBBUkdVTUVOVF9MSVNUICsgJz8nICsgJyknOyAvLyBHcm91cCAzXG5jb25zdCBPUEVOX0JSQUNLRVQgPSAnKFxcXFxbXFxcXFt8e3spJyArICdcXFxccyonO1xuY29uc3QgQ0xPU0VfQlJBQ0tFVCA9ICcoPzpdXXx9fSknO1xuY29uc3QgTkVHQVRFID0gJyg/OighKVxcXFxzKik/JzsgLy8gR3JvdXAgMlxuY29uc3QgRVhQUkVTU0lPTiA9IE9QRU5fQlJBQ0tFVCArIE5FR0FURSArIEJJTkRJTkcgKyBDTE9TRV9CUkFDS0VUO1xuY29uc3QgYmluZGluZ1JlZ2V4ID0gbmV3IFJlZ0V4cChFWFBSRVNTSU9OLCBcImdcIik7XG5cbi8qKlxuICogQ3JlYXRlIGEgc3RyaW5nIGZyb20gYmluZGluZyBwYXJ0cyBvZiBhbGwgdGhlIGxpdGVyYWwgcGFydHNcbiAqXG4gKiBAcGFyYW0geyFBcnJheTxCaW5kaW5nUGFydD59IHBhcnRzIEFsbCBwYXJ0cyB0byBzdHJpbmdpZnlcbiAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5nIG1hZGUgZnJvbSB0aGUgbGl0ZXJhbCBwYXJ0c1xuICovXG5mdW5jdGlvbiBsaXRlcmFsRnJvbVBhcnRzKHBhcnRzKSB7XG4gIGxldCBzID0gJyc7XG4gIGZvciAobGV0IGk9MDsgaTxwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBsaXRlcmFsID0gcGFydHNbaV0ubGl0ZXJhbDtcbiAgICBzICs9IGxpdGVyYWwgfHwgJyc7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogUGFyc2VzIGFuIGV4cHJlc3Npb24gc3RyaW5nIGZvciBhIG1ldGhvZCBzaWduYXR1cmUsIGFuZCByZXR1cm5zIGEgbWV0YWRhdGFcbiAqIGRlc2NyaWJpbmcgdGhlIG1ldGhvZCBpbiB0ZXJtcyBvZiBgbWV0aG9kTmFtZWAsIGBzdGF0aWNgICh3aGV0aGVyIGFsbCB0aGVcbiAqIGFyZ3VtZW50cyBhcmUgbGl0ZXJhbHMpLCBhbmQgYW4gYXJyYXkgb2YgYGFyZ3NgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gVGhlIGV4cHJlc3Npb24gdG8gcGFyc2VcbiAqIEByZXR1cm4gez9NZXRob2RTaWduYXR1cmV9IFRoZSBtZXRob2QgbWV0YWRhdGEgb2JqZWN0IGlmIGEgbWV0aG9kIGV4cHJlc3Npb24gd2FzXG4gKiAgIGZvdW5kLCBvdGhlcndpc2UgYHVuZGVmaW5lZGBcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlTWV0aG9kKGV4cHJlc3Npb24pIHtcbiAgLy8gdHJpZXMgdG8gbWF0Y2ggdmFsaWQgamF2YXNjcmlwdCBwcm9wZXJ0eSBuYW1lc1xuICBsZXQgbSA9IGV4cHJlc3Npb24ubWF0Y2goLyhbXlxcc10rPylcXCgoW1xcc1xcU10qKVxcKS8pO1xuICBpZiAobSkge1xuICAgIGxldCBtZXRob2ROYW1lID0gbVsxXTtcbiAgICBsZXQgc2lnID0geyBtZXRob2ROYW1lLCBzdGF0aWM6IHRydWUsIGFyZ3M6IGVtcHR5QXJyYXkgfTtcbiAgICBpZiAobVsyXS50cmltKCkpIHtcbiAgICAgIC8vIHJlcGxhY2UgZXNjYXBlZCBjb21tYXMgd2l0aCBjb21tYSBlbnRpdHksIHNwbGl0IG9uIHVuLWVzY2FwZWQgY29tbWFzXG4gICAgICBsZXQgYXJncyA9IG1bMl0ucmVwbGFjZSgvXFxcXCwvZywgJyZjb21tYTsnKS5zcGxpdCgnLCcpO1xuICAgICAgcmV0dXJuIHBhcnNlQXJncyhhcmdzLCBzaWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2lnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gYXJyYXkgb2YgYXJndW1lbnRzIGFuZCBzZXRzIHRoZSBgYXJnc2AgcHJvcGVydHkgb2YgdGhlIHN1cHBsaWVkXG4gKiBzaWduYXR1cmUgbWV0YWRhdGEgb2JqZWN0LiBTZXRzIHRoZSBgc3RhdGljYCBwcm9wZXJ0eSB0byBmYWxzZSBpZiBhbnlcbiAqIGFyZ3VtZW50IGlzIGEgbm9uLWxpdGVyYWwuXG4gKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gYXJnTGlzdCBBcnJheSBvZiBhcmd1bWVudCBuYW1lc1xuICogQHBhcmFtIHshTWV0aG9kU2lnbmF0dXJlfSBzaWcgTWV0aG9kIHNpZ25hdHVyZSBtZXRhZGF0YSBvYmplY3RcbiAqIEByZXR1cm4geyFNZXRob2RTaWduYXR1cmV9IFRoZSB1cGRhdGVkIHNpZ25hdHVyZSBtZXRhZGF0YSBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQXJncyhhcmdMaXN0LCBzaWcpIHtcbiAgc2lnLmFyZ3MgPSBhcmdMaXN0Lm1hcChmdW5jdGlvbihyYXdBcmcpIHtcbiAgICBsZXQgYXJnID0gcGFyc2VBcmcocmF3QXJnKTtcbiAgICBpZiAoIWFyZy5saXRlcmFsKSB7XG4gICAgICBzaWcuc3RhdGljID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBhcmc7XG4gIH0sIHRoaXMpO1xuICByZXR1cm4gc2lnO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbiBpbmRpdmlkdWFsIGFyZ3VtZW50LCBhbmQgcmV0dXJucyBhbiBhcmd1bWVudCBtZXRhZGF0YSBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gKlxuICogICB7XG4gKiAgICAgdmFsdWU6ICdwcm9wJywgICAgICAgIC8vIHByb3BlcnR5L3BhdGggb3IgbGl0ZXJhbCB2YWx1ZVxuICogICAgIGxpdGVyYWw6IGZhbHNlLCAgICAgICAvLyB3aGV0aGVyIGFyZ3VtZW50IGlzIGEgbGl0ZXJhbFxuICogICAgIHN0cnVjdHVyZWQ6IGZhbHNlLCAgICAvLyB3aGV0aGVyIHRoZSBwcm9wZXJ0eSBpcyBhIHBhdGhcbiAqICAgICByb290UHJvcGVydHk6ICdwcm9wJywgLy8gdGhlIHJvb3QgcHJvcGVydHkgb2YgdGhlIHBhdGhcbiAqICAgICB3aWxkY2FyZDogZmFsc2UgICAgICAgLy8gd2hldGhlciB0aGUgYXJndW1lbnQgd2FzIGEgd2lsZGNhcmQgJy4qJyBwYXRoXG4gKiAgIH1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmF3QXJnIFRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIGFyZ3VtZW50XG4gKiBAcmV0dXJuIHshTWV0aG9kQXJnfSBBcmd1bWVudCBtZXRhZGF0YSBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQXJnKHJhd0FyZykge1xuICAvLyBjbGVhbiB1cCB3aGl0ZXNwYWNlXG4gIGxldCBhcmcgPSByYXdBcmcudHJpbSgpXG4gICAgLy8gcmVwbGFjZSBjb21tYSBlbnRpdHkgd2l0aCBjb21tYVxuICAgIC5yZXBsYWNlKC8mY29tbWE7L2csICcsJylcbiAgICAvLyByZXBhaXIgZXh0cmEgZXNjYXBlIHNlcXVlbmNlczsgbm90ZSBvbmx5IGNvbW1hcyBzdHJpY3RseSBuZWVkXG4gICAgLy8gZXNjYXBpbmcsIGJ1dCB3ZSBhbGxvdyBhbnkgb3RoZXIgY2hhciB0byBiZSBlc2NhcGVkIHNpbmNlIGl0c1xuICAgIC8vIGxpa2VseSB1c2VycyB3aWxsIGRvIHRoaXNcbiAgICAucmVwbGFjZSgvXFxcXCguKS9nLCAnXFwkMScpXG4gICAgO1xuICAvLyBiYXNpYyBhcmd1bWVudCBkZXNjcmlwdG9yXG4gIGxldCBhID0ge1xuICAgIG5hbWU6IGFyZyxcbiAgICB2YWx1ZTogJycsXG4gICAgbGl0ZXJhbDogZmFsc2VcbiAgfTtcbiAgLy8gZGV0ZWN0IGxpdGVyYWwgdmFsdWUgKG11c3QgYmUgU3RyaW5nIG9yIE51bWJlcilcbiAgbGV0IGZjID0gYXJnWzBdO1xuICBpZiAoZmMgPT09ICctJykge1xuICAgIGZjID0gYXJnWzFdO1xuICB9XG4gIGlmIChmYyA+PSAnMCcgJiYgZmMgPD0gJzknKSB7XG4gICAgZmMgPSAnIyc7XG4gIH1cbiAgc3dpdGNoKGZjKSB7XG4gICAgY2FzZSBcIidcIjpcbiAgICBjYXNlICdcIic6XG4gICAgICBhLnZhbHVlID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgIGEubGl0ZXJhbCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcjJzpcbiAgICAgIGEudmFsdWUgPSBOdW1iZXIoYXJnKTtcbiAgICAgIGEubGl0ZXJhbCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgfVxuICAvLyBpZiBub3QgbGl0ZXJhbCwgbG9vayBmb3Igc3RydWN0dXJlZCBwYXRoXG4gIGlmICghYS5saXRlcmFsKSB7XG4gICAgYS5yb290UHJvcGVydHkgPSByb290KGFyZyk7XG4gICAgLy8gZGV0ZWN0IHN0cnVjdHVyZWQgcGF0aCAoaGFzIGRvdHMpXG4gICAgYS5zdHJ1Y3R1cmVkID0gaXNQYXRoKGFyZyk7XG4gICAgaWYgKGEuc3RydWN0dXJlZCkge1xuICAgICAgYS53aWxkY2FyZCA9IChhcmcuc2xpY2UoLTIpID09ICcuKicpO1xuICAgICAgaWYgKGEud2lsZGNhcmQpIHtcbiAgICAgICAgYS5uYW1lID0gYXJnLnNsaWNlKDAsIC0yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIGdldEFyZ1ZhbHVlKGRhdGEsIHByb3BzLCBwYXRoKSB7XG4gIGxldCB2YWx1ZSA9IGdldChkYXRhLCBwYXRoKTtcbiAgLy8gd2hlbiBkYXRhIGlzIG5vdCBzdG9yZWQgZS5nLiBgc3BsaWNlc2AsIGdldCB0aGUgdmFsdWUgZnJvbSBjaGFuZ2VkUHJvcHNcbiAgLy8gVE9ETyhrc2NoYWFmKTogTm90ZSwgdGhpcyBjYW4gY2F1c2UgYSByYXJlIGlzc3VlIHdoZXJlIHRoZSB3aWxkY2FyZFxuICAvLyBpbmZvLnZhbHVlIGNvdWxkIHB1bGwgYSBzdGFsZSB2YWx1ZSBvdXQgb2YgY2hhbmdlZFByb3BzIGR1cmluZyBhIHJlZW50cmFudFxuICAvLyBjaGFuZ2UgdGhhdCBzZXRzIHRoZSB2YWx1ZSBiYWNrIHRvIHVuZGVmaW5lZC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci9pc3N1ZXMvNTQ3OVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gcHJvcHNbcGF0aF07XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBkYXRhIGFwaVxuXG4vKipcbiAqIFNlbmRzIGFycmF5IHNwbGljZSBub3RpZmljYXRpb25zIChgLnNwbGljZXNgIGFuZCBgLmxlbmd0aGApXG4gKlxuICogTm90ZTogdGhpcyBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgbm9ybWFsaXplZCBwYXRoc1xuICpcbiAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IEluc3RhbmNlIHRvIHNlbmQgbm90aWZpY2F0aW9ucyB0b1xuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRoZSBtdXRhdGlvbnMgb2NjdXJyZWQgb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBhcnJheSB0aGF0IHdhcyBtdXRhdGVkXG4gKiBAcGFyYW0ge0FycmF5fSBzcGxpY2VzIEFycmF5IG9mIHNwbGljZSByZWNvcmRzXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm90aWZ5U3BsaWNlcyhpbnN0LCBhcnJheSwgcGF0aCwgc3BsaWNlcykge1xuICBpbnN0Lm5vdGlmeVBhdGgocGF0aCArICcuc3BsaWNlcycsIHsgaW5kZXhTcGxpY2VzOiBzcGxpY2VzIH0pO1xuICBpbnN0Lm5vdGlmeVBhdGgocGF0aCArICcubGVuZ3RoJywgYXJyYXkubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3BsaWNlIHJlY29yZCBhbmQgc2VuZHMgYW4gYXJyYXkgc3BsaWNlIG5vdGlmaWNhdGlvbiBmb3JcbiAqIHRoZSBkZXNjcmliZWQgbXV0YXRpb25cbiAqXG4gKiBOb3RlOiB0aGlzIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBub3JtYWxpemVkIHBhdGhzXG4gKlxuICogQHBhcmFtIHshUG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9IGluc3QgSW5zdGFuY2UgdG8gc2VuZCBub3RpZmljYXRpb25zIHRvXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdGhlIG11dGF0aW9ucyBvY2N1cnJlZCBvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gdGhlIGFycmF5IHRoYXQgd2FzIG11dGF0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0aGUgYXJyYXkgbXV0YXRpb24gb2NjdXJyZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlZENvdW50IE51bWJlciBvZiBhZGRlZCBpdGVtc1xuICogQHBhcmFtIHtBcnJheX0gcmVtb3ZlZCBBcnJheSBvZiByZW1vdmVkIGl0ZW1zXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbm90aWZ5U3BsaWNlKGluc3QsIGFycmF5LCBwYXRoLCBpbmRleCwgYWRkZWRDb3VudCwgcmVtb3ZlZCkge1xuICBub3RpZnlTcGxpY2VzKGluc3QsIGFycmF5LCBwYXRoLCBbe1xuICAgIGluZGV4OiBpbmRleCxcbiAgICBhZGRlZENvdW50OiBhZGRlZENvdW50LFxuICAgIHJlbW92ZWQ6IHJlbW92ZWQsXG4gICAgb2JqZWN0OiBhcnJheSxcbiAgICB0eXBlOiAnc3BsaWNlJ1xuICB9XSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiB1cHBlci1jYXNlZCB2ZXJzaW9uIG9mIHRoZSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU3RyaW5nIHRvIHVwcGVyY2FzZVxuICogQHJldHVybiB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZ1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXBwZXIobmFtZSkge1xuICByZXR1cm4gbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIG1ldGEtcHJvZ3JhbW1pbmcgZm9yIFBvbHltZXIncyB0ZW1wbGF0ZVxuICogYmluZGluZyBhbmQgZGF0YSBvYnNlcnZhdGlvbiAoY29sbGVjdGl2ZWx5LCBcInByb3BlcnR5IGVmZmVjdHNcIikgc3lzdGVtLlxuICpcbiAqIFRoaXMgbWl4aW4gdXNlcyBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGtleSBzdGF0aWMgbWV0aG9kcyBmb3IgYWRkaW5nXG4gKiBwcm9wZXJ0eSBlZmZlY3RzIHRvIGFuIGVsZW1lbnQgY2xhc3M6XG4gKiAtIGBhZGRQcm9wZXJ0eUVmZmVjdGBcbiAqIC0gYGNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXJgXG4gKiAtIGBjcmVhdGVNZXRob2RPYnNlcnZlcmBcbiAqIC0gYGNyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5YFxuICogLSBgY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eWBcbiAqIC0gYGNyZWF0ZVJlZmxlY3RlZFByb3BlcnR5YFxuICogLSBgY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eWBcbiAqIC0gYGJpbmRUZW1wbGF0ZWBcbiAqXG4gKiBFYWNoIG1ldGhvZCBjcmVhdGVzIG9uZSBvciBtb3JlIHByb3BlcnR5IGFjY2Vzc29ycywgYWxvbmcgd2l0aCBtZXRhZGF0YVxuICogdXNlZCBieSB0aGlzIG1peGluJ3MgaW1wbGVtZW50YXRpb24gb2YgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgdG8gcGVyZm9ybVxuICogdGhlIHByb3BlcnR5IGVmZmVjdHMuXG4gKlxuICogVW5kZXJzY29yZWQgdmVyc2lvbnMgb2YgdGhlIGFib3ZlIG1ldGhvZHMgYWxzbyBleGlzdCBvbiB0aGUgZWxlbWVudFxuICogcHJvdG90eXBlIGZvciBhZGRpbmcgcHJvcGVydHkgZWZmZWN0cyBvbiBpbnN0YW5jZXMgYXQgcnVudGltZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBtaXhpbiBvdmVycmlkZXMgc2V2ZXJhbCBgUHJvcGVydHlBY2Nlc3NvcnNgIG1ldGhvZHMsIGluXG4gKiBtYW55IGNhc2VzIHRvIG1haW50YWluIGd1YXJhbnRlZXMgcHJvdmlkZWQgYnkgdGhlIFBvbHltZXIgMS54IGZlYXR1cmVzO1xuICogbm90YWJseSBpdCBjaGFuZ2VzIHByb3BlcnR5IGFjY2Vzc29ycyB0byBiZSBzeW5jaHJvbm91cyBieSBkZWZhdWx0XG4gKiB3aGVyZWFzIHRoZSBkZWZhdWx0IHdoZW4gdXNpbmcgYFByb3BlcnR5QWNjZXNzb3JzYCBzdGFuZGFsb25lIGlzIHRvIGJlXG4gKiBhc3luYyBieSBkZWZhdWx0LlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQGFwcGxpZXNNaXhpbiBUZW1wbGF0ZVN0YW1wXG4gKiBAYXBwbGllc01peGluIFByb3BlcnR5QWNjZXNzb3JzXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgbWV0YS1wcm9ncmFtbWluZyBmb3IgUG9seW1lcidzXG4gKiB0ZW1wbGF0ZSBiaW5kaW5nIGFuZCBkYXRhIG9ic2VydmF0aW9uIHN5c3RlbS5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9wZXJ0eUVmZmVjdHMgPSBkZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlBY2Nlc3NvcnN9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1RlbXBsYXRlU3RhbXB9XG4gICAqIEB1bnJlc3RyaWN0ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbnN0IHByb3BlcnR5RWZmZWN0c0Jhc2UgPSBUZW1wbGF0ZVN0YW1wKFByb3BlcnR5QWNjZXNzb3JzKHN1cGVyQ2xhc3MpKTtcblxuICAvKipcbiAgICogQHBvbHltZXJcbiAgICogQG1peGluQ2xhc3NcbiAgICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydHlFZmZlY3RzfVxuICAgKiBAZXh0ZW5kcyB7cHJvcGVydHlFZmZlY3RzQmFzZX1cbiAgICogQHVucmVzdHJpY3RlZFxuICAgKi9cbiAgY2xhc3MgUHJvcGVydHlFZmZlY3RzIGV4dGVuZHMgcHJvcGVydHlFZmZlY3RzQmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAvLyBVc2VkIHRvIGlkZW50aWZ5IHVzZXJzIG9mIHRoaXMgbWl4aW4sIGFsYSBpbnN0YW5jZW9mXG4gICAgICB0aGlzLl9faXNQcm9wZXJ0eUVmZmVjdHNDbGllbnQgPSB0cnVlO1xuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICAvLyBOT1RFOiB1c2VkIHRvIHRyYWNrIHJlLWVudHJhbnQgY2FsbHMgdG8gYF9mbHVzaFByb3BlcnRpZXNgXG4gICAgICAvLyBwYXRoIGNoYW5nZXMgZGlydHkgY2hlY2sgYWdhaW5zdCBgX19kYXRhVGVtcGAgb25seSBkdXJpbmcgb25lIFwidHVyblwiXG4gICAgICAvLyBhbmQgYXJlIGNsZWFyZWQgd2hlbiBgX19kYXRhQ291bnRlcmAgcmV0dXJucyB0byAwLlxuICAgICAgdGhpcy5fX2RhdGFDb3VudGVyID0gMDtcbiAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgIHRoaXMuX19kYXRhQ2xpZW50c1JlYWR5O1xuICAgICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhVG9Ob3RpZnk7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHM7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fZGF0YUhhc1BhdGhzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZTtcbiAgICAgIC8qKiBAdHlwZSB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9ICovXG4gICAgICB0aGlzLl9fZGF0YUhvc3Q7XG4gICAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YVRlbXA7XG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fZGF0YUNsaWVudHNJbml0aWFsaXplZDtcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi9cbiAgICAgIHRoaXMuX19kYXRhO1xuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0fG51bGx9ICovXG4gICAgICB0aGlzLl9fZGF0YVBlbmRpbmc7XG4gICAgICAvKiogQHR5cGUgeyFPYmplY3R9ICovXG4gICAgICB0aGlzLl9fZGF0YU9sZDtcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX2NvbXB1dGVFZmZlY3RzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fcmVmbGVjdEVmZmVjdHM7XG4gICAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICAgIHRoaXMuX19ub3RpZnlFZmZlY3RzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fcHJvcGFnYXRlRWZmZWN0cztcbiAgICAgIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICAgICAgdGhpcy5fX29ic2VydmVFZmZlY3RzO1xuICAgICAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gICAgICB0aGlzLl9fcmVhZE9ubHk7XG4gICAgICAvKiogQHR5cGUgeyFUZW1wbGF0ZUluZm99ICovXG4gICAgICB0aGlzLl9fdGVtcGxhdGVJbmZvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBFZmZlY3QgcHJvdG90eXBlIHByb3BlcnR5IG5hbWUgbWFwLlxuICAgICAqL1xuICAgIGdldCBQUk9QRVJUWV9FRkZFQ1RfVFlQRVMoKSB7XG4gICAgICByZXR1cm4gVFlQRVM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgIGhvc3RTdGFjay5yZWdpc3Rlckhvc3QodGhpcyk7XG4gICAgICB0aGlzLl9fZGF0YUNsaWVudHNSZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cyA9IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5ID0gbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHMgPSBudWxsO1xuICAgICAgdGhpcy5fX2RhdGFIYXNQYXRocyA9IGZhbHNlO1xuICAgICAgLy8gTWF5IGJlIHNldCBvbiBpbnN0YW5jZSBwcmlvciB0byB1cGdyYWRlXG4gICAgICB0aGlzLl9fZGF0YUNvbXBvdW5kU3RvcmFnZSA9IHRoaXMuX19kYXRhQ29tcG91bmRTdG9yYWdlIHx8IG51bGw7XG4gICAgICB0aGlzLl9fZGF0YUhvc3QgPSB0aGlzLl9fZGF0YUhvc3QgfHwgbnVsbDtcbiAgICAgIHRoaXMuX19kYXRhVGVtcCA9IHt9O1xuICAgICAgdGhpcy5fX2RhdGFDbGllbnRzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5QWNjZXNzb3JzYCBpbXBsZW1lbnRhdGlvbiB0byBwcm92aWRlIGFcbiAgICAgKiBtb3JlIGVmZmljaWVudCBpbXBsZW1lbnRhdGlvbiBvZiBpbml0aWFsaXppbmcgcHJvcGVydGllcyBmcm9tXG4gICAgICogdGhlIHByb3RvdHlwZSBvbiB0aGUgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgUHJvcGVydGllcyB0byBpbml0aWFsaXplIG9uIHRoZSBwcm90b3R5cGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvdG9Qcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICB0aGlzLl9fZGF0YSA9IE9iamVjdC5jcmVhdGUocHJvcHMpO1xuICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShwcm9wcyk7XG4gICAgICB0aGlzLl9fZGF0YU9sZCA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcnNgIGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIHNldHRpbmdcbiAgICAgKiBgX3NldFByb3BlcnR5YCdzIGBzaG91bGROb3RpZnk6IHRydWVgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BlcnRpZXMgdG8gaW5pdGlhbGl6ZSBvbiB0aGUgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9pbml0aWFsaXplSW5zdGFuY2VQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBsZXQgcmVhZE9ubHkgPSB0aGlzW1RZUEVTLlJFQURfT05MWV07XG4gICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgIGlmICghcmVhZE9ubHkgfHwgIXJlYWRPbmx5W3Byb3BdKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFQZW5kaW5nID0gdGhpcy5fX2RhdGFQZW5kaW5nIHx8IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkID0gdGhpcy5fX2RhdGFPbGQgfHwge307XG4gICAgICAgICAgdGhpcy5fX2RhdGFbcHJvcF0gPSB0aGlzLl9fZGF0YVBlbmRpbmdbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFByb3RvdHlwZSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgYWRkUHJvcGVydHlFZmZlY3RgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBFZmZlY3QgdHlwZSwgZnJvbSB0aGlzLlBST1BFUlRZX0VGRkVDVF9UWVBFU1xuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUsIGVmZmVjdCkge1xuICAgICAgdGhpcy5fY3JlYXRlUHJvcGVydHlBY2Nlc3Nvcihwcm9wZXJ0eSwgdHlwZSA9PSBUWVBFUy5SRUFEX09OTFkpO1xuICAgICAgLy8gZWZmZWN0cyBhcmUgYWNjdW11bGF0ZWQgaW50byBhcnJheXMgcGVyIHByb3BlcnR5IGJhc2VkIG9uIHR5cGVcbiAgICAgIGxldCBlZmZlY3RzID0gZW5zdXJlT3duRWZmZWN0TWFwKHRoaXMsIHR5cGUpW3Byb3BlcnR5XTtcbiAgICAgIGlmICghZWZmZWN0cykge1xuICAgICAgICBlZmZlY3RzID0gdGhpc1t0eXBlXVtwcm9wZXJ0eV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIGVmZmVjdHMucHVzaChlZmZlY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGdpdmVuIHByb3BlcnR5IGVmZmVjdC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSB0aGUgZWZmZWN0IHdhcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBFZmZlY3QgdHlwZSwgZnJvbSB0aGlzLlBST1BFUlRZX0VGRkVDVF9UWVBFU1xuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3QgdG8gcmVtb3ZlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcmVtb3ZlUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUsIGVmZmVjdCkge1xuICAgICAgbGV0IGVmZmVjdHMgPSBlbnN1cmVPd25FZmZlY3RNYXAodGhpcywgdHlwZSlbcHJvcGVydHldO1xuICAgICAgbGV0IGlkeCA9IGVmZmVjdHMuaW5kZXhPZihlZmZlY3QpO1xuICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIGVmZmVjdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBwcm9wZXJ0eSBlZmZlY3RcbiAgICAgKiBvZiBhIGNlcnRhaW4gdHlwZS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0eXBlIEVmZmVjdCB0eXBlLCBmcm9tIHRoaXMuUFJPUEVSVFlfRUZGRUNUX1RZUEVTXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpc1xuICAgICAqICAgICB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgdHlwZSkge1xuICAgICAgbGV0IGVmZmVjdHMgPSB0aGlzW3R5cGVdO1xuICAgICAgcmV0dXJuIEJvb2xlYW4oZWZmZWN0cyAmJiBlZmZlY3RzW3Byb3BlcnR5XSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYSBcInJlYWQgb25seVwiXG4gICAgICogYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhbiBlZmZlY3Qgb2YgdGhpc1xuICAgICAqICAgICB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNSZWFkT25seUVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUFEX09OTFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJub3RpZnlcIlxuICAgICAqIHByb3BlcnR5IGVmZmVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGFuIGVmZmVjdCBvZiB0aGlzXG4gICAgICogICAgIHR5cGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2hhc05vdGlmeUVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5OT1RJRlkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY3VycmVudCBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGEgXCJyZWZsZWN0IHRvXG4gICAgICogYXR0cmlidXRlXCIgcHJvcGVydHkgZWZmZWN0IGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHByb3RvdHlwZS9pbnN0YW5jZSBoYXMgYW4gZWZmZWN0IG9mIHRoaXNcbiAgICAgKiAgICAgdHlwZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaGFzUmVmbGVjdEVmZmVjdChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hhc1Byb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5SRUZMRUNUKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgcHJvdG90eXBlL2luc3RhbmNlIGhhcyBhIFwiY29tcHV0ZWRcIlxuICAgICAqIHByb3BlcnR5IGVmZmVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm90b3R5cGUvaW5zdGFuY2UgaGFzIGFuIGVmZmVjdCBvZiB0aGlzXG4gICAgICogICAgIHR5cGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2hhc0NvbXB1dGVkRWZmZWN0KHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5faGFzUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLkNPTVBVVEUpO1xuICAgIH1cblxuICAgIC8vIFJ1bnRpbWUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHBlbmRpbmcgcHJvcGVydHkgb3IgcGF0aC4gIElmIHRoZSByb290IHByb3BlcnR5IG9mIHRoZSBwYXRoIGluXG4gICAgICogcXVlc3Rpb24gaGFkIG5vIGFjY2Vzc29yLCB0aGUgcGF0aCBpcyBzZXQsIG90aGVyd2lzZSBpdCBpcyBlbnF1ZXVlZFxuICAgICAqIHZpYSBgX3NldFBlbmRpbmdQcm9wZXJ0eWAuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzb2xhdGVzIHJlbGF0aXZlbHkgZXhwZW5zaXZlIGZ1bmN0aW9uYWxpdHkgbmVjZXNzYXJ5XG4gICAgICogZm9yIHRoZSBwdWJsaWMgQVBJIChgc2V0YCwgYHNldFByb3BlcnRpZXNgLCBgbm90aWZ5UGF0aGAsIGFuZCBwcm9wZXJ0eVxuICAgICAqIGNoYW5nZSBsaXN0ZW5lcnMgdmlhIHt7Li4ufX0gYmluZGluZ3MpLCBzdWNoIHRoYXQgaXQgaXMgb25seSBkb25lXG4gICAgICogd2hlbiBwYXRocyBlbnRlciB0aGUgc3lzdGVtLCBhbmQgbm90IGF0IGV2ZXJ5IHByb3BhZ2F0aW9uIHN0ZXAuICBJdFxuICAgICAqIGFsc28gc2V0cyBhIGBfX2RhdGFIYXNQYXRoc2AgZmxhZyBvbiB0aGUgaW5zdGFuY2Ugd2hpY2ggaXMgdXNlZCB0b1xuICAgICAqIGZhc3QtcGF0aCBzbG93ZXIgcGF0aC1tYXRjaGluZyBjb2RlIGluIHRoZSBwcm9wZXJ0eSBlZmZlY3RzIGhvc3QgcGF0aHMuXG4gICAgICpcbiAgICAgKiBgcGF0aGAgY2FuIGJlIGEgcGF0aCBzdHJpbmcgb3IgYXJyYXkgb2YgcGF0aCBwYXJ0cyBhcyBhY2NlcHRlZCBieSB0aGVcbiAgICAgKiBwdWJsaWMgQVBJLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8bnVtYmVyfHN0cmluZz59IHBhdGggUGF0aCB0byBzZXRcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNob3VsZE5vdGlmeSBTZXQgdG8gdHJ1ZSBpZiB0aGlzIGNoYW5nZSBzaG91bGRcbiAgICAgKiAgY2F1c2UgYSBwcm9wZXJ0eSBub3RpZmljYXRpb24gZXZlbnQgZGlzcGF0Y2hcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpc1BhdGhOb3RpZmljYXRpb24gSWYgdGhlIHBhdGggYmVpbmcgc2V0IGlzIGEgcGF0aFxuICAgICAqICAgbm90aWZpY2F0aW9uIG9mIGFuIGFscmVhZHkgY2hhbmdlZCB2YWx1ZSwgYXMgb3Bwb3NlZCB0byBhIHJlcXVlc3RcbiAgICAgKiAgIHRvIHNldCBhbmQgbm90aWZ5IHRoZSBjaGFuZ2UuICBJbiB0aGUgbGF0dGVyIGBmYWxzZWAgY2FzZSwgYSBkaXJ0eVxuICAgICAqICAgY2hlY2sgaXMgcGVyZm9ybWVkIGFuZCB0aGVuIHRoZSB2YWx1ZSBpcyBzZXQgdG8gdGhlIHBhdGggYmVmb3JlXG4gICAgICogICBlbnF1ZXVpbmcgdGhlIHBlbmRpbmcgcHJvcGVydHkgY2hhbmdlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvcGVydHkvcGF0aCB3YXMgZW5xdWV1ZWQgaW5cbiAgICAgKiAgIHRoZSBwZW5kaW5nIGNoYW5nZXMgYmFnLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHBhdGgsIHZhbHVlLCBzaG91bGROb3RpZnksIGlzUGF0aE5vdGlmaWNhdGlvbikge1xuICAgICAgaWYgKGlzUGF0aE5vdGlmaWNhdGlvbiB8fFxuICAgICAgICAgIHJvb3QoQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGhbMF0gOiBwYXRoKSAhPT0gcGF0aCkge1xuICAgICAgICAvLyBEaXJ0eSBjaGVjayBjaGFuZ2VzIGJlaW5nIHNldCB0byBhIHBhdGggYWdhaW5zdCB0aGUgYWN0dWFsIG9iamVjdCxcbiAgICAgICAgLy8gc2luY2UgdGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIHBhdGhzIGludG8gdGhlIHN5c3RlbTsgZnJvbSBoZXJlXG4gICAgICAgIC8vIHRoZSBvbmx5IGRpcnR5IGNoZWNrcyBhcmUgYWdhaW5zdCB0aGUgYF9fZGF0YVRlbXBgIGNhY2hlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gZHVwbGljYXRlIHdvcmsgaW4gdGhlIHNhbWUgdHVybiBvbmx5LiBOb3RlLCBpZiB0aGlzIHdhcyBhIG5vdGlmaWNhdGlvblxuICAgICAgICAvLyBvZiBhIGNoYW5nZSBhbHJlYWR5IHNldCB0byBhIHBhdGggKGlzUGF0aE5vdGlmaWNhdGlvbjogdHJ1ZSksXG4gICAgICAgIC8vIHdlIGFsd2F5cyBsZXQgdGhlIGNoYW5nZSB0aHJvdWdoIGFuZCBza2lwIHRoZSBgc2V0YCBzaW5jZSBpdCB3YXNcbiAgICAgICAgLy8gYWxyZWFkeSBkaXJ0eSBjaGVja2VkIGF0IHRoZSBwb2ludCBvZiBlbnRyeSBhbmQgdGhlIHVuZGVybHlpbmdcbiAgICAgICAgLy8gb2JqZWN0IGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZFxuICAgICAgICBpZiAoIWlzUGF0aE5vdGlmaWNhdGlvbikge1xuICAgICAgICAgIGxldCBvbGQgPSBnZXQodGhpcywgcGF0aCk7XG4gICAgICAgICAgcGF0aCA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoc2V0KHRoaXMsIHBhdGgsIHZhbHVlKSk7XG4gICAgICAgICAgLy8gVXNlIHByb3BlcnR5LWFjY2Vzc29yJ3Mgc2ltcGxlciBkaXJ0eSBjaGVja1xuICAgICAgICAgIGlmICghcGF0aCB8fCAhc3VwZXIuX3Nob3VsZFByb3BlcnR5Q2hhbmdlKHBhdGgsIHZhbHVlLCBvbGQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19kYXRhSGFzUGF0aHMgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5KC8qKkB0eXBle3N0cmluZ30qLyhwYXRoKSwgdmFsdWUsIHNob3VsZE5vdGlmeSkpIHtcbiAgICAgICAgICBjb21wdXRlTGlua2VkUGF0aHModGhpcywgLyoqQHR5cGV7c3RyaW5nfSovIChwYXRoKSwgdmFsdWUpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5fX2RhdGFIYXNBY2Nlc3NvciAmJiB0aGlzLl9fZGF0YUhhc0FjY2Vzc29yW3BhdGhdKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eSgvKipAdHlwZXtzdHJpbmd9Ki8ocGF0aCksIHZhbHVlLCBzaG91bGROb3RpZnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXNbcGF0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYSB2YWx1ZSB0byBhIG5vbi1Qb2x5bWVyIGVsZW1lbnQvbm9kZSdzIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogVGhlIGltcGxlbWVudGF0aW9uIG1ha2VzIGEgYmVzdC1lZmZvcnQgYXQgYmluZGluZyBpbnRlcm9wOlxuICAgICAqIFNvbWUgbmF0aXZlIGVsZW1lbnQgcHJvcGVydGllcyBoYXZlIHNpZGUtZWZmZWN0cyB3aGVuXG4gICAgICogcmUtc2V0dGluZyB0aGUgc2FtZSB2YWx1ZSAoZS5nLiBzZXR0aW5nIGA8aW5wdXQ+LnZhbHVlYCByZXNldHMgdGhlXG4gICAgICogY3Vyc29yIHBvc2l0aW9uKSwgc28gd2UgZG8gYSBkaXJ0eS1jaGVjayBiZWZvcmUgc2V0dGluZyB0aGUgdmFsdWUuXG4gICAgICogSG93ZXZlciwgZm9yIGJldHRlciBpbnRlcm9wIHdpdGggbm9uLVBvbHltZXIgY3VzdG9tIGVsZW1lbnRzIHRoYXRcbiAgICAgKiBhY2NlcHQgb2JqZWN0cywgd2UgZXhwbGljaXRseSByZS1zZXQgb2JqZWN0IGNoYW5nZXMgY29taW5nIGZyb20gdGhlXG4gICAgICogUG9seW1lciB3b3JsZCAod2hpY2ggbWF5IGluY2x1ZGUgZGVlcCBvYmplY3QgY2hhbmdlcyB3aXRob3V0IHRoZVxuICAgICAqIHRvcCByZWZlcmVuY2UgY2hhbmdpbmcpLCBlcnJpbmcgb24gdGhlIHNpZGUgb2YgcHJvdmlkaW5nIG1vcmVcbiAgICAgKiBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIGFsdGVybmF0ZSBhcHByb2FjaGVzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBUaGUgbm9kZSB0byBzZXQgYSBwcm9wZXJ0eSBvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc2V0VW5tYW5hZ2VkUHJvcGVydHlUb05vZGUobm9kZSwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIC8vIEl0IGlzIGEganVkZ21lbnQgY2FsbCB0aGF0IHJlc2V0dGluZyBwcmltaXRpdmVzIGlzXG4gICAgICAvLyBcImJhZFwiIGFuZCByZXNldHRpbmdzIG9iamVjdHMgaXMgYWxzbyBcImdvb2RcIjsgYWx0ZXJuYXRpdmVseSB3ZSBjb3VsZFxuICAgICAgLy8gaW1wbGVtZW50IGEgd2hpdGVsaXN0IG9mIHRhZyAmIHByb3BlcnR5IHZhbHVlcyB0aGF0IHNob3VsZCBuZXZlclxuICAgICAgLy8gYmUgcmVzZXQgKGUuZy4gPGlucHV0Pi52YWx1ZSAmJiA8c2VsZWN0Pi52YWx1ZSlcbiAgICAgIGlmICh2YWx1ZSAhPT0gbm9kZVtwcm9wXSB8fCB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm90ZSwgY2xhc3NOYW1lIG5lZWRzIHN0eWxlIHNjb3Bpbmcgc28gdGhpcyBuZWVkcyB3cmFwcGluZy5cbiAgICAgICAgaWYgKHByb3AgPT09ICdjbGFzc05hbWUnKSB7XG4gICAgICAgICAgbm9kZSA9IC8qKiBAdHlwZSB7IU5vZGV9ICovKHdyYXAobm9kZSkpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgdGhlIGBQcm9wZXJ0aWVzQ2hhbmdlZGAgaW1wbGVtZW50YXRpb24gdG8gaW50cm9kdWNlIHNwZWNpYWxcbiAgICAgKiBkaXJ0eSBjaGVjayBsb2dpYyBkZXBlbmRpbmcgb24gdGhlIHByb3BlcnR5ICYgdmFsdWUgYmVpbmcgc2V0OlxuICAgICAqXG4gICAgICogMS4gQW55IHZhbHVlIHNldCB0byBhIHBhdGggKGUuZy4gJ29iai5wcm9wJzogNDIgb3IgJ29iai5wcm9wJzogey4uLn0pXG4gICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFUZW1wYCwgZGlydHkgY2hlY2tlZCBhZ2FpbnN0IGBfX2RhdGFUZW1wYFxuICAgICAqIDIuIE9iamVjdCBzZXQgdG8gc2ltcGxlIHByb3BlcnR5IChlLmcuICdwcm9wJzogey4uLn0pXG4gICAgICogICAgU3RvcmVkIGluIGBfX2RhdGFUZW1wYCBhbmQgYF9fZGF0YWAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdFxuICAgICAqICAgIGBfX2RhdGFUZW1wYCBieSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGBfc2hvdWxkUHJvcGVydHlDaGFuZ2VgXG4gICAgICogMy4gUHJpbWl0aXZlIHZhbHVlIHNldCB0byBzaW1wbGUgcHJvcGVydHkgKGUuZy4gJ3Byb3AnOiA0MilcbiAgICAgKiAgICBTdG9yZWQgaW4gYF9fZGF0YWAsIGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBgX19kYXRhYFxuICAgICAqXG4gICAgICogVGhlIGRpcnR5LWNoZWNrIGlzIGltcG9ydGFudCB0byBwcmV2ZW50IGN5Y2xlcyBkdWUgdG8gdHdvLXdheVxuICAgICAqIG5vdGlmaWNhdGlvbiwgYnV0IHBhdGhzIGFuZCBvYmplY3RzIGFyZSBvbmx5IGRpcnR5IGNoZWNrZWQgYWdhaW5zdCBhbnlcbiAgICAgKiBwcmV2aW91cyB2YWx1ZSBzZXQgZHVyaW5nIHRoaXMgdHVybiB2aWEgYSBcInRlbXBvcmFyeSBjYWNoZVwiIHRoYXQgaXNcbiAgICAgKiBjbGVhcmVkIHdoZW4gdGhlIGxhc3QgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgZXhpdHMuIFRoaXMgaXMgc286XG4gICAgICogYS4gYW55IGNhY2hlZCBhcnJheSBwYXRocyAoZS5nLiAnYXJyYXkuMy5wcm9wJykgbWF5IGJlIGludmFsaWRhdGVkXG4gICAgICogICAgZHVlIHRvIGFycmF5IG11dGF0aW9ucyBsaWtlIHNoaWZ0L3Vuc2hpZnQvc3BsaWNlOyB0aGlzIGlzIGZpbmVcbiAgICAgKiAgICBzaW5jZSBwYXRoIGNoYW5nZXMgYXJlIGRpcnR5LWNoZWNrZWQgYXQgdXNlciBlbnRyeSBwb2ludHMgbGlrZSBgc2V0YFxuICAgICAqIGIuIGRpcnR5LWNoZWNraW5nIGZvciBvYmplY3RzIG9ubHkgbGFzdHMgb25lIHR1cm4gdG8gYWxsb3cgdGhlIHVzZXJcbiAgICAgKiAgICB0byBtdXRhdGUgdGhlIG9iamVjdCBpbi1wbGFjZSBhbmQgcmUtc2V0IGl0IHdpdGggdGhlIHNhbWUgaWRlbnRpdHlcbiAgICAgKiAgICBhbmQgaGF2ZSBhbGwgc3ViLXByb3BlcnRpZXMgcmUtcHJvcGFnYXRlZCBpbiBhIHN1YnNlcXVlbnQgdHVybi5cbiAgICAgKlxuICAgICAqIFRoZSB0ZW1wIGNhY2hlIGlzIG5vdCBuZWNlc3NhcmlseSBzdWZmaWNpZW50IHRvIHByZXZlbnQgaW52YWxpZCBhcnJheVxuICAgICAqIHBhdGhzLCBzaW5jZSBhIHNwbGljZSBjYW4gaGFwcGVuIGR1cmluZyB0aGUgc2FtZSB0dXJuICh3aXRoIHBhdGhvbG9naWNhbFxuICAgICAqIHVzZXIgY29kZSk7IHdlIGNvdWxkIGludHJvZHVjZSBhIFwiZml4dXBcIiBmb3IgdGVtcG9yYXJpbHkgY2FjaGVkIGFycmF5XG4gICAgICogcGF0aHMgaWYgbmVlZGVkOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyL2lzc3Vlcy80MjI3XG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHNob3VsZE5vdGlmeSBUcnVlIGlmIHByb3BlcnR5IHNob3VsZCBmaXJlIG5vdGlmaWNhdGlvblxuICAgICAqICAgZXZlbnQgKGFwcGxpZXMgb25seSBmb3IgYG5vdGlmeTogdHJ1ZWAgcHJvcGVydGllcylcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3BlcnR5IGNoYW5nZWRcbiAgICAgKi9cbiAgICBfc2V0UGVuZGluZ1Byb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSwgc2hvdWxkTm90aWZ5KSB7XG4gICAgICBsZXQgcHJvcElzUGF0aCA9IHRoaXMuX19kYXRhSGFzUGF0aHMgJiYgaXNQYXRoKHByb3BlcnR5KTtcbiAgICAgIGxldCBwcmV2UHJvcHMgPSBwcm9wSXNQYXRoID8gdGhpcy5fX2RhdGFUZW1wIDogdGhpcy5fX2RhdGE7XG4gICAgICBpZiAodGhpcy5fc2hvdWxkUHJvcGVydHlDaGFuZ2UocHJvcGVydHksIHZhbHVlLCBwcmV2UHJvcHNbcHJvcGVydHldKSkge1xuICAgICAgICBpZiAoIXRoaXMuX19kYXRhUGVuZGluZykge1xuICAgICAgICAgIHRoaXMuX19kYXRhUGVuZGluZyA9IHt9O1xuICAgICAgICAgIHRoaXMuX19kYXRhT2xkID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIG9sZCBpcyBjYXB0dXJlZCBmcm9tIHRoZSBsYXN0IHR1cm5cbiAgICAgICAgaWYgKCEocHJvcGVydHkgaW4gdGhpcy5fX2RhdGFPbGQpKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFPbGRbcHJvcGVydHldID0gdGhpcy5fX2RhdGFbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBhdGhzIGFyZSBzdG9yZWQgaW4gdGVtcG9yYXJ5IGNhY2hlIChjbGVhcmVkIGF0IGVuZCBvZiB0dXJuKSxcbiAgICAgICAgLy8gd2hpY2ggaXMgdXNlZCBmb3IgZGlydHktY2hlY2tpbmcsIGFsbCBvdGhlcnMgc3RvcmVkIGluIF9fZGF0YVxuICAgICAgICBpZiAocHJvcElzUGF0aCkge1xuICAgICAgICAgIHRoaXMuX19kYXRhVGVtcFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGwgY2hhbmdlcyBnbyBpbnRvIHBlbmRpbmcgcHJvcGVydHkgYmFnLCBwYXNzZWQgdG8gX3Byb3BlcnRpZXNDaGFuZ2VkXG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ1twcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgLy8gVHJhY2sgcHJvcGVydGllcyB0aGF0IHNob3VsZCBub3RpZnkgc2VwYXJhdGVseVxuICAgICAgICBpZiAocHJvcElzUGF0aCB8fCAodGhpc1tUWVBFUy5OT1RJRlldICYmIHRoaXNbVFlQRVMuTk9USUZZXVtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeSA9IHRoaXMuX19kYXRhVG9Ob3RpZnkgfHwge307XG4gICAgICAgICAgdGhpcy5fX2RhdGFUb05vdGlmeVtwcm9wZXJ0eV0gPSBzaG91bGROb3RpZnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGJhc2UgaW1wbGVtZW50YXRpb24gdG8gZW5zdXJlIGFsbCBhY2Nlc3NvcnMgc2V0IGBzaG91bGROb3RpZnlgXG4gICAgICogdG8gdHJ1ZSwgZm9yIHBlci1wcm9wZXJ0eSBub3RpZmljYXRpb24gdHJhY2tpbmcuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgTmFtZSBvZiB0aGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHNldFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIHRydWUpKSB7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIGBQcm9wZXJ0eUFjY2Vzc29yYCdzIGRlZmF1bHQgYXN5bmMgcXVldWluZyBvZlxuICAgICAqIGBfcHJvcGVydGllc0NoYW5nZWRgOiBpZiBgX19kYXRhUmVhZHlgIGlzIGZhbHNlIChoYXMgbm90IHlldCBiZWVuXG4gICAgICogbWFudWFsbHkgZmx1c2hlZCksIHRoZSBmdW5jdGlvbiBuby1vcHM7IG90aGVyd2lzZSBmbHVzaGVzXG4gICAgICogYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgc3luY2hyb25vdXNseS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCkge1xuICAgICAgaWYgKHRoaXMuX19kYXRhUmVhZHkpIHtcbiAgICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5xdWV1ZXMgdGhlIGdpdmVuIGNsaWVudCBvbiBhIGxpc3Qgb2YgcGVuZGluZyBjbGllbnRzLCB3aG9zZVxuICAgICAqIHBlbmRpbmcgcHJvcGVydHkgY2hhbmdlcyBjYW4gbGF0ZXIgYmUgZmx1c2hlZCB2aWEgYSBjYWxsIHRvXG4gICAgICogYF9mbHVzaENsaWVudHNgLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNsaWVudCBQcm9wZXJ0eUVmZmVjdHMgY2xpZW50IHRvIGVucXVldWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfZW5xdWV1ZUNsaWVudChjbGllbnQpIHtcbiAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzIHx8IFtdO1xuICAgICAgaWYgKGNsaWVudCAhPT0gdGhpcykge1xuICAgICAgICB0aGlzLl9fZGF0YVBlbmRpbmdDbGllbnRzLnB1c2goY2xpZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgc3VwZXJjbGFzcyBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9mbHVzaFByb3BlcnRpZXMoKSB7XG4gICAgICB0aGlzLl9fZGF0YUNvdW50ZXIrKztcbiAgICAgIHN1cGVyLl9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgIHRoaXMuX19kYXRhQ291bnRlci0tO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsdXNoZXMgYW55IGNsaWVudHMgcHJldmlvdXNseSBlbnF1ZXVlZCB2aWEgYF9lbnF1ZXVlQ2xpZW50YCwgY2F1c2luZ1xuICAgICAqIHRoZWlyIGBfZmx1c2hQcm9wZXJ0aWVzYCBtZXRob2QgdG8gcnVuLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2ZsdXNoQ2xpZW50cygpIHtcbiAgICAgIGlmICghdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWFkeUNsaWVudHMoKTtcbiAgICAgICAgLy8gT3ZlcnJpZGUgcG9pbnQgd2hlcmUgYWNjZXNzb3JzIGFyZSB0dXJuZWQgb247IGltcG9ydGFudGx5LFxuICAgICAgICAvLyB0aGlzIGlzIGFmdGVyIGNsaWVudHMgaGF2ZSBmdWxseSByZWFkaWVkLCBwcm92aWRpbmcgYSBndWFyYW50ZWVcbiAgICAgICAgLy8gdGhhdCBhbnkgcHJvcGVydHkgZWZmZWN0cyBvY2N1ciBvbmx5IGFmdGVyIGFsbCBjbGllbnRzIGFyZSByZWFkeS5cbiAgICAgICAgdGhpcy5fX2RhdGFSZWFkeSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9fZW5hYmxlT3JGbHVzaENsaWVudHMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBOT1RFOiBXZSBlbnN1cmUgY2xpZW50cyBlaXRoZXIgZW5hYmxlIG9yIGZsdXNoIGFzIGFwcHJvcHJpYXRlLiBUaGlzXG4gICAgLy8gaGFuZGxlcyB0d28gY29ybmVyIGNhc2VzOlxuICAgIC8vICgxKSBjbGllbnRzIGZsdXNoIHByb3Blcmx5IHdoZW4gY29ubmVjdGVkL2VuYWJsZWQgYmVmb3JlIHRoZSBob3N0XG4gICAgLy8gZW5hYmxlczsgZS5nLlxuICAgIC8vICAgKGEpIFRlbXBsYXRpemUgc3RhbXBzIHdpdGggbm8gcHJvcGVydGllcyBhbmQgZG9lcyBub3QgZmx1c2ggYW5kXG4gICAgLy8gICAoYikgdGhlIGluc3RhbmNlIGlzIGluc2VydGVkIGludG8gZG9tIGFuZFxuICAgIC8vICAgKGMpIHRoZW4gdGhlIGluc3RhbmNlIGZsdXNoZXMuXG4gICAgLy8gKDIpIGNsaWVudHMgZW5hYmxlIHByb3Blcmx5IHdoZW4gbm90IGNvbm5lY3RlZC9lbmFibGVkIHdoZW4gdGhlIGhvc3RcbiAgICAvLyBmbHVzaGVzOyBlLmcuXG4gICAgLy8gICAoYSkgYSB0ZW1wbGF0ZSBpcyBydW50aW1lIHN0YW1wZWQgYW5kIG5vdCB5ZXQgY29ubmVjdGVkL2VuYWJsZWRcbiAgICAvLyAgIChiKSBhIGhvc3Qgc2V0cyBhIHByb3BlcnR5LCBjYXVzaW5nIHN0YW1wZWQgZG9tIHRvIGZsdXNoXG4gICAgLy8gICAoYykgdGhlIHN0YW1wZWQgZG9tIGVuYWJsZXMuXG4gICAgX19lbmFibGVPckZsdXNoQ2xpZW50cygpIHtcbiAgICAgIGxldCBjbGllbnRzID0gdGhpcy5fX2RhdGFQZW5kaW5nQ2xpZW50cztcbiAgICAgIGlmIChjbGllbnRzKSB7XG4gICAgICAgIHRoaXMuX19kYXRhUGVuZGluZ0NsaWVudHMgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBjbGllbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGNsaWVudCA9IGNsaWVudHNbaV07XG4gICAgICAgICAgaWYgKCFjbGllbnQuX19kYXRhRW5hYmxlZCkge1xuICAgICAgICAgICAgY2xpZW50Ll9lbmFibGVQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjbGllbnQuX19kYXRhUGVuZGluZykge1xuICAgICAgICAgICAgY2xpZW50Ll9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGFueSBpbml0aWFsIHNldHVwIG9uIGNsaWVudCBkb20uIENhbGxlZCBiZWZvcmUgdGhlIGZpcnN0XG4gICAgICogYF9mbHVzaFByb3BlcnRpZXNgIGNhbGwgb24gY2xpZW50IGRvbSBhbmQgYmVmb3JlIGFueSBlbGVtZW50XG4gICAgICogb2JzZXJ2ZXJzIGFyZSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcmVhZHlDbGllbnRzKCkge1xuICAgICAgdGhpcy5fX2VuYWJsZU9yRmx1c2hDbGllbnRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIGJhZyBvZiBwcm9wZXJ0eSBjaGFuZ2VzIHRvIHRoaXMgaW5zdGFuY2UsIGFuZFxuICAgICAqIHN5bmNocm9ub3VzbHkgcHJvY2Vzc2VzIGFsbCBlZmZlY3RzIG9mIHRoZSBwcm9wZXJ0aWVzIGFzIGEgYmF0Y2guXG4gICAgICpcbiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtdXN0IGJlIHNpbXBsZSBwcm9wZXJ0aWVzLCBub3QgcGF0aHMuICBCYXRjaGVkXG4gICAgICogcGF0aCBwcm9wYWdhdGlvbiBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBvbmUgb3IgbW9yZSBrZXktdmFsdWUgcGFpcnMgd2hvc2Uga2V5IGlzXG4gICAgICogICBhIHByb3BlcnR5IGFuZCB2YWx1ZSBpcyB0aGUgbmV3IHZhbHVlIHRvIHNldCBmb3IgdGhhdCBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzZXRSZWFkT25seSBXaGVuIHRydWUsIGFueSBwcml2YXRlIHZhbHVlcyBzZXQgaW5cbiAgICAgKiAgIGBwcm9wc2Agd2lsbCBiZSBzZXQuIEJ5IGRlZmF1bHQsIGBzZXRQcm9wZXJ0aWVzYCB3aWxsIG5vdCBzZXRcbiAgICAgKiAgIGByZWFkT25seTogdHJ1ZWAgcm9vdCBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNldFByb3BlcnRpZXMocHJvcHMsIHNldFJlYWRPbmx5KSB7XG4gICAgICBmb3IgKGxldCBwYXRoIGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzZXRSZWFkT25seSB8fCAhdGhpc1tUWVBFUy5SRUFEX09OTFldIHx8ICF0aGlzW1RZUEVTLlJFQURfT05MWV1bcGF0aF0pIHtcbiAgICAgICAgICAvL1RPRE8oa3NjaGFhZik6IGV4cGxpY2l0bHkgZGlzYWxsb3cgcGF0aHMgaW4gc2V0UHJvcGVydHk/XG4gICAgICAgICAgLy8gd2lsZGNhcmQgb2JzZXJ2ZXJzIGN1cnJlbnRseSBvbmx5IHBhc3MgdGhlIGZpcnN0IGNoYW5nZWQgcGF0aFxuICAgICAgICAgIC8vIGluIHRoZSBgaW5mb2Agb2JqZWN0LCBhbmQgeW91IGNvdWxkIGRvIHNvbWUgb2RkIHRoaW5ncyBiYXRjaGluZ1xuICAgICAgICAgIC8vIHBhdGhzLCBlLmcuIHsnZm9vLmJhcic6IHsuLi59LCAnZm9vJzogbnVsbH1cbiAgICAgICAgICB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHlPclBhdGgocGF0aCwgcHJvcHNbcGF0aF0sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9pbnZhbGlkYXRlUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlBY2Nlc3NvcnNgIHNvIHRoYXQgcHJvcGVydHkgYWNjZXNzb3JcbiAgICAgKiBzaWRlIGVmZmVjdHMgYXJlIG5vdCBlbmFibGVkIHVudGlsIGFmdGVyIGNsaWVudCBkb20gaXMgZnVsbHkgcmVhZHkuXG4gICAgICogQWxzbyBjYWxscyBgX2ZsdXNoQ2xpZW50c2AgY2FsbGJhY2sgdG8gZW5zdXJlIGNsaWVudCBkb20gaXMgZW5hYmxlZFxuICAgICAqIHRoYXQgd2FzIG5vdCBlbmFibGVkIGFzIGEgcmVzdWx0IG9mIGZsdXNoaW5nIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIHJlYWR5KCkge1xuICAgICAgLy8gSXQgaXMgaW1wb3J0YW50IHRoYXQgYHN1cGVyLnJlYWR5KClgIGlzIG5vdCBjYWxsZWQgaGVyZSBhcyBpdFxuICAgICAgLy8gaW1tZWRpYXRlbHkgdHVybnMgb24gYWNjZXNzb3JzLiBJbnN0ZWFkLCB3ZSB3YWl0IHVudGlsIGByZWFkeUNsaWVudHNgXG4gICAgICAvLyB0byBlbmFibGUgYWNjZXNzb3JzIHRvIHByb3ZpZGUgYSBndWFyYW50ZWUgdGhhdCBjbGllbnRzIGFyZSByZWFkeVxuICAgICAgLy8gYmVmb3JlIHByb2Nlc3NpbmcgYW55IGFjY2Vzc29ycyBzaWRlIGVmZmVjdHMuXG4gICAgICB0aGlzLl9mbHVzaFByb3BlcnRpZXMoKTtcbiAgICAgIC8vIElmIG5vIGRhdGEgd2FzIHBlbmRpbmcsIGBfZmx1c2hQcm9wZXJ0aWVzYCB3aWxsIG5vdCBgZmx1c2hDbGllbnRzYFxuICAgICAgLy8gc28gZW5zdXJlIHRoaXMgaXMgZG9uZS5cbiAgICAgIGlmICghdGhpcy5fX2RhdGFDbGllbnRzUmVhZHkpIHtcbiAgICAgICAgdGhpcy5fZmx1c2hDbGllbnRzKCk7XG4gICAgICB9XG4gICAgICAvLyBCZWZvcmUgcmVhZHksIGNsaWVudCBub3RpZmljYXRpb25zIGRvIG5vdCB0cmlnZ2VyIF9mbHVzaFByb3BlcnRpZXMuXG4gICAgICAvLyBUaGVyZWZvcmUgYSBmbHVzaCBpcyBuZWNlc3NhcnkgaGVyZSBpZiBkYXRhIGhhcyBiZWVuIHNldC5cbiAgICAgIGlmICh0aGlzLl9fZGF0YVBlbmRpbmcpIHtcbiAgICAgICAgdGhpcy5fZmx1c2hQcm9wZXJ0aWVzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50cyBgUHJvcGVydHlBY2Nlc3NvcnNgJ3MgcHJvcGVydGllcyBjaGFuZ2VkIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogUnVucyBlYWNoIGNsYXNzIG9mIGVmZmVjdHMgZm9yIHRoZSBiYXRjaCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgaW5cbiAgICAgKiBhIHNwZWNpZmljIG9yZGVyIChjb21wdXRlLCBwcm9wYWdhdGUsIHJlZmxlY3QsIG9ic2VydmUsIG5vdGlmeSkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IGN1cnJlbnRQcm9wcyBCYWcgb2YgYWxsIGN1cnJlbnQgYWNjZXNzb3IgdmFsdWVzXG4gICAgICogQHBhcmFtIHs/T2JqZWN0fSBjaGFuZ2VkUHJvcHMgQmFnIG9mIHByb3BlcnRpZXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdFxuICAgICAqICAgY2FsbCB0byBgX3Byb3BlcnRpZXNDaGFuZ2VkYFxuICAgICAqIEBwYXJhbSB7P09iamVjdH0gb2xkUHJvcHMgQmFnIG9mIHByZXZpb3VzIHZhbHVlcyBmb3IgZWFjaCBwcm9wZXJ0eVxuICAgICAqICAgaW4gYGNoYW5nZWRQcm9wc2BcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9wcm9wZXJ0aWVzQ2hhbmdlZChjdXJyZW50UHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMpIHtcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIGxldCBjID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY2hhbmdlZFByb3BzIHx8IHt9KTtcbiAgICAgIC8vIHdpbmRvdy5kZWJ1ZyAmJiBjb25zb2xlLmdyb3VwKHRoaXMubG9jYWxOYW1lICsgJyMnICsgdGhpcy5pZCArICc6ICcgKyBjKTtcbiAgICAgIC8vIGlmICh3aW5kb3cuZGVidWcpIHsgZGVidWdnZXI7IH1cbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIGxldCBoYXNQYXRocyA9IHRoaXMuX19kYXRhSGFzUGF0aHM7XG4gICAgICB0aGlzLl9fZGF0YUhhc1BhdGhzID0gZmFsc2U7XG4gICAgICAvLyBDb21wdXRlIHByb3BlcnRpZXNcbiAgICAgIHJ1bkNvbXB1dGVkRWZmZWN0cyh0aGlzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAvLyBDbGVhciBub3RpZnkgcHJvcGVydGllcyBwcmlvciB0byBwb3NzaWJsZSByZWVudHJ5IChwcm9wYWdhdGUsIG9ic2VydmUpLFxuICAgICAgLy8gYnV0IGFmdGVyIGNvbXB1dGluZyBlZmZlY3RzIGhhdmUgYSBjaGFuY2UgdG8gYWRkIHRvIHRoZW1cbiAgICAgIGxldCBub3RpZnlQcm9wcyA9IHRoaXMuX19kYXRhVG9Ob3RpZnk7XG4gICAgICB0aGlzLl9fZGF0YVRvTm90aWZ5ID0gbnVsbDtcbiAgICAgIC8vIFByb3BhZ2F0ZSBwcm9wZXJ0aWVzIHRvIGNsaWVudHNcbiAgICAgIHRoaXMuX3Byb3BhZ2F0ZVByb3BlcnR5Q2hhbmdlcyhjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAvLyBGbHVzaCBjbGllbnRzXG4gICAgICB0aGlzLl9mbHVzaENsaWVudHMoKTtcbiAgICAgIC8vIFJlZmxlY3QgcHJvcGVydGllc1xuICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0aGlzW1RZUEVTLlJFRkxFQ1RdLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICAvLyBPYnNlcnZlIHByb3BlcnRpZXNcbiAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5PQlNFUlZFXSwgY2hhbmdlZFByb3BzLCBvbGRQcm9wcywgaGFzUGF0aHMpO1xuICAgICAgLy8gTm90aWZ5IHByb3BlcnRpZXMgdG8gaG9zdFxuICAgICAgaWYgKG5vdGlmeVByb3BzKSB7XG4gICAgICAgIHJ1bk5vdGlmeUVmZmVjdHModGhpcywgbm90aWZ5UHJvcHMsIGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKTtcbiAgICAgIH1cbiAgICAgIC8vIENsZWFyIHRlbXBvcmFyeSBjYWNoZSBhdCBlbmQgb2YgdHVyblxuICAgICAgaWYgKHRoaXMuX19kYXRhQ291bnRlciA9PSAxKSB7XG4gICAgICAgIHRoaXMuX19kYXRhVGVtcCA9IHt9O1xuICAgICAgfVxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgLy8gd2luZG93LmRlYnVnICYmIGNvbnNvbGUuZ3JvdXBFbmQodGhpcy5sb2NhbE5hbWUgKyAnIycgKyB0aGlzLmlkICsgJzogJyArIGMpO1xuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB0byBwcm9wYWdhdGUgYW55IHByb3BlcnR5IGNoYW5nZXMgdG8gc3RhbXBlZCB0ZW1wbGF0ZSBub2Rlc1xuICAgICAqIG1hbmFnZWQgYnkgdGhpcyBlbGVtZW50LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5nZWRQcm9wcyBCYWcgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9sZFByb3BzIEJhZyBvZiBwcmV2aW91cyB2YWx1ZXMgZm9yIGNoYW5nZWQgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzUGF0aHMgVHJ1ZSB3aXRoIGBwcm9wc2AgY29udGFpbnMgb25lIG9yIG1vcmUgcGF0aHNcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcHJvcGFnYXRlUHJvcGVydHlDaGFuZ2VzKGNoYW5nZWRQcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICBpZiAodGhpc1tUWVBFUy5QUk9QQUdBVEVdKSB7XG4gICAgICAgIHJ1bkVmZmVjdHModGhpcywgdGhpc1tUWVBFUy5QUk9QQUdBVEVdLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLCBoYXNQYXRocyk7XG4gICAgICB9XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGhpcy5fX3RlbXBsYXRlSW5mbztcbiAgICAgIHdoaWxlICh0ZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgcnVuRWZmZWN0cyh0aGlzLCB0ZW1wbGF0ZUluZm8ucHJvcGVydHlFZmZlY3RzLCBjaGFuZ2VkUHJvcHMsIG9sZFByb3BzLFxuICAgICAgICAgIGhhc1BhdGhzLCB0ZW1wbGF0ZUluZm8ubm9kZUxpc3QpO1xuICAgICAgICB0ZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm8ubmV4dFRlbXBsYXRlSW5mbztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGlhc2VzIG9uZSBkYXRhIHBhdGggYXMgYW5vdGhlciwgc3VjaCB0aGF0IHBhdGggbm90aWZpY2F0aW9ucyBmcm9tIG9uZVxuICAgICAqIGFyZSByb3V0ZWQgdG8gdGhlIG90aGVyLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHRvIFRhcmdldCBwYXRoIHRvIGxpbmsuXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IGZyb20gU291cmNlIHBhdGggdG8gbGluay5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBsaW5rUGF0aHModG8sIGZyb20pIHtcbiAgICAgIHRvID0gbm9ybWFsaXplKHRvKTtcbiAgICAgIGZyb20gPSBub3JtYWxpemUoZnJvbSk7XG4gICAgICB0aGlzLl9fZGF0YUxpbmtlZFBhdGhzID0gdGhpcy5fX2RhdGFMaW5rZWRQYXRocyB8fCB7fTtcbiAgICAgIHRoaXMuX19kYXRhTGlua2VkUGF0aHNbdG9dID0gZnJvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgZGF0YSBwYXRoIGFsaWFzIHByZXZpb3VzbHkgZXN0YWJsaXNoZWQgd2l0aCBgX2xpbmtQYXRoc2AuXG4gICAgICpcbiAgICAgKiBOb3RlLCB0aGUgcGF0aCB0byB1bmxpbmsgc2hvdWxkIGJlIHRoZSB0YXJnZXQgKGB0b2ApIHVzZWQgd2hlblxuICAgICAqIGxpbmtpbmcgdGhlIHBhdGhzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggVGFyZ2V0IHBhdGggdG8gdW5saW5rLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHVubGlua1BhdGhzKHBhdGgpIHtcbiAgICAgIHBhdGggPSBub3JtYWxpemUocGF0aCk7XG4gICAgICBpZiAodGhpcy5fX2RhdGFMaW5rZWRQYXRocykge1xuICAgICAgICBkZWxldGUgdGhpcy5fX2RhdGFMaW5rZWRQYXRoc1twYXRoXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb3RpZnkgdGhhdCBhbiBhcnJheSBoYXMgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiAgICAgdGhpcy5pdGVtcyA9IFsge25hbWU6ICdKaW0nfSwge25hbWU6ICdUb2RkJ30sIHtuYW1lOiAnQmlsbCd9IF07XG4gICAgICogICAgIC4uLlxuICAgICAqICAgICB0aGlzLml0ZW1zLnNwbGljZSgxLCAxLCB7bmFtZTogJ1NhbSd9KTtcbiAgICAgKiAgICAgdGhpcy5pdGVtcy5wdXNoKHtuYW1lOiAnQm9iJ30pO1xuICAgICAqICAgICB0aGlzLm5vdGlmeVNwbGljZXMoJ2l0ZW1zJywgW1xuICAgICAqICAgICAgIHsgaW5kZXg6IDEsIHJlbW92ZWQ6IFt7bmFtZTogJ1RvZGQnfV0sIGFkZGVkQ291bnQ6IDEsXG4gICAgICogICAgICAgICBvYmplY3Q6IHRoaXMuaXRlbXMsIHR5cGU6ICdzcGxpY2UnIH0sXG4gICAgICogICAgICAgeyBpbmRleDogMywgcmVtb3ZlZDogW10sIGFkZGVkQ291bnQ6IDEsXG4gICAgICogICAgICAgICBvYmplY3Q6IHRoaXMuaXRlbXMsIHR5cGU6ICdzcGxpY2UnfVxuICAgICAqICAgICBdKTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdGhhdCBzaG91bGQgYmUgbm90aWZpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc3BsaWNlcyBBcnJheSBvZiBzcGxpY2UgcmVjb3JkcyBpbmRpY2F0aW5nIG9yZGVyZWRcbiAgICAgKiAgIGNoYW5nZXMgdGhhdCBvY2N1cnJlZCB0byB0aGUgYXJyYXkuIEVhY2ggcmVjb3JkIHNob3VsZCBoYXZlIHRoZVxuICAgICAqICAgZm9sbG93aW5nIGZpZWxkczpcbiAgICAgKiAgICAqIGluZGV4OiBpbmRleCBhdCB3aGljaCB0aGUgY2hhbmdlIG9jY3VycmVkXG4gICAgICogICAgKiByZW1vdmVkOiBhcnJheSBvZiBpdGVtcyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoaXMgaW5kZXhcbiAgICAgKiAgICAqIGFkZGVkQ291bnQ6IG51bWJlciBvZiBuZXcgaXRlbXMgYWRkZWQgYXQgdGhpcyBpbmRleFxuICAgICAqICAgICogb2JqZWN0OiBhIHJlZmVyZW5jZSB0byB0aGUgYXJyYXkgaW4gcXVlc3Rpb25cbiAgICAgKiAgICAqIHR5cGU6IHRoZSBzdHJpbmcgbGl0ZXJhbCAnc3BsaWNlJ1xuICAgICAqXG4gICAgICogICBOb3RlIHRoYXQgc3BsaWNlIHJlY29yZHMgX211c3RfIGJlIG5vcm1hbGl6ZWQgc3VjaCB0aGF0IHRoZXkgYXJlXG4gICAgICogICByZXBvcnRlZCBpbiBpbmRleCBvcmRlciAocmF3IHJlc3VsdHMgZnJvbSBgT2JqZWN0Lm9ic2VydmVgIGFyZSBub3RcbiAgICAgKiAgIG9yZGVyZWQgYW5kIG11c3QgYmUgbm9ybWFsaXplZC9tZXJnZWQgYmVmb3JlIG5vdGlmeWluZykuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBub3RpZnlTcGxpY2VzKHBhdGgsIHNwbGljZXMpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovKGdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICBub3RpZnlTcGxpY2VzKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIHNwbGljZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgcmVhZGluZyBhIHZhbHVlIGZyb20gYSBwYXRoLlxuICAgICAqXG4gICAgICogTm90ZSwgaWYgYW55IHBhcnQgaW4gdGhlIHBhdGggaXMgdW5kZWZpbmVkLCB0aGlzIG1ldGhvZCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAgKHRoaXMgbWV0aG9kIGRvZXMgbm90IHRocm93IHdoZW4gZGVyZWZlcmVuY2luZyB1bmRlZmluZWRcbiAgICAgKiBwYXRocykuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8IUFycmF5PChzdHJpbmd8bnVtYmVyKT4pfSBwYXRoIFBhdGggdG8gdGhlIHZhbHVlXG4gICAgICogICB0byByZWFkLiAgVGhlIHBhdGggbWF5IGJlIHNwZWNpZmllZCBhcyBhIHN0cmluZyAoZS5nLiBgZm9vLmJhci5iYXpgKVxuICAgICAqICAgb3IgYW4gYXJyYXkgb2YgcGF0aCBwYXJ0cyAoZS5nLiBgWydmb28uYmFyJywgJ2JheiddYCkuICBOb3RlIHRoYXRcbiAgICAgKiAgIGJyYWNrZXRlZCBleHByZXNzaW9ucyBhcmUgbm90IHN1cHBvcnRlZDsgc3RyaW5nLWJhc2VkIHBhdGggcGFydHNcbiAgICAgKiAgICptdXN0KiBiZSBzZXBhcmF0ZWQgYnkgZG90cy4gIE5vdGUgdGhhdCB3aGVuIGRlcmVmZXJlbmNpbmcgYXJyYXlcbiAgICAgKiAgIGluZGljZXMsIHRoZSBpbmRleCBtYXkgYmUgdXNlZCBhcyBhIGRvdHRlZCBwYXJ0IGRpcmVjdGx5XG4gICAgICogICAoZS5nLiBgdXNlcnMuMTIubmFtZWAgb3IgYFsndXNlcnMnLCAxMiwgJ25hbWUnXWApLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gcm9vdCBSb290IG9iamVjdCBmcm9tIHdoaWNoIHRoZSBwYXRoIGlzIGV2YWx1YXRlZC5cbiAgICAgKiBAcmV0dXJuIHsqfSBWYWx1ZSBhdCB0aGUgcGF0aCwgb3IgYHVuZGVmaW5lZGAgaWYgYW55IHBhcnQgb2YgdGhlIHBhdGhcbiAgICAgKiAgIGlzIHVuZGVmaW5lZC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0KHBhdGgsIHJvb3QpIHtcbiAgICAgIHJldHVybiBnZXQocm9vdCB8fCB0aGlzLCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHNldHRpbmcgYSB2YWx1ZSB0byBhIHBhdGggYW5kIG5vdGlmeWluZyBhbnlcbiAgICAgKiBlbGVtZW50cyBib3VuZCB0byB0aGUgc2FtZSBwYXRoLlxuICAgICAqXG4gICAgICogTm90ZSwgaWYgYW55IHBhcnQgaW4gdGhlIHBhdGggZXhjZXB0IGZvciB0aGUgbGFzdCBpcyB1bmRlZmluZWQsXG4gICAgICogdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nICh0aGlzIG1ldGhvZCBkb2VzIG5vdCB0aHJvdyB3aGVuXG4gICAgICogZGVyZWZlcmVuY2luZyB1bmRlZmluZWQgcGF0aHMpLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfCFBcnJheTwoc3RyaW5nfG51bWJlcik+KX0gcGF0aCBQYXRoIHRvIHRoZSB2YWx1ZVxuICAgICAqICAgdG8gd3JpdGUuICBUaGUgcGF0aCBtYXkgYmUgc3BlY2lmaWVkIGFzIGEgc3RyaW5nIChlLmcuIGAnZm9vLmJhci5iYXonYClcbiAgICAgKiAgIG9yIGFuIGFycmF5IG9mIHBhdGggcGFydHMgKGUuZy4gYFsnZm9vLmJhcicsICdiYXonXWApLiAgTm90ZSB0aGF0XG4gICAgICogICBicmFja2V0ZWQgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQ7IHN0cmluZy1iYXNlZCBwYXRoIHBhcnRzXG4gICAgICogICAqbXVzdCogYmUgc2VwYXJhdGVkIGJ5IGRvdHMuICBOb3RlIHRoYXQgd2hlbiBkZXJlZmVyZW5jaW5nIGFycmF5XG4gICAgICogICBpbmRpY2VzLCB0aGUgaW5kZXggbWF5IGJlIHVzZWQgYXMgYSBkb3R0ZWQgcGFydCBkaXJlY3RseVxuICAgICAqICAgKGUuZy4gYCd1c2Vycy4xMi5uYW1lJ2Agb3IgYFsndXNlcnMnLCAxMiwgJ25hbWUnXWApLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gc2V0IGF0IHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHJvb3QgUm9vdCBvYmplY3QgZnJvbSB3aGljaCB0aGUgcGF0aCBpcyBldmFsdWF0ZWQuXG4gICAgICogICBXaGVuIHNwZWNpZmllZCwgbm8gbm90aWZpY2F0aW9uIHdpbGwgb2NjdXIuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2V0KHBhdGgsIHZhbHVlLCByb290KSB7XG4gICAgICBpZiAocm9vdCkge1xuICAgICAgICBzZXQocm9vdCwgcGF0aCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzW1RZUEVTLlJFQURfT05MWV0gfHwgIXRoaXNbVFlQRVMuUkVBRF9PTkxZXVsvKiogQHR5cGUge3N0cmluZ30gKi8ocGF0aCldKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3NldFBlbmRpbmdQcm9wZXJ0eU9yUGF0aChwYXRoLCB2YWx1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2ludmFsaWRhdGVQcm9wZXJ0aWVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBpdGVtcyBvbnRvIHRoZSBlbmQgb2YgdGhlIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUucHVzaGAuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgKiBAcGFyYW0gey4uLip9IGl0ZW1zIEl0ZW1zIHRvIHB1c2ggb250byBhcnJheVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gTmV3IGxlbmd0aCBvZiB0aGUgYXJyYXkuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHB1c2gocGF0aCwgLi4uaXRlbXMpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9Ki8oZ2V0KHRoaXMsIHBhdGgsIGluZm8pKTtcbiAgICAgIGxldCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICBsZXQgcmV0ID0gYXJyYXkucHVzaCguLi5pdGVtcyk7XG4gICAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBsZW4sIGl0ZW1zLmxlbmd0aCwgW10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSB0aGUgZW5kIG9mIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUucG9wYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEByZXR1cm4geyp9IEl0ZW0gdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcG9wKHBhdGgpIHtcbiAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovKGdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICBsZXQgaGFkTGVuZ3RoID0gQm9vbGVhbihhcnJheS5sZW5ndGgpO1xuICAgICAgbGV0IHJldCA9IGFycmF5LnBvcCgpO1xuICAgICAgaWYgKGhhZExlbmd0aCkge1xuICAgICAgICBub3RpZnlTcGxpY2UodGhpcywgYXJyYXksIGluZm8ucGF0aCwgYXJyYXkubGVuZ3RoLCAwLCBbcmV0XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdGhlIHN0YXJ0IGluZGV4IHNwZWNpZmllZCwgcmVtb3ZlcyAwIG9yIG1vcmUgaXRlbXNcbiAgICAgKiBmcm9tIHRoZSBhcnJheSBhbmQgaW5zZXJ0cyAwIG9yIG1vcmUgbmV3IGl0ZW1zIGluIHRoZWlyIHBsYWNlLlxuICAgICAqXG4gICAgICogVGhlIGFyZ3VtZW50cyBhZnRlciBgcGF0aGAgYW5kIHJldHVybiB2YWx1ZSBtYXRjaCB0aGF0IG9mXG4gICAgICogYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgbm90aWZpZXMgb3RoZXIgcGF0aHMgdG8gdGhlIHNhbWUgYXJyYXkgdGhhdCBhXG4gICAgICogc3BsaWNlIG9jY3VycmVkIHRvIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgIUFycmF5PHN0cmluZ3xudW1iZXI+fSBwYXRoIFBhdGggdG8gYXJyYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IEluZGV4IGZyb20gd2hpY2ggdG8gc3RhcnQgcmVtb3ZpbmcvaW5zZXJ0aW5nLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gZGVsZXRlQ291bnQgTnVtYmVyIG9mIGl0ZW1zIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IGl0ZW1zIEl0ZW1zIHRvIGluc2VydCBpbnRvIGFycmF5LlxuICAgICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiByZW1vdmVkIGl0ZW1zLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzcGxpY2UocGF0aCwgc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5pdGVtcykge1xuICAgICAgbGV0IGluZm8gPSB7cGF0aCA6ICcnfTtcbiAgICAgIGxldCBhcnJheSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovKGdldCh0aGlzLCBwYXRoLCBpbmZvKSk7XG4gICAgICAvLyBOb3JtYWxpemUgZmFuY3kgbmF0aXZlIHNwbGljZSBoYW5kbGluZyBvZiBjcmF6eSBzdGFydCB2YWx1ZXNcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBhcnJheS5sZW5ndGggLSBNYXRoLmZsb29yKC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCk7XG4gICAgICB9XG4gICAgICAvLyBhcnJheS5zcGxpY2UgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzXG4gICAgICAvLyB5b3UgcGFzcyBpbi4gVGhlcmVmb3JlLCBhcnJheS5zcGxpY2UoMCkgYW5kIGFycmF5LnNwbGljZSgwLCB1bmRlZmluZWQpXG4gICAgICAvLyBkbyBkaWZmZXJlbnQgdGhpbmdzLiBJbiB0aGUgZm9ybWVyLCB0aGUgd2hvbGUgYXJyYXkgaXMgY2xlYXJlZC4gSW4gdGhlXG4gICAgICAvLyBsYXR0ZXIsIG5vIGl0ZW1zIGFyZSByZW1vdmVkLlxuICAgICAgLy8gVGhpcyBtZWFucyB0aGF0IHdlIG5lZWQgdG8gZGV0ZWN0IHdoZXRoZXIgMS4gb25lIG9mIHRoZSBhcmd1bWVudHNcbiAgICAgIC8vIGlzIGFjdHVhbGx5IHBhc3NlZCBpbiBhbmQgdGhlbiAyLiBkZXRlcm1pbmUgaG93IG1hbnkgYXJndW1lbnRzXG4gICAgICAvLyB3ZSBzaG91bGQgcGFzcyBvbiB0byB0aGUgbmF0aXZlIGFycmF5LnNwbGljZVxuICAgICAgLy9cbiAgICAgIGxldCByZXQ7XG4gICAgICAvLyBPbWl0IGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBpZiB0aGV5IHdlcmUgbm90IHBhc3NlZCBpblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcmV0ID0gYXJyYXkuc3BsaWNlKHN0YXJ0KTtcbiAgICAgIC8vIEVpdGhlciBzdGFydCB3YXMgdW5kZWZpbmVkIGFuZCB0aGUgb3RoZXJzIHdlcmUgZGVmaW5lZCwgYnV0IGluIHRoaXNcbiAgICAgIC8vIGNhc2Ugd2UgY2FuIHNhZmVseSBwYXNzIG9uIGFsbCBhcmd1bWVudHNcbiAgICAgIC8vXG4gICAgICAvLyBOb3RlOiB0aGlzIGluY2x1ZGVzIHRoZSBjYXNlIHdoZXJlIG5vbmUgb2YgdGhlIGFyZ3VtZW50cyB3ZXJlIHBhc3NlZCBpbixcbiAgICAgIC8vIGUuZy4gdGhpcy5zcGxpY2UoJ2FycmF5JykuIEhvd2V2ZXIsIGlmIGJvdGggc3RhcnQgYW5kIGRlbGV0ZUNvdW50XG4gICAgICAvLyBhcmUgdW5kZWZpbmVkLCBhcnJheS5zcGxpY2Ugd2lsbCBub3QgbW9kaWZ5IHRoZSBhcnJheSAoYXMgZXhwZWN0ZWQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSBhcnJheS5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5pdGVtcyk7XG4gICAgICB9XG4gICAgICAvLyBBdCB0aGUgZW5kLCBjaGVjayB3aGV0aGVyIGFueSBpdGVtcyB3ZXJlIHBhc3NlZCBpbiAoZS5nLiBpbnNlcnRpb25zKVxuICAgICAgLy8gb3IgaWYgdGhlIHJldHVybiBhcnJheSBjb250YWlucyBpdGVtcyAoZS5nLiBkZWxldGlvbnMpLlxuICAgICAgLy8gT25seSBub3RpZnkgaWYgaXRlbXMgd2VyZSBhZGRlZCBvciBkZWxldGVkLlxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCB8fCByZXQubGVuZ3RoKSB7XG4gICAgICAgIG5vdGlmeVNwbGljZSh0aGlzLCBhcnJheSwgaW5mby5wYXRoLCBzdGFydCwgaXRlbXMubGVuZ3RoLCByZXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIGl0ZW0gZnJvbSB0aGUgYmVnaW5uaW5nIG9mIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUucG9wYC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG5vdGlmaWVzIG90aGVyIHBhdGhzIHRvIHRoZSBzYW1lIGFycmF5IHRoYXQgYVxuICAgICAqIHNwbGljZSBvY2N1cnJlZCB0byB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8ICFBcnJheTxzdHJpbmd8bnVtYmVyPn0gcGF0aCBQYXRoIHRvIGFycmF5LlxuICAgICAqIEByZXR1cm4geyp9IEl0ZW0gdGhhdCB3YXMgcmVtb3ZlZC5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2hpZnQocGF0aCkge1xuICAgICAgbGV0IGluZm8gPSB7cGF0aDogJyd9O1xuICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oZ2V0KHRoaXMsIHBhdGgsIGluZm8pKTtcbiAgICAgIGxldCBoYWRMZW5ndGggPSBCb29sZWFuKGFycmF5Lmxlbmd0aCk7XG4gICAgICBsZXQgcmV0ID0gYXJyYXkuc2hpZnQoKTtcbiAgICAgIGlmIChoYWRMZW5ndGgpIHtcbiAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIDAsIDAsIFtyZXRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBpdGVtcyBvbnRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5IGF0IHRoZSBwYXRoIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIFRoZSBhcmd1bWVudHMgYWZ0ZXIgYHBhdGhgIGFuZCByZXR1cm4gdmFsdWUgbWF0Y2ggdGhhdCBvZlxuICAgICAqIGBBcnJheS5wcm90b3R5cGUucHVzaGAuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBub3RpZmllcyBvdGhlciBwYXRocyB0byB0aGUgc2FtZSBhcnJheSB0aGF0IGFcbiAgICAgKiBzcGxpY2Ugb2NjdXJyZWQgdG8gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCAhQXJyYXk8c3RyaW5nfG51bWJlcj59IHBhdGggUGF0aCB0byBhcnJheS5cbiAgICAgKiBAcGFyYW0gey4uLip9IGl0ZW1zIEl0ZW1zIHRvIGluc2VydCBpbmZvIGFycmF5XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBOZXcgbGVuZ3RoIG9mIHRoZSBhcnJheS5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgdW5zaGlmdChwYXRoLCAuLi5pdGVtcykge1xuICAgICAgbGV0IGluZm8gPSB7cGF0aDogJyd9O1xuICAgICAgbGV0IGFycmF5ID0gLyoqIEB0eXBlIHtBcnJheX0gKi8oZ2V0KHRoaXMsIHBhdGgsIGluZm8pKTtcbiAgICAgIGxldCByZXQgPSBhcnJheS51bnNoaWZ0KC4uLml0ZW1zKTtcbiAgICAgIGlmIChpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgbm90aWZ5U3BsaWNlKHRoaXMsIGFycmF5LCBpbmZvLnBhdGgsIDAsIGl0ZW1zLmxlbmd0aCwgW10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb3RpZnkgdGhhdCBhIHBhdGggaGFzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIHRoaXMuaXRlbS51c2VyLm5hbWUgPSAnQm9iJztcbiAgICAgKiAgICAgdGhpcy5ub3RpZnlQYXRoKCdpdGVtLnVzZXIubmFtZScpO1xuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0aGF0IHNob3VsZCBiZSBub3RpZmllZC5cbiAgICAgKiBAcGFyYW0geyo9fSB2YWx1ZSBWYWx1ZSBhdCB0aGUgcGF0aCAob3B0aW9uYWwpLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIG5vdGlmeVBhdGgocGF0aCwgdmFsdWUpIHtcbiAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgbGV0IHByb3BQYXRoO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAvLyBHZXQgdmFsdWUgaWYgbm90IHN1cHBsaWVkXG4gICAgICAgIGxldCBpbmZvID0ge3BhdGg6ICcnfTtcbiAgICAgICAgdmFsdWUgPSBnZXQodGhpcywgcGF0aCwgaW5mbyk7XG4gICAgICAgIHByb3BQYXRoID0gaW5mby5wYXRoO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgICAgIC8vIE5vcm1hbGl6ZSBwYXRoIGlmIG5lZWRlZFxuICAgICAgICBwcm9wUGF0aCA9IG5vcm1hbGl6ZShwYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BQYXRoID0gLyoqIEB0eXBle3N0cmluZ30gKi8ocGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fc2V0UGVuZGluZ1Byb3BlcnR5T3JQYXRoKHByb3BQYXRoLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZVByb3BlcnRpZXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eWAgQVBJIGJ1dCBjYW4gYmUgY2FsbGVkIG9uXG4gICAgICogYW4gaW5zdGFuY2UgdG8gYWRkIGVmZmVjdHMgYXQgcnVudGltZS4gIFNlZSB0aGF0IG1ldGhvZCBmb3JcbiAgICAgKiBmdWxsIEFQSSBkb2NzLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBwcm90ZWN0ZWRTZXR0ZXIgQ3JlYXRlcyBhIGN1c3RvbSBwcm90ZWN0ZWQgc2V0dGVyXG4gICAgICogICB3aGVuIGB0cnVlYC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY3JlYXRlUmVhZE9ubHlQcm9wZXJ0eShwcm9wZXJ0eSwgcHJvdGVjdGVkU2V0dGVyKSB7XG4gICAgICB0aGlzLl9hZGRQcm9wZXJ0eUVmZmVjdChwcm9wZXJ0eSwgVFlQRVMuUkVBRF9PTkxZKTtcbiAgICAgIGlmIChwcm90ZWN0ZWRTZXR0ZXIpIHtcbiAgICAgICAgdGhpc1snX3NldCcgKyB1cHBlcihwcm9wZXJ0eSldID0gLyoqIEB0aGlzIHtQcm9wZXJ0eUVmZmVjdHN9ICovZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBjcmVhdGVQcm9wZXJ0eU9ic2VydmVyYCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKCosKil9IG1ldGhvZCBGdW5jdGlvbiBvciBuYW1lIG9mIG9ic2VydmVyIG1ldGhvZFxuICAgICAqICAgICB0byBjYWxsXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gZHluYW1pY0ZuIFdoZXRoZXIgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBiZSBpbmNsdWRlZCBhc1xuICAgICAqICAgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIocHJvcGVydHksIG1ldGhvZCwgZHluYW1pY0ZuKSB7XG4gICAgICBsZXQgaW5mbyA9IHsgcHJvcGVydHksIG1ldGhvZCwgZHluYW1pY0ZuOiBCb29sZWFuKGR5bmFtaWNGbikgfTtcbiAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCBUWVBFUy5PQlNFUlZFLCB7XG4gICAgICAgIGZuOiBydW5PYnNlcnZlckVmZmVjdCwgaW5mbywgdHJpZ2dlcjoge25hbWU6IHByb3BlcnR5fVxuICAgICAgfSk7XG4gICAgICBpZiAoZHluYW1pY0ZuKSB7XG4gICAgICAgIHRoaXMuX2FkZFByb3BlcnR5RWZmZWN0KC8qKiBAdHlwZSB7c3RyaW5nfSAqLyhtZXRob2QpLCBUWVBFUy5PQlNFUlZFLCB7XG4gICAgICAgICAgZm46IHJ1bk9ic2VydmVyRWZmZWN0LCBpbmZvLCB0cmlnZ2VyOiB7bmFtZTogbWV0aG9kfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIHN0YXRpYyBgY3JlYXRlTWV0aG9kT2JzZXJ2ZXJgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIE1ldGhvZCBleHByZXNzaW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZ1xuICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9jcmVhdGVNZXRob2RPYnNlcnZlcihleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgIGxldCBzaWcgPSBwYXJzZU1ldGhvZChleHByZXNzaW9uKTtcbiAgICAgIGlmICghc2lnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBvYnNlcnZlciBleHByZXNzaW9uICdcIiArIGV4cHJlc3Npb24gKyBcIidcIik7XG4gICAgICB9XG4gICAgICBjcmVhdGVNZXRob2RFZmZlY3QodGhpcywgc2lnLCBUWVBFUy5PQlNFUlZFLCBydW5NZXRob2RFZmZlY3QsIG51bGwsIGR5bmFtaWNGbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9jcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLk5PVElGWSwge1xuICAgICAgICBmbjogcnVuTm90aWZ5RWZmZWN0LFxuICAgICAgICBpbmZvOiB7XG4gICAgICAgICAgZXZlbnROYW1lOiBjYW1lbFRvRGFzaENhc2UocHJvcGVydHkpICsgJy1jaGFuZ2VkJyxcbiAgICAgICAgICBwcm9wZXJ0eTogcHJvcGVydHlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZVJlZmxlY3RlZFByb3BlcnR5YCBBUEkgYnV0IGNhbiBiZSBjYWxsZWQgb25cbiAgICAgKiBhbiBpbnN0YW5jZSB0byBhZGQgZWZmZWN0cyBhdCBydW50aW1lLiAgU2VlIHRoYXQgbWV0aG9kIGZvclxuICAgICAqIGZ1bGwgQVBJIGRvY3MuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IGdvL21pc3NpbmdmbnByb3BzXG4gICAgICovXG4gICAgX2NyZWF0ZVJlZmxlY3RlZFByb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICBsZXQgYXR0ciA9IHRoaXMuY29uc3RydWN0b3IuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgIGlmIChhdHRyWzBdID09PSAnLScpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdQcm9wZXJ0eSAnICsgcHJvcGVydHkgKyAnIGNhbm5vdCBiZSByZWZsZWN0ZWQgdG8gYXR0cmlidXRlICcgK1xuICAgICAgICAgIGF0dHIgKyAnIGJlY2F1c2UgXCItXCIgaXMgbm90IGEgdmFsaWQgc3RhcnRpbmcgYXR0cmlidXRlIG5hbWUuIFVzZSBhIGxvd2VyY2FzZSBmaXJzdCBsZXR0ZXIgZm9yIHRoZSBwcm9wZXJ0eSBpbnN0ZWFkLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIFRZUEVTLlJFRkxFQ1QsIHtcbiAgICAgICAgICBmbjogcnVuUmVmbGVjdEVmZmVjdCxcbiAgICAgICAgICBpbmZvOiB7XG4gICAgICAgICAgICBhdHRyTmFtZTogYXR0clxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBzdGF0aWMgYGNyZWF0ZUNvbXB1dGVkUHJvcGVydHlgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIGNvbXB1dGVkIHByb3BlcnR5IHRvIHNldFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIE1ldGhvZCBleHByZXNzaW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZ1xuICAgICAqICAgd2hldGhlciBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9jcmVhdGVDb21wdXRlZFByb3BlcnR5KHByb3BlcnR5LCBleHByZXNzaW9uLCBkeW5hbWljRm4pIHtcbiAgICAgIGxldCBzaWcgPSBwYXJzZU1ldGhvZChleHByZXNzaW9uKTtcbiAgICAgIGlmICghc2lnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBjb21wdXRlZCBleHByZXNzaW9uICdcIiArIGV4cHJlc3Npb24gKyBcIidcIik7XG4gICAgICB9XG4gICAgICBjcmVhdGVNZXRob2RFZmZlY3QodGhpcywgc2lnLCBUWVBFUy5DT01QVVRFLCBydW5Db21wdXRlZEVmZmVjdCwgcHJvcGVydHksIGR5bmFtaWNGbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2F0aGVyIHRoZSBhcmd1bWVudCB2YWx1ZXMgZm9yIGEgbWV0aG9kIHNwZWNpZmllZCBpbiB0aGUgcHJvdmlkZWQgYXJyYXlcbiAgICAgKiBvZiBhcmd1bWVudCBtZXRhZGF0YS5cbiAgICAgKlxuICAgICAqIFRoZSBgcGF0aGAgYW5kIGB2YWx1ZWAgYXJndW1lbnRzIGFyZSB1c2VkIHRvIGZpbGwgaW4gd2lsZGNhcmQgZGVzY3JpcHRvclxuICAgICAqIHdoZW4gdGhlIG1ldGhvZCBpcyBiZWluZyBjYWxsZWQgYXMgYSByZXN1bHQgb2YgYSBwYXRoIG5vdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUFycmF5PCFNZXRob2RBcmc+fSBhcmdzIEFycmF5IG9mIGFyZ3VtZW50IG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUHJvcGVydHkvcGF0aCBuYW1lIHRoYXQgdHJpZ2dlcmVkIHRoZSBtZXRob2QgZWZmZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEJhZyBvZiBjdXJyZW50IHByb3BlcnR5IGNoYW5nZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheTwqPn0gQXJyYXkgb2YgYXJndW1lbnQgdmFsdWVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbWFyc2hhbEFyZ3MoYXJncywgcGF0aCwgcHJvcHMpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9fZGF0YTtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaT0wLCBsPWFyZ3MubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgICAgICBsZXQge25hbWUsIHN0cnVjdHVyZWQsIHdpbGRjYXJkLCB2YWx1ZSwgbGl0ZXJhbH0gPSBhcmdzW2ldO1xuICAgICAgICBpZiAoIWxpdGVyYWwpIHtcbiAgICAgICAgICBpZiAod2lsZGNhcmQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBpc0Rlc2NlbmRhbnQobmFtZSwgcGF0aCk7XG4gICAgICAgICAgICBjb25zdCBwYXRoVmFsdWUgPSBnZXRBcmdWYWx1ZShkYXRhLCBwcm9wcywgbWF0Y2hlcyA/IHBhdGggOiBuYW1lKTtcbiAgICAgICAgICAgIHZhbHVlID0ge1xuICAgICAgICAgICAgICBwYXRoOiBtYXRjaGVzID8gcGF0aCA6IG5hbWUsXG4gICAgICAgICAgICAgIHZhbHVlOiBwYXRoVmFsdWUsXG4gICAgICAgICAgICAgIGJhc2U6IG1hdGNoZXMgPyBnZXQoZGF0YSwgbmFtZSkgOiBwYXRoVmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gc3RydWN0dXJlZCA/IGdldEFyZ1ZhbHVlKGRhdGEsIHByb3BzLCBuYW1lKSA6IGRhdGFbbmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICAvLyAtLSBzdGF0aWMgY2xhc3MgbWV0aG9kcyAtLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgYW4gYWNjZXNzb3IgZXhpc3RzIGZvciB0aGUgc3BlY2lmaWVkIHByb3BlcnR5LCBhbmQgYWRkc1xuICAgICAqIHRvIGEgbGlzdCBvZiBcInByb3BlcnR5IGVmZmVjdHNcIiB0aGF0IHdpbGwgcnVuIHdoZW4gdGhlIGFjY2Vzc29yIGZvclxuICAgICAqIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgaXMgc2V0LiAgRWZmZWN0cyBhcmUgZ3JvdXBlZCBieSBcInR5cGVcIiwgd2hpY2hcbiAgICAgKiByb3VnaGx5IGNvcnJlc3BvbmRzIHRvIGEgcGhhc2UgaW4gZWZmZWN0IHByb2Nlc3NpbmcuICBUaGUgZWZmZWN0XG4gICAgICogbWV0YWRhdGEgc2hvdWxkIGJlIGluIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAgICAgKlxuICAgICAqICAgICB7XG4gICAgICogICAgICAgZm46IGVmZmVjdEZ1bmN0aW9uLCAvLyBSZWZlcmVuY2UgdG8gZnVuY3Rpb24gdG8gY2FsbCB0byBwZXJmb3JtIGVmZmVjdFxuICAgICAqICAgICAgIGluZm86IHsgLi4uIH0gICAgICAgLy8gRWZmZWN0IG1ldGFkYXRhIHBhc3NlZCB0byBmdW5jdGlvblxuICAgICAqICAgICAgIHRyaWdnZXI6IHsgICAgICAgICAgLy8gT3B0aW9uYWwgdHJpZ2dlcmluZyBtZXRhZGF0YTsgaWYgbm90IHByb3ZpZGVkXG4gICAgICogICAgICAgICBuYW1lOiBzdHJpbmcgICAgICAvLyB0aGUgcHJvcGVydHkgaXMgdHJlYXRlZCBhcyBhIHdpbGRjYXJkXG4gICAgICogICAgICAgICBzdHJ1Y3R1cmVkOiBib29sZWFuXG4gICAgICogICAgICAgICB3aWxkY2FyZDogYm9vbGVhblxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogRWZmZWN0cyBhcmUgY2FsbGVkIGZyb20gYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgaW4gdGhlIGZvbGxvd2luZyBvcmRlciBieVxuICAgICAqIHR5cGU6XG4gICAgICpcbiAgICAgKiAxLiBDT01QVVRFXG4gICAgICogMi4gUFJPUEFHQVRFXG4gICAgICogMy4gUkVGTEVDVFxuICAgICAqIDQuIE9CU0VSVkVcbiAgICAgKiA1LiBOT1RJRllcbiAgICAgKlxuICAgICAqIEVmZmVjdCBmdW5jdGlvbnMgYXJlIGNhbGxlZCB3aXRoIHRoZSBmb2xsb3dpbmcgc2lnbmF0dXJlOlxuICAgICAqXG4gICAgICogICAgIGVmZmVjdEZ1bmN0aW9uKGluc3QsIHBhdGgsIHByb3BzLCBvbGRQcm9wcywgaW5mbywgaGFzUGF0aHMpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdGhhdCBzaG91bGQgdHJpZ2dlciB0aGUgZWZmZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgRWZmZWN0IHR5cGUsIGZyb20gdGhpcy5QUk9QRVJUWV9FRkZFQ1RfVFlQRVNcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkUHJvcGVydHlFZmZlY3QocHJvcGVydHksIHR5cGUsIGVmZmVjdCkge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2FkZFByb3BlcnR5RWZmZWN0KHByb3BlcnR5LCB0eXBlLCBlZmZlY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaW5nbGUtcHJvcGVydHkgb2JzZXJ2ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb24oKiwqKX0gbWV0aG9kIEZ1bmN0aW9uIG9yIG5hbWUgb2Ygb2JzZXJ2ZXIgbWV0aG9kIHRvIGNhbGxcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBkeW5hbWljRm4gV2hldGhlciB0aGUgbWV0aG9kIG5hbWUgc2hvdWxkIGJlIGluY2x1ZGVkIGFzXG4gICAgICogICBhIGRlcGVuZGVuY3kgdG8gdGhlIGVmZmVjdC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eU9ic2VydmVyKHByb3BlcnR5LCBtZXRob2QsIGR5bmFtaWNGbikge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIocHJvcGVydHksIG1ldGhvZCwgZHluYW1pY0ZuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbXVsdGktcHJvcGVydHkgXCJtZXRob2Qgb2JzZXJ2ZXJcIiBiYXNlZCBvbiB0aGUgcHJvdmlkZWRcbiAgICAgKiBleHByZXNzaW9uLCB3aGljaCBzaG91bGQgYmUgYSBzdHJpbmcgaW4gdGhlIGZvcm0gb2YgYSBub3JtYWwgSmF2YVNjcmlwdFxuICAgICAqIGZ1bmN0aW9uIHNpZ25hdHVyZTogYCdtZXRob2ROYW1lKGFyZzEsIFsuLi4sIGFyZ25dKSdgLiAgRWFjaCBhcmd1bWVudFxuICAgICAqIHNob3VsZCBjb3JyZXNwb25kIHRvIGEgcHJvcGVydHkgb3IgcGF0aCBpbiB0aGUgY29udGV4dCBvZiB0aGlzXG4gICAgICogcHJvdG90eXBlIChvciBpbnN0YW5jZSksIG9yIG1heSBiZSBhIGxpdGVyYWwgc3RyaW5nIG9yIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIE1ldGhvZCBleHByZXNzaW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZ1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogICB3aGV0aGVyIG1ldGhvZCBuYW1lcyBzaG91bGQgYmUgaW5jbHVkZWQgYXMgYSBkZXBlbmRlbmN5IHRvIHRoZSBlZmZlY3QuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZU1ldGhvZE9ic2VydmVyKGV4cHJlc3Npb24sIGR5bmFtaWNGbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2F1c2VzIHRoZSBzZXR0ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB0byBkaXNwYXRjaCBgPHByb3BlcnR5Pi1jaGFuZ2VkYFxuICAgICAqIGV2ZW50cyB0byBub3RpZnkgb2YgY2hhbmdlcyB0byB0aGUgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZU5vdGlmeWluZ1Byb3BlcnR5KHByb3BlcnR5KSB7XG4gICAgICB0aGlzLnByb3RvdHlwZS5fY3JlYXRlTm90aWZ5aW5nUHJvcGVydHkocHJvcGVydHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZWFkLW9ubHkgYWNjZXNzb3IgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIFRvIHNldCB0aGUgcHJvcGVydHksIHVzZSB0aGUgcHJvdGVjdGVkIGBfc2V0UHJvcGVydHlgIEFQSS5cbiAgICAgKiBUbyBjcmVhdGUgYSBjdXN0b20gcHJvdGVjdGVkIHNldHRlciAoZS5nLiBgX3NldE15UHJvcCgpYCBmb3JcbiAgICAgKiBwcm9wZXJ0eSBgbXlQcm9wYCksIHBhc3MgYHRydWVgIGZvciBgcHJvdGVjdGVkU2V0dGVyYC5cbiAgICAgKlxuICAgICAqIE5vdGUsIGlmIHRoZSBwcm9wZXJ0eSB3aWxsIGhhdmUgb3RoZXIgcHJvcGVydHkgZWZmZWN0cywgdGhpcyBtZXRob2RcbiAgICAgKiBzaG91bGQgYmUgY2FsbGVkIGZpcnN0LCBiZWZvcmUgYWRkaW5nIG90aGVyIGVmZmVjdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHByb3RlY3RlZFNldHRlciBDcmVhdGVzIGEgY3VzdG9tIHByb3RlY3RlZCBzZXR0ZXJcbiAgICAgKiAgIHdoZW4gYHRydWVgLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZVJlYWRPbmx5UHJvcGVydHkocHJvcGVydHksIHByb3RlY3RlZFNldHRlcikge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVJlYWRPbmx5UHJvcGVydHkocHJvcGVydHksIHByb3RlY3RlZFNldHRlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2F1c2VzIHRoZSBzZXR0ZXIgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB0byByZWZsZWN0IHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqIHRvIGEgKGRhc2gtY2FzZWQpIGF0dHJpYnV0ZSBvZiB0aGUgc2FtZSBuYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVSZWZsZWN0ZWRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZVJlZmxlY3RlZFByb3BlcnR5KHByb3BlcnR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcHV0ZWQgcHJvcGVydHkgd2hvc2UgdmFsdWUgaXMgc2V0IHRvIHRoZSByZXN1bHQgb2YgdGhlXG4gICAgICogbWV0aG9kIGRlc2NyaWJlZCBieSB0aGUgZ2l2ZW4gYGV4cHJlc3Npb25gIGVhY2ggdGltZSBvbmUgb3IgbW9yZVxuICAgICAqIGFyZ3VtZW50cyB0byB0aGUgbWV0aG9kIGNoYW5nZXMuICBUaGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgYSBzdHJpbmdcbiAgICAgKiBpbiB0aGUgZm9ybSBvZiBhIG5vcm1hbCBKYXZhU2NyaXB0IGZ1bmN0aW9uIHNpZ25hdHVyZTpcbiAgICAgKiBgJ21ldGhvZE5hbWUoYXJnMSwgWy4uLiwgYXJnbl0pJ2BcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOYW1lIG9mIGNvbXB1dGVkIHByb3BlcnR5IHRvIHNldFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIE1ldGhvZCBleHByZXNzaW9uXG4gICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdD19IGR5bmFtaWNGbiBCb29sZWFuIG9yIG9iamVjdCBtYXAgaW5kaWNhdGluZyB3aGV0aGVyXG4gICAgICogICBtZXRob2QgbmFtZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIGEgZGVwZW5kZW5jeSB0byB0aGUgZWZmZWN0LlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUNvbXB1dGVkUHJvcGVydHkocHJvcGVydHksIGV4cHJlc3Npb24sIGR5bmFtaWNGbikge1xuICAgICAgdGhpcy5wcm90b3R5cGUuX2NyZWF0ZUNvbXB1dGVkUHJvcGVydHkocHJvcGVydHksIGV4cHJlc3Npb24sIGR5bmFtaWNGbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSB0byBlbnN1cmUgYmluZGluZyBlZmZlY3RzIGFyZSBjcmVhdGVkXG4gICAgICogZm9yIHRoZW0sIGFuZCB0aGVuIGVuc3VyZXMgcHJvcGVydHkgYWNjZXNzb3JzIGFyZSBjcmVhdGVkIGZvciBhbnlcbiAgICAgKiBkZXBlbmRlbnQgcHJvcGVydGllcyBpbiB0aGUgdGVtcGxhdGUuICBCaW5kaW5nIGVmZmVjdHMgZm9yIGJvdW5kXG4gICAgICogdGVtcGxhdGVzIGFyZSBzdG9yZWQgaW4gYSBsaW5rZWQgbGlzdCBvbiB0aGUgaW5zdGFuY2Ugc28gdGhhdFxuICAgICAqIHRlbXBsYXRlcyBjYW4gYmUgZWZmaWNpZW50bHkgc3RhbXBlZCBhbmQgdW5zdGFtcGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgY29udGFpbmluZyBiaW5kaW5nXG4gICAgICogICBiaW5kaW5nc1xuICAgICAqIEByZXR1cm4geyFUZW1wbGF0ZUluZm99IFRlbXBsYXRlIG1ldGFkYXRhIG9iamVjdFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBiaW5kVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3RvdHlwZS5fYmluZFRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICB9XG5cbiAgICAvLyAtLSBiaW5kaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gc3RhdGljIGBiaW5kVGVtcGxhdGVgIEFQSSBidXQgY2FuIGJlIGNhbGxlZCBvblxuICAgICAqIGFuIGluc3RhbmNlIHRvIGFkZCBlZmZlY3RzIGF0IHJ1bnRpbWUuICBTZWUgdGhhdCBtZXRob2QgZm9yXG4gICAgICogZnVsbCBBUEkgZG9jcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgb24gdGhlIHByb3RvdHlwZSAoZm9yIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZVxuICAgICAqIGJpbmRpbmcsIHRvIGF2b2lkIGNyZWF0aW5nIGFjY2Vzc29ycyBldmVyeSBpbnN0YW5jZSkgb25jZSBwZXIgcHJvdG90eXBlLFxuICAgICAqIGFuZCB3aWxsIGJlIGNhbGxlZCB3aXRoIGBydW50aW1lQmluZGluZzogdHJ1ZWAgYnkgYF9zdGFtcFRlbXBsYXRlYCB0b1xuICAgICAqIGNyZWF0ZSBhbmQgbGluayBhbiBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgbWV0YWRhdGEgYXNzb2NpYXRlZCB3aXRoIGFcbiAgICAgKiBwYXJ0aWN1bGFyIHN0YW1waW5nLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGUgVGVtcGxhdGUgY29udGFpbmluZyBiaW5kaW5nXG4gICAgICogICBiaW5kaW5nc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGluc3RhbmNlQmluZGluZyBXaGVuIGZhbHNlIChkZWZhdWx0KSwgcGVyZm9ybXNcbiAgICAgKiAgIFwicHJvdG90eXBpY2FsXCIgYmluZGluZyBvZiB0aGUgdGVtcGxhdGUgYW5kIG92ZXJ3cml0ZXMgYW55IHByZXZpb3VzbHlcbiAgICAgKiAgIGJvdW5kIHRlbXBsYXRlIGZvciB0aGUgY2xhc3MuIFdoZW4gdHJ1ZSAoYXMgcGFzc2VkIGZyb21cbiAgICAgKiAgIGBfc3RhbXBUZW1wbGF0ZWApLCB0aGUgdGVtcGxhdGUgaW5mbyBpcyBpbnN0YW5jZWQgYW5kIGxpbmtlZCBpbnRvXG4gICAgICogICB0aGUgbGlzdCBvZiBib3VuZCB0ZW1wbGF0ZXMuXG4gICAgICogQHJldHVybiB7IVRlbXBsYXRlSW5mb30gVGVtcGxhdGUgbWV0YWRhdGEgb2JqZWN0OyBmb3IgYHJ1bnRpbWVCaW5kaW5nYCxcbiAgICAgKiAgIHRoaXMgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHByb3RvdHlwaWNhbCB0ZW1wbGF0ZSBpbmZvXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IGdvL21pc3NpbmdmbnByb3BzXG4gICAgICovXG4gICAgX2JpbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgaW5zdGFuY2VCaW5kaW5nKSB7XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gdGhpcy5jb25zdHJ1Y3Rvci5fcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICBsZXQgd2FzUHJlQm91bmQgPSB0aGlzLl9fdGVtcGxhdGVJbmZvID09IHRlbXBsYXRlSW5mbztcbiAgICAgIC8vIE9wdGltaXphdGlvbjogc2luY2UgdGhpcyBpcyBjYWxsZWQgdHdpY2UgZm9yIHByb3RvLWJvdW5kIHRlbXBsYXRlcyxcbiAgICAgIC8vIGRvbid0IGF0dGVtcHQgdG8gcmVjcmVhdGUgYWNjZXNzb3JzIGlmIHRoaXMgdGVtcGxhdGUgd2FzIHByZS1ib3VuZFxuICAgICAgaWYgKCF3YXNQcmVCb3VuZCkge1xuICAgICAgICBmb3IgKGxldCBwcm9wIGluIHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMpIHtcbiAgICAgICAgICB0aGlzLl9jcmVhdGVQcm9wZXJ0eUFjY2Vzc29yKHByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGFuY2VCaW5kaW5nKSB7XG4gICAgICAgIC8vIEZvciBpbnN0YW5jZS10aW1lIGJpbmRpbmcsIGNyZWF0ZSBpbnN0YW5jZSBvZiB0ZW1wbGF0ZSBtZXRhZGF0YVxuICAgICAgICAvLyBhbmQgbGluayBpbnRvIGxpc3Qgb2YgdGVtcGxhdGVzIGlmIG5lY2Vzc2FyeVxuICAgICAgICB0ZW1wbGF0ZUluZm8gPSAvKiogQHR5cGUgeyFUZW1wbGF0ZUluZm99ICovKE9iamVjdC5jcmVhdGUodGVtcGxhdGVJbmZvKSk7XG4gICAgICAgIHRlbXBsYXRlSW5mby53YXNQcmVCb3VuZCA9IHdhc1ByZUJvdW5kO1xuICAgICAgICBpZiAoIXdhc1ByZUJvdW5kICYmIHRoaXMuX190ZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0IHx8IHRoaXMuX190ZW1wbGF0ZUluZm87XG4gICAgICAgICAgdGhpcy5fX3RlbXBsYXRlSW5mb0xhc3QgPSBsYXN0Lm5leHRUZW1wbGF0ZUluZm8gPSB0ZW1wbGF0ZUluZm87XG4gICAgICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvID0gbGFzdDtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGVJbmZvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fX3RlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcHJvcGVydHkgZWZmZWN0IHRvIHRoZSBnaXZlbiB0ZW1wbGF0ZSBtZXRhZGF0YSwgd2hpY2ggaXMgcnVuXG4gICAgICogYXQgdGhlIFwicHJvcGFnYXRlXCIgc3RhZ2Ugb2YgYF9wcm9wZXJ0aWVzQ2hhbmdlZGAgd2hlbiB0aGUgdGVtcGxhdGVcbiAgICAgKiBoYXMgYmVlbiBib3VuZCB0byB0aGUgZWxlbWVudCB2aWEgYF9iaW5kVGVtcGxhdGVgLlxuICAgICAqXG4gICAgICogVGhlIGBlZmZlY3RgIG9iamVjdCBzaG91bGQgbWF0Y2ggdGhlIGZvcm1hdCBpbiBgX2FkZFByb3BlcnR5RWZmZWN0YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgdG8gYWRkIGVmZmVjdCB0b1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHRoYXQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gZWZmZWN0IEVmZmVjdCBtZXRhZGF0YSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfYWRkVGVtcGxhdGVQcm9wZXJ0eUVmZmVjdCh0ZW1wbGF0ZUluZm8sIHByb3AsIGVmZmVjdCkge1xuICAgICAgbGV0IGhvc3RQcm9wcyA9IHRlbXBsYXRlSW5mby5ob3N0UHJvcHMgPSB0ZW1wbGF0ZUluZm8uaG9zdFByb3BzIHx8IHt9O1xuICAgICAgaG9zdFByb3BzW3Byb3BdID0gdHJ1ZTtcbiAgICAgIGxldCBlZmZlY3RzID0gdGVtcGxhdGVJbmZvLnByb3BlcnR5RWZmZWN0cyA9IHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMgfHwge307XG4gICAgICBsZXQgcHJvcEVmZmVjdHMgPSBlZmZlY3RzW3Byb3BdID0gZWZmZWN0c1twcm9wXSB8fCBbXTtcbiAgICAgIHByb3BFZmZlY3RzLnB1c2goZWZmZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFtcHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIGFuZCBwZXJmb3JtcyBpbnN0YW5jZS10aW1lIHNldHVwIGZvclxuICAgICAqIFBvbHltZXIgdGVtcGxhdGUgZmVhdHVyZXMsIGluY2x1ZGluZyBkYXRhIGJpbmRpbmdzLCBkZWNsYXJhdGl2ZSBldmVudFxuICAgICAqIGxpc3RlbmVycywgYW5kIHRoZSBgdGhpcy4kYCBtYXAgb2YgYGlkYCdzIHRvIG5vZGVzLiAgQSBkb2N1bWVudCBmcmFnbWVudFxuICAgICAqIGlzIHJldHVybmVkIGNvbnRhaW5pbmcgdGhlIHN0YW1wZWQgRE9NLCByZWFkeSBmb3IgaW5zZXJ0aW9uIGludG8gdGhlXG4gICAgICogRE9NLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZTsgaG93ZXZlciBub3RlIHRoYXQgZHVlIHRvXG4gICAgICogYHNoYWR5Y3NzYCBwb2x5ZmlsbCBsaW1pdGF0aW9ucywgb25seSBzdHlsZXMgZnJvbSB0ZW1wbGF0ZXMgcHJlcGFyZWRcbiAgICAgKiB1c2luZyBgU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlYCB3aWxsIGJlIGNvcnJlY3RseSBwb2x5ZmlsbGVkIChzY29wZWRcbiAgICAgKiB0byB0aGUgc2hhZG93IHJvb3QgYW5kIHN1cHBvcnQgQ1NTIGN1c3RvbSBwcm9wZXJ0aWVzKSwgYW5kIG5vdGUgdGhhdFxuICAgICAqIGBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGVgIG1heSBvbmx5IGJlIGNhbGxlZCBvbmNlIHBlciBlbGVtZW50LiBBcyBzdWNoLFxuICAgICAqIGFueSBzdHlsZXMgcmVxdWlyZWQgYnkgaW4gcnVudGltZS1zdGFtcGVkIHRlbXBsYXRlcyBtdXN0IGJlIGluY2x1ZGVkXG4gICAgICogaW4gdGhlIG1haW4gZWxlbWVudCB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIHN0YW1wXG4gICAgICogQHJldHVybiB7IVN0YW1wZWRUZW1wbGF0ZX0gQ2xvbmVkIHRlbXBsYXRlIGNvbnRlbnRcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3N0YW1wVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgIC8vIEVuc3VyZXMgdGhhdCBjcmVhdGVkIGRvbSBpcyBgX2VucXVldWVDbGllbnRgJ2QgdG8gdGhpcyBlbGVtZW50IHNvXG4gICAgICAvLyB0aGF0IGl0IGNhbiBiZSBmbHVzaGVkIG9uIG5leHQgY2FsbCB0byBgX2ZsdXNoUHJvcGVydGllc2BcbiAgICAgIGhvc3RTdGFjay5iZWdpbkhvc3RpbmcodGhpcyk7XG4gICAgICBsZXQgZG9tID0gc3VwZXIuX3N0YW1wVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgaG9zdFN0YWNrLmVuZEhvc3RpbmcodGhpcyk7XG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gLyoqIEB0eXBlIHshVGVtcGxhdGVJbmZvfSAqLyh0aGlzLl9iaW5kVGVtcGxhdGUodGVtcGxhdGUsIHRydWUpKTtcbiAgICAgIC8vIEFkZCB0ZW1wbGF0ZS1pbnN0YW5jZS1zcGVjaWZpYyBkYXRhIHRvIGluc3RhbmNlZCB0ZW1wbGF0ZUluZm9cbiAgICAgIHRlbXBsYXRlSW5mby5ub2RlTGlzdCA9IGRvbS5ub2RlTGlzdDtcbiAgICAgIC8vIENhcHR1cmUgY2hpbGQgbm9kZXMgdG8gYWxsb3cgdW5zdGFtcGluZyBvZiBub24tcHJvdG90eXBpY2FsIHRlbXBsYXRlc1xuICAgICAgaWYgKCF0ZW1wbGF0ZUluZm8ud2FzUHJlQm91bmQpIHtcbiAgICAgICAgbGV0IG5vZGVzID0gdGVtcGxhdGVJbmZvLmNoaWxkTm9kZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbj1kb20uZmlyc3RDaGlsZDsgbjsgbj1uLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgbm9kZXMucHVzaChuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZG9tLnRlbXBsYXRlSW5mbyA9IHRlbXBsYXRlSW5mbztcbiAgICAgIC8vIFNldHVwIGNvbXBvdW5kIHN0b3JhZ2UsIDItd2F5IGxpc3RlbmVycywgYW5kIGRhdGFIb3N0IGZvciBiaW5kaW5nc1xuICAgICAgc2V0dXBCaW5kaW5ncyh0aGlzLCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgLy8gRmx1c2ggcHJvcGVydGllcyBpbnRvIHRlbXBsYXRlIG5vZGVzIGlmIGFscmVhZHkgYm9vdGVkXG4gICAgICBpZiAodGhpcy5fX2RhdGFSZWFkeSkge1xuICAgICAgICBydW5FZmZlY3RzKHRoaXMsIHRlbXBsYXRlSW5mby5wcm9wZXJ0eUVmZmVjdHMsIHRoaXMuX19kYXRhLCBudWxsLFxuICAgICAgICAgIGZhbHNlLCB0ZW1wbGF0ZUluZm8ubm9kZUxpc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuZCB1bmJpbmRzIHRoZSBub2RlcyBwcmV2aW91c2x5IGNvbnRhaW5lZCBpbiB0aGUgcHJvdmlkZWRcbiAgICAgKiBEb2N1bWVudEZyYWdtZW50IHJldHVybmVkIGZyb20gYF9zdGFtcFRlbXBsYXRlYC5cbiAgICAgKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBwYXJhbSB7IVN0YW1wZWRUZW1wbGF0ZX0gZG9tIERvY3VtZW50RnJhZ21lbnQgcHJldmlvdXNseSByZXR1cm5lZFxuICAgICAqICAgZnJvbSBgX3N0YW1wVGVtcGxhdGVgIGFzc29jaWF0ZWQgd2l0aCB0aGUgbm9kZXMgdG8gYmUgcmVtb3ZlZFxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9yZW1vdmVCb3VuZERvbShkb20pIHtcbiAgICAgIC8vIFVubGluayB0ZW1wbGF0ZSBpbmZvXG4gICAgICBsZXQgdGVtcGxhdGVJbmZvID0gZG9tLnRlbXBsYXRlSW5mbztcbiAgICAgIGlmICh0ZW1wbGF0ZUluZm8ucHJldmlvdXNUZW1wbGF0ZUluZm8pIHtcbiAgICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm8gPVxuICAgICAgICAgIHRlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIHRlbXBsYXRlSW5mby5uZXh0VGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvID1cbiAgICAgICAgICB0ZW1wbGF0ZUluZm8ucHJldmlvdXNUZW1wbGF0ZUluZm87XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fX3RlbXBsYXRlSW5mb0xhc3QgPT0gdGVtcGxhdGVJbmZvKSB7XG4gICAgICAgIHRoaXMuX190ZW1wbGF0ZUluZm9MYXN0ID0gdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvO1xuICAgICAgfVxuICAgICAgdGVtcGxhdGVJbmZvLnByZXZpb3VzVGVtcGxhdGVJbmZvID0gdGVtcGxhdGVJbmZvLm5leHRUZW1wbGF0ZUluZm8gPSBudWxsO1xuICAgICAgLy8gUmVtb3ZlIHN0YW1wZWQgbm9kZXNcbiAgICAgIGxldCBub2RlcyA9IHRlbXBsYXRlSW5mby5jaGlsZE5vZGVzO1xuICAgICAgZm9yIChsZXQgaT0wOyBpPG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgZGVmYXVsdCBgVGVtcGxhdGVTdGFtcGAgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yXG4gICAgICogcGFyc2luZyBiaW5kaW5ncyBmcm9tIGBUZXh0Tm9kZWAncycgYHRleHRDb250ZW50YC4gIEEgYGJpbmRpbmdzYFxuICAgICAqIGFycmF5IGlzIGFkZGVkIHRvIGBub2RlSW5mb2AgYW5kIHBvcHVsYXRlZCB3aXRoIGJpbmRpbmcgbWV0YWRhdGFcbiAgICAgKiB3aXRoIGluZm9ybWF0aW9uIGNhcHR1cmluZyB0aGUgYmluZGluZyB0YXJnZXQsIGFuZCBhIGBwYXJ0c2AgYXJyYXlcbiAgICAgKiB3aXRoIG9uZSBvciBtb3JlIG1ldGFkYXRhIG9iamVjdHMgY2FwdHVyaW5nIHRoZSBzb3VyY2Uocykgb2YgdGhlXG4gICAgICogYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUluZm99IHRlbXBsYXRlSW5mbyBUZW1wbGF0ZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZVxuICAgICAqIEBwYXJhbSB7Tm9kZUluZm99IG5vZGVJbmZvIE5vZGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGUgbm9kZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmlzaXRlZCBub2RlIGFkZGVkIG5vZGUtc3BlY2lmaWNcbiAgICAgKiAgIG1ldGFkYXRhIHRvIGBub2RlSW5mb2BcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVOb2RlKG5vZGUsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8pIHtcbiAgICAgIC8vIFRPRE8oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMjQwKTpcbiAgICAgIC8vICAgICBDaGFuZ2UgYmFjayB0byBqdXN0IHN1cGVyLm1ldGhvZENhbGwoKVxuICAgICAgbGV0IG5vdGVkID0gcHJvcGVydHlFZmZlY3RzQmFzZS5fcGFyc2VUZW1wbGF0ZU5vZGUuY2FsbChcbiAgICAgICAgdGhpcywgbm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgbGV0IHBhcnRzID0gdGhpcy5fcGFyc2VCaW5kaW5ncyhub2RlLnRleHRDb250ZW50LCB0ZW1wbGF0ZUluZm8pO1xuICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSB0ZXh0Q29udGVudCB3aXRoIGFueSBsaXRlcmFsIHBhcnRzXG4gICAgICAgICAgLy8gTk9URTogZGVmYXVsdCB0byBhIHNwYWNlIGhlcmUgc28gdGhlIHRleHROb2RlIHJlbWFpbnM7IHNvbWUgYnJvd3NlcnNcbiAgICAgICAgICAvLyAoSUUpIG9taXQgYW4gZW1wdHkgdGV4dE5vZGUgZm9sbG93aW5nIGNsb25lTm9kZS9pbXBvcnROb2RlLlxuICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBsaXRlcmFsRnJvbVBhcnRzKHBhcnRzKSB8fCAnICc7XG4gICAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCAndGV4dCcsICd0ZXh0Q29udGVudCcsIHBhcnRzKTtcbiAgICAgICAgICBub3RlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgZGVmYXVsdCBgVGVtcGxhdGVTdGFtcGAgaW1wbGVtZW50YXRpb24gdG8gYWRkIHN1cHBvcnQgZm9yXG4gICAgICogcGFyc2luZyBiaW5kaW5ncyBmcm9tIGF0dHJpYnV0ZXMuICBBIGBiaW5kaW5nc2BcbiAgICAgKiBhcnJheSBpcyBhZGRlZCB0byBgbm9kZUluZm9gIGFuZCBwb3B1bGF0ZWQgd2l0aCBiaW5kaW5nIG1ldGFkYXRhXG4gICAgICogd2l0aCBpbmZvcm1hdGlvbiBjYXB0dXJpbmcgdGhlIGJpbmRpbmcgdGFyZ2V0LCBhbmQgYSBgcGFydHNgIGFycmF5XG4gICAgICogd2l0aCBvbmUgb3IgbW9yZSBtZXRhZGF0YSBvYmplY3RzIGNhcHR1cmluZyB0aGUgc291cmNlKHMpIG9mIHRoZVxuICAgICAqIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBdHRyaWJ1dGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTm9kZUF0dHJpYnV0ZShub2RlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgbGV0IHBhcnRzID0gdGhpcy5fcGFyc2VCaW5kaW5ncyh2YWx1ZSwgdGVtcGxhdGVJbmZvKTtcbiAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAvLyBBdHRyaWJ1dGUgb3IgcHJvcGVydHlcbiAgICAgICAgbGV0IG9yaWdOYW1lID0gbmFtZTtcbiAgICAgICAgbGV0IGtpbmQgPSAncHJvcGVydHknO1xuICAgICAgICAvLyBUaGUgb25seSB3YXkgd2Ugc2VlIGEgY2FwaXRhbCBsZXR0ZXIgaGVyZSBpcyBpZiB0aGUgYXR0ciBoYXNcbiAgICAgICAgLy8gYSBjYXBpdGFsIGxldHRlciBpbiBpdCBwZXIgc3BlYy4gSW4gdGhpcyBjYXNlLCB0byBtYWtlIHN1cmVcbiAgICAgICAgLy8gdGhpcyBiaW5kaW5nIHdvcmtzLCB3ZSBnbyBhaGVhZCBhbmQgbWFrZSB0aGUgYmluZGluZyB0byB0aGUgYXR0cmlidXRlLlxuICAgICAgICBpZiAoY2FwaXRhbEF0dHJpYnV0ZVJlZ2V4LnRlc3QobmFtZSkpIHtcbiAgICAgICAgICBraW5kID0gJ2F0dHJpYnV0ZSc7XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZVtuYW1lLmxlbmd0aC0xXSA9PSAnJCcpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAga2luZCA9ICdhdHRyaWJ1dGUnO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluaXRpYWxpemUgYXR0cmlidXRlIGJpbmRpbmdzIHdpdGggYW55IGxpdGVyYWwgcGFydHNcbiAgICAgICAgbGV0IGxpdGVyYWwgPSBsaXRlcmFsRnJvbVBhcnRzKHBhcnRzKTtcbiAgICAgICAgaWYgKGxpdGVyYWwgJiYga2luZCA9PSAnYXR0cmlidXRlJykge1xuICAgICAgICAgIC8vIEVuc3VyZSBhIFNoYWR5Q1NTIHRlbXBsYXRlIHNjb3BlZCBzdHlsZSBpcyBub3QgcmVtb3ZlZFxuICAgICAgICAgIC8vIHdoZW4gYSBjbGFzcyQgYmluZGluZydzIGluaXRpYWwgbGl0ZXJhbCB2YWx1ZSBpcyBzZXQuXG4gICAgICAgICAgaWYgKG5hbWUgPT0gJ2NsYXNzJyAmJiBub2RlLmhhc0F0dHJpYnV0ZSgnY2xhc3MnKSkge1xuICAgICAgICAgICAgbGl0ZXJhbCArPSAnICcgKyBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgbGl0ZXJhbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xlYXIgYXR0cmlidXRlIGJlZm9yZSByZW1vdmluZywgc2luY2UgSUUgd29uJ3QgYWxsb3cgcmVtb3ZpbmdcbiAgICAgICAgLy8gYHZhbHVlYCBhdHRyaWJ1dGUgaWYgaXQgcHJldmlvdXNseSBoYWQgYSB2YWx1ZSAoY2FuJ3RcbiAgICAgICAgLy8gdW5jb25kaXRpb25hbGx5IHNldCAnJyBiZWZvcmUgcmVtb3Zpbmcgc2luY2UgYXR0cmlidXRlcyB3aXRoIGAkYFxuICAgICAgICAvLyBjYW4ndCBiZSBzZXQgdXNpbmcgc2V0QXR0cmlidXRlKVxuICAgICAgICBpZiAobm9kZS5sb2NhbE5hbWUgPT09ICdpbnB1dCcgJiYgb3JpZ05hbWUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShvcmlnTmFtZSwgJycpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSBhbm5vdGF0aW9uXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG9yaWdOYW1lKTtcbiAgICAgICAgLy8gQ2FzZSBoYWNrZXJ5OiBhdHRyaWJ1dGVzIGFyZSBsb3dlci1jYXNlLCBidXQgYmluZCB0YXJnZXRzXG4gICAgICAgIC8vIChwcm9wZXJ0aWVzKSBhcmUgY2FzZSBzZW5zaXRpdmUuIEdhbWJpdCBpcyB0byBtYXAgZGFzaC1jYXNlIHRvXG4gICAgICAgIC8vIGNhbWVsLWNhc2U6IGBmb28tYmFyYCBiZWNvbWVzIGBmb29CYXJgLlxuICAgICAgICAvLyBBdHRyaWJ1dGUgYmluZGluZ3MgYXJlIGV4Y2VwdGVkLlxuICAgICAgICBpZiAoa2luZCA9PT0gJ3Byb3BlcnR5Jykge1xuICAgICAgICAgIG5hbWUgPSBkYXNoVG9DYW1lbENhc2UobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkQmluZGluZyh0aGlzLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvLCBraW5kLCBuYW1lLCBwYXJ0cywgbGl0ZXJhbCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5RWZmZWN0c0Jhc2UuX3BhcnNlVGVtcGxhdGVOb2RlQXR0cmlidXRlLmNhbGwoXG4gICAgICAgICAgdGhpcywgbm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbywgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBkZWZhdWx0IGBUZW1wbGF0ZVN0YW1wYCBpbXBsZW1lbnRhdGlvbiB0byBhZGQgc3VwcG9ydCBmb3JcbiAgICAgKiBiaW5kaW5nIHRoZSBwcm9wZXJ0aWVzIHRoYXQgYSBuZXN0ZWQgdGVtcGxhdGUgZGVwZW5kcyBvbiB0byB0aGUgdGVtcGxhdGVcbiAgICAgKiBhcyBgX2hvc3RfPHByb3BlcnR5PmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgTm9kZSB0byBwYXJzZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge05vZGVJbmZvfSBub2RlSW5mbyBOb2RlIG1ldGFkYXRhIGZvciBjdXJyZW50IHRlbXBsYXRlIG5vZGVcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZpc2l0ZWQgbm9kZSBhZGRlZCBub2RlLXNwZWNpZmljXG4gICAgICogICBtZXRhZGF0YSB0byBgbm9kZUluZm9gXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUobm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbykge1xuICAgICAgLy8gVE9ETyhodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMyNDApOlxuICAgICAgLy8gICAgIENoYW5nZSBiYWNrIHRvIGp1c3Qgc3VwZXIubWV0aG9kQ2FsbCgpXG4gICAgICBsZXQgbm90ZWQgPSBwcm9wZXJ0eUVmZmVjdHNCYXNlLl9wYXJzZVRlbXBsYXRlTmVzdGVkVGVtcGxhdGUuY2FsbChcbiAgICAgICAgdGhpcywgbm9kZSwgdGVtcGxhdGVJbmZvLCBub2RlSW5mbyk7XG4gICAgICAvLyBNZXJnZSBob3N0IHByb3BzIGludG8gb3V0ZXIgdGVtcGxhdGUgYW5kIGFkZCBiaW5kaW5nc1xuICAgICAgbGV0IGhvc3RQcm9wcyA9IG5vZGVJbmZvLnRlbXBsYXRlSW5mby5ob3N0UHJvcHM7XG4gICAgICBsZXQgbW9kZSA9ICd7JztcbiAgICAgIGZvciAobGV0IHNvdXJjZSBpbiBob3N0UHJvcHMpIHtcbiAgICAgICAgbGV0IHBhcnRzID0gW3sgbW9kZSwgc291cmNlLCBkZXBlbmRlbmNpZXM6IFtzb3VyY2VdIH1dO1xuICAgICAgICBhZGRCaW5kaW5nKHRoaXMsIHRlbXBsYXRlSW5mbywgbm9kZUluZm8sICdwcm9wZXJ0eScsICdfaG9zdF8nICsgc291cmNlLCBwYXJ0cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHRvIHBhcnNlIHRleHQgaW4gYSB0ZW1wbGF0ZSAoZWl0aGVyIGF0dHJpYnV0ZSB2YWx1ZXMgb3JcbiAgICAgKiB0ZXh0Q29udGVudCkgaW50byBiaW5kaW5nIG1ldGFkYXRhLlxuICAgICAqXG4gICAgICogQW55IG92ZXJyaWRlcyBvZiB0aGlzIG1ldGhvZCBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIGJpbmRpbmcgcGFydFxuICAgICAqIG1ldGFkYXRhICByZXByZXNlbnRpbmcgb25lIG9yIG1vcmUgYmluZGluZ3MgZm91bmQgaW4gdGhlIHByb3ZpZGVkIHRleHRcbiAgICAgKiBhbmQgYW55IFwibGl0ZXJhbFwiIHRleHQgaW4gYmV0d2Vlbi4gIEFueSBub24tbGl0ZXJhbCBwYXJ0cyB3aWxsIGJlIHBhc3NlZFxuICAgICAqIHRvIGBfZXZhbHVhdGVCaW5kaW5nYCB3aGVuIGFueSBkZXBlbmRlbmNpZXMgY2hhbmdlLiAgVGhlIG9ubHkgcmVxdWlyZWRcbiAgICAgKiBmaWVsZHMgb2YgZWFjaCBcInBhcnRcIiBpbiB0aGUgcmV0dXJuZWQgYXJyYXkgYXJlIGFzIGZvbGxvd3M6XG4gICAgICpcbiAgICAgKiAtIGBkZXBlbmRlbmNpZXNgIC0gQXJyYXkgY29udGFpbmluZyB0cmlnZ2VyIG1ldGFkYXRhIGZvciBlYWNoIHByb3BlcnR5XG4gICAgICogICB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBiaW5kaW5nIHRvIHVwZGF0ZVxuICAgICAqIC0gYGxpdGVyYWxgIC0gU3RyaW5nIGNvbnRhaW5pbmcgdGV4dCBpZiB0aGUgcGFydCByZXByZXNlbnRzIGEgbGl0ZXJhbDtcbiAgICAgKiAgIGluIHRoaXMgY2FzZSBubyBgZGVwZW5kZW5jaWVzYCBhcmUgbmVlZGVkXG4gICAgICpcbiAgICAgKiBBZGRpdGlvbmFsIG1ldGFkYXRhIGZvciB1c2UgYnkgYF9ldmFsdWF0ZUJpbmRpbmdgIG1heSBiZSBwcm92aWRlZCBpblxuICAgICAqIGVhY2ggcGFydCBvYmplY3QgYXMgbmVlZGVkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaGFuZGxlcyB0aGUgZm9sbG93aW5nIHR5cGVzIG9mIGJpbmRpbmdzXG4gICAgICogKG9uZSBvciBtb3JlIG1heSBiZSBpbnRlcm1peGVkIHdpdGggbGl0ZXJhbCBzdHJpbmdzKTpcbiAgICAgKiAtIFByb3BlcnR5IGJpbmRpbmc6IGBbW3Byb3BdXWBcbiAgICAgKiAtIFBhdGggYmluZGluZzogYFtbb2JqZWN0LnByb3BdXWBcbiAgICAgKiAtIE5lZ2F0ZWQgcHJvcGVydHkgb3IgcGF0aCBiaW5kaW5nczogYFtbIXByb3BdXWAgb3IgYFtbIW9iamVjdC5wcm9wXV1gXG4gICAgICogLSBUd28td2F5IHByb3BlcnR5IG9yIHBhdGggYmluZGluZ3MgKHN1cHBvcnRzIG5lZ2F0aW9uKTpcbiAgICAgKiAgIGB7e3Byb3B9fWAsIGB7e29iamVjdC5wcm9wfX1gLCBge3shcHJvcH19YCBvciBge3shb2JqZWN0LnByb3B9fWBcbiAgICAgKiAtIElubGluZSBjb21wdXRlZCBtZXRob2QgKHN1cHBvcnRzIG5lZ2F0aW9uKTpcbiAgICAgKiAgIGBbW2NvbXB1dGUoYSwgJ2xpdGVyYWwnLCBiKV1dYCwgYFtbIWNvbXB1dGUoYSwgJ2xpdGVyYWwnLCBiKV1dYFxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdXNlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgYmVzdFxuICAgICAqIHBlcmZvcm1hbmNlLiBIb3dldmVyLCB0aGUgcmVndWxhciBleHByZXNzaW9uIHVzZXMgYSB3aGl0ZS1saXN0IG9mXG4gICAgICogYWxsb3dlZCBjaGFyYWN0ZXJzIGluIGEgZGF0YS1iaW5kaW5nLCB3aGljaCBjYXVzZXMgcHJvYmxlbXMgZm9yXG4gICAgICogZGF0YS1iaW5kaW5ncyB0aGF0IGRvIHVzZSBjaGFyYWN0ZXJzIG5vdCBpbiB0aGlzIHdoaXRlLWxpc3QuXG4gICAgICpcbiAgICAgKiBJbnN0ZWFkIG9mIHVwZGF0aW5nIHRoZSB3aGl0ZS1saXN0IHdpdGggYWxsIGFsbG93ZWQgY2hhcmFjdGVycyxcbiAgICAgKiB0aGVyZSBpcyBhIFN0cmljdEJpbmRpbmdQYXJzZXIgKHNlZSBsaWIvbWl4aW5zL3N0cmljdC1iaW5kaW5nLXBhcnNlcilcbiAgICAgKiB0aGF0IHVzZXMgYSBzdGF0ZSBtYWNoaW5lIGluc3RlYWQuIFRoaXMgc3RhdGUgbWFjaGluZSBpcyBhYmxlIHRvIGhhbmRsZVxuICAgICAqIGFsbCBjaGFyYWN0ZXJzLiBIb3dldmVyLCBpdCBpcyBzbGlnaHRseSBsZXNzIHBlcmZvcm1hbnQsIHRoZXJlZm9yZSB3ZVxuICAgICAqIGV4dHJhY3RlZCBpdCBpbnRvIGEgc2VwYXJhdGUgb3B0aW9uYWwgbWl4aW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUZXh0IHRvIHBhcnNlIGZyb20gYXR0cmlidXRlIG9yIHRleHRDb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlSW5mbyBDdXJyZW50IHRlbXBsYXRlIG1ldGFkYXRhXG4gICAgICogQHJldHVybiB7QXJyYXk8IUJpbmRpbmdQYXJ0Pn0gQXJyYXkgb2YgYmluZGluZyBwYXJ0IG1ldGFkYXRhXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wYXJzZUJpbmRpbmdzKHRleHQsIHRlbXBsYXRlSW5mbykge1xuICAgICAgbGV0IHBhcnRzID0gW107XG4gICAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICAgIGxldCBtO1xuICAgICAgLy8gRXhhbXBsZTogXCJsaXRlcmFsMXt7cHJvcH19bGl0ZXJhbDJbWyFjb21wdXRlKGZvbyxiYXIpXV1maW5hbFwiXG4gICAgICAvLyBSZWdleCBtYXRjaGVzOlxuICAgICAgLy8gICAgICAgIEl0ZXJhdGlvbiAxOiAgSXRlcmF0aW9uIDI6XG4gICAgICAvLyBtWzFdOiAne3snICAgICAgICAgICdbWydcbiAgICAgIC8vIG1bMl06ICcnICAgICAgICAgICAgJyEnXG4gICAgICAvLyBtWzNdOiAncHJvcCcgICAgICAgICdjb21wdXRlKGZvbyxiYXIpJ1xuICAgICAgd2hpbGUgKChtID0gYmluZGluZ1JlZ2V4LmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEFkZCBsaXRlcmFsIHBhcnRcbiAgICAgICAgaWYgKG0uaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKHtsaXRlcmFsOiB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgbS5pbmRleCl9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgYmluZGluZyBwYXJ0XG4gICAgICAgIGxldCBtb2RlID0gbVsxXVswXTtcbiAgICAgICAgbGV0IG5lZ2F0ZSA9IEJvb2xlYW4obVsyXSk7XG4gICAgICAgIGxldCBzb3VyY2UgPSBtWzNdLnRyaW0oKTtcbiAgICAgICAgbGV0IGN1c3RvbUV2ZW50ID0gZmFsc2UsIG5vdGlmeUV2ZW50ID0gJycsIGNvbG9uID0gLTE7XG4gICAgICAgIGlmIChtb2RlID09ICd7JyAmJiAoY29sb24gPSBzb3VyY2UuaW5kZXhPZignOjonKSkgPiAwKSB7XG4gICAgICAgICAgbm90aWZ5RXZlbnQgPSBzb3VyY2Uuc3Vic3RyaW5nKGNvbG9uICsgMik7XG4gICAgICAgICAgc291cmNlID0gc291cmNlLnN1YnN0cmluZygwLCBjb2xvbik7XG4gICAgICAgICAgY3VzdG9tRXZlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaWduYXR1cmUgPSBwYXJzZU1ldGhvZChzb3VyY2UpO1xuICAgICAgICBsZXQgZGVwZW5kZW5jaWVzID0gW107XG4gICAgICAgIGlmIChzaWduYXR1cmUpIHtcbiAgICAgICAgICAvLyBJbmxpbmUgY29tcHV0ZWQgZnVuY3Rpb25cbiAgICAgICAgICBsZXQge2FyZ3MsIG1ldGhvZE5hbWV9ID0gc2lnbmF0dXJlO1xuICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgYXJnID0gYXJnc1tpXTtcbiAgICAgICAgICAgIGlmICghYXJnLmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goYXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGR5bmFtaWNGbnMgPSB0ZW1wbGF0ZUluZm8uZHluYW1pY0ZucztcbiAgICAgICAgICBpZiAoZHluYW1pY0ZucyAmJiBkeW5hbWljRm5zW21ldGhvZE5hbWVdIHx8IHNpZ25hdHVyZS5zdGF0aWMpIHtcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgICAgICAgICAgc2lnbmF0dXJlLmR5bmFtaWNGbiA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFByb3BlcnR5IG9yIHBhdGhcbiAgICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgIHNvdXJjZSwgbW9kZSwgbmVnYXRlLCBjdXN0b21FdmVudCwgc2lnbmF0dXJlLCBkZXBlbmRlbmNpZXMsXG4gICAgICAgICAgZXZlbnQ6IG5vdGlmeUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBsYXN0SW5kZXggPSBiaW5kaW5nUmVnZXgubGFzdEluZGV4O1xuICAgICAgfVxuICAgICAgLy8gQWRkIGEgZmluYWwgbGl0ZXJhbCBwYXJ0XG4gICAgICBpZiAobGFzdEluZGV4ICYmIGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgIGxldCBsaXRlcmFsID0gdGV4dC5zdWJzdHJpbmcobGFzdEluZGV4KTtcbiAgICAgICAgaWYgKGxpdGVyYWwpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgIGxpdGVyYWw6IGxpdGVyYWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcGFydHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdG8gZXZhbHVhdGUgYSBwcmV2aW91c2x5IHBhcnNlZCBiaW5kaW5nIHBhcnQgYmFzZWQgb24gYSBzZXQgb2ZcbiAgICAgKiBvbmUgb3IgbW9yZSBjaGFuZ2VkIGRlcGVuZGVuY2llcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IVBvbHltZXJfUHJvcGVydHlFZmZlY3RzfSBpbnN0IEVsZW1lbnQgdGhhdCBzaG91bGQgYmUgdXNlZCBhc1xuICAgICAqICAgICBzY29wZSBmb3IgYmluZGluZyBkZXBlbmRlbmNpZXNcbiAgICAgKiBAcGFyYW0ge0JpbmRpbmdQYXJ0fSBwYXJ0IEJpbmRpbmcgcGFydCBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFByb3BlcnR5L3BhdGggdGhhdCB0cmlnZ2VyZWQgdGhpcyBlZmZlY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgQmFnIG9mIGN1cnJlbnQgcHJvcGVydHkgY2hhbmdlc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRQcm9wcyBCYWcgb2YgcHJldmlvdXMgdmFsdWVzIGZvciBjaGFuZ2VkIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc1BhdGhzIFRydWUgd2l0aCBgcHJvcHNgIGNvbnRhaW5zIG9uZSBvciBtb3JlIHBhdGhzXG4gICAgICogQHJldHVybiB7Kn0gVmFsdWUgdGhlIGJpbmRpbmcgcGFydCBldmFsdWF0ZWQgdG9cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2V2YWx1YXRlQmluZGluZyhpbnN0LCBwYXJ0LCBwYXRoLCBwcm9wcywgb2xkUHJvcHMsIGhhc1BhdGhzKSB7XG4gICAgICBsZXQgdmFsdWU7XG4gICAgICBpZiAocGFydC5zaWduYXR1cmUpIHtcbiAgICAgICAgdmFsdWUgPSBydW5NZXRob2RFZmZlY3QoaW5zdCwgcGF0aCwgcHJvcHMsIG9sZFByb3BzLCBwYXJ0LnNpZ25hdHVyZSk7XG4gICAgICB9IGVsc2UgaWYgKHBhdGggIT0gcGFydC5zb3VyY2UpIHtcbiAgICAgICAgdmFsdWUgPSBnZXQoaW5zdCwgcGFydC5zb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGhhc1BhdGhzICYmIGlzUGF0aChwYXRoKSkge1xuICAgICAgICAgIHZhbHVlID0gZ2V0KGluc3QsIHBhdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gaW5zdC5fX2RhdGFbcGF0aF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0Lm5lZ2F0ZSkge1xuICAgICAgICB2YWx1ZSA9ICF2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgfVxuXG4gIHJldHVybiBQcm9wZXJ0eUVmZmVjdHM7XG59KTtcblxuLyoqXG4gKiBIZWxwZXIgYXBpIGZvciBlbnF1ZXVpbmcgY2xpZW50IGRvbSBjcmVhdGVkIGJ5IGEgaG9zdCBlbGVtZW50LlxuICpcbiAqIEJ5IGRlZmF1bHQgZWxlbWVudHMgYXJlIGZsdXNoZWQgdmlhIGBfZmx1c2hQcm9wZXJ0aWVzYCB3aGVuXG4gKiBgY29ubmVjdGVkQ2FsbGJhY2tgIGlzIGNhbGxlZC4gRWxlbWVudHMgYXR0YWNoIHRoZWlyIGNsaWVudCBkb20gdG9cbiAqIHRoZW1zZWx2ZXMgYXQgYHJlYWR5YCB0aW1lIHdoaWNoIHJlc3VsdHMgZnJvbSB0aGlzIGZpcnN0IGZsdXNoLlxuICogVGhpcyBwcm92aWRlcyBhbiBvcmRlcmluZyBndWFyYW50ZWUgdGhhdCB0aGUgY2xpZW50IGRvbSBhbiBlbGVtZW50XG4gKiBjcmVhdGVzIGlzIGZsdXNoZWQgYmVmb3JlIHRoZSBlbGVtZW50IGl0c2VsZiAoaS5lLiBjbGllbnQgYHJlYWR5YFxuICogZmlyZXMgYmVmb3JlIGhvc3QgYHJlYWR5YCkuXG4gKlxuICogSG93ZXZlciwgaWYgYF9mbHVzaFByb3BlcnRpZXNgIGlzIGNhbGxlZCAqYmVmb3JlKiBhbiBlbGVtZW50IGlzIGNvbm5lY3RlZCxcbiAqIGFzIGZvciBleGFtcGxlIGBUZW1wbGF0aXplYCBkb2VzLCB0aGlzIG9yZGVyaW5nIGd1YXJhbnRlZSBjYW5ub3QgYmVcbiAqIHNhdGlzZmllZCBiZWNhdXNlIG5vIGVsZW1lbnRzIGFyZSBjb25uZWN0ZWQuIChOb3RlOiBCb3VuZCBlbGVtZW50cyB0aGF0XG4gKiByZWNlaXZlIGRhdGEgZG8gYmVjb21lIGVucXVldWVkIGNsaWVudHMgYW5kIGFyZSBwcm9wZXJseSBvcmRlcmVkIGJ1dFxuICogdW5ib3VuZCBlbGVtZW50cyBhcmUgbm90LilcbiAqXG4gKiBUbyBtYWludGFpbiB0aGUgZGVzaXJlZCBcImNsaWVudCBiZWZvcmUgaG9zdFwiIG9yZGVyaW5nIGd1YXJhbnRlZSBmb3IgdGhpc1xuICogY2FzZSB3ZSByZWx5IG9uIHRoZSBcImhvc3Qgc3RhY2suIENsaWVudCBub2RlcyByZWdpc3RlcnMgdGhlbXNlbHZlcyB3aXRoXG4gKiB0aGUgY3JlYXRpbmcgaG9zdCBlbGVtZW50IHdoZW4gY3JlYXRlZC4gVGhpcyBlbnN1cmVzIHRoYXQgYWxsIGNsaWVudCBkb21cbiAqIGlzIHJlYWRpZWQgaW4gdGhlIHByb3BlciBvcmRlciwgbWFpbnRhaW5pbmcgdGhlIGRlc2lyZWQgZ3VhcmFudGVlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEhvc3RTdGFjayB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IGluc3QgSW5zdGFuY2UgdG8gYWRkIHRvIGhvc3RTdGFja1xuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgcmVnaXN0ZXJIb3N0KGluc3QpIHtcbiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGgpIHtcbiAgICAgIGxldCBob3N0ID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aC0xXTtcbiAgICAgIGhvc3QuX2VucXVldWVDbGllbnQoaW5zdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Kn0gaW5zdCBJbnN0YW5jZSB0byBiZWdpbiBob3N0aW5nXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBiZWdpbkhvc3RpbmcoaW5zdCkge1xuICAgIHRoaXMuc3RhY2sucHVzaChpbnN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IGluc3QgSW5zdGFuY2UgdG8gZW5kIGhvc3RpbmdcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGVuZEhvc3RpbmcoaW5zdCkge1xuICAgIGxldCBzdGFja0xlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIGlmIChzdGFja0xlbiAmJiB0aGlzLnN0YWNrW3N0YWNrTGVuLTFdID09IGluc3QpIHtcbiAgICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gICAgfVxuICB9XG59XG5jb25zdCBob3N0U3RhY2sgPSBuZXcgSG9zdFN0YWNrKCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vKipcbiAqIFRvdGFsIG51bWJlciBvZiBQb2x5bWVyIGVsZW1lbnQgaW5zdGFuY2VzIGNyZWF0ZWQuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgbGV0IGluc3RhbmNlQ291bnQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50SW5zdGFuY2VDb3VudCgpIHtcbiAgaW5zdGFuY2VDb3VudCsrO1xufVxuXG4vKipcbiAqIEFycmF5IG9mIFBvbHltZXIgZWxlbWVudCBjbGFzc2VzIHRoYXQgaGF2ZSBiZWVuIGZpbmFsaXplZC5cbiAqIEB0eXBlIHshQXJyYXk8IVBvbHltZXJFbGVtZW50Q29uc3RydWN0b3I+fVxuICovXG5leHBvcnQgY29uc3QgcmVnaXN0cmF0aW9ucyA9IFtdO1xuXG4vKipcbiAqIEBwYXJhbSB7IVBvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IHByb3RvdHlwZSBFbGVtZW50IHByb3RvdHlwZSB0byBsb2dcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9yZWdMb2cocHJvdG90eXBlKSB7XG4gIGNvbnNvbGUubG9nKCdbJyArIC8qKiBAdHlwZSB7P30gKi8ocHJvdG90eXBlKS5pcyArICddOiByZWdpc3RlcmVkJyk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY2xhc3MgcHJvdG90eXBlIGZvciB0ZWxlbWV0cnkgcHVycG9zZXMuXG4gKiBAcGFyYW0geyFQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSBwcm90b3R5cGUgRWxlbWVudCBwcm90b3R5cGUgdG8gcmVnaXN0ZXJcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKHByb3RvdHlwZSkge1xuICByZWdpc3RyYXRpb25zLnB1c2gocHJvdG90eXBlKTtcbn1cblxuLyoqXG4gKiBMb2dzIGFsbCBlbGVtZW50cyByZWdpc3RlcmVkIHdpdGggYW4gYGlzYCB0byB0aGUgY29uc29sZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGR1bXBSZWdpc3RyYXRpb25zKCkge1xuICByZWdpc3RyYXRpb25zLmZvckVhY2goX3JlZ0xvZyk7XG59IiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi4vdXRpbHMvYm9vdC5qcyc7XG5cbmltcG9ydCB7IGRlZHVwaW5nTWl4aW4gfSBmcm9tICcuLi91dGlscy9taXhpbi5qcyc7XG5pbXBvcnQgeyByZWdpc3RlciwgaW5jcmVtZW50SW5zdGFuY2VDb3VudCB9IGZyb20gJy4uL3V0aWxzL3RlbGVtZXRyeS5qcyc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzQ2hhbmdlZCB9IGZyb20gJy4vcHJvcGVydGllcy1jaGFuZ2VkLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29weSBvZiBgcHJvcHNgIHdpdGggZWFjaCBwcm9wZXJ0eSBub3JtYWxpemVkIHN1Y2ggdGhhdFxuICogdXBncmFkZWQgaXQgaXMgYW4gb2JqZWN0IHdpdGggYXQgbGVhc3QgYSB0eXBlIHByb3BlcnR5IHsgdHlwZTogVHlwZX0uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIFByb3BlcnRpZXMgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJuIHtPYmplY3R9IENvcHkgb2YgaW5wdXQgYHByb3BzYCB3aXRoIG5vcm1hbGl6ZWQgcHJvcGVydGllcyB0aGF0XG4gKiBhcmUgaW4gdGhlIGZvcm0ge3R5cGU6IFR5cGV9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wZXJ0aWVzKHByb3BzKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBmb3IgKGxldCBwIGluIHByb3BzKSB7XG4gICAgY29uc3QgbyA9IHByb3BzW3BdO1xuICAgIG91dHB1dFtwXSA9ICh0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJykgPyB7dHlwZTogb30gOiBvO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogTWl4aW4gdGhhdCBwcm92aWRlcyBhIG1pbmltYWwgc3RhcnRpbmcgcG9pbnQgdG8gdXNpbmcgdGhlIFByb3BlcnRpZXNDaGFuZ2VkXG4gKiBtaXhpbiBieSBwcm92aWRpbmcgYSBtZWNoYW5pc20gdG8gZGVjbGFyZSBwcm9wZXJ0aWVzIGluIGEgc3RhdGljXG4gKiBnZXR0ZXIgKGUuZy4gc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkgeyByZXR1cm4geyBmb286IFN0cmluZyB9IH0pLiBDaGFuZ2VzXG4gKiBhcmUgcmVwb3J0ZWQgdmlhIHRoZSBgX3Byb3BlcnRpZXNDaGFuZ2VkYCBtZXRob2QuXG4gKlxuICogVGhpcyBtaXhpbiBwcm92aWRlcyBubyBzcGVjaWZpYyBzdXBwb3J0IGZvciByZW5kZXJpbmcuIFVzZXJzIGFyZSBleHBlY3RlZFxuICogdG8gY3JlYXRlIGEgU2hhZG93Um9vdCBhbmQgcHV0IGNvbnRlbnQgaW50byBpdCBhbmQgdXBkYXRlIGl0IGluIHdoYXRldmVyXG4gKiB3YXkgbWFrZXMgc2Vuc2UuIFRoaXMgY2FuIGJlIGRvbmUgaW4gcmVhY3Rpb24gdG8gcHJvcGVydGllcyBjaGFuZ2luZyBieVxuICogaW1wbGVtZW50aW5nIGBfcHJvcGVydGllc0NoYW5nZWRgLlxuICpcbiAqIEBtaXhpbkZ1bmN0aW9uXG4gKiBAcG9seW1lclxuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0aWVzQ2hhbmdlZFxuICogQHN1bW1hcnkgTWl4aW4gdGhhdCBwcm92aWRlcyBhIG1pbmltYWwgc3RhcnRpbmcgcG9pbnQgZm9yIHVzaW5nXG4gKiB0aGUgUHJvcGVydGllc0NoYW5nZWQgbWl4aW4gYnkgcHJvdmlkaW5nIGEgZGVjbGFyYXRpdmUgYHByb3BlcnRpZXNgIG9iamVjdC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyBDbGFzcyB0byBhcHBseSBtaXhpbiB0by5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKG5ldzpUKX0gc3VwZXJDbGFzcyB3aXRoIG1peGluIGFwcGxpZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9wZXJ0aWVzTWl4aW4gPSBkZWR1cGluZ01peGluKHN1cGVyQ2xhc3MgPT4ge1xuXG4gLyoqXG4gICogQGNvbnN0cnVjdG9yXG4gICogQGltcGxlbWVudHMge1BvbHltZXJfUHJvcGVydGllc0NoYW5nZWR9XG4gICogQHByaXZhdGVcbiAgKi9cbiBjb25zdCBiYXNlID0gUHJvcGVydGllc0NoYW5nZWQoc3VwZXJDbGFzcyk7XG5cbiAvKipcbiAgKiBSZXR1cm5zIHRoZSBzdXBlciBjbGFzcyBjb25zdHJ1Y3RvciBmb3IgdGhlIGdpdmVuIGNsYXNzLCBpZiBpdCBpcyBhblxuICAqIGluc3RhbmNlIG9mIHRoZSBQcm9wZXJ0aWVzTWl4aW4uXG4gICpcbiAgKiBAcGFyYW0geyFQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gY29uc3RydWN0b3IgUHJvcGVydGllc01peGluIGNvbnN0cnVjdG9yXG4gICogQHJldHVybiB7P1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSBTdXBlciBjbGFzcyBjb25zdHJ1Y3RvclxuICAqL1xuIGZ1bmN0aW9uIHN1cGVyUHJvcGVydGllc0NsYXNzKGNvbnN0cnVjdG9yKSB7XG4gICBjb25zdCBzdXBlckN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY29uc3RydWN0b3IpO1xuXG4gICAvLyBOb3RlLCB0aGUgYFByb3BlcnRpZXNNaXhpbmAgY2xhc3MgYmVsb3cgb25seSByZWZlcnMgdG8gdGhlIGNsYXNzXG4gICAvLyBnZW5lcmF0ZWQgYnkgdGhpcyBjYWxsIHRvIHRoZSBtaXhpbjsgdGhlIGluc3RhbmNlb2YgdGVzdCBvbmx5IHdvcmtzXG4gICAvLyBiZWNhdXNlIHRoZSBtaXhpbiBpcyBkZWR1cGVkIGFuZCBndWFyYW50ZWVkIG9ubHkgdG8gYXBwbHkgb25jZSwgaGVuY2VcbiAgIC8vIGFsbCBjb25zdHJ1Y3RvcnMgaW4gYSBwcm90byBjaGFpbiB3aWxsIHNlZSB0aGUgc2FtZSBgUHJvcGVydGllc01peGluYFxuICAgcmV0dXJuIChzdXBlckN0b3IucHJvdG90eXBlIGluc3RhbmNlb2YgUHJvcGVydGllc01peGluKSA/XG4gICAgIC8qKiBAdHlwZSB7IVByb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSAqLyAoc3VwZXJDdG9yKSA6IG51bGw7XG4gfVxuXG4gLyoqXG4gICogUmV0dXJucyBhIG1lbW9pemVkIHZlcnNpb24gb2YgdGhlIGBwcm9wZXJ0aWVzYCBvYmplY3QgZm9yIHRoZVxuICAqIGdpdmVuIGNsYXNzLiBQcm9wZXJ0aWVzIG5vdCBpbiBvYmplY3QgZm9ybWF0IGFyZSBjb252ZXJ0ZWQgdG8gYXRcbiAgKiBsZWFzdCB7dHlwZX0uXG4gICpcbiAgKiBAcGFyYW0ge1Byb3BlcnRpZXNNaXhpbkNvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBQcm9wZXJ0aWVzTWl4aW4gY29uc3RydWN0b3JcbiAgKiBAcmV0dXJuIHtPYmplY3R9IE1lbW9pemVkIHByb3BlcnRpZXMgb2JqZWN0XG4gICovXG4gZnVuY3Rpb24gb3duUHJvcGVydGllcyhjb25zdHJ1Y3Rvcikge1xuICAgaWYgKCFjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX293blByb3BlcnRpZXMnLCBjb25zdHJ1Y3RvcikpKSB7XG4gICAgIGxldCBwcm9wcyA9IG51bGw7XG5cbiAgICAgaWYgKGNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ3Byb3BlcnRpZXMnLCBjb25zdHJ1Y3RvcikpKSB7XG4gICAgICAgY29uc3QgcHJvcGVydGllcyA9IGNvbnN0cnVjdG9yLnByb3BlcnRpZXM7XG5cbiAgICAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgICBwcm9wcyA9IG5vcm1hbGl6ZVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgICAgfVxuICAgICB9XG5cbiAgICAgY29uc3RydWN0b3IuX19vd25Qcm9wZXJ0aWVzID0gcHJvcHM7XG4gICB9XG4gICByZXR1cm4gY29uc3RydWN0b3IuX19vd25Qcm9wZXJ0aWVzO1xuIH1cblxuIC8qKlxuICAqIEBwb2x5bWVyXG4gICogQG1peGluQ2xhc3NcbiAgKiBAZXh0ZW5kcyB7YmFzZX1cbiAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0aWVzTWl4aW59XG4gICogQHVucmVzdHJpY3RlZFxuICAqL1xuIGNsYXNzIFByb3BlcnRpZXNNaXhpbiBleHRlbmRzIGJhc2Uge1xuXG4gICAvKipcbiAgICAqIEltcGxlbWVudHMgc3RhbmRhcmQgY3VzdG9tIGVsZW1lbnRzIGdldHRlciB0byBvYnNlcnZlcyB0aGUgYXR0cmlidXRlc1xuICAgICogbGlzdGVkIGluIGBwcm9wZXJ0aWVzYC5cbiAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IEludGVyZmFjZXMgaW4gY2xvc3VyZSBkbyBub3QgaW5oZXJpdCBzdGF0aWNzLCBidXQgY2xhc3NlcyBkb1xuICAgICogQG5vY29sbGFwc2VcbiAgICAqL1xuICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX29ic2VydmVkQXR0cmlidXRlcycsIHRoaXMpKSkge1xuICAgICAgIHJlZ2lzdGVyKHRoaXMucHJvdG90eXBlKTtcbiAgICAgICBjb25zdCBwcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgICAgdGhpcy5fX29ic2VydmVkQXR0cmlidXRlcyA9IHByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpLm1hcChwID0+IHRoaXMuYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KHApKSA6IFtdO1xuICAgICB9XG4gICAgIHJldHVybiB0aGlzLl9fb2JzZXJ2ZWRBdHRyaWJ1dGVzO1xuICAgfVxuXG4gICAvKipcbiAgICAqIEZpbmFsaXplcyBhbiBlbGVtZW50IGRlZmluaXRpb24sIGluY2x1ZGluZyBlbnN1cmluZyBhbnkgc3VwZXIgY2xhc3Nlc1xuICAgICogYXJlIGFsc28gZmluYWxpemVkLiBUaGlzIGluY2x1ZGVzIGVuc3VyaW5nIHByb3BlcnR5XG4gICAgKiBhY2Nlc3NvcnMgZXhpc3Qgb24gdGhlIGVsZW1lbnQgcHJvdG90eXBlLiBUaGlzIG1ldGhvZCBjYWxsc1xuICAgICogYF9maW5hbGl6ZUNsYXNzYCB0byBmaW5hbGl6ZSBlYWNoIGNvbnN0cnVjdG9yIGluIHRoZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICogQG5vY29sbGFwc2VcbiAgICAqL1xuICAgc3RhdGljIGZpbmFsaXplKCkge1xuICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19maW5hbGl6ZWQnLCB0aGlzKSkpIHtcbiAgICAgICBjb25zdCBzdXBlckN0b3IgPSBzdXBlclByb3BlcnRpZXNDbGFzcygvKiogQHR5cGUgeyFQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gKi8odGhpcykpO1xuICAgICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgICAgIHN1cGVyQ3Rvci5maW5hbGl6ZSgpO1xuICAgICAgIH1cbiAgICAgICB0aGlzLl9fZmluYWxpemVkID0gdHJ1ZTtcbiAgICAgICB0aGlzLl9maW5hbGl6ZUNsYXNzKCk7XG4gICAgIH1cbiAgIH1cblxuICAgLyoqXG4gICAgKiBGaW5hbGl6ZSBhbiBlbGVtZW50IGNsYXNzLiBUaGlzIGluY2x1ZGVzIGVuc3VyaW5nIHByb3BlcnR5XG4gICAgKiBhY2Nlc3NvcnMgZXhpc3Qgb24gdGhlIGVsZW1lbnQgcHJvdG90eXBlLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnlcbiAgICAqIGBmaW5hbGl6ZWAgYW5kIGZpbmFsaXplcyB0aGUgY2xhc3MgY29uc3RydWN0b3IuXG4gICAgKlxuICAgICogQHByb3RlY3RlZFxuICAgICogQG5vY29sbGFwc2VcbiAgICAqL1xuICAgc3RhdGljIF9maW5hbGl6ZUNsYXNzKCkge1xuICAgICBjb25zdCBwcm9wcyA9IG93blByb3BlcnRpZXMoLyoqIEB0eXBlIHshUHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKTtcbiAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgLyoqIEB0eXBlIHs/fSAqLyAodGhpcykuY3JlYXRlUHJvcGVydGllcyhwcm9wcyk7XG4gICAgIH1cbiAgIH1cblxuICAgLyoqXG4gICAgKiBSZXR1cm5zIGEgbWVtb2l6ZWQgdmVyc2lvbiBvZiBhbGwgcHJvcGVydGllcywgaW5jbHVkaW5nIHRob3NlIGluaGVyaXRlZFxuICAgICogZnJvbSBzdXBlciBjbGFzc2VzLiBQcm9wZXJ0aWVzIG5vdCBpbiBvYmplY3QgZm9ybWF0IGFyZSBjb252ZXJ0ZWQgdG9cbiAgICAqIGF0IGxlYXN0IHt0eXBlfS5cbiAgICAqXG4gICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgZm9yIHRoaXMgY2xhc3NcbiAgICAqIEBwcm90ZWN0ZWRcbiAgICAqIEBub2NvbGxhcHNlXG4gICAgKi9cbiAgIHN0YXRpYyBnZXQgX3Byb3BlcnRpZXMoKSB7XG4gICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX3Byb3BlcnRpZXMnLCB0aGlzKSkpIHtcbiAgICAgICBjb25zdCBzdXBlckN0b3IgPSBzdXBlclByb3BlcnRpZXNDbGFzcygvKiogQHR5cGUgeyFQcm9wZXJ0aWVzTWl4aW5Db25zdHJ1Y3Rvcn0gKi8odGhpcykpO1xuICAgICAgIHRoaXMuX19wcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7fSxcbiAgICAgICAgIHN1cGVyQ3RvciAmJiBzdXBlckN0b3IuX3Byb3BlcnRpZXMsXG4gICAgICAgICBvd25Qcm9wZXJ0aWVzKC8qKiBAdHlwZSB7UHJvcGVydGllc01peGluQ29uc3RydWN0b3J9ICovKHRoaXMpKSk7XG4gICAgIH1cbiAgICAgcmV0dXJuIHRoaXMuX19wcm9wZXJ0aWVzO1xuICAgfVxuXG4gICAvKipcbiAgICAqIE92ZXJyaWRlcyBgUHJvcGVydGllc0NoYW5nZWRgIG1ldGhvZCB0byByZXR1cm4gdHlwZSBzcGVjaWZpZWQgaW4gdGhlXG4gICAgKiBzdGF0aWMgYHByb3BlcnRpZXNgIG9iamVjdCBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eVxuICAgICogQHJldHVybiB7Kn0gVHlwZSB0byB3aGljaCB0byBkZXNlcmlhbGl6ZSBhdHRyaWJ1dGVcbiAgICAqXG4gICAgKiBAcHJvdGVjdGVkXG4gICAgKiBAbm9jb2xsYXBzZVxuICAgICovXG4gICBzdGF0aWMgdHlwZUZvclByb3BlcnR5KG5hbWUpIHtcbiAgICAgY29uc3QgaW5mbyA9IHRoaXMuX3Byb3BlcnRpZXNbbmFtZV07XG4gICAgIHJldHVybiBpbmZvICYmIGluZm8udHlwZTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiBPdmVycmlkZXMgYFByb3BlcnRpZXNDaGFuZ2VkYCBtZXRob2QgYW5kIGFkZHMgYSBjYWxsIHRvXG4gICAgKiBgZmluYWxpemVgIHdoaWNoIGxhemlseSBjb25maWd1cmVzIHRoZSBlbGVtZW50J3MgcHJvcGVydHkgYWNjZXNzb3JzLlxuICAgICogQG92ZXJyaWRlXG4gICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICovXG4gICBfaW5pdGlhbGl6ZVByb3BlcnRpZXMoKSB7XG4gICAgIGluY3JlbWVudEluc3RhbmNlQ291bnQoKTtcbiAgICAgdGhpcy5jb25zdHJ1Y3Rvci5maW5hbGl6ZSgpO1xuICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiBDYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBhZGRlZCB0byBhIGRvY3VtZW50LlxuICAgICogQ2FsbHMgYF9lbmFibGVQcm9wZXJ0aWVzYCB0byB0dXJuIG9uIHByb3BlcnR5IHN5c3RlbSBmcm9tXG4gICAgKiBgUHJvcGVydGllc0NoYW5nZWRgLlxuICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gU3VwZXIgbWF5IG9yIG1heSBub3QgaW1wbGVtZW50IHRoZSBjYWxsYmFja1xuICAgICogQHJldHVybiB7dm9pZH1cbiAgICAqIEBvdmVycmlkZVxuICAgICovXG4gICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgaWYgKHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgfVxuICAgICB0aGlzLl9lbmFibGVQcm9wZXJ0aWVzKCk7XG4gICB9XG5cbiAgIC8qKlxuICAgICogQ2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIGEgZG9jdW1lbnRcbiAgICAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9IFN1cGVyIG1heSBvciBtYXkgbm90IGltcGxlbWVudCB0aGUgY2FsbGJhY2tcbiAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgKiBAb3ZlcnJpZGVcbiAgICAqL1xuICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgIGlmIChzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgIH1cbiAgIH1cblxuIH1cblxuIHJldHVybiBQcm9wZXJ0aWVzTWl4aW47XG5cbn0pO1xuIiwiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAc3VwcHJlc3Mge2NoZWNrUHJvdG90eXBhbFR5cGVzfVxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmRcbiAqIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnlcbiAqIEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVBcbiAqIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0ICcuLi91dGlscy9ib290LmpzJztcblxuaW1wb3J0IHsgcm9vdFBhdGgsIHN0cmljdFRlbXBsYXRlUG9saWN5LCBhbGxvd1RlbXBsYXRlRnJvbURvbU1vZHVsZSwgbGVnYWN5T3B0aW1pemF0aW9ucywgc3luY0luaXRpYWxSZW5kZXIgfSBmcm9tICcuLi91dGlscy9zZXR0aW5ncy5qcyc7XG5pbXBvcnQgeyBkZWR1cGluZ01peGluIH0gZnJvbSAnLi4vdXRpbHMvbWl4aW4uanMnO1xuaW1wb3J0IHsgc3R5bGVzRnJvbVRlbXBsYXRlLCBzdHlsZXNGcm9tTW9kdWxlSW1wb3J0cyB9IGZyb20gJy4uL3V0aWxzL3N0eWxlLWdhdGhlci5qcyc7XG5pbXBvcnQgeyBwYXRoRnJvbVVybCwgcmVzb2x2ZUNzcywgcmVzb2x2ZVVybCB9IGZyb20gJy4uL3V0aWxzL3Jlc29sdmUtdXJsLmpzJztcbmltcG9ydCB7IERvbU1vZHVsZSB9IGZyb20gJy4uL2VsZW1lbnRzL2RvbS1tb2R1bGUuanMnO1xuaW1wb3J0IHsgUHJvcGVydHlFZmZlY3RzIH0gZnJvbSAnLi9wcm9wZXJ0eS1lZmZlY3RzLmpzJztcbmltcG9ydCB7IFByb3BlcnRpZXNNaXhpbiB9IGZyb20gJy4vcHJvcGVydGllcy1taXhpbi5qcyc7XG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vdXRpbHMvd3JhcC5qcyc7XG5cbi8qKlxuICogQ3VycmVudCBQb2x5bWVyIHZlcnNpb24gaW4gU2VtdmVyIG5vdGF0aW9uLlxuICogQHR5cGUge3N0cmluZ30gU2VtdmVyIG5vdGF0aW9uIG9mIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgUG9seW1lci5cbiAqL1xuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMy4zLjEnO1xuXG5jb25zdCBidWlsdENTUyA9IHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1NbJ2Nzc0J1aWxkJ107XG5cbi8qKlxuICogRWxlbWVudCBjbGFzcyBtaXhpbiB0aGF0IHByb3ZpZGVzIHRoZSBjb3JlIEFQSSBmb3IgUG9seW1lcidzIG1ldGEtcHJvZ3JhbW1pbmdcbiAqIGZlYXR1cmVzIGluY2x1ZGluZyB0ZW1wbGF0ZSBzdGFtcGluZywgZGF0YS1iaW5kaW5nLCBhdHRyaWJ1dGUgZGVzZXJpYWxpemF0aW9uLFxuICogYW5kIHByb3BlcnR5IGNoYW5nZSBvYnNlcnZhdGlvbi5cbiAqXG4gKiBTdWJjbGFzc2VycyBtYXkgcHJvdmlkZSB0aGUgZm9sbG93aW5nIHN0YXRpYyBnZXR0ZXJzIHRvIHJldHVybiBtZXRhZGF0YVxuICogdXNlZCB0byBjb25maWd1cmUgUG9seW1lcidzIGZlYXR1cmVzIGZvciB0aGUgY2xhc3M6XG4gKlxuICogLSBgc3RhdGljIGdldCBpcygpYDogV2hlbiB0aGUgdGVtcGxhdGUgaXMgcHJvdmlkZWQgdmlhIGEgYGRvbS1tb2R1bGVgLFxuICogICB1c2VycyBzaG91bGQgcmV0dXJuIHRoZSBgZG9tLW1vZHVsZWAgaWQgZnJvbSBhIHN0YXRpYyBgaXNgIGdldHRlci4gIElmXG4gKiAgIG5vIHRlbXBsYXRlIGlzIG5lZWRlZCBvciB0aGUgdGVtcGxhdGUgaXMgcHJvdmlkZWQgZGlyZWN0bHkgdmlhIHRoZVxuICogICBgdGVtcGxhdGVgIGdldHRlciwgdGhlcmUgaXMgbm8gbmVlZCB0byBkZWZpbmUgYGlzYCBmb3IgdGhlIGVsZW1lbnQuXG4gKlxuICogLSBgc3RhdGljIGdldCB0ZW1wbGF0ZSgpYDogVXNlcnMgbWF5IHByb3ZpZGUgdGhlIHRlbXBsYXRlIGRpcmVjdGx5IChhc1xuICogICBvcHBvc2VkIHRvIHZpYSBgZG9tLW1vZHVsZWApIGJ5IGltcGxlbWVudGluZyBhIHN0YXRpYyBgdGVtcGxhdGVgIGdldHRlci5cbiAqICAgVGhlIGdldHRlciBtdXN0IHJldHVybiBhbiBgSFRNTFRlbXBsYXRlRWxlbWVudGAuXG4gKlxuICogLSBgc3RhdGljIGdldCBwcm9wZXJ0aWVzKClgOiBTaG91bGQgcmV0dXJuIGFuIG9iamVjdCBkZXNjcmliaW5nXG4gKiAgIHByb3BlcnR5LXJlbGF0ZWQgbWV0YWRhdGEgdXNlZCBieSBQb2x5bWVyIGZlYXR1cmVzIChrZXk6IHByb3BlcnR5IG5hbWVcbiAqICAgdmFsdWU6IG9iamVjdCBjb250YWluaW5nIHByb3BlcnR5IG1ldGFkYXRhKS4gVmFsaWQga2V5cyBpbiBwZXItcHJvcGVydHlcbiAqICAgbWV0YWRhdGEgaW5jbHVkZTpcbiAqICAgLSBgdHlwZWAgKFN0cmluZ3xOdW1iZXJ8T2JqZWN0fEFycmF5fC4uLik6IFVzZWQgYnlcbiAqICAgICBgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrYCB0byBkZXRlcm1pbmUgaG93IHN0cmluZy1iYXNlZCBhdHRyaWJ1dGVzXG4gKiAgICAgYXJlIGRlc2VyaWFsaXplZCB0byBKYXZhU2NyaXB0IHByb3BlcnR5IHZhbHVlcy5cbiAqICAgLSBgbm90aWZ5YCAoYm9vbGVhbik6IENhdXNlcyBhIGNoYW5nZSBpbiB0aGUgcHJvcGVydHkgdG8gZmlyZSBhXG4gKiAgICAgbm9uLWJ1YmJsaW5nIGV2ZW50IGNhbGxlZCBgPHByb3BlcnR5Pi1jaGFuZ2VkYC4gRWxlbWVudHMgdGhhdCBoYXZlXG4gKiAgICAgZW5hYmxlZCB0d28td2F5IGJpbmRpbmcgdG8gdGhlIHByb3BlcnR5IHVzZSB0aGlzIGV2ZW50IHRvIG9ic2VydmUgY2hhbmdlcy5cbiAqICAgLSBgcmVhZE9ubHlgIChib29sZWFuKTogQ3JlYXRlcyBhIGdldHRlciBmb3IgdGhlIHByb3BlcnR5LCBidXQgbm8gc2V0dGVyLlxuICogICAgIFRvIHNldCBhIHJlYWQtb25seSBwcm9wZXJ0eSwgdXNlIHRoZSBwcml2YXRlIHNldHRlciBtZXRob2RcbiAqICAgICBgX3NldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSlgLlxuICogICAtIGBvYnNlcnZlcmAgKHN0cmluZyk6IE9ic2VydmVyIG1ldGhvZCBuYW1lIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlblxuICogICAgIHRoZSBwcm9wZXJ0eSBjaGFuZ2VzLiBUaGUgYXJndW1lbnRzIG9mIHRoZSBtZXRob2QgYXJlXG4gKiAgICAgYCh2YWx1ZSwgcHJldmlvdXNWYWx1ZSlgLlxuICogICAtIGBjb21wdXRlZGAgKHN0cmluZyk6IFN0cmluZyBkZXNjcmliaW5nIG1ldGhvZCBhbmQgZGVwZW5kZW50IHByb3BlcnRpZXNcbiAqICAgICBmb3IgY29tcHV0aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5IChlLmcuIGAnY29tcHV0ZUZvbyhiYXIsIHpvdCknYCkuXG4gKiAgICAgQ29tcHV0ZWQgcHJvcGVydGllcyBhcmUgcmVhZC1vbmx5IGJ5IGRlZmF1bHQgYW5kIGNhbiBvbmx5IGJlIGNoYW5nZWRcbiAqICAgICB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY29tcHV0aW5nIG1ldGhvZC5cbiAqXG4gKiAtIGBzdGF0aWMgZ2V0IG9ic2VydmVycygpYDogQXJyYXkgb2Ygc3RyaW5ncyBkZXNjcmliaW5nIG11bHRpLXByb3BlcnR5XG4gKiAgIG9ic2VydmVyIG1ldGhvZHMgYW5kIHRoZWlyIGRlcGVuZGVudCBwcm9wZXJ0aWVzIChlLmcuXG4gKiAgIGAnb2JzZXJ2ZUFCQyhhLCBiLCBjKSdgKS5cbiAqXG4gKiBUaGUgYmFzZSBjbGFzcyBwcm92aWRlcyBkZWZhdWx0IGltcGxlbWVudGF0aW9ucyBmb3IgdGhlIGZvbGxvd2luZyBzdGFuZGFyZFxuICogY3VzdG9tIGVsZW1lbnQgbGlmZWN5Y2xlIGNhbGxiYWNrczsgdXNlcnMgbWF5IG92ZXJyaWRlIHRoZXNlLCBidXQgc2hvdWxkXG4gKiBjYWxsIHRoZSBzdXBlciBtZXRob2QgdG8gZW5zdXJlXG4gKiAtIGBjb25zdHJ1Y3RvcmA6IFJ1biB3aGVuIHRoZSBlbGVtZW50IGlzIGNyZWF0ZWQgb3IgdXBncmFkZWRcbiAqIC0gYGNvbm5lY3RlZENhbGxiYWNrYDogUnVuIGVhY2ggdGltZSB0aGUgZWxlbWVudCBpcyBjb25uZWN0ZWQgdG8gdGhlXG4gKiAgIGRvY3VtZW50XG4gKiAtIGBkaXNjb25uZWN0ZWRDYWxsYmFja2A6IFJ1biBlYWNoIHRpbWUgdGhlIGVsZW1lbnQgaXMgZGlzY29ubmVjdGVkIGZyb21cbiAqICAgdGhlIGRvY3VtZW50XG4gKiAtIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgOiBSdW4gZWFjaCB0aW1lIGFuIGF0dHJpYnV0ZSBpblxuICogICBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYCBpcyBzZXQgb3IgcmVtb3ZlZCAobm90ZTogdGhpcyBlbGVtZW50J3MgZGVmYXVsdFxuICogICBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYCBpbXBsZW1lbnRhdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgcmV0dXJuIGFuIGFycmF5XG4gKiAgIG9mIGRhc2gtY2FzZWQgYXR0cmlidXRlcyBiYXNlZCBvbiBgcHJvcGVydGllc2ApXG4gKlxuICogQG1peGluRnVuY3Rpb25cbiAqIEBwb2x5bWVyXG4gKiBAYXBwbGllc01peGluIFByb3BlcnR5RWZmZWN0c1xuICogQGFwcGxpZXNNaXhpbiBQcm9wZXJ0aWVzTWl4aW5cbiAqIEBwcm9wZXJ0eSByb290UGF0aCB7c3RyaW5nfSBTZXQgdG8gdGhlIHZhbHVlIG9mIGByb290UGF0aGAsXG4gKiAgIHdoaWNoIGRlZmF1bHRzIHRvIHRoZSBtYWluIGRvY3VtZW50IHBhdGhcbiAqIEBwcm9wZXJ0eSBpbXBvcnRQYXRoIHtzdHJpbmd9IFNldCB0byB0aGUgdmFsdWUgb2YgdGhlIGNsYXNzJ3Mgc3RhdGljXG4gKiAgIGBpbXBvcnRQYXRoYCBwcm9wZXJ0eSwgd2hpY2ggZGVmYXVsdHMgdG8gdGhlIHBhdGggb2YgdGhpcyBlbGVtZW50J3NcbiAqICAgYGRvbS1tb2R1bGVgICh3aGVuIGBpc2AgaXMgdXNlZCksIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBmb3Igb3RoZXJcbiAqICAgaW1wb3J0IHN0cmF0ZWdpZXMuXG4gKiBAc3VtbWFyeSBFbGVtZW50IGNsYXNzIG1peGluIHRoYXQgcHJvdmlkZXMgdGhlIGNvcmUgQVBJIGZvciBQb2x5bWVyJ3NcbiAqIG1ldGEtcHJvZ3JhbW1pbmcgZmVhdHVyZXMuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3MgQ2xhc3MgdG8gYXBwbHkgbWl4aW4gdG8uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VCl9IHN1cGVyQ2xhc3Mgd2l0aCBtaXhpbiBhcHBsaWVkLlxuICovXG5leHBvcnQgY29uc3QgRWxlbWVudE1peGluID0gZGVkdXBpbmdNaXhpbihiYXNlID0+IHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAaW1wbGVtZW50cyB7UG9seW1lcl9Qcm9wZXJ0eUVmZmVjdHN9XG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX1Byb3BlcnRpZXNNaXhpbn1cbiAgICogQGV4dGVuZHMge0hUTUxFbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29uc3QgcG9seW1lckVsZW1lbnRCYXNlID0gUHJvcGVydGllc01peGluKFByb3BlcnR5RWZmZWN0cyhiYXNlKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHByb3BlcnRpZXMgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAgICogVGhpcyBsaXN0IGlzIGNyZWF0ZWQgYXMgYW4gb3B0aW1pemF0aW9uIHNpbmNlIGl0IGlzIGEgc3Vic2V0IG9mXG4gICAqIHRoZSBsaXN0IHJldHVybmVkIGZyb20gYF9wcm9wZXJ0aWVzYC5cbiAgICogVGhpcyBsaXN0IGlzIHVzZWQgaW4gYF9pbml0aWFsaXplUHJvcGVydGllc2AgdG8gc2V0IHByb3BlcnR5IGRlZmF1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yIEVsZW1lbnQgY2xhc3NcbiAgICogQHJldHVybiB7UG9seW1lckVsZW1lbnRQcm9wZXJ0aWVzfSBGbGF0dGVuZWQgcHJvcGVydGllcyBmb3IgdGhpcyBjbGFzc1xuICAgKiAgIHRoYXQgaGF2ZSBkZWZhdWx0IHZhbHVlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcHJvcGVydHlEZWZhdWx0cyhjb25zdHJ1Y3Rvcikge1xuICAgIGlmICghY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoXG4gICAgICBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfX3Byb3BlcnR5RGVmYXVsdHMnLCBjb25zdHJ1Y3RvcikpKSB7XG4gICAgICBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHMgPSBudWxsO1xuICAgICAgbGV0IHByb3BzID0gY29uc3RydWN0b3IuX3Byb3BlcnRpZXM7XG4gICAgICBmb3IgKGxldCBwIGluIHByb3BzKSB7XG4gICAgICAgIGxldCBpbmZvID0gcHJvcHNbcF07XG4gICAgICAgIGlmICgndmFsdWUnIGluIGluZm8pIHtcbiAgICAgICAgICBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHMgPSBjb25zdHJ1Y3Rvci5fX3Byb3BlcnR5RGVmYXVsdHMgfHwge307XG4gICAgICAgICAgY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzW3BdID0gaW5mbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29uc3RydWN0b3IuX19wcm9wZXJ0eURlZmF1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBtZW1vaXplZCB2ZXJzaW9uIG9mIHRoZSBgb2JzZXJ2ZXJzYCBhcnJheS5cbiAgICogQHBhcmFtIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvciBFbGVtZW50IGNsYXNzXG4gICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBjb250YWluaW5nIG93biBvYnNlcnZlcnMgZm9yIHRoZSBnaXZlbiBjbGFzc1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBmdW5jdGlvbiBvd25PYnNlcnZlcnMoY29uc3RydWN0b3IpIHtcbiAgICBpZiAoIWNvbnN0cnVjdG9yLmhhc093blByb3BlcnR5KFxuICAgICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX19vd25PYnNlcnZlcnMnLCBjb25zdHJ1Y3RvcikpKSB7XG4gICAgICBjb25zdHJ1Y3Rvci5fX293bk9ic2VydmVycyA9XG4gICAgICAgICAgY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ29ic2VydmVycycsIGNvbnN0cnVjdG9yKSkgP1xuICAgICAgICAgIC8qKiBAdHlwZSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0gKi8gKGNvbnN0cnVjdG9yKS5vYnNlcnZlcnMgOlxuICAgICAgICAgIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5fX293bk9ic2VydmVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGVmZmVjdHMgZm9yIGEgcHJvcGVydHkuXG4gICAqXG4gICAqIE5vdGUsIG9uY2UgYSBwcm9wZXJ0eSBoYXMgYmVlbiBzZXQgdG9cbiAgICogYHJlYWRPbmx5YCwgYGNvbXB1dGVkYCwgYHJlZmxlY3RUb0F0dHJpYnV0ZWAsIG9yIGBub3RpZnlgXG4gICAqIHRoZXNlIHZhbHVlcyBtYXkgbm90IGJlIGNoYW5nZWQuIEZvciBleGFtcGxlLCBhIHN1YmNsYXNzIGNhbm5vdFxuICAgKiBhbHRlciB0aGVzZSBzZXR0aW5ncy4gSG93ZXZlciwgYWRkaXRpb25hbCBgb2JzZXJ2ZXJzYCBtYXkgYmUgYWRkZWRcbiAgICogYnkgc3ViY2xhc3Nlcy5cbiAgICpcbiAgICogVGhlIGluZm8gb2JqZWN0IHNob3VsZCBjb250YWluIHByb3BlcnR5IG1ldGFkYXRhIGFzIGZvbGxvd3M6XG4gICAqXG4gICAqICogYHR5cGVgOiB7ZnVuY3Rpb259IHR5cGUgdG8gd2hpY2ggYW4gYXR0cmlidXRlIG1hdGNoaW5nIHRoZSBwcm9wZXJ0eVxuICAgKiBpcyBkZXNlcmlhbGl6ZWQuIE5vdGUgdGhlIHByb3BlcnR5IGlzIGNhbWVsLWNhc2VkIGZyb20gYSBkYXNoLWNhc2VkXG4gICAqIGF0dHJpYnV0ZS4gRm9yIGV4YW1wbGUsICdmb28tYmFyJyBhdHRyaWJ1dGUgaXMgZGVzZXJpYWxpemVkIHRvIGFcbiAgICogcHJvcGVydHkgbmFtZWQgJ2Zvb0JhcicuXG4gICAqXG4gICAqICogYHJlYWRPbmx5YDoge2Jvb2xlYW59IGNyZWF0ZXMgYSByZWFkT25seSBwcm9wZXJ0eSBhbmRcbiAgICogbWFrZXMgYSBwcml2YXRlIHNldHRlciBmb3IgdGhlIHByaXZhdGUgb2YgdGhlIGZvcm0gJ19zZXRGb28nIGZvciBhXG4gICAqIHByb3BlcnR5ICdmb28nLFxuICAgKlxuICAgKiAqIGBjb21wdXRlZGA6IHtzdHJpbmd9IGNyZWF0ZXMgYSBjb21wdXRlZCBwcm9wZXJ0eS4gQSBjb21wdXRlZCBwcm9wZXJ0eVxuICAgKiBpcyBhbHNvIGF1dG9tYXRpY2FsbHkgc2V0IHRvIGByZWFkT25seTogdHJ1ZWAuIFRoZSB2YWx1ZSBpcyBjYWxjdWxhdGVkXG4gICAqIGJ5IHJ1bm5pbmcgYSBtZXRob2QgYW5kIGFyZ3VtZW50cyBwYXJzZWQgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLiBGb3JcbiAgICogZXhhbXBsZSAnY29tcHV0ZShmb28pJyB3aWxsIGNvbXB1dGUgYSBnaXZlbiBwcm9wZXJ0eSB3aGVuIHRoZVxuICAgKiAnZm9vJyBwcm9wZXJ0eSBjaGFuZ2VzIGJ5IGV4ZWN1dGluZyB0aGUgJ2NvbXB1dGUnIG1ldGhvZC4gVGhpcyBtZXRob2RcbiAgICogbXVzdCByZXR1cm4gdGhlIGNvbXB1dGVkIHZhbHVlLlxuICAgKlxuICAgKiAqIGByZWZsZWN0VG9BdHRyaWJ1dGVgOiB7Ym9vbGVhbn0gSWYgdHJ1ZSwgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHJlZmxlY3RlZFxuICAgKiB0byBhbiBhdHRyaWJ1dGUgb2YgdGhlIHNhbWUgbmFtZS4gTm90ZSwgdGhlIGF0dHJpYnV0ZSBpcyBkYXNoLWNhc2VkXG4gICAqIHNvIGEgcHJvcGVydHkgbmFtZWQgJ2Zvb0JhcicgaXMgcmVmbGVjdGVkIGFzICdmb28tYmFyJy5cbiAgICpcbiAgICogKiBgbm90aWZ5YDoge2Jvb2xlYW59IHNlbmRzIGEgbm9uLWJ1YmJsaW5nIG5vdGlmaWNhdGlvbiBldmVudCB3aGVuXG4gICAqIHRoZSBwcm9wZXJ0eSBjaGFuZ2VzLiBGb3IgZXhhbXBsZSwgYSBwcm9wZXJ0eSBuYW1lZCAnZm9vJyBzZW5kcyBhblxuICAgKiBldmVudCBuYW1lZCAnZm9vLWNoYW5nZWQnIHdpdGggYGV2ZW50LmRldGFpbGAgc2V0IHRvIHRoZSB2YWx1ZSBvZlxuICAgKiB0aGUgcHJvcGVydHkuXG4gICAqXG4gICAqICogb2JzZXJ2ZXI6IHtzdHJpbmd9IG5hbWUgb2YgYSBtZXRob2QgdGhhdCBydW5zIHdoZW4gdGhlIHByb3BlcnR5XG4gICAqIGNoYW5nZXMuIFRoZSBhcmd1bWVudHMgb2YgdGhlIG1ldGhvZCBhcmUgKHZhbHVlLCBwcmV2aW91c1ZhbHVlKS5cbiAgICpcbiAgICogTm90ZTogVXNlcnMgbWF5IHdhbnQgY29udHJvbCBvdmVyIG1vZGlmeWluZyBwcm9wZXJ0eVxuICAgKiBlZmZlY3RzIHZpYSBzdWJjbGFzc2luZy4gRm9yIGV4YW1wbGUsIGEgdXNlciBtaWdodCB3YW50IHRvIG1ha2UgYVxuICAgKiByZWZsZWN0VG9BdHRyaWJ1dGUgcHJvcGVydHkgbm90IGRvIHNvIGluIGEgc3ViY2xhc3MuIFdlJ3ZlIGNob3NlbiB0b1xuICAgKiBkaXNhYmxlIHRoaXMgYmVjYXVzZSBpdCBsZWFkcyB0byBhZGRpdGlvbmFsIGNvbXBsaWNhdGlvbi5cbiAgICogRm9yIGV4YW1wbGUsIGEgcmVhZE9ubHkgZWZmZWN0IGdlbmVyYXRlcyBhIHNwZWNpYWwgc2V0dGVyLiBJZiBhIHN1YmNsYXNzXG4gICAqIGRpc2FibGVzIHRoZSBlZmZlY3QsIHRoZSBzZXR0ZXIgd291bGQgZmFpbCB1bmV4cGVjdGVkbHkuXG4gICAqIEJhc2VkIG9uIGZlZWRiYWNrLCB3ZSBtYXkgd2FudCB0byB0cnkgdG8gbWFrZSBlZmZlY3RzIG1vcmUgbWFsbGVhYmxlXG4gICAqIGFuZC9vciBwcm92aWRlIGFuIGFkdmFuY2VkIGFwaSBmb3IgbWFuaXB1bGF0aW5nIHRoZW0uXG4gICAqXG4gICAqIEBwYXJhbSB7IVBvbHltZXJFbGVtZW50fSBwcm90byBFbGVtZW50IGNsYXNzIHByb3RvdHlwZSB0byBhZGQgYWNjZXNzb3JzXG4gICAqICAgYW5kIGVmZmVjdHMgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgcHJvcGVydHkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIEluZm8gb2JqZWN0IGZyb20gd2hpY2ggdG8gY3JlYXRlIHByb3BlcnR5IGVmZmVjdHMuXG4gICAqIFN1cHBvcnRlZCBrZXlzOlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWxsUHJvcHMgRmxhdHRlbmVkIG1hcCBvZiBhbGwgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoaXNcbiAgICogICBlbGVtZW50IChpbmNsdWRpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMpXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVQcm9wZXJ0eUZyb21Db25maWcocHJvdG8sIG5hbWUsIGluZm8sIGFsbFByb3BzKSB7XG4gICAgLy8gY29tcHV0ZWQgZm9yY2VzIHJlYWRPbmx5Li4uXG4gICAgaWYgKGluZm8uY29tcHV0ZWQpIHtcbiAgICAgIGluZm8ucmVhZE9ubHkgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBOb3RlLCBzaW5jZSBhbGwgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgcmVhZE9ubHksIHRoaXMgcHJldmVudHNcbiAgICAvLyBhZGRpbmcgYWRkaXRpb25hbCBjb21wdXRlZCBwcm9wZXJ0eSBlZmZlY3RzICh3aGljaCBsZWFkcyB0byBhIGNvbmZ1c2luZ1xuICAgIC8vIHNldHVwIHdoZXJlIG11bHRpcGxlIHRyaWdnZXJzIGZvciBzZXR0aW5nIGEgcHJvcGVydHkpXG4gICAgLy8gV2hpbGUgd2UgZG8gaGF2ZSBgaGFzQ29tcHV0ZWRFZmZlY3RgIHRoaXMgaXMgc2V0IG9uIHRoZSBwcm9wZXJ0eSdzXG4gICAgLy8gZGVwZW5kZW5jaWVzIHJhdGhlciB0aGFuIGl0c2VsZi5cbiAgICBpZiAoaW5mby5jb21wdXRlZCkge1xuICAgICAgaWYgKHByb3RvLl9oYXNSZWFkT25seUVmZmVjdChuYW1lKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYENhbm5vdCByZWRlZmluZSBjb21wdXRlZCBwcm9wZXJ0eSAnJHtuYW1lfScuYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm90by5fY3JlYXRlQ29tcHV0ZWRQcm9wZXJ0eShuYW1lLCBpbmZvLmNvbXB1dGVkLCBhbGxQcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmZvLnJlYWRPbmx5ICYmICFwcm90by5faGFzUmVhZE9ubHlFZmZlY3QobmFtZSkpIHtcbiAgICAgIHByb3RvLl9jcmVhdGVSZWFkT25seVByb3BlcnR5KG5hbWUsICFpbmZvLmNvbXB1dGVkKTtcbiAgICB9IGVsc2UgaWYgKGluZm8ucmVhZE9ubHkgPT09IGZhbHNlICYmIHByb3RvLl9oYXNSZWFkT25seUVmZmVjdChuYW1lKSkge1xuICAgICAgY29uc29sZS53YXJuKGBDYW5ub3QgbWFrZSByZWFkT25seSBwcm9wZXJ0eSAnJHtuYW1lfScgbm9uLXJlYWRPbmx5LmApO1xuICAgIH1cbiAgICBpZiAoaW5mby5yZWZsZWN0VG9BdHRyaWJ1dGUgJiYgIXByb3RvLl9oYXNSZWZsZWN0RWZmZWN0KG5hbWUpKSB7XG4gICAgICBwcm90by5fY3JlYXRlUmVmbGVjdGVkUHJvcGVydHkobmFtZSk7XG4gICAgfSBlbHNlIGlmIChpbmZvLnJlZmxlY3RUb0F0dHJpYnV0ZSA9PT0gZmFsc2UgJiYgcHJvdG8uX2hhc1JlZmxlY3RFZmZlY3QobmFtZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQ2Fubm90IG1ha2UgcmVmbGVjdGVkIHByb3BlcnR5ICcke25hbWV9JyBub24tcmVmbGVjdGVkLmApO1xuICAgIH1cbiAgICBpZiAoaW5mby5ub3RpZnkgJiYgIXByb3RvLl9oYXNOb3RpZnlFZmZlY3QobmFtZSkpIHtcbiAgICAgIHByb3RvLl9jcmVhdGVOb3RpZnlpbmdQcm9wZXJ0eShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGluZm8ubm90aWZ5ID09PSBmYWxzZSAmJiBwcm90by5faGFzTm90aWZ5RWZmZWN0KG5hbWUpKSB7XG4gICAgICBjb25zb2xlLndhcm4oYENhbm5vdCBtYWtlIG5vdGlmeSBwcm9wZXJ0eSAnJHtuYW1lfScgbm9uLW5vdGlmeS5gKTtcbiAgICB9XG4gICAgLy8gYWx3YXlzIGFkZCBvYnNlcnZlclxuICAgIGlmIChpbmZvLm9ic2VydmVyKSB7XG4gICAgICBwcm90by5fY3JlYXRlUHJvcGVydHlPYnNlcnZlcihuYW1lLCBpbmZvLm9ic2VydmVyLCBhbGxQcm9wc1tpbmZvLm9ic2VydmVyXSk7XG4gICAgfVxuICAgIC8vIGFsd2F5cyBjcmVhdGUgdGhlIG1hcHBpbmcgZnJvbSBhdHRyaWJ1dGUgYmFjayB0byBwcm9wZXJ0eSBmb3IgZGVzZXJpYWxpemF0aW9uLlxuICAgIHByb3RvLl9hZGRQcm9wZXJ0eVRvQXR0cmlidXRlTWFwKG5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgYWxsIHN0eWxlIGVsZW1lbnRzIGluIHRoZSBlbGVtZW50IHRlbXBsYXRlLiBTdHlsZXMgd2l0aCB0aGVcbiAgICogYGluY2x1ZGVgIGF0dHJpYnV0ZSBhcmUgcHJvY2Vzc2VkIHN1Y2ggdGhhdCBhbnkgc3R5bGVzIGluXG4gICAqIHRoZSBhc3NvY2lhdGVkIFwic3R5bGUgbW9kdWxlc1wiIGFyZSBpbmNsdWRlZCBpbiB0aGUgZWxlbWVudCB0ZW1wbGF0ZS5cbiAgICogQHBhcmFtIHtQb2x5bWVyRWxlbWVudENvbnN0cnVjdG9yfSBrbGFzcyBFbGVtZW50IGNsYXNzXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlIHRvIHByb2Nlc3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlzIE5hbWUgb2YgZWxlbWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSSSBCYXNlIFVSSSBmb3IgZWxlbWVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnRTdHlsZXMoa2xhc3MsIHRlbXBsYXRlLCBpcywgYmFzZVVSSSkge1xuICAgIGlmICghYnVpbHRDU1MpIHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlU3R5bGVzID0gdGVtcGxhdGUuY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpO1xuICAgICAgY29uc3Qgc3R5bGVzV2l0aEltcG9ydHMgPSBzdHlsZXNGcm9tVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgLy8gaW5zZXJ0IHN0eWxlcyBmcm9tIDxsaW5rIHJlbD1cImltcG9ydFwiIHR5cGU9XCJjc3NcIj4gYXQgdGhlIHRvcCBvZiB0aGUgdGVtcGxhdGVcbiAgICAgIGNvbnN0IGxpbmtlZFN0eWxlcyA9IHN0eWxlc0Zyb21Nb2R1bGVJbXBvcnRzKGlzKTtcbiAgICAgIGNvbnN0IGZpcnN0VGVtcGxhdGVDaGlsZCA9IHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBsaW5rZWRTdHlsZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBsZXQgcyA9IGxpbmtlZFN0eWxlc1tpZHhdO1xuICAgICAgICBzLnRleHRDb250ZW50ID0ga2xhc3MuX3Byb2Nlc3NTdHlsZVRleHQocy50ZXh0Q29udGVudCwgYmFzZVVSSSk7XG4gICAgICAgIHRlbXBsYXRlLmNvbnRlbnQuaW5zZXJ0QmVmb3JlKHMsIGZpcnN0VGVtcGxhdGVDaGlsZCk7XG4gICAgICB9XG4gICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBsYXN0IFwiY29uY3JldGVcIiBzdHlsZSBpbiB0aGUgdGVtcGxhdGUgd2UgaGF2ZSBlbmNvdW50ZXJlZFxuICAgICAgbGV0IHRlbXBsYXRlU3R5bGVJbmRleCA9IDA7XG4gICAgICAvLyBlbnN1cmUgYWxsIGdhdGhlcmVkIHN0eWxlcyBhcmUgYWN0dWFsbHkgaW4gdGhpcyB0ZW1wbGF0ZS5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzV2l0aEltcG9ydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHMgPSBzdHlsZXNXaXRoSW1wb3J0c1tpXTtcbiAgICAgICAgbGV0IHRlbXBsYXRlU3R5bGUgPSB0ZW1wbGF0ZVN0eWxlc1t0ZW1wbGF0ZVN0eWxlSW5kZXhdO1xuICAgICAgICAvLyBpZiB0aGUgc3R5bGUgaXMgbm90IGluIHRoaXMgdGVtcGxhdGUsIGl0J3MgYmVlbiBcImluY2x1ZGVkXCIgYW5kXG4gICAgICAgIC8vIHdlIHB1dCBhIGNsb25lIG9mIGl0IGluIHRoZSB0ZW1wbGF0ZSBiZWZvcmUgdGhlIHN0eWxlIHRoYXQgaW5jbHVkZWQgaXRcbiAgICAgICAgaWYgKHRlbXBsYXRlU3R5bGUgIT09IHMpIHtcbiAgICAgICAgICBzID0gcy5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgdGVtcGxhdGVTdHlsZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLCB0ZW1wbGF0ZVN0eWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZW1wbGF0ZVN0eWxlSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBzLnRleHRDb250ZW50ID0ga2xhc3MuX3Byb2Nlc3NTdHlsZVRleHQocy50ZXh0Q29udGVudCwgYmFzZVVSSSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh3aW5kb3cuU2hhZHlDU1MpIHtcbiAgICAgIHdpbmRvdy5TaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGUodGVtcGxhdGUsIGlzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9vayB1cCB0ZW1wbGF0ZSBmcm9tIGRvbS1tb2R1bGUgZm9yIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlzIEVsZW1lbnQgbmFtZSB0byBsb29rIHVwXG4gICAqIEByZXR1cm4gez9IVE1MVGVtcGxhdGVFbGVtZW50fHVuZGVmaW5lZH0gVGVtcGxhdGUgZm91bmQgaW4gZG9tIG1vZHVsZSwgb3JcbiAgICogICB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGZ1bmN0aW9uIGdldFRlbXBsYXRlRnJvbURvbU1vZHVsZShpcykge1xuICAgIGxldCB0ZW1wbGF0ZSA9IG51bGw7XG4gICAgLy8gVW5kZXIgc3RyaWN0VGVtcGxhdGVQb2xpY3kgaW4gMy54KywgZG9tLW1vZHVsZSBsb29rdXAgaXMgb25seSBhbGxvd2VkXG4gICAgLy8gd2hlbiBvcHRlZC1pbiB2aWEgYWxsb3dUZW1wbGF0ZUZyb21Eb21Nb2R1bGVcbiAgICBpZiAoaXMgJiYgKCFzdHJpY3RUZW1wbGF0ZVBvbGljeSB8fCBhbGxvd1RlbXBsYXRlRnJvbURvbU1vZHVsZSkpIHtcbiAgICAgIHRlbXBsYXRlID0gLyoqIEB0eXBlIHs/SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKFxuICAgICAgICAgIERvbU1vZHVsZS5pbXBvcnQoaXMsICd0ZW1wbGF0ZScpKTtcbiAgICAgIC8vIFVuZGVyIHN0cmljdFRlbXBsYXRlUG9saWN5LCByZXF1aXJlIGFueSBlbGVtZW50IHdpdGggYW4gYGlzYFxuICAgICAgLy8gc3BlY2lmaWVkIHRvIGhhdmUgYSBkb20tbW9kdWxlXG4gICAgICBpZiAoc3RyaWN0VGVtcGxhdGVQb2xpY3kgJiYgIXRlbXBsYXRlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgc3RyaWN0VGVtcGxhdGVQb2xpY3k6IGV4cGVjdGluZyBkb20tbW9kdWxlIG9yIG51bGwgdGVtcGxhdGUgZm9yICR7aXN9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcG9seW1lclxuICAgKiBAbWl4aW5DbGFzc1xuICAgKiBAdW5yZXN0cmljdGVkXG4gICAqIEBpbXBsZW1lbnRzIHtQb2x5bWVyX0VsZW1lbnRNaXhpbn1cbiAgICogQGV4dGVuZHMge3BvbHltZXJFbGVtZW50QmFzZX1cbiAgICovXG4gIGNsYXNzIFBvbHltZXJFbGVtZW50IGV4dGVuZHMgcG9seW1lckVsZW1lbnRCYXNlIHtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgUG9seW1lciB2ZXJzaW9uIGluIFNlbXZlciBub3RhdGlvbi5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfSBTZW12ZXIgbm90YXRpb24gb2YgdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBQb2x5bWVyLlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIGdldCBwb2x5bWVyRWxlbWVudFZlcnNpb24oKSB7XG4gICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBvZiBQcm9wZXJ0aWVzTWl4aW4gX2ZpbmFsaXplQ2xhc3MgdG8gY3JlYXRlIG9ic2VydmVycyBhbmRcbiAgICAgKiBmaW5kIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfSBJbnRlcmZhY2VzIGluIGNsb3N1cmUgZG8gbm90IGluaGVyaXQgc3RhdGljcywgYnV0IGNsYXNzZXMgZG9cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBfZmluYWxpemVDbGFzcygpIHtcbiAgICAgIC8vIFRPRE8oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8zMjQwKTpcbiAgICAgIC8vICAgICBDaGFuZ2UgYmFjayB0byBqdXN0IHN1cGVyLm1ldGhvZENhbGwoKVxuICAgICAgcG9seW1lckVsZW1lbnRCYXNlLl9maW5hbGl6ZUNsYXNzLmNhbGwodGhpcyk7XG4gICAgICBjb25zdCBvYnNlcnZlcnMgPSBvd25PYnNlcnZlcnModGhpcyk7XG4gICAgICBpZiAob2JzZXJ2ZXJzKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlT2JzZXJ2ZXJzKG9ic2VydmVycywgdGhpcy5fcHJvcGVydGllcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wcmVwYXJlVGVtcGxhdGUoKTtcbiAgICB9XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBzdGF0aWMgX3ByZXBhcmVUZW1wbGF0ZSgpIHtcbiAgICAgIC8vIG5vdGU6IGNyZWF0ZSBcIndvcmtpbmdcIiB0ZW1wbGF0ZSB0aGF0IGlzIGZpbmFsaXplZCBhdCBpbnN0YW5jZSB0aW1lXG4gICAgICBsZXQgdGVtcGxhdGUgPSAvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9ICovICh0aGlzKS50ZW1wbGF0ZTtcbiAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3RlbXBsYXRlIGdldHRlciBtdXN0IHJldHVybiBIVE1MVGVtcGxhdGVFbGVtZW50Jyk7XG4gICAgICAgICAgdGVtcGxhdGUgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKCFsZWdhY3lPcHRpbWl6YXRpb25zKSB7XG4gICAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqIEBvdmVycmlkZSAqL1xuICAgICAgdGhpcy5wcm90b3R5cGUuX3RlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgb2YgUHJvcGVydGllc0NoYW5nZWQgY3JlYXRlUHJvcGVydGllcyB0byBjcmVhdGUgYWNjZXNzb3JzXG4gICAgICogYW5kIHByb3BlcnR5IGVmZmVjdHMgZm9yIGFsbCBvZiB0aGUgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IHByb3BzIC5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9wZXJ0aWVzKHByb3BzKSB7XG4gICAgICBmb3IgKGxldCBwIGluIHByb3BzKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5RnJvbUNvbmZpZyhcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKHRoaXMucHJvdG90eXBlKSwgcCwgcHJvcHNbcF0sIHByb3BzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG9ic2VydmVycyBmb3IgdGhlIGdpdmVuIGBvYnNlcnZlcnNgIGFycmF5LlxuICAgICAqIExldmVyYWdlcyBgUHJvcGVydHlFZmZlY3RzYCB0byBjcmVhdGUgb2JzZXJ2ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlcnMgQXJyYXkgb2Ygb2JzZXJ2ZXIgZGVzY3JpcHRvcnMgZm9yXG4gICAgICogICB0aGlzIGNsYXNzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGR5bmFtaWNGbnMgT2JqZWN0IGNvbnRhaW5pbmcga2V5cyBmb3IgYW55IHByb3BlcnRpZXNcbiAgICAgKiAgIHRoYXQgYXJlIGZ1bmN0aW9ucyBhbmQgc2hvdWxkIHRyaWdnZXIgdGhlIGVmZmVjdCB3aGVuIHRoZSBmdW5jdGlvblxuICAgICAqICAgcmVmZXJlbmNlIGlzIGNoYW5nZWRcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVPYnNlcnZlcnMob2JzZXJ2ZXJzLCBkeW5hbWljRm5zKSB7XG4gICAgICBjb25zdCBwcm90byA9IHRoaXMucHJvdG90eXBlO1xuICAgICAgZm9yIChsZXQgaT0wOyBpIDwgb2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByb3RvLl9jcmVhdGVNZXRob2RPYnNlcnZlcihvYnNlcnZlcnNbaV0sIGR5bmFtaWNGbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHRlbXBsYXRlIHRoYXQgd2lsbCBiZSBzdGFtcGVkIGludG8gdGhpcyBlbGVtZW50J3Mgc2hhZG93IHJvb3QuXG4gICAgICpcbiAgICAgKiBJZiBhIGBzdGF0aWMgZ2V0IGlzKClgIGdldHRlciBpcyBkZWZpbmVkLCB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvblxuICAgICAqIHdpbGwgcmV0dXJuIHRoZSBmaXJzdCBgPHRlbXBsYXRlPmAgaW4gYSBgZG9tLW1vZHVsZWAgd2hvc2UgYGlkYFxuICAgICAqIG1hdGNoZXMgdGhpcyBlbGVtZW50J3MgYGlzYC5cbiAgICAgKlxuICAgICAqIFVzZXJzIG1heSBvdmVycmlkZSB0aGlzIGdldHRlciB0byByZXR1cm4gYW4gYXJiaXRyYXJ5IHRlbXBsYXRlXG4gICAgICogKGluIHdoaWNoIGNhc2UgdGhlIGBpc2AgZ2V0dGVyIGlzIHVubmVjZXNzYXJ5KS4gVGhlIHRlbXBsYXRlIHJldHVybmVkXG4gICAgICogbXVzdCBiZSBhbiBgSFRNTFRlbXBsYXRlRWxlbWVudGAuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgd2hlbiBzdWJjbGFzc2luZywgaWYgdGhlIHN1cGVyIGNsYXNzIG92ZXJyb2RlIHRoZSBkZWZhdWx0XG4gICAgICogaW1wbGVtZW50YXRpb24gYW5kIHRoZSBzdWJjbGFzcyB3b3VsZCBsaWtlIHRvIHByb3ZpZGUgYW4gYWx0ZXJuYXRlXG4gICAgICogdGVtcGxhdGUgdmlhIGEgYGRvbS1tb2R1bGVgLCBpdCBzaG91bGQgb3ZlcnJpZGUgdGhpcyBnZXR0ZXIgYW5kXG4gICAgICogcmV0dXJuIGBEb21Nb2R1bGUuaW1wb3J0KHRoaXMuaXMsICd0ZW1wbGF0ZScpYC5cbiAgICAgKlxuICAgICAqIElmIGEgc3ViY2xhc3Mgd291bGQgbGlrZSB0byBtb2RpZnkgdGhlIHN1cGVyIGNsYXNzIHRlbXBsYXRlLCBpdCBzaG91bGRcbiAgICAgKiBjbG9uZSBpdCByYXRoZXIgdGhhbiBtb2RpZnkgaXQgaW4gcGxhY2UuICBJZiB0aGUgZ2V0dGVyIGRvZXMgZXhwZW5zaXZlXG4gICAgICogd29yayBzdWNoIGFzIGNsb25pbmcvbW9kaWZ5aW5nIGEgdGVtcGxhdGUsIGl0IHNob3VsZCBtZW1vaXplIHRoZVxuICAgICAqIHRlbXBsYXRlIGZvciBtYXhpbXVtIHBlcmZvcm1hbmNlOlxuICAgICAqXG4gICAgICogICBsZXQgbWVtb2l6ZWRUZW1wbGF0ZTtcbiAgICAgKiAgIGNsYXNzIE15U3ViQ2xhc3MgZXh0ZW5kcyBNeVN1cGVyQ2xhc3Mge1xuICAgICAqICAgICBzdGF0aWMgZ2V0IHRlbXBsYXRlKCkge1xuICAgICAqICAgICAgIGlmICghbWVtb2l6ZWRUZW1wbGF0ZSkge1xuICAgICAqICAgICAgICAgbWVtb2l6ZWRUZW1wbGF0ZSA9IHN1cGVyLnRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgICAgICAgIGxldCBzdWJDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICogICAgICAgICBzdWJDb250ZW50LnRleHRDb250ZW50ID0gJ1RoaXMgY2FtZSBmcm9tIE15U3ViQ2xhc3MnO1xuICAgICAqICAgICAgICAgbWVtb2l6ZWRUZW1wbGF0ZS5jb250ZW50LmFwcGVuZENoaWxkKHN1YkNvbnRlbnQpO1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgICByZXR1cm4gbWVtb2l6ZWRUZW1wbGF0ZTtcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHJldHVybiB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR8c3RyaW5nfSBUZW1wbGF0ZSB0byBiZSBzdGFtcGVkXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHRlbXBsYXRlKCkge1xuICAgICAgLy8gRXhwbGFuYXRpb24gb2YgdGVtcGxhdGUtcmVsYXRlZCBwcm9wZXJ0aWVzOlxuICAgICAgLy8gLSBjb25zdHJ1Y3Rvci50ZW1wbGF0ZSAodGhpcyBnZXR0ZXIpOiB0aGUgdGVtcGxhdGUgZm9yIHRoZSBjbGFzcy5cbiAgICAgIC8vICAgICBUaGlzIGNhbiBjb21lIGZyb20gdGhlIHByb3RvdHlwZSAoZm9yIGxlZ2FjeSBlbGVtZW50cyksIGZyb20gYVxuICAgICAgLy8gICAgIGRvbS1tb2R1bGUsIG9yIGZyb20gdGhlIHN1cGVyIGNsYXNzJ3MgdGVtcGxhdGUgKG9yIGNhbiBiZSBvdmVycmlkZGVuXG4gICAgICAvLyAgICAgYWx0b2dldGhlciBieSB0aGUgdXNlcilcbiAgICAgIC8vIC0gY29uc3RydWN0b3IuX3RlbXBsYXRlOiBtZW1vaXplZCB2ZXJzaW9uIG9mIGNvbnN0cnVjdG9yLnRlbXBsYXRlXG4gICAgICAvLyAtIHByb3RvdHlwZS5fdGVtcGxhdGU6IHdvcmtpbmcgdGVtcGxhdGUgZm9yIHRoZSBlbGVtZW50LCB3aGljaCB3aWxsIGJlXG4gICAgICAvLyAgICAgcGFyc2VkIGFuZCBtb2RpZmllZCBpbiBwbGFjZS4gSXQgaXMgYSBjbG9uZWQgdmVyc2lvbiBvZlxuICAgICAgLy8gICAgIGNvbnN0cnVjdG9yLnRlbXBsYXRlLCBzYXZlZCBpbiBfZmluYWxpemVDbGFzcygpLiBOb3RlIHRoYXQgYmVmb3JlXG4gICAgICAvLyAgICAgdGhpcyBnZXR0ZXIgaXMgY2FsbGVkLCBmb3IgbGVnYWN5IGVsZW1lbnRzIHRoaXMgY291bGQgYmUgZnJvbSBhXG4gICAgICAvLyAgICAgX3RlbXBsYXRlIGZpZWxkIG9uIHRoZSBpbmZvIG9iamVjdCBwYXNzZWQgdG8gUG9seW1lcigpLCBhIGJlaGF2aW9yLFxuICAgICAgLy8gICAgIG9yIHNldCBpbiByZWdpc3RlcmVkKCk7IG9uY2UgdGhlIHN0YXRpYyBnZXR0ZXIgcnVucywgYSBjbG9uZSBvZiBpdFxuICAgICAgLy8gICAgIHdpbGwgb3ZlcndyaXRlIGl0IG9uIHRoZSBwcm90b3R5cGUgYXMgdGhlIHdvcmtpbmcgdGVtcGxhdGUuXG4gICAgICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgnX3RlbXBsYXRlJywgdGhpcykpKSB7XG4gICAgICAgIHRoaXMuX3RlbXBsYXRlID1cbiAgICAgICAgICAvLyBJZiB1c2VyIGhhcyBwdXQgdGVtcGxhdGUgb24gcHJvdG90eXBlIChlLmcuIGluIGxlZ2FjeSB2aWEgcmVnaXN0ZXJlZFxuICAgICAgICAgIC8vIGNhbGxiYWNrIG9yIGluZm8gb2JqZWN0KSwgcHJlZmVyIHRoYXQgZmlyc3RcbiAgICAgICAgICB0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfdGVtcGxhdGUnLCB0aGlzLnByb3RvdHlwZSkpID9cbiAgICAgICAgICB0aGlzLnByb3RvdHlwZS5fdGVtcGxhdGUgOlxuICAgICAgICAgIC8vIExvb2sgaW4gZG9tLW1vZHVsZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBlbGVtZW50J3MgaXNcbiAgICAgICAgICAoZ2V0VGVtcGxhdGVGcm9tRG9tTW9kdWxlKC8qKiBAdHlwZSB7UG9seW1lckVsZW1lbnRDb25zdHJ1Y3Rvcn0qLyAodGhpcykuaXMpIHx8XG4gICAgICAgICAgLy8gTmV4dCBsb29rIGZvciBzdXBlcmNsYXNzIHRlbXBsYXRlIChjYWxsIHRoZSBzdXBlciBpbXBsIHRoaXNcbiAgICAgICAgICAvLyB3YXkgc28gdGhhdCBgdGhpc2AgcG9pbnRzIHRvIHRoZSBzdXBlcmNsYXNzKVxuICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZigvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9Ki8gKHRoaXMpLnByb3RvdHlwZSkuY29uc3RydWN0b3IudGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fHN0cmluZ30gdmFsdWUgVGVtcGxhdGUgdG8gc2V0LlxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIHNldCB0ZW1wbGF0ZSh2YWx1ZSkge1xuICAgICAgdGhpcy5fdGVtcGxhdGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXRoIG1hdGNoaW5nIHRoZSB1cmwgZnJvbSB3aGljaCB0aGUgZWxlbWVudCB3YXMgaW1wb3J0ZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIHBhdGggaXMgdXNlZCB0byByZXNvbHZlIHVybCdzIGluIHRlbXBsYXRlIHN0eWxlIGNzc1RleHQuXG4gICAgICogVGhlIGBpbXBvcnRQYXRoYCBwcm9wZXJ0eSBpcyBhbHNvIHNldCBvbiBlbGVtZW50IGluc3RhbmNlcyBhbmQgY2FuIGJlXG4gICAgICogdXNlZCB0byBjcmVhdGUgYmluZGluZ3MgcmVsYXRpdmUgdG8gdGhlIGltcG9ydCBwYXRoLlxuICAgICAqXG4gICAgICogRm9yIGVsZW1lbnRzIGRlZmluZWQgaW4gRVMgbW9kdWxlcywgdXNlcnMgc2hvdWxkIGltcGxlbWVudFxuICAgICAqIGBzdGF0aWMgZ2V0IGltcG9ydE1ldGEoKSB7IHJldHVybiBpbXBvcnQubWV0YTsgfWAsIGFuZCB0aGUgZGVmYXVsdFxuICAgICAqIGltcGxlbWVudGF0aW9uIG9mIGBpbXBvcnRQYXRoYCB3aWxsICByZXR1cm4gYGltcG9ydC5tZXRhLnVybGAncyBwYXRoLlxuICAgICAqIEZvciBlbGVtZW50cyBkZWZpbmVkIGluIEhUTUwgaW1wb3J0cywgdGhpcyBnZXR0ZXIgd2lsbCByZXR1cm4gdGhlIHBhdGhcbiAgICAgKiB0byB0aGUgZG9jdW1lbnQgY29udGFpbmluZyBhIGBkb20tbW9kdWxlYCBlbGVtZW50IG1hdGNoaW5nIHRoaXNcbiAgICAgKiBlbGVtZW50J3Mgc3RhdGljIGBpc2AgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBOb3RlLCB0aGlzIHBhdGggc2hvdWxkIGNvbnRhaW4gYSB0cmFpbGluZyBgL2AuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBpbXBvcnQgcGF0aCBmb3IgdGhpcyBlbGVtZW50IGNsYXNzXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc31cbiAgICAgKiBAbm9jb2xsYXBzZVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgaW1wb3J0UGF0aCgpIHtcbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdfaW1wb3J0UGF0aCcsIHRoaXMpKSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5pbXBvcnRNZXRhO1xuICAgICAgICBpZiAobWV0YSkge1xuICAgICAgICAgIHRoaXMuX2ltcG9ydFBhdGggPSBwYXRoRnJvbVVybChtZXRhLnVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbW9kdWxlID0gRG9tTW9kdWxlLmltcG9ydCgvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9ICovICh0aGlzKS5pcyk7XG4gICAgICAgICAgdGhpcy5faW1wb3J0UGF0aCA9IChtb2R1bGUgJiYgbW9kdWxlLmFzc2V0cGF0aCkgfHxcbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZigvKiogQHR5cGUge1BvbHltZXJFbGVtZW50Q29uc3RydWN0b3J9Ki8gKHRoaXMpLnByb3RvdHlwZSkuY29uc3RydWN0b3IuaW1wb3J0UGF0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2ltcG9ydFBhdGg7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50fSAqL1xuICAgICAgdGhpcy5fdGVtcGxhdGU7XG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgIHRoaXMuX2ltcG9ydFBhdGg7XG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgIHRoaXMucm9vdFBhdGg7XG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgIHRoaXMuaW1wb3J0UGF0aDtcbiAgICAgIC8qKiBAdHlwZSB7U3RhbXBlZFRlbXBsYXRlIHwgSFRNTEVsZW1lbnQgfCBTaGFkb3dSb290fSAqL1xuICAgICAgdGhpcy5yb290O1xuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgIUVsZW1lbnQ+fSAqL1xuICAgICAgdGhpcy4kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBgUHJvcGVydHlBY2Nlc3NvcnNgIHRvIGVuc3VyZSBjbGFzc1xuICAgICAqIG1ldGFwcm9ncmFtbWluZyByZWxhdGVkIHRvIHByb3BlcnR5IGFjY2Vzc29ycyBhbmQgZWZmZWN0cyBoYXNcbiAgICAgKiBjb21wbGV0ZWQgKGNhbGxzIGBmaW5hbGl6ZWApLlxuICAgICAqXG4gICAgICogSXQgYWxzbyBpbml0aWFsaXplcyBhbnkgcHJvcGVydHkgZGVmYXVsdHMgcHJvdmlkZWQgdmlhIGB2YWx1ZWAgaW5cbiAgICAgKiBgcHJvcGVydGllc2AgbWV0YWRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIEBzdXBwcmVzcyB7aW52YWxpZENhc3RzLG1pc3NpbmdQcm9wZXJ0aWVzfSBnby9taXNzaW5nZm5wcm9wc1xuICAgICAqL1xuICAgIF9pbml0aWFsaXplUHJvcGVydGllcygpIHtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IuZmluYWxpemUoKTtcbiAgICAgIC8vIG5vdGU6IGZpbmFsaXplIHRlbXBsYXRlIHdoZW4gd2UgaGF2ZSBhY2Nlc3MgdG8gYGxvY2FsTmFtZWAgdG9cbiAgICAgIC8vIGF2b2lkIGRlcGVuZGVuY2Ugb24gYGlzYCBmb3IgcG9seWZpbGxpbmcgc3R5bGluZy5cbiAgICAgIHRoaXMuY29uc3RydWN0b3IuX2ZpbmFsaXplVGVtcGxhdGUoLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpLmxvY2FsTmFtZSk7XG4gICAgICBzdXBlci5faW5pdGlhbGl6ZVByb3BlcnRpZXMoKTtcbiAgICAgIC8vIHNldCBwYXRoIGRlZmF1bHRzXG4gICAgICB0aGlzLnJvb3RQYXRoID0gcm9vdFBhdGg7XG4gICAgICB0aGlzLmltcG9ydFBhdGggPSB0aGlzLmNvbnN0cnVjdG9yLmltcG9ydFBhdGg7XG4gICAgICAvLyBhcHBseSBwcm9wZXJ0eSBkZWZhdWx0cy4uLlxuICAgICAgbGV0IHAkID0gcHJvcGVydHlEZWZhdWx0cyh0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgIGlmICghcCQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgcCBpbiBwJCkge1xuICAgICAgICBsZXQgaW5mbyA9IHAkW3BdO1xuICAgICAgICAvLyBEb24ndCBzZXQgZGVmYXVsdCB2YWx1ZSBpZiB0aGVyZSBpcyBhbHJlYWR5IGFuIG93biBwcm9wZXJ0eSwgd2hpY2hcbiAgICAgICAgLy8gaGFwcGVucyB3aGVuIGEgYHByb3BlcnRpZXNgIHByb3BlcnR5IHdpdGggZGVmYXVsdCBidXQgbm8gZWZmZWN0cyBoYWRcbiAgICAgICAgLy8gYSBwcm9wZXJ0eSBzZXQgKGUuZy4gYm91bmQpIGJ5IGl0cyBob3N0IGJlZm9yZSB1cGdyYWRlXG4gICAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVvZiBpbmZvLnZhbHVlID09ICdmdW5jdGlvbicgP1xuICAgICAgICAgICAgaW5mby52YWx1ZS5jYWxsKHRoaXMpIDpcbiAgICAgICAgICAgIGluZm8udmFsdWU7XG4gICAgICAgICAgLy8gU2V0IHZpYSBgX3NldFByb3BlcnR5YCBpZiB0aGVyZSBpcyBhbiBhY2Nlc3NvciwgdG8gZW5hYmxlXG4gICAgICAgICAgLy8gaW5pdGlhbGl6aW5nIHJlYWRPbmx5IHByb3BlcnR5IGRlZmF1bHRzXG4gICAgICAgICAgaWYgKHRoaXMuX2hhc0FjY2Vzc29yKHApKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRQZW5kaW5nUHJvcGVydHkocCwgdmFsdWUsIHRydWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzW3BdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2F0aGVyIHN0eWxlIHRleHQgZm9yIGEgc3R5bGUgZWxlbWVudCBpbiB0aGUgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dCBUZXh0IGNvbnRhaW5pbmcgc3R5bGluZyB0byBwcm9jZXNzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkkgQmFzZSBVUkkgdG8gcmViYXNlIENTUyBwYXRocyBhZ2FpbnN0XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHJvY2Vzc2VkIENTUyB0ZXh0XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBub2NvbGxhcHNlXG4gICAgICovXG4gICAgc3RhdGljIF9wcm9jZXNzU3R5bGVUZXh0KGNzc1RleHQsIGJhc2VVUkkpIHtcbiAgICAgIHJldHVybiByZXNvbHZlQ3NzKGNzc1RleHQsIGJhc2VVUkkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQ29uZmlndXJlcyBhbiBlbGVtZW50IGBwcm90b2AgdG8gZnVuY3Rpb24gd2l0aCBhIGdpdmVuIGB0ZW1wbGF0ZWAuXG4gICAgKiBUaGUgZWxlbWVudCBuYW1lIGBpc2AgYW5kIGV4dGVuZHMgYGV4dGAgbXVzdCBiZSBzcGVjaWZpZWQgZm9yIFNoYWR5Q1NTXG4gICAgKiBzdHlsZSBzY29waW5nLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBpcyBUYWcgbmFtZSAob3IgdHlwZSBleHRlbnNpb24gbmFtZSkgZm9yIHRoaXMgZWxlbWVudFxuICAgICogQHJldHVybiB7dm9pZH1cbiAgICAqIEBwcm90ZWN0ZWRcbiAgICAqIEBub2NvbGxhcHNlXG4gICAgKi9cbiAgICBzdGF0aWMgX2ZpbmFsaXplVGVtcGxhdGUoaXMpIHtcbiAgICAgIC8qKiBAY29uc3Qge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMucHJvdG90eXBlLl90ZW1wbGF0ZTtcbiAgICAgIGlmICh0ZW1wbGF0ZSAmJiAhdGVtcGxhdGUuX19wb2x5bWVyRmluYWxpemVkKSB7XG4gICAgICAgIHRlbXBsYXRlLl9fcG9seW1lckZpbmFsaXplZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGltcG9ydFBhdGggPSB0aGlzLmltcG9ydFBhdGg7XG4gICAgICAgIGNvbnN0IGJhc2VVUkkgPSBpbXBvcnRQYXRoID8gcmVzb2x2ZVVybChpbXBvcnRQYXRoKSA6ICcnO1xuICAgICAgICAvLyBlLmcuIHN1cHBvcnQgYGluY2x1ZGU9XCJtb2R1bGUtbmFtZVwiYCwgYW5kIFNoYWR5Q1NTXG4gICAgICAgIHByb2Nlc3NFbGVtZW50U3R5bGVzKHRoaXMsIHRlbXBsYXRlLCBpcywgYmFzZVVSSSk7XG4gICAgICAgIHRoaXMucHJvdG90eXBlLl9iaW5kVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgc3RhbmRhcmQgQ3VzdG9tIEVsZW1lbnRzXG4gICAgICogYGNvbm5lY3RlZENhbGxiYWNrYC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGVuYWJsZXMgdGhlIHByb3BlcnR5IGVmZmVjdHMgc3lzdGVtIGFuZFxuICAgICAqIGZsdXNoZXMgYW55IHBlbmRpbmcgcHJvcGVydGllcywgYW5kIHVwZGF0ZXMgc2hpbW1lZCBDU1MgcHJvcGVydGllc1xuICAgICAqIHdoZW4gdXNpbmcgdGhlIFNoYWR5Q1NTIHNjb3BpbmcvY3VzdG9tIHByb3BlcnRpZXMgcG9seWZpbGwuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzLCBpbnZhbGlkQ2FzdHN9IFN1cGVyIG1heSBvciBtYXkgbm90XG4gICAgICogICAgIGltcGxlbWVudCB0aGUgY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB0aGlzLl90ZW1wbGF0ZSkge1xuICAgICAgICB3aW5kb3cuU2hhZHlDU1Muc3R5bGVFbGVtZW50KC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKSk7XG4gICAgICB9XG4gICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YW1wcyB0aGUgZWxlbWVudCB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcmVhZHkoKSB7XG4gICAgICBpZiAodGhpcy5fdGVtcGxhdGUpIHtcbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5fc3RhbXBUZW1wbGF0ZSh0aGlzLl90ZW1wbGF0ZSk7XG4gICAgICAgIHRoaXMuJCA9IHRoaXMucm9vdC4kO1xuICAgICAgfVxuICAgICAgc3VwZXIucmVhZHkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRzIGBQcm9wZXJ0eUVmZmVjdHNgJ3MgYF9yZWFkeUNsaWVudHNgIGNhbGwuIEF0dGFjaGVzXG4gICAgICogZWxlbWVudCBkb20gYnkgY2FsbGluZyBgX2F0dGFjaERvbWAgd2l0aCB0aGUgZG9tIHN0YW1wZWQgZnJvbSB0aGVcbiAgICAgKiBlbGVtZW50J3MgdGVtcGxhdGUgdmlhIGBfc3RhbXBUZW1wbGF0ZWAuIE5vdGUgdGhhdCB0aGlzIGFsbG93c1xuICAgICAqIGNsaWVudCBkb20gdG8gYmUgYXR0YWNoZWQgdG8gdGhlIGVsZW1lbnQgcHJpb3IgdG8gYW55IG9ic2VydmVyc1xuICAgICAqIHJ1bm5pbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIF9yZWFkeUNsaWVudHMoKSB7XG4gICAgICBpZiAodGhpcy5fdGVtcGxhdGUpIHtcbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5fYXR0YWNoRG9tKC8qKiBAdHlwZSB7U3RhbXBlZFRlbXBsYXRlfSAqLyh0aGlzLnJvb3QpKTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSBzdXBlci5fcmVhZHlDbGllbnRzIGhlcmUgc2V0cyB0aGUgY2xpZW50cyBpbml0aWFsaXplZCBmbGFnLlxuICAgICAgLy8gV2UgbXVzdCB3YWl0IHRvIGRvIHRoaXMgdW50aWwgYWZ0ZXIgY2xpZW50IGRvbSBpcyBjcmVhdGVkL2F0dGFjaGVkXG4gICAgICAvLyBzbyB0aGF0IHRoaXMgZmxhZyBjYW4gYmUgY2hlY2tlZCB0byBwcmV2ZW50IG5vdGlmaWNhdGlvbnMgZmlyZWRcbiAgICAgIC8vIGR1cmluZyB0aGlzIHByb2Nlc3MgZnJvbSBiZWluZyBoYW5kbGVkIGJlZm9yZSBjbGllbnRzIGFyZSByZWFkeS5cbiAgICAgIHN1cGVyLl9yZWFkeUNsaWVudHMoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGFuIGVsZW1lbnQncyBzdGFtcGVkIGRvbSB0byBpdHNlbGYuIEJ5IGRlZmF1bHQsXG4gICAgICogdGhpcyBtZXRob2QgY3JlYXRlcyBhIGBzaGFkb3dSb290YCBhbmQgYWRkcyB0aGUgZG9tIHRvIGl0LlxuICAgICAqIEhvd2V2ZXIsIHRoaXMgbWV0aG9kIG1heSBiZSBvdmVycmlkZGVuIHRvIGFsbG93IGFuIGVsZW1lbnRcbiAgICAgKiB0byBwdXQgaXRzIGRvbSBpbiBhbm90aGVyIGxvY2F0aW9uLlxuICAgICAqXG4gICAgICogQG92ZXJyaWRlXG4gICAgICogQHRocm93cyB7RXJyb3J9XG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUmV0dXJufVxuICAgICAqIEBwYXJhbSB7U3RhbXBlZFRlbXBsYXRlfSBkb20gdG8gYXR0YWNoIHRvIHRoZSBlbGVtZW50LlxuICAgICAqIEByZXR1cm4ge1NoYWRvd1Jvb3R9IG5vZGUgdG8gd2hpY2ggdGhlIGRvbSBoYXMgYmVlbiBhdHRhY2hlZC5cbiAgICAgKi9cbiAgICBfYXR0YWNoRG9tKGRvbSkge1xuICAgICAgY29uc3QgbiA9IHdyYXAodGhpcyk7XG4gICAgICBpZiAobi5hdHRhY2hTaGFkb3cpIHtcbiAgICAgICAgaWYgKGRvbSkge1xuICAgICAgICAgIGlmICghbi5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICBuLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nLCBzaGFkeVVwZ3JhZGVGcmFnbWVudDogZG9tfSk7XG4gICAgICAgICAgICBuLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN5bmNJbml0aWFsUmVuZGVyICYmIHdpbmRvdy5TaGFkeURPTSkge1xuICAgICAgICAgICAgd2luZG93LlNoYWR5RE9NLmZsdXNoSW5pdGlhbChuLnNoYWRvd1Jvb3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbi5zaGFkb3dSb290O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFkb3dET00gbm90IGF2YWlsYWJsZS4gJyArXG4gICAgICAgICAgLy8gVE9ETyhzb3J2ZWxsKTogbW92ZSB0byBjb21waWxlLXRpbWUgY29uZGl0aW9uYWwgd2hlbiBzdXBwb3J0ZWRcbiAgICAgICAgJ1BvbHltZXJFbGVtZW50IGNhbiBjcmVhdGUgZG9tIGFzIGNoaWxkcmVuIGluc3RlYWQgb2YgaW4gJyArXG4gICAgICAgICdTaGFkb3dET00gYnkgc2V0dGluZyBgdGhpcy5yb290ID0gdGhpcztcXGAgYmVmb3JlIFxcYHJlYWR5XFxgLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdXNpbmcgdGhlIFNoYWR5Q1NTIHNjb3BpbmcgYW5kIGN1c3RvbSBwcm9wZXJ0eSBzaGltLCBjYXVzZXMgYWxsXG4gICAgICogc2hpbW1lZCBzdHlsZXMgaW4gdGhpcyBlbGVtZW50IChhbmQgaXRzIHN1YnRyZWUpIHRvIGJlIHVwZGF0ZWRcbiAgICAgKiBiYXNlZCBvbiBjdXJyZW50IGN1c3RvbSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3B0aW9uYWwgcGFyYW1ldGVyIG92ZXJyaWRlcyBpbmxpbmUgY3VzdG9tIHByb3BlcnR5IHN0eWxlcyB3aXRoIGFuXG4gICAgICogb2JqZWN0IG9mIHByb3BlcnRpZXMgd2hlcmUgdGhlIGtleXMgYXJlIENTUyBwcm9wZXJ0aWVzLCBhbmQgdGhlIHZhbHVlc1xuICAgICAqIGFyZSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogRXhhbXBsZTogYHRoaXMudXBkYXRlU3R5bGVzKHsnLS1jb2xvcic6ICdibHVlJ30pYFxuICAgICAqXG4gICAgICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmV0YWluZWQgdW5sZXNzIGEgdmFsdWUgb2YgYG51bGxgIGlzIHNldC5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCB1cGRhdGluZyBDU1MgbWl4aW5zLlxuICAgICAqIFlvdSBjYW4gbm90IGR5bmFtaWNhbGx5IGNoYW5nZSB0aGUgdmFsdWUgb2YgYW4gYEBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXMgQmFnIG9mIGN1c3RvbSBwcm9wZXJ0eSBrZXkvdmFsdWVzIHRvXG4gICAgICogICBhcHBseSB0byB0aGlzIGVsZW1lbnQuXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAc3VwcHJlc3Mge2ludmFsaWRDYXN0c31cbiAgICAgKi9cbiAgICB1cGRhdGVTdHlsZXMocHJvcGVydGllcykge1xuICAgICAgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICAgICAgICB3aW5kb3cuU2hhZHlDU1Muc3R5bGVTdWJ0cmVlKC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqLyh0aGlzKSwgcHJvcGVydGllcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV3cml0ZXMgYSBnaXZlbiBVUkwgcmVsYXRpdmUgdG8gYSBiYXNlIFVSTC4gVGhlIGJhc2UgVVJMIGRlZmF1bHRzIHRvXG4gICAgICogdGhlIG9yaWdpbmFsIGxvY2F0aW9uIG9mIHRoZSBkb2N1bWVudCBjb250YWluaW5nIHRoZSBgZG9tLW1vZHVsZWAgZm9yXG4gICAgICogdGhpcyBlbGVtZW50LiBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiB0aGUgc2FtZSBVUkwgYmVmb3JlIGFuZCBhZnRlclxuICAgICAqIGJ1bmRsaW5nLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gcGVyZm9ybXMgbm8gcmVzb2x1dGlvbiBmb3IgVVJMcyB0aGF0IHN0YXJ0XG4gICAgICogd2l0aCBgL2AgKGFic29sdXRlIFVSTHMpIG9yIGAjYCAoaGFzaCBpZGVudGlmaWVycykuICBGb3IgZ2VuZXJhbCBwdXJwb3NlXG4gICAgICogVVJMIHJlc29sdXRpb24sIHVzZSBgd2luZG93LlVSTGAuXG4gICAgICpcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYmFzZSBPcHRpb25hbCBiYXNlIFVSTCB0byByZXNvbHZlIGFnYWluc3QsIGRlZmF1bHRzXG4gICAgICogdG8gdGhlIGVsZW1lbnQncyBgaW1wb3J0UGF0aGBcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFJld3JpdHRlbiBVUkwgcmVsYXRpdmUgdG8gYmFzZVxuICAgICAqL1xuICAgIHJlc29sdmVVcmwodXJsLCBiYXNlKSB7XG4gICAgICBpZiAoIWJhc2UgJiYgdGhpcy5pbXBvcnRQYXRoKSB7XG4gICAgICAgIGJhc2UgPSByZXNvbHZlVXJsKHRoaXMuaW1wb3J0UGF0aCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZVVybCh1cmwsIGJhc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBgUHJvcGVydHlFZmZlY3RzYCB0byBhZGQgbWFwIG9mIGR5bmFtaWMgZnVuY3Rpb25zIG9uXG4gICAgICogdGVtcGxhdGUgaW5mbywgZm9yIGNvbnN1bXB0aW9uIGJ5IGBQcm9wZXJ0eUVmZmVjdHNgIHRlbXBsYXRlIGJpbmRpbmdcbiAgICAgKiBjb2RlLiBUaGlzIG1hcCBkZXRlcm1pbmVzIHdoaWNoIG1ldGhvZCB0ZW1wbGF0ZXMgc2hvdWxkIGhhdmUgYWNjZXNzb3JzXG4gICAgICogY3JlYXRlZCBmb3IgdGhlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlIFRlbXBsYXRlXG4gICAgICogQHBhcmFtIHshVGVtcGxhdGVJbmZvfSB0ZW1wbGF0ZUluZm8gVGVtcGxhdGUgbWV0YWRhdGEgZm9yIGN1cnJlbnQgdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0geyFOb2RlSW5mb30gbm9kZUluZm8gTm9kZSBtZXRhZGF0YSBmb3IgY3VycmVudCB0ZW1wbGF0ZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSAuXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX3BhcnNlVGVtcGxhdGVDb250ZW50KHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKSB7XG4gICAgICB0ZW1wbGF0ZUluZm8uZHluYW1pY0ZucyA9IHRlbXBsYXRlSW5mby5keW5hbWljRm5zIHx8IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgICAvLyBUT0RPKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvMzI0MCk6XG4gICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgIHJldHVybiBwb2x5bWVyRWxlbWVudEJhc2UuX3BhcnNlVGVtcGxhdGVDb250ZW50LmNhbGwoXG4gICAgICAgIHRoaXMsIHRlbXBsYXRlLCB0ZW1wbGF0ZUluZm8sIG5vZGVJbmZvKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgYFByb3BlcnR5RWZmZWN0c2AgdG8gd2FybiBvbiB1c2Ugb2YgdW5kZWNsYXJlZCBwcm9wZXJ0aWVzIGluXG4gICAgICogdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVJbmZvIFRlbXBsYXRlIG1ldGFkYXRhIHRvIGFkZCBlZmZlY3QgdG9cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSBlZmZlY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGVmZmVjdCBFZmZlY3QgbWV0YWRhdGEgb2JqZWN0XG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc30gSW50ZXJmYWNlcyBpbiBjbG9zdXJlIGRvIG5vdCBpbmhlcml0IHN0YXRpY3MsIGJ1dCBjbGFzc2VzIGRvXG4gICAgICogQG5vY29sbGFwc2VcbiAgICAgKi9cbiAgICBzdGF0aWMgX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QodGVtcGxhdGVJbmZvLCBwcm9wLCBlZmZlY3QpIHtcbiAgICAgIC8vIFdhcm4gaWYgcHJvcGVydGllcyBhcmUgdXNlZCBpbiB0ZW1wbGF0ZSB3aXRob3V0IGJlaW5nIGRlY2xhcmVkLlxuICAgICAgLy8gUHJvcGVydGllcyBtdXN0IGJlIGxpc3RlZCBpbiBgcHJvcGVydGllc2AgdG8gYmUgaW5jbHVkZWQgaW5cbiAgICAgIC8vIGBvYnNlcnZlZEF0dHJpYnV0ZXNgIHNpbmNlIENFIFYxIHJlYWRzIHRoYXQgYXQgcmVnaXN0cmF0aW9uIHRpbWUsIGFuZFxuICAgICAgLy8gc2luY2Ugd2Ugd2FudCB0byBrZWVwIHRlbXBsYXRlIHBhcnNpbmcgbGF6eSwgd2UgY2FuJ3QgYXV0b21hdGljYWxseVxuICAgICAgLy8gYWRkIHVuZGVjbGFyZWQgcHJvcGVydGllcyB1c2VkIGluIHRlbXBsYXRlcyB0byBgb2JzZXJ2ZWRBdHRyaWJ1dGVzYC5cbiAgICAgIC8vIFRoZSB3YXJuaW5nIGlzIG9ubHkgZW5hYmxlZCBpbiBgbGVnYWN5T3B0aW1pemF0aW9uc2AgbW9kZSwgc2luY2VcbiAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gc3BhbSBleGlzdGluZyB1c2VycyB3aG8gbWlnaHQgaGF2ZSBhZG9wdGVkIHRoZVxuICAgICAgLy8gc2hvcnRoYW5kIHdoZW4gYXR0cmlidXRlIGRlc2VyaWFsaXphdGlvbiBpcyBub3QgaW1wb3J0YW50LlxuICAgICAgaWYgKGxlZ2FjeU9wdGltaXphdGlvbnMgJiYgIShwcm9wIGluIHRoaXMuX3Byb3BlcnRpZXMpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgUHJvcGVydHkgJyR7cHJvcH0nIHVzZWQgaW4gdGVtcGxhdGUgYnV0IG5vdCBkZWNsYXJlZCBpbiAncHJvcGVydGllcyc7IGAgK1xuICAgICAgICAgIGBhdHRyaWJ1dGUgd2lsbCBub3QgYmUgb2JzZXJ2ZWQuYCk7XG4gICAgICB9XG4gICAgICAvLyBUT0RPKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvMzI0MCk6XG4gICAgICAvLyAgICAgQ2hhbmdlIGJhY2sgdG8ganVzdCBzdXBlci5tZXRob2RDYWxsKClcbiAgICAgIHJldHVybiBwb2x5bWVyRWxlbWVudEJhc2UuX2FkZFRlbXBsYXRlUHJvcGVydHlFZmZlY3QuY2FsbChcbiAgICAgICAgdGhpcywgdGVtcGxhdGVJbmZvLCBwcm9wLCBlZmZlY3QpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIFBvbHltZXJFbGVtZW50O1xufSk7XG5cbi8qKlxuICogV2hlbiB1c2luZyB0aGUgU2hhZHlDU1Mgc2NvcGluZyBhbmQgY3VzdG9tIHByb3BlcnR5IHNoaW0sIGNhdXNlcyBhbGxcbiAqIHNoaW1tZWQgYHN0eWxlc2AgKHZpYSBgY3VzdG9tLXN0eWxlYCkgaW4gdGhlIGRvY3VtZW50IChhbmQgaXRzIHN1YnRyZWUpXG4gKiB0byBiZSB1cGRhdGVkIGJhc2VkIG9uIGN1cnJlbnQgY3VzdG9tIHByb3BlcnR5IHZhbHVlcy5cbiAqXG4gKiBUaGUgb3B0aW9uYWwgcGFyYW1ldGVyIG92ZXJyaWRlcyBpbmxpbmUgY3VzdG9tIHByb3BlcnR5IHN0eWxlcyB3aXRoIGFuXG4gKiBvYmplY3Qgb2YgcHJvcGVydGllcyB3aGVyZSB0aGUga2V5cyBhcmUgQ1NTIHByb3BlcnRpZXMsIGFuZCB0aGUgdmFsdWVzXG4gKiBhcmUgc3RyaW5ncy5cbiAqXG4gKiBFeGFtcGxlOiBgdXBkYXRlU3R5bGVzKHsnLS1jb2xvcic6ICdibHVlJ30pYFxuICpcbiAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJldGFpbmVkIHVubGVzcyBhIHZhbHVlIG9mIGBudWxsYCBpcyBzZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q9fSBwcm9wcyBCYWcgb2YgY3VzdG9tIHByb3BlcnR5IGtleS92YWx1ZXMgdG9cbiAqICAgYXBwbHkgdG8gdGhlIGRvY3VtZW50LlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHVwZGF0ZVN0eWxlcyA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gIGlmICh3aW5kb3cuU2hhZHlDU1MpIHtcbiAgICB3aW5kb3cuU2hhZHlDU1Muc3R5bGVEb2N1bWVudChwcm9wcyk7XG4gIH1cbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICcuL2Jvb3QuanMnO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHN0YXRpYyBzdHJpbmcgdmFsdWUgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZmlsdGVyXG4gKiBzdHJpbmdzIGJ5IGFzc2V0aW5nIHRoYXQgdGhleSBoYXZlIGJlZW4gY3JlYXRlZCB2aWEgdGhpcyBjbGFzcy4gVGhlXG4gKiBgdmFsdWVgIHByb3BlcnR5IHJldHVybnMgdGhlIHN0cmluZyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICovXG5jbGFzcyBMaXRlcmFsU3RyaW5nIHtcbiAgY29uc3RydWN0b3Ioc3RyaW5nKSB7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy52YWx1ZSA9IHN0cmluZy50b1N0cmluZygpO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IExpdGVyYWxTdHJpbmcgc3RyaW5nIHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IHZhbHVlIE9iamVjdCB0byBzdHJpbmdpZnkgaW50byBIVE1MXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEhUTUwgc3RyaW5naWZpZWQgZm9ybSBvZiBgb2JqYFxuICovXG5mdW5jdGlvbiBsaXRlcmFsVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGl0ZXJhbFN0cmluZykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFMaXRlcmFsU3RyaW5nfSAqLyh2YWx1ZSkudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgbm9uLWxpdGVyYWwgdmFsdWUgcGFzc2VkIHRvIFBvbHltZXIncyBodG1sTGl0ZXJhbCBmdW5jdGlvbjogJHt2YWx1ZX1gXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgT2JqZWN0IHRvIHN0cmluZ2lmeSBpbnRvIEhUTUxcbiAqIEByZXR1cm4ge3N0cmluZ30gSFRNTCBzdHJpbmdpZmllZCBmb3JtIG9mIGBvYmpgXG4gKi9cbmZ1bmN0aW9uIGh0bWxWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnQgfSAqLyh2YWx1ZSkuaW5uZXJIVE1MO1xuICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGl0ZXJhbFN0cmluZykge1xuICAgIHJldHVybiBsaXRlcmFsVmFsdWUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYG5vbi10ZW1wbGF0ZSB2YWx1ZSBwYXNzZWQgdG8gUG9seW1lcidzIGh0bWwgZnVuY3Rpb246ICR7dmFsdWV9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIHRlbXBsYXRlIGxpdGVyYWwgdGFnIHRoYXQgY3JlYXRlcyBhbiBIVE1MIDx0ZW1wbGF0ZT4gZWxlbWVudCBmcm9tIHRoZVxuICogY29udGVudHMgb2YgdGhlIHN0cmluZy5cbiAqXG4gKiBUaGlzIGFsbG93cyB5b3UgdG8gd3JpdGUgYSBQb2x5bWVyIFRlbXBsYXRlIGluIEphdmFTY3JpcHQuXG4gKlxuICogVGVtcGxhdGVzIGNhbiBiZSBjb21wb3NlZCBieSBpbnRlcnBvbGF0aW5nIGBIVE1MVGVtcGxhdGVFbGVtZW50YHMgaW5cbiAqIGV4cHJlc3Npb25zIGluIHRoZSBKYXZhU2NyaXB0IHRlbXBsYXRlIGxpdGVyYWwuIFRoZSBuZXN0ZWQgdGVtcGxhdGUnc1xuICogYGlubmVySFRNTGAgaXMgaW5jbHVkZWQgaW4gdGhlIGNvbnRhaW5pbmcgdGVtcGxhdGUuICBUaGUgb25seSBvdGhlclxuICogdmFsdWVzIGFsbG93ZWQgaW4gZXhwcmVzc2lvbnMgYXJlIHRob3NlIHJldHVybmVkIGZyb20gYGh0bWxMaXRlcmFsYFxuICogd2hpY2ggZW5zdXJlcyBvbmx5IGxpdGVyYWwgdmFsdWVzIGZyb20gSlMgc291cmNlIGV2ZXIgcmVhY2ggdGhlIEhUTUwsIHRvXG4gKiBndWFyZCBhZ2FpbnN0IFhTUyByaXNrcy5cbiAqXG4gKiBBbGwgb3RoZXIgdmFsdWVzIGFyZSBkaXNhbGxvd2VkIGluIGV4cHJlc3Npb25zIHRvIGhlbHAgcHJldmVudCBYU1NcbiAqIGF0dGFja3M7IGhvd2V2ZXIsIGBodG1sTGl0ZXJhbGAgY2FuIGJlIHVzZWQgdG8gY29tcG9zZSBzdGF0aWNcbiAqIHN0cmluZyB2YWx1ZXMgaW50byB0ZW1wbGF0ZXMuIFRoaXMgaXMgdXNlZnVsIHRvIGNvbXBvc2Ugc3RyaW5ncyBpbnRvXG4gKiBwbGFjZXMgdGhhdCBkbyBub3QgYWNjZXB0IGh0bWwsIGxpa2UgdGhlIGNzcyB0ZXh0IG9mIGEgYHN0eWxlYFxuICogZWxlbWVudC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBzdGF0aWMgZ2V0IHRlbXBsYXRlKCkge1xuICogICAgICAgcmV0dXJuIGh0bWxgXG4gKiAgICAgICAgIDxzdHlsZT46aG9zdHsgY29udGVudDpcIi4uLlwiIH08L3N0eWxlPlxuICogICAgICAgICA8ZGl2IGNsYXNzPVwic2hhZG93ZWRcIj4ke3RoaXMucGFydGlhbFRlbXBsYXRlfTwvZGl2PlxuICogICAgICAgICAke3N1cGVyLnRlbXBsYXRlfVxuICogICAgICAgYDtcbiAqICAgICB9XG4gKiAgICAgc3RhdGljIGdldCBwYXJ0aWFsVGVtcGxhdGUoKSB7IHJldHVybiBodG1sYDxzcGFuPlBhcnRpYWwhPC9zcGFuPmA7IH1cbiAqXG4gKiBAcGFyYW0geyFJVGVtcGxhdGVBcnJheX0gc3RyaW5ncyBDb25zdGFudCBwYXJ0cyBvZiB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbFxuICogQHBhcmFtIHsuLi4qfSB2YWx1ZXMgVmFyaWFibGUgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEByZXR1cm4geyFIVE1MVGVtcGxhdGVFbGVtZW50fSBDb25zdHJ1Y3RlZCBIVE1MVGVtcGxhdGVFbGVtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gZnVuY3Rpb24gaHRtbChzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgY29uc3QgdGVtcGxhdGUgPSAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyhkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpKTtcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdmFsdWVzLnJlZHVjZSgoYWNjLCB2LCBpZHgpID0+XG4gICAgICBhY2MgKyBodG1sVmFsdWUodikgKyBzdHJpbmdzW2lkeCArIDFdLCBzdHJpbmdzWzBdKTtcbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcblxuLyoqXG4gKiBBbiBodG1sIGxpdGVyYWwgdGFnIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBgaHRtbGAgdG8gY29tcG9zZS5cbiAqIGEgbGl0ZXJhbCBzdHJpbmcuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgc3RhdGljIGdldCB0ZW1wbGF0ZSgpIHtcbiAqICAgICAgIHJldHVybiBodG1sYFxuICogICAgICAgICA8c3R5bGU+XG4gKiAgICAgICAgICAgOmhvc3QgeyBkaXNwbGF5OiBibG9jazsgfVxuICogICAgICAgICAgICR7dGhpcy5zdHlsZVRlbXBsYXRlKCl9XG4gKiAgICAgICAgIDwvc3R5bGU+XG4gKiAgICAgICAgIDxkaXYgY2xhc3M9XCJzaGFkb3dlZFwiPiR7c3RhdGljVmFsdWV9PC9kaXY+XG4gKiAgICAgICAgICR7c3VwZXIudGVtcGxhdGV9XG4gKiAgICAgICBgO1xuICogICAgIH1cbiAqICAgICBzdGF0aWMgZ2V0IHN0eWxlVGVtcGxhdGUoKSB7XG4gKiAgICAgICAgcmV0dXJuIGh0bWxMaXRlcmFsYC5zaGFkb3dlZCB7IGJhY2tncm91bmQ6IGdyYXk7IH1gO1xuICogICAgIH1cbiAqXG4gKiBAcGFyYW0geyFJVGVtcGxhdGVBcnJheX0gc3RyaW5ncyBDb25zdGFudCBwYXJ0cyBvZiB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbFxuICogQHBhcmFtIHsuLi4qfSB2YWx1ZXMgVmFyaWFibGUgcGFydHMgb2YgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEByZXR1cm4geyFMaXRlcmFsU3RyaW5nfSBDb25zdHJ1Y3RlZCBsaXRlcmFsIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgaHRtbExpdGVyYWwgPSBmdW5jdGlvbihzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBMaXRlcmFsU3RyaW5nKHZhbHVlcy5yZWR1Y2UoKGFjYywgdiwgaWR4KSA9PlxuICAgICAgYWNjICsgbGl0ZXJhbFZhbHVlKHYpICsgc3RyaW5nc1tpZHggKyAxXSwgc3RyaW5nc1swXSkpO1xufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmltcG9ydCB7IEVsZW1lbnRNaXhpbiwgdmVyc2lvbiB9IGZyb20gJy4vbGliL21peGlucy9lbGVtZW50LW1peGluLmpzJztcbmV4cG9ydCB7IGh0bWwgfSBmcm9tICcuL2xpYi91dGlscy9odG1sLXRhZy5qcyc7XG5cbmV4cG9ydCB7IHZlcnNpb24gfTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIHRoYXQgcHJvdmlkZXMgdGhlIGNvcmUgQVBJIGZvciBQb2x5bWVyJ3MgbWV0YS1wcm9ncmFtbWluZ1xuICogZmVhdHVyZXMgaW5jbHVkaW5nIHRlbXBsYXRlIHN0YW1waW5nLCBkYXRhLWJpbmRpbmcsIGF0dHJpYnV0ZSBkZXNlcmlhbGl6YXRpb24sXG4gKiBhbmQgcHJvcGVydHkgY2hhbmdlIG9ic2VydmF0aW9uLlxuICpcbiAqIEBjdXN0b21FbGVtZW50XG4gKiBAcG9seW1lclxuICogQGNvbnN0cnVjdG9yXG4gKiBAaW1wbGVtZW50cyB7UG9seW1lcl9FbGVtZW50TWl4aW59XG4gKiBAZXh0ZW5kcyBIVE1MRWxlbWVudFxuICogQGFwcGxpZXNNaXhpbiBFbGVtZW50TWl4aW5cbiAqIEBzdW1tYXJ5IEN1c3RvbSBlbGVtZW50IGJhc2UgY2xhc3MgdGhhdCBwcm92aWRlcyB0aGUgY29yZSBBUEkgZm9yIFBvbHltZXInc1xuICogICBrZXkgbWV0YS1wcm9ncmFtbWluZyBmZWF0dXJlcyBpbmNsdWRpbmcgdGVtcGxhdGUgc3RhbXBpbmcsIGRhdGEtYmluZGluZyxcbiAqICAgYXR0cmlidXRlIGRlc2VyaWFsaXphdGlvbiwgYW5kIHByb3BlcnR5IGNoYW5nZSBvYnNlcnZhdGlvblxuICovXG5leHBvcnQgY29uc3QgUG9seW1lckVsZW1lbnQgPSBFbGVtZW50TWl4aW4oSFRNTEVsZW1lbnQpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAnLi9ib290LmpzJztcblxuaW1wb3J0ICcuL21peGluLmpzJztcbmltcG9ydCAnLi9hc3luYy5qcyc7XG5cbi8qKlxuICogQHN1bW1hcnkgQ29sbGFwc2UgbXVsdGlwbGUgY2FsbGJhY2tzIGludG8gb25lIGludm9jYXRpb24gYWZ0ZXIgYSB0aW1lci5cbiAqL1xuZXhwb3J0IGNsYXNzIERlYm91bmNlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2FzeW5jTW9kdWxlID0gbnVsbDtcbiAgICB0aGlzLl9jYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzY2hlZHVsZXI7IHRoYXQgaXMsIGEgbW9kdWxlIHdpdGggdGhlIEFzeW5jIGludGVyZmFjZSxcbiAgICogYSBjYWxsYmFjayBhbmQgb3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byB0aGUgcnVuIGZ1bmN0aW9uXG4gICAqIGZyb20gdGhlIGFzeW5jIG1vZHVsZS5cbiAgICpcbiAgICogQHBhcmFtIHshQXN5bmNJbnRlcmZhY2V9IGFzeW5jTW9kdWxlIE9iamVjdCB3aXRoIEFzeW5jIGludGVyZmFjZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBDYWxsYmFjayB0byBydW4uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBzZXRDb25maWcoYXN5bmNNb2R1bGUsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fYXN5bmNNb2R1bGUgPSBhc3luY01vZHVsZTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWVyID0gdGhpcy5fYXN5bmNNb2R1bGUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICAgIGRlYm91bmNlclF1ZXVlLmRlbGV0ZSh0aGlzKTtcbiAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENhbmNlbHMgYW4gYWN0aXZlIGRlYm91bmNlciBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byBpdHNlbGYuXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjYW5jZWwoKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgdGhpcy5fY2FuY2VsQXN5bmMoKTtcbiAgICAgIC8vIENhbmNlbGluZyBhIGRlYm91bmNlciByZW1vdmVzIGl0cyBzcG90IGZyb20gdGhlIGZsdXNoIHF1ZXVlLFxuICAgICAgLy8gc28gaWYgYSBkZWJvdW5jZXIgaXMgbWFudWFsbHkgY2FuY2VsZWQgYW5kIHJlLWRlYm91bmNlZCwgaXRcbiAgICAgIC8vIHdpbGwgcmVzZXQgaXRzIGZsdXNoIG9yZGVyICh0aGlzIGlzIGEgdmVyeSBtaW5vciBkaWZmZXJlbmNlIGZyb20gMS54KVxuICAgICAgLy8gUmUtZGVib3VuY2luZyB2aWEgdGhlIGBkZWJvdW5jZWAgQVBJIHJldGFpbnMgdGhlIDEueCBGSUZPIGZsdXNoIG9yZGVyXG4gICAgICBkZWJvdW5jZXJRdWV1ZS5kZWxldGUodGhpcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgZGVib3VuY2VyJ3MgYXN5bmMgY2FsbGJhY2suXG4gICAqXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBfY2FuY2VsQXN5bmMoKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgdGhpcy5fYXN5bmNNb2R1bGUuY2FuY2VsKC8qKiBAdHlwZSB7bnVtYmVyfSAqLyh0aGlzLl90aW1lcikpO1xuICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRmx1c2hlcyBhbiBhY3RpdmUgZGVib3VuY2VyIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIGl0c2VsZi5cbiAgICpcbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICB0aGlzLl9jYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBkZWJvdW5jZXIgaXMgYWN0aXZlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFjdGl2ZS5cbiAgICovXG4gIGlzQWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lciAhPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZGVib3VuY2VyIGlmIG5vIGRlYm91bmNlciBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJcbiAgICogb3IgaXQgY2FuY2VscyBhbiBhY3RpdmUgZGVib3VuY2VyIG90aGVyd2lzZS4gVGhlIGZvbGxvd2luZ1xuICAgKiBleGFtcGxlIHNob3dzIGhvdyBhIGRlYm91bmNlciBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGhpbiBhXG4gICAqIG1pY3JvdGFzayBhbmQgXCJkZWJvdW5jZWRcIiBzdWNoIHRoYXQgdGhlIHByb3ZpZGVkIGNhbGxiYWNrIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCBvbmNlLiBBZGQgdGhpcyBtZXRob2QgdG8gYSBjdXN0b20gZWxlbWVudDpcbiAgICpcbiAgICogYGBganNcbiAgICogaW1wb3J0IHttaWNyb1Rhc2t9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2FzeW5jLmpzJztcbiAgICogaW1wb3J0IHtEZWJvdW5jZXJ9IGZyb20gJ0Bwb2x5bWVyL3BvbHltZXIvbGliL3V0aWxzL2RlYm91bmNlLmpzJztcbiAgICogLy8gLi4uXG4gICAqXG4gICAqIF9kZWJvdW5jZVdvcmsoKSB7XG4gICAqICAgdGhpcy5fZGVib3VuY2VKb2IgPSBEZWJvdW5jZXIuZGVib3VuY2UodGhpcy5fZGVib3VuY2VKb2IsXG4gICAqICAgICAgIG1pY3JvVGFzaywgKCkgPT4gdGhpcy5fZG9Xb3JrKCkpO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBJZiB0aGUgYF9kZWJvdW5jZVdvcmtgIG1ldGhvZCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2l0aGluIHRoZSBzYW1lXG4gICAqIG1pY3JvdGFzaywgdGhlIGBfZG9Xb3JrYCBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBvbmx5IG9uY2UgYXQgdGhlIG5leHRcbiAgICogbWljcm90YXNrIGNoZWNrcG9pbnQuXG4gICAqXG4gICAqIE5vdGU6IEluIHRlc3RpbmcgaXQgaXMgb2Z0ZW4gY29udmVuaWVudCB0byBhdm9pZCBhc3luY2hyb255LiBUbyBhY2NvbXBsaXNoXG4gICAqIHRoaXMgd2l0aCBhIGRlYm91bmNlciwgeW91IGNhbiB1c2UgYGVucXVldWVEZWJvdW5jZXJgIGFuZFxuICAgKiBgZmx1c2hgLiBGb3IgZXhhbXBsZSwgZXh0ZW5kIHRoZSBhYm92ZSBleGFtcGxlIGJ5IGFkZGluZ1xuICAgKiBgZW5xdWV1ZURlYm91bmNlcih0aGlzLl9kZWJvdW5jZUpvYilgIGF0IHRoZSBlbmQgb2YgdGhlXG4gICAqIGBfZGVib3VuY2VXb3JrYCBtZXRob2QuIFRoZW4gaW4gYSB0ZXN0LCBjYWxsIGBmbHVzaGAgdG8gZW5zdXJlXG4gICAqIHRoZSBkZWJvdW5jZXIgaGFzIGNvbXBsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtEZWJvdW5jZXI/fSBkZWJvdW5jZXIgRGVib3VuY2VyIG9iamVjdC5cbiAgICogQHBhcmFtIHshQXN5bmNJbnRlcmZhY2V9IGFzeW5jTW9kdWxlIE9iamVjdCB3aXRoIEFzeW5jIGludGVyZmFjZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIENhbGxiYWNrIHRvIHJ1bi5cbiAgICogQHJldHVybiB7IURlYm91bmNlcn0gUmV0dXJucyBhIGRlYm91bmNlciBvYmplY3QuXG4gICAqL1xuICBzdGF0aWMgZGVib3VuY2UoZGVib3VuY2VyLCBhc3luY01vZHVsZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoZGVib3VuY2VyIGluc3RhbmNlb2YgRGVib3VuY2VyKSB7XG4gICAgICAvLyBDYW5jZWwgdGhlIGFzeW5jIGNhbGxiYWNrLCBidXQgbGVhdmUgaW4gZGVib3VuY2VyUXVldWUgaWYgaXQgd2FzXG4gICAgICAvLyBlbnF1ZXVlZCwgdG8gbWFpbnRhaW4gMS54IGZsdXNoIG9yZGVyXG4gICAgICBkZWJvdW5jZXIuX2NhbmNlbEFzeW5jKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYm91bmNlciA9IG5ldyBEZWJvdW5jZXIoKTtcbiAgICB9XG4gICAgZGVib3VuY2VyLnNldENvbmZpZyhhc3luY01vZHVsZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBkZWJvdW5jZXI7XG4gIH1cbn1cblxubGV0IGRlYm91bmNlclF1ZXVlID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIEFkZHMgYSBgRGVib3VuY2VyYCB0byBhIGxpc3Qgb2YgZ2xvYmFsbHkgZmx1c2hhYmxlIHRhc2tzLlxuICpcbiAqIEBwYXJhbSB7IURlYm91bmNlcn0gZGVib3VuY2VyIERlYm91bmNlciB0byBlbnF1ZXVlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3QgZW5xdWV1ZURlYm91bmNlciA9IGZ1bmN0aW9uKGRlYm91bmNlcikge1xuICBkZWJvdW5jZXJRdWV1ZS5hZGQoZGVib3VuY2VyKTtcbn07XG5cbi8qKlxuICogRmx1c2hlcyBhbnkgZW5xdWV1ZWQgZGVib3VuY2Vyc1xuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgd2hldGhlciBhbnkgZGVib3VuY2VycyB3ZXJlIGZsdXNoZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGZsdXNoRGVib3VuY2VycyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBkaWRGbHVzaCA9IEJvb2xlYW4oZGVib3VuY2VyUXVldWUuc2l6ZSk7XG4gIC8vIElmIG5ldyBkZWJvdW5jZXJzIGFyZSBhZGRlZCB3aGlsZSBmbHVzaGluZywgU2V0LmZvckVhY2ggd2lsbCBlbnN1cmVcbiAgLy8gbmV3bHkgYWRkZWQgb25lcyBhcmUgYWxzbyBmbHVzaGVkXG4gIGRlYm91bmNlclF1ZXVlLmZvckVhY2goZGVib3VuY2VyID0+IHtcbiAgICB0cnkge1xuICAgICAgZGVib3VuY2VyLmZsdXNoKCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkaWRGbHVzaDtcbn07IiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE1IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwczovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHBzOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwczovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHBzOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbi8qKlxuICogUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGd2aXogbG9hZGVyIHNjcmlwdCBpcyBsb2FkZWQsIHdoaWNoXG4gKiBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIEdvb2dsZSBDaGFydHMgbG9hZGluZyBBUEkuXG4gKiBAdHlwZSB7IVByb21pc2V9XG4gKi9cbmNvbnN0IGxvYWRlclByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIC8vIFJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhlIGxvYWRlciBzY3JpcHQgaGFzIGJlZW4gYWRkZWQgYWxyZWFkeSBhbmRcbiAgLy8gYGdvb2dsZS5jaGFydHMubG9hZGAgaXMgYXZhaWxhYmxlLiBBZGRpbmcgdGhlIGxvYWRlciBzY3JpcHQgdHdpY2UgdGhyb3dzXG4gIC8vIGFuIGVycm9yLlxuICBpZiAodHlwZW9mIGdvb2dsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ29vZ2xlLmNoYXJ0cyAmJlxuICAgICAgdHlwZW9mIGdvb2dsZS5jaGFydHMubG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlc29sdmUoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUcnkgdG8gZmluZCBleGlzdGluZyBsb2FkZXIgc2NyaXB0LlxuICAgIGxldCBsb2FkZXJTY3JpcHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnc2NyaXB0W3NyYz1cImh0dHBzOi8vd3d3LmdzdGF0aWMuY24vY2hhcnRzL2xvYWRlci5qc1wiXScpO1xuICAgIGlmICghbG9hZGVyU2NyaXB0KSB7XG4gICAgICAvLyBJZiB0aGUgbG9hZGVyIGlzIG5vdCBwcmVzZW50LCBhZGQgaXQuXG4gICAgICBsb2FkZXJTY3JpcHQgPVxuICAgICAgICAgIC8qKiBAdHlwZSB7IUhUTUxTY3JpcHRFbGVtZW50fSAqLyAoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpO1xuICAgICAgLy8gU3BlY2lmeSBVUkwgZGlyZWN0bHkgdG8gcGFzcyBKUyBjb21waWxlciBjb25mb3JtYW5jZSBjaGVja3MuXG4gICAgICBsb2FkZXJTY3JpcHQuc3JjID0gJ2h0dHBzOi8vd3d3LmdzdGF0aWMuY24vY2hhcnRzL2xvYWRlci5qcyc7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxvYWRlclNjcmlwdCk7XG4gICAgfVxuICAgIGxvYWRlclNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZSk7XG4gICAgbG9hZGVyU2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgdmVyc2lvbjogKHN0cmluZ3x1bmRlZmluZWQpLFxuICogICBwYWNrYWdlczogKCFBcnJheTxzdHJpbmc+fHVuZGVmaW5lZCksXG4gKiAgIGxhbmd1YWdlOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIG1hcHNBcGlLZXk6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqIH19XG4gKi9cbnZhciBMb2FkU2V0dGluZ3M7XG5cbi8qKlxuICogTG9hZHMgR29vZ2xlIENoYXJ0cyBBUEkgd2l0aCB0aGUgc2VsZWN0ZWQgc2V0dGluZ3Mgb3IgdXNpbmcgZGVmYXVsdHMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBzZXR0aW5ncyBhcmUgYXZhaWxhYmxlOlxuICogLSB2ZXJzaW9uOiB3aGljaCB2ZXJzaW9uIG9mIGxpYnJhcnkgdG8gbG9hZCwgZGVmYXVsdDogJ2N1cnJlbnQnLFxuICogLSBwYWNrYWdlczogd2hpY2ggY2hhcnQgcGFja2FnZXMgdG8gbG9hZCwgZGVmYXVsdDogWydjb3JlY2hhcnQnXSxcbiAqIC0gbGFuZ3VhZ2U6IHdoYXQgbGFuZ3VhZ2UgdG8gbG9hZCBsaWJyYXJ5IGluLCBkZWZhdWx0OiBgbGFuZ2AgYXR0cmlidXRlIG9uXG4gKiAgIGA8aHRtbD5gIG9yICdlbicgaWYgbm90IHNwZWNpZmllZCxcbiAqIC0gbWFwc0FwaUtleToga2V5IHRvIHVzZSBmb3IgbWFwcyBBUEkuXG4gKlxuICogQHBhcmFtIHshTG9hZFNldHRpbmdzPX0gc2V0dGluZ3NcbiAqIEByZXR1cm4geyFQcm9taXNlfVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZChzZXR0aW5ncyA9IHt9KSB7XG4gIGF3YWl0IGxvYWRlclByb21pc2U7XG4gIGNvbnN0IHtcbiAgICB2ZXJzaW9uID0gJ2N1cnJlbnQnLFxuICAgIHBhY2thZ2VzID0gWydjb3JlY2hhcnQnXSxcbiAgICBsYW5ndWFnZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nIHx8ICdlbicsXG4gICAgbWFwc0FwaUtleSxcbiAgfSA9IHNldHRpbmdzO1xuICByZXR1cm4gZ29vZ2xlLmNoYXJ0cy5sb2FkKHZlcnNpb24sIHtcbiAgICAncGFja2FnZXMnOiBwYWNrYWdlcyxcbiAgICAnbGFuZ3VhZ2UnOiBsYW5ndWFnZSxcbiAgICAnbWFwc0FwaUtleSc6IG1hcHNBcGlLZXksXG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBEYXRhVGFibGUgb2JqZWN0IGZvciB1c2Ugd2l0aCBhIGNoYXJ0LlxuICpcbiAqIE11bHRpcGxlIGRpZmZlcmVudCBhcmd1bWVudCB0eXBlcyBhcmUgc3VwcG9ydGVkLiBUaGlzIGlzIGJlY2F1c2UgdGhlXG4gKiByZXN1bHQgb2YgbG9hZGluZyB0aGUgSlNPTiBkYXRhIFVSTCBpcyBmZWQgaW50byB0aGlzIGZ1bmN0aW9uIGZvclxuICogRGF0YVRhYmxlIGNvbnN0cnVjdGlvbiBhbmQgaXRzIGZvcm1hdCBpcyB1bmtub3duLlxuICpcbiAqIFRoZSBkYXRhIGFyZ3VtZW50IGNhbiBiZSBvbmUgb2YgYSBmZXcgb3B0aW9uczpcbiAqXG4gKiAtIG51bGwvdW5kZWZpbmVkOiBBbiBlbXB0eSBEYXRhVGFibGUgaXMgY3JlYXRlZC4gQ29sdW1ucyBtdXN0IGJlIGFkZGVkXG4gKiAtICFEYXRhVGFibGU6IFRoZSBvYmplY3QgaXMgc2ltcGx5IHJldHVybmVkXG4gKiAtIHt7Y29sczogIUFycmF5LCByb3dzOiAhQXJyYXl9fTogQSBEYXRhVGFibGUgaW4gb2JqZWN0IGZvcm1hdFxuICogLSB7e2NvbHM6ICFBcnJheX19OiBBIERhdGFUYWJsZSBpbiBvYmplY3QgZm9ybWF0IHdpdGhvdXQgcm93c1xuICogLSAhQXJyYXk8IUFycmF5PjogQSBEYXRhVGFibGUgaW4gMkQgYXJyYXkgZm9ybWF0XG4gKlxuICogVW4tc3VwcG9ydGVkIHR5cGVzOlxuICpcbiAqIC0gRW1wdHkgIUFycmF5PCFBcnJheT46IChlLmcuIGBbXWApIFdoaWxlIHRlY2huaWNhbGx5IGEgdmFsaWQgZGF0YVxuICogICBmb3JtYXQsIHRoaXMgaXMgcmVqZWN0ZWQgYXMgY2hhcnRzIHdpbGwgbm90IHJlbmRlciBlbXB0eSBEYXRhVGFibGVzLlxuICogICBEYXRhVGFibGVzIG11c3QgYXQgbGVhc3QgaGF2ZSBjb2x1bW5zIHNwZWNpZmllZC4gQW4gZW1wdHkgYXJyYXkgaXMgbW9zdFxuICogICBsaWtlbHkgZHVlIHRvIGEgYnVnIG9yIGJhZCBkYXRhLiBJZiBvbmUgd2FudHMgYW4gZW1wdHkgRGF0YVRhYmxlLCBwYXNzXG4gKiAgIG5vIGFyZ3VtZW50cy5cbiAqIC0gQW55dGhpbmcgZWxzZVxuICpcbiAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY2hhcnQvaW50ZXJhY3RpdmUvZG9jcy9yZWZlcmVuY2UjZGF0YXRhYmxlLWNsYXNzXCI+dGhlIGRvY3M8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHBhcmFtIHshQXJyYXl8e2NvbHM6ICFBcnJheSwgcm93czogKCFBcnJheTwhQXJyYXk+fHVuZGVmaW5lZCl9fHVuZGVmaW5lZH0gZGF0YVxuICogICAgIHRoZSBkYXRhIHdpdGggd2hpY2ggd2Ugc2hvdWxkIHVzZSB0byBjb25zdHJ1Y3QgdGhlIG5ldyBEYXRhVGFibGUgb2JqZWN0XG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlPn0gcHJvbWlzZSBmb3IgdGhlIGNyZWF0ZWQgRGF0YVRhYmxlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkYXRhVGFibGUoZGF0YSkge1xuICAvLyBFbnN1cmUgdGhhdCBgZ29vZ2xlLnZpc3VhbGl6YXRpb25gIG5hbWVzcGFjZSBpcyBhZGRlZCB0byB0aGUgZG9jdW1lbnQuXG4gIGF3YWl0IGxvYWQoKTtcbiAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlKCk7XG4gIH0gZWxzZSBpZiAoZGF0YS5nZXROdW1iZXJPZlJvd3MpIHtcbiAgICAvLyBEYXRhIGlzIGFscmVhZHkgYSBEYXRhVGFibGVcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlfSAqLyAoZGF0YSk7XG4gIH0gZWxzZSBpZiAoZGF0YS5jb2xzKSB7ICAvLyBkYXRhLnJvd3MgbWF5IGFsc28gYmUgc3BlY2lmaWVkXG4gICAgLy8gRGF0YSBpcyBpbiB0aGUgZm9ybSBvZiBvYmplY3QgRGF0YVRhYmxlIHN0cnVjdHVyZVxuICAgIHJldHVybiBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlKGRhdGEpO1xuICB9IGVsc2UgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgIC8vIERhdGEgaXMgaW4gdGhlIGZvcm0gb2YgYSB0d28gZGltZW5zaW9uYWwgYXJyYXkuXG4gICAgcmV0dXJuIGdvb2dsZS52aXN1YWxpemF0aW9uLmFycmF5VG9EYXRhVGFibGUoZGF0YSk7XG4gIH0gZWxzZSBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBDaGFydCBkYXRhIHdhcyBlbXB0eS5cbiAgICAvLyBXZSB0aHJvdyBpbnN0ZWFkIG9mIGNyZWF0aW5nIGFuIGVtcHR5IERhdGFUYWJsZSBiZWNhdXNlIG1vc3RcbiAgICAvLyAoaWYgbm90IGFsbCkgY2hhcnRzIHdpbGwgcmVuZGVyIGEgc3RpY2t5IGVycm9yIGluIHRoaXMgc2l0dWF0aW9uLlxuICAgIHRocm93IG5ldyBFcnJvcignRGF0YSB3YXMgZW1wdHkuJyk7XG4gICAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGEgZm9ybWF0IHdhcyBub3QgcmVjb2duaXplZC4nKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBgQ2hhcnRXcmFwcGVyYC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGNvbnRhaW5lciBFbGVtZW50IGluIHdoaWNoIHRoZSBjaGFydCB3aWxsIGJlIGRyYXduXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRXcmFwcGVyPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNoYXJ0V3JhcHBlcihjb250YWluZXIpIHtcbiAgLy8gRW5zdXJlIHRoYXQgYGdvb2dsZS52aXN1YWxpemF0aW9uYCBuYW1lc3BhY2UgaXMgYWRkZWQgdG8gdGhlIGRvY3VtZW50LlxuICBhd2FpdCBsb2FkKCk7XG4gIHJldHVybiBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRXcmFwcGVyKHsnY29udGFpbmVyJzogY29udGFpbmVyfSk7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTUgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHBzOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cHM6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHBzOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cHM6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCB7IFBvbHltZXJFbGVtZW50LCBodG1sIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lcic7XG5pbXBvcnQgeyB0aW1lT3V0IH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvYXN5bmMuanMnO1xuaW1wb3J0IHsgRGVib3VuY2VyIH0gZnJvbSAnQHBvbHltZXIvcG9seW1lci9saWIvdXRpbHMvZGVib3VuY2UuanMnO1xuaW1wb3J0IHsgY3JlYXRlQ2hhcnRXcmFwcGVyLCBkYXRhVGFibGUgfSBmcm9tICcuL2xvYWRlci5qcyc7XG5cbmNvbnN0IERFRkFVTFRfRVZFTlRTID0gWydyZWFkeScsICdzZWxlY3QnXTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBuYW1lcyBmb3Igc3VwcG9ydGVkIGNoYXJ0IHR5cGVzLlxuICpcbiAqIGBDaGFydFdyYXBwZXJgIGV4cGVjdHMgYSBjb25zdHJ1Y3RvciBuYW1lIGFuZCBhc3N1bWVzIGBnb29nbGUudmlzdWFsaXphdGlvbmBcbiAqICBhcyB0aGUgZGVmYXVsdCBuYW1lc3BhY2UuXG4gKlxuICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCAoc3RyaW5nfHVuZGVmaW5lZCk+fVxuICovXG5jb25zdCBDSEFSVF9UWVBFUyA9IHtcbiAgJ2FyZWEnOiAnQXJlYUNoYXJ0JyxcbiAgJ2Jhcic6ICdCYXJDaGFydCcsXG4gICdtZC1iYXInOiAnZ29vZ2xlLmNoYXJ0cy5CYXInLFxuICAnYnViYmxlJzogJ0J1YmJsZUNoYXJ0JyxcbiAgJ2NhbGVuZGFyJzogJ0NhbGVuZGFyJyxcbiAgJ2NhbmRsZXN0aWNrJzogJ0NhbmRsZXN0aWNrQ2hhcnQnLFxuICAnY29sdW1uJzogJ0NvbHVtbkNoYXJ0JyxcbiAgJ2NvbWJvJzogJ0NvbWJvQ2hhcnQnLFxuICAnZ2F1Z2UnOiAnR2F1Z2UnLFxuICAnZ2VvJzogJ0dlb0NoYXJ0JyxcbiAgJ2hpc3RvZ3JhbSc6ICdIaXN0b2dyYW0nLFxuICAnbGluZSc6ICdMaW5lQ2hhcnQnLFxuICAnbWQtbGluZSc6ICdnb29nbGUuY2hhcnRzLkxpbmUnLFxuICAnb3JnJzogJ09yZ0NoYXJ0JyxcbiAgJ3BpZSc6ICdQaWVDaGFydCcsXG4gICdzYW5rZXknOiAnU2Fua2V5JyxcbiAgJ3NjYXR0ZXInOiAnU2NhdHRlckNoYXJ0JyxcbiAgJ21kLXNjYXR0ZXInOiAnZ29vZ2xlLmNoYXJ0cy5TY2F0dGVyJyxcbiAgJ3N0ZXBwZWQtYXJlYSc6ICdTdGVwcGVkQXJlYUNoYXJ0JyxcbiAgJ3RhYmxlJzogJ1RhYmxlJyxcbiAgJ3RpbWVsaW5lJzogJ1RpbWVsaW5lJyxcbiAgJ3RyZWVtYXAnOiAnVHJlZU1hcCcsXG4gICd3b3JkdHJlZSc6ICdXb3JkVHJlZScsXG59O1xuXG4vKipcbmBnb29nbGUtY2hhcnRgIGVuY2Fwc3VsYXRlcyBHb29nbGUgQ2hhcnRzIGFzIGEgd2ViIGNvbXBvbmVudCwgYWxsb3dpbmcgeW91IHRvIGVhc2lseSB2aXN1YWxpemVcbmRhdGEuIEZyb20gc2ltcGxlIGxpbmUgY2hhcnRzIHRvIGNvbXBsZXggaGllcmFyY2hpY2FsIHRyZWUgbWFwcywgdGhlIGNoYXJ0IGVsZW1lbnQgcHJvdmlkZXMgYVxubnVtYmVyIG9mIHJlYWR5LXRvLXVzZSBjaGFydCB0eXBlcy5cblxuICAgIDxnb29nbGUtY2hhcnRcbiAgICAgIHR5cGU9J3BpZSdcbiAgICAgIG9wdGlvbnM9J3tcInRpdGxlXCI6IFwiRGlzdHJpYnV0aW9uIG9mIGRheXMgaW4gMjAwMVExXCJ9J1xuICAgICAgY29scz0nW3tcImxhYmVsXCI6XCJNb250aFwiLCBcInR5cGVcIjpcInN0cmluZ1wifSwge1wibGFiZWxcIjpcIkRheXNcIiwgXCJ0eXBlXCI6XCJudW1iZXJcIn1dJ1xuICAgICAgcm93cz0nW1tcIkphblwiLCAzMV0sW1wiRmViXCIsIDI4XSxbXCJNYXJcIiwgMzFdXSc+XG4gICAgPC9nb29nbGUtY2hhcnQ+XG5cbk5vdGU6IGlmIHlvdSdyZSBwYXNzaW5nIEpTT04gYXMgYXR0cmlidXRlcywgc2luZ2xlIHF1b3RlcyBhcmUgbmVjZXNzYXJ5IHRvIGJlIHZhbGlkIEpTT04uXG5TZWUgaHR0cHM6Ly93d3cucG9seW1lci1wcm9qZWN0Lm9yZy8xLjAvZG9jcy9kZXZndWlkZS9wcm9wZXJ0aWVzI2NvbmZpZ3VyaW5nLW9iamVjdC1hbmQtYXJyYXktcHJvcGVydGllcy5cblxuSGVpZ2h0IGFuZCB3aWR0aCBhcmUgc3BlY2lmaWVkIGFzIHN0eWxlIGF0dHJpYnV0ZXM6XG5cbiAgICBnb29nbGUtY2hhcnQge1xuICAgICAgaGVpZ2h0OiAzMDBweDtcbiAgICAgIHdpZHRoOiA1MGVtO1xuICAgIH1cblxuRGF0YSBjYW4gYmUgcHJvdmlkZWQgaW4gb25lIG9mIHRocmVlIHdheXM6XG5cbi0gVmlhIHRoZSBgY29sc2AgYW5kIGByb3dzYCBhdHRyaWJ1dGVzOlxuXG4gICAgICBjb2xzPSdbe1wibGFiZWxcIjpcIk10aFwiLCBcInR5cGVcIjpcInN0cmluZ1wifSwge1wibGFiZWxcIjpcIkRheXNcIiwgXCJ0eXBlXCI6XCJudW1iZXJcIn1dJ1xuICAgICAgcm93cz0nW1tcIkphblwiLCAzMV0sW1wiRmViXCIsIDI4XSxbXCJNYXJcIiwgMzFdXSdcblxuLSBWaWEgdGhlIGBkYXRhYCBhdHRyaWJ1dGUsIHBhc3NpbmcgaW4gdGhlIGRhdGEgZGlyZWN0bHk6XG5cbiAgICAgIGRhdGE9J1tbXCJNb250aFwiLCBcIkRheXNcIl0sIFtcIkphblwiLCAzMV0sIFtcIkZlYlwiLCAyOF0sIFtcIk1hclwiLCAzMV1dJ1xuXG4tIFZpYSB0aGUgYGRhdGFgIGF0dHJpYnV0ZSwgcGFzc2luZyBpbiB0aGUgVVJMIHRvIGEgcmVzb3VyY2UgY29udGFpbmluZyB0aGVcbiAgZGF0YSwgaW4gSlNPTiBmb3JtYXQ6XG5cbiAgICAgIGRhdGE9J2h0dHA6Ly9leGFtcGxlLmNvbS9jaGFydC1kYXRhLmpzb24nXG5cbi0gVmlhIHRoZSBgZGF0YWAgYXR0cmlidXRlLCBwYXNzaW5nIGluIGEgR29vZ2xlIERhdGFUYWJsZSBvYmplY3Q6XG5cbiAgICAgIGRhdGE9J3t7ZGF0YVRhYmxlfX0nXG5cbi0gVmlhIHRoZSBgdmlld2AgYXR0cmlidXRlLCBwYXNzaW5nIGluIGEgR29vZ2xlIERhdGFWaWV3IG9iamVjdDpcblxuICAgICAgdmlldz0ne3tkYXRhVmlld319J1xuXG5Zb3UgY2FuIGRpc3BsYXkgdGhlIGNoYXJ0cyBpbiBsb2NhbGVzIG90aGVyIHRoYW4gXCJlblwiIGJ5IHNldHRpbmcgdGhlIGBsYW5nYCBhdHRyaWJ1dGVcbm9uIHRoZSBgaHRtbGAgdGFnIG9mIHlvdXIgZG9jdW1lbnQuXG5cbiAgICA8aHRtbCBsYW5nPVwiamFcIj5cblxuQGRlbW8gZGVtby9pbmRleC5odG1sXG4qL1xuZXhwb3J0IGNsYXNzIEdvb2dsZUNoYXJ0IGV4dGVuZHMgUG9seW1lckVsZW1lbnQge1xuICBzdGF0aWMgZ2V0IHRlbXBsYXRlKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPHN0eWxlPlxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuICAgICAgICAgIGRpc3BsYXk6IC1tcy1mbGV4O1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgd2lkdGg6IDQwMHB4O1xuICAgICAgICAgIGhlaWdodDogMzAwcHg7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdChbaGlkZGVuXSkge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdChbdHlwZT1cImdhdWdlXCJdKSB7XG4gICAgICAgICAgd2lkdGg6IDMwMHB4O1xuICAgICAgICAgIGhlaWdodDogMzAwcHg7XG4gICAgICAgIH1cblxuICAgICAgICAjY2hhcnRkaXYge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogV29ya2Fyb3VuZCBmb3Igc2xvdyBpbml0aWFsIHJlYWR5IGV2ZW50IGZvciB0YWJsZXMuICovXG4gICAgICAgIC5nb29nbGUtdmlzdWFsaXphdGlvbi10YWJsZS1sb2FkdGVzdCB7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA2cHg7XG4gICAgICAgIH1cbiAgICAgIDwvc3R5bGU+XG4gICAgICA8ZGl2IGlkPVwic3R5bGVzXCI+PC9kaXY+XG4gICAgICA8ZGl2IGlkPVwiY2hhcnRkaXZcIj48L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIGFmdGVyIGEgY2hhcnQgdHlwZSBpcyByZW5kZXJlZCBhbmQgcmVhZHkgZm9yIGludGVyYWN0aW9uLlxuICAgKlxuICAgKiBAZXZlbnQgZ29vZ2xlLWNoYXJ0LXJlYWR5XG4gICAqIEBwYXJhbSB7e2NoYXJ0OiAhT2JqZWN0fX0gVGhlIHJhdyBjaGFydCBvYmplY3QuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuIHRoZSB1c2VyIG1ha2VzIGEgc2VsZWN0aW9uIGluIHRoZSBjaGFydC5cbiAgICpcbiAgICogQGV2ZW50IGdvb2dsZS1jaGFydC1zZWxlY3RcbiAgICogQHBhcmFtIHt7Y2hhcnQ6ICFPYmplY3R9fSBUaGUgcmF3IGNoYXJ0IG9iamVjdC5cbiAgICovXG5cbiAgLyoqIFBvbHltZXIgZWxlbWVudCBwcm9wZXJ0aWVzLiAqL1xuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBvYnNlcnZlcjogR29vZ2xlQ2hhcnQucHJvdG90eXBlLl90eXBlQ2hhbmdlZCxcbiAgICAgIH0sXG4gICAgICBldmVudHM6IEFycmF5LFxuICAgICAgb3B0aW9uczogT2JqZWN0LFxuICAgICAgY29sczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgb2JzZXJ2ZXI6IEdvb2dsZUNoYXJ0LnByb3RvdHlwZS5fcm93c09yQ29sdW1uc0NoYW5nZWQsXG4gICAgICB9LFxuICAgICAgcm93czoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgb2JzZXJ2ZXI6IEdvb2dsZUNoYXJ0LnByb3RvdHlwZS5fcm93c09yQ29sdW1uc0NoYW5nZWQsXG4gICAgICB9LFxuICAgICAgZGF0YToge1xuICAgICAgICAvLyBOb3RlOiB0eXBlOiBTdHJpbmcsIGJlY2F1c2UgaXQgaXMgcGFyc2VkIG1hbnVhbGx5IGluIHRoZSBvYnNlcnZlci5cbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBvYnNlcnZlcjogR29vZ2xlQ2hhcnQucHJvdG90eXBlLl9kYXRhQ2hhbmdlZCxcbiAgICAgIH0sXG4gICAgICB2aWV3OiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgb2JzZXJ2ZXI6IEdvb2dsZUNoYXJ0LnByb3RvdHlwZS5fdmlld0NoYW5nZWQsXG4gICAgICB9LFxuICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICBub3RpZnk6IHRydWUsXG4gICAgICAgIG9ic2VydmVyOiBHb29nbGVDaGFydC5wcm90b3R5cGUuX3NldFNlbGVjdGlvbixcbiAgICAgIH0sXG4gICAgICBkcmF3bjoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBfZGF0YTogT2JqZWN0LFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVycygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ3JlZHJhdyhfZGF0YSwgb3B0aW9ucy4qKScsXG4gICAgXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0eXBlIG9mIHRoZSBjaGFydC5cbiAgICAgKlxuICAgICAqIFNob3VsZCBiZSBvbmUgb2Y6XG4gICAgICogLSBgYXJlYWBcbiAgICAgKiAtIGAobWQtKWJhcmBcbiAgICAgKiAtIGBidWJibGVgXG4gICAgICogLSBgY2FsZW5kYXJgXG4gICAgICogLSBgY2FuZGxlc3RpY2tgXG4gICAgICogLSBgY29sdW1uYFxuICAgICAqIC0gYGNvbWJvYFxuICAgICAqIC0gYGdhdWdlYFxuICAgICAqIC0gYGdlb2BcbiAgICAgKiAtIGBoaXN0b2dyYW1gXG4gICAgICogLSBgKG1kLSlsaW5lYFxuICAgICAqIC0gYG9yZ2BcbiAgICAgKiAtIGBwaWVgXG4gICAgICogLSBgc2Fua2V5YFxuICAgICAqIC0gYChtZC0pc2NhdHRlcmBcbiAgICAgKiAtIGBzdGVwcGVkLWFyZWFgXG4gICAgICogLSBgdGFibGVgXG4gICAgICogLSBgdGltZWxpbmVgXG4gICAgICogLSBgdHJlZW1hcGBcbiAgICAgKiAtIGB3b3JkdHJlZWBcbiAgICAgKlxuICAgICAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly9nb29nbGUtZGV2ZWxvcGVycy5hcHBzcG90LmNvbS9jaGFydC9pbnRlcmFjdGl2ZS9kb2NzL2dhbGxlcnlcIj5Hb29nbGUgVmlzdWFsaXphdGlvbiBBUEkgcmVmZXJlbmNlIChDaGFydCBHYWxsZXJ5KTwvYT5cbiAgICAgKiBmb3IgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gJ2NvbHVtbic7XG5cbiAgICAvKipcbiAgICAgKiBFbnVtZXJhdGVzIHRoZSBjaGFydCBldmVudHMgdGhhdCBzaG91bGQgYmUgZmlyZWQuXG4gICAgICpcbiAgICAgKiBDaGFydHMgc3VwcG9ydCBhIHZhcmlldHkgb2YgZXZlbnRzLiBCeSBkZWZhdWx0LCB0aGlzIGVsZW1lbnQgb25seVxuICAgICAqIGZpcmVzIG9uIGByZWFkeWAgYW5kIGBzZWxlY3RgLiBJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBvZlxuICAgICAqIG90aGVyIGNoYXJ0IGV2ZW50cywgdXNlIHRoaXMgcHJvcGVydHkgdG8gbGlzdCB0aGVtLlxuICAgICAqIEV2ZW50cyBgcmVhZHlgIGFuZCBgc2VsZWN0YCBhcmUgYWx3YXlzIGZpcmVkLlxuICAgICAqXG4gICAgICogQ2hhbmdlcyB0byB0aGlzIHByb3BlcnR5IGFyZSBfbm90XyBvYnNlcnZlZC4gRXZlbnRzIGFyZSBhdHRhY2hlZCBvbmx5XG4gICAgICogYXQgY2hhcnQgY29uc3RydWN0aW9uIHRpbWUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7IUFycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5ldmVudHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG9wdGlvbnMgZm9yIHRoZSBjaGFydC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogPHByZT57XG4gICAgICogICB0aXRsZTogXCJDaGFydCB0aXRsZSBnb2VzIGhlcmVcIixcbiAgICAgKiAgIGhBeGlzOiB7dGl0bGU6IFwiQ2F0ZWdvcmllc1wifSxcbiAgICAgKiAgIHZBeGlzOiB7dGl0bGU6IFwiVmFsdWVzXCIsIG1pblZhbHVlOiAwLCBtYXhWYWx1ZTogMn0sXG4gICAgICogICBsZWdlbmQ6IFwibm9uZVwiXG4gICAgICogfTs8L3ByZT5cbiAgICAgKiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vZ29vZ2xlLWRldmVsb3BlcnMuYXBwc3BvdC5jb20vY2hhcnQvaW50ZXJhY3RpdmUvZG9jcy9nYWxsZXJ5XCI+R29vZ2xlIFZpc3VhbGl6YXRpb24gQVBJIHJlZmVyZW5jZSAoQ2hhcnQgR2FsbGVyeSk8L2E+XG4gICAgICogZm9yIHRoZSBvcHRpb25zIGF2YWlsYWJsZSB0byBlYWNoIGNoYXJ0IHR5cGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHByb3BlcnR5IGlzIG9ic2VydmVkIHZpYSBhIGRlZXAgb2JqZWN0IG9ic2VydmVyLlxuICAgICAqIElmIHlvdSB3b3VsZCBsaWtlIHRvIG1ha2UgY2hhbmdlcyB0byBhIHN1Yi1wcm9wZXJ0eSwgYmUgc3VyZSB0byB1c2UgdGhlXG4gICAgICogUG9seW1lciBtZXRob2QgYHNldGA6IGBnb29nbGVDaGFydC5zZXQoJ29wdGlvbnMudkF4aXMubG9nU2NhbGUnLCB0cnVlKWBcbiAgICAgKiAoTm90ZTogTWlzc2luZyBwYXJlbnQgcHJvcGVydGllcyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgY3JlYXRlZC4pXG4gICAgICpcbiAgICAgKiBAdHlwZSB7IU9iamVjdHx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0YSBjb2x1bW5zIGZvciB0aGlzIG9iamVjdC5cbiAgICAgKlxuICAgICAqIFdoZW4gc3BlY2lmeWluZyBkYXRhIHdpdGggYGNvbHNgIHlvdSBtdXN0IGFsc28gc3BlY2lmeSBgcm93c2AsIGFuZFxuICAgICAqIG5vdCBzcGVjaWZ5IGBkYXRhYC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogPHByZT5be2xhYmVsOiBcIkNhdGVnb3JpZXNcIiwgdHlwZTogXCJzdHJpbmdcIn0sXG4gICAgICogIHtsYWJlbDogXCJWYWx1ZVwiLCB0eXBlOiBcIm51bWJlclwifV08L3ByZT5cbiAgICAgKiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vZ29vZ2xlLWRldmVsb3BlcnMuYXBwc3BvdC5jb20vY2hhcnQvaW50ZXJhY3RpdmUvZG9jcy9yZWZlcmVuY2UjRGF0YVRhYmxlX2FkZENvbHVtblwiPkdvb2dsZSBWaXN1YWxpemF0aW9uIEFQSSByZWZlcmVuY2UgKGFkZENvbHVtbik8L2E+XG4gICAgICogZm9yIGNvbHVtbiBkZWZpbml0aW9uIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHshQXJyYXl8dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuY29scyA9IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRhdGEgcm93cyBmb3IgdGhpcyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBXaGVuIHNwZWNpZnlpbmcgZGF0YSB3aXRoIGByb3dzYCB5b3UgbXVzdCBhbHNvIHNwZWNpZnkgYGNvbHNgLCBhbmRcbiAgICAgKiBub3Qgc3BlY2lmeSBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIDxwcmU+W1tcIkNhdGVnb3J5IDFcIiwgMS4wXSxcbiAgICAgKiAgW1wiQ2F0ZWdvcnkgMlwiLCAxLjFdXTwvcHJlPlxuICAgICAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly9nb29nbGUtZGV2ZWxvcGVycy5hcHBzcG90LmNvbS9jaGFydC9pbnRlcmFjdGl2ZS9kb2NzL3JlZmVyZW5jZSNhZGRyb3dcIj5Hb29nbGUgVmlzdWFsaXphdGlvbiBBUEkgcmVmZXJlbmNlIChhZGRSb3cpPC9hPlxuICAgICAqIGZvciByb3cgZm9ybWF0LlxuICAgICAqXG4gICAgICogQHR5cGUgeyFBcnJheTwhQXJyYXk+fHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLnJvd3MgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbnRpcmUgZGF0YXNldCBmb3IgdGhpcyBvYmplY3QuXG4gICAgICogQ2FuIGJlIHVzZWQgdG8gcHJvdmlkZSB0aGUgZGF0YSBkaXJlY3RseSwgb3IgdG8gcHJvdmlkZSBhIFVSTCBmcm9tXG4gICAgICogd2hpY2ggdG8gcmVxdWVzdCB0aGUgZGF0YS5cbiAgICAgKlxuICAgICAqIFRoZSBkYXRhIGZvcm1hdCBjYW4gYmUgYSB0d28tZGltZW5zaW9uYWwgYXJyYXkgb3IgdGhlIERhdGFUYWJsZSBmb3JtYXRcbiAgICAgKiBleHBlY3RlZCBieSBHb29nbGUgQ2hhcnRzLlxuICAgICAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly9nb29nbGUtZGV2ZWxvcGVycy5hcHBzcG90LmNvbS9jaGFydC9pbnRlcmFjdGl2ZS9kb2NzL3JlZmVyZW5jZSNEYXRhVGFibGVcIj5Hb29nbGUgVmlzdWFsaXphdGlvbiBBUEkgcmVmZXJlbmNlIChEYXRhVGFibGUgY29uc3RydWN0b3IpPC9hPlxuICAgICAqIGZvciBkYXRhIHRhYmxlIGZvcm1hdCBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiBzcGVjaWZ5aW5nIGRhdGEgd2l0aCBgZGF0YWAgeW91IG11c3Qgbm90IHNwZWNpZnkgYGNvbHNgIG9yIGByb3dzYC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogPHByZT5bW1wiQ2F0ZWdvcmllc1wiLCBcIlZhbHVlXCJdLFxuICAgICAqICBbXCJDYXRlZ29yeSAxXCIsIDEuMF0sXG4gICAgICogIFtcIkNhdGVnb3J5IDJcIiwgMS4xXV08L3ByZT5cbiAgICAgKlxuICAgICAqIEB0eXBlIHshZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVRhYmxlfFxuICAgICAqICAgICAgICAhQXJyYXk8IUFycmF5PnxcbiAgICAgKiAgICAgICAge2NvbHM6ICFBcnJheSwgcm93czogKCFBcnJheTwhQXJyYXk+fHVuZGVmaW5lZCl9fFxuICAgICAqICAgICAgICBzdHJpbmd8XG4gICAgICogICAgICAgIHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLmRhdGEgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbnRpcmUgZGF0YXNldCBmb3IgdGhpcyBvYmplY3QgdG8gYSBHb29nbGUgRGF0YVZpZXcuXG4gICAgICpcbiAgICAgKiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vZ29vZ2xlLWRldmVsb3BlcnMuYXBwc3BvdC5jb20vY2hhcnQvaW50ZXJhY3RpdmUvZG9jcy9yZWZlcmVuY2UjZGF0YXZpZXctY2xhc3NcIj5Hb29nbGUgVmlzdWFsaXphdGlvbiBBUEkgcmVmZXJlbmNlIChEYXRhVmlldyk8L2E+XG4gICAgICogZm9yIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHNwZWNpZnlpbmcgZGF0YSB3aXRoIGB2aWV3YCB5b3UgbXVzdCBub3Qgc3BlY2lmeSBgZGF0YWAsIGBjb2xzYCBvciBgcm93c2AuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7IWdvb2dsZS52aXN1YWxpemF0aW9uLkRhdGFWaWV3fHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLnZpZXcgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RlZCBkYXRhcG9pbnQocykgaW4gdGhlIGNoYXJ0LlxuICAgICAqXG4gICAgICogQW4gYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCB3aXRoIGEgbnVtZXJpYyByb3cgYW5kL29yIGNvbHVtbiBwcm9wZXJ0eS5cbiAgICAgKiBgcm93YCBhbmQgYGNvbHVtbmAgYXJlIHRoZSB6ZXJvLWJhc2VkIHJvdyBvciBjb2x1bW4gbnVtYmVyIG9mIGFuIGl0ZW1cbiAgICAgKiBpbiB0aGUgZGF0YSB0YWJsZSB0byBzZWxlY3QuXG4gICAgICpcbiAgICAgKiBUbyBzZWxlY3QgYSB3aG9sZSBjb2x1bW4sIHNldCByb3cgdG8gbnVsbDtcbiAgICAgKiB0byBzZWxlY3QgYSB3aG9sZSByb3csIHNldCBjb2x1bW4gdG8gbnVsbC5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogPHByZT5cbiAgICAgKiAgIFt7cm93OjAsY29sdW1uOjF9LCB7cm93OjEsIGNvbHVtbjpudWxsfV1cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEB0eXBlIHshQXJyYXl8dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuc2VsZWN0aW9uID0gdW5kZWZpbmVkO1xuXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjaGFydCBpcyBjdXJyZW50bHkgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmRyYXduO1xuICAgIHRoaXMuX3NldERyYXduKGZhbHNlKTtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGRhdGEgZGlzcGxheWVkIG9uIHRoZSBjaGFydC5cbiAgICAgKlxuICAgICAqIFRoaXMgcHJvcGVydHkgaGFzIHByb3RlY3RlZCB2aXNpYmlsaXR5IGJlY2F1c2UgaXQgaXMgdXNlZCBmcm9tIGFuIG9ic2VydmVyLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZCB7IWdvb2dsZS52aXN1YWxpemF0aW9uLkRhdGFUYWJsZXxcbiAgICAgKiAgICAgICAgICAgICAhZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGF0YVZpZXd8XG4gICAgICogICAgICAgICAgICAgdW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuX2RhdGEgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBjaGFydCBvYmplY3QuXG4gICAgICogQHByaXZhdGUgeyFnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydFdyYXBwZXJ8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLl9jaGFydFdyYXBwZXIgPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/RGVib3VuY2VyfSAqL1xuICAgIHRoaXMuX3JlZHJhd0RlYm91bmNlciA9IG51bGw7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHJlYWR5KCkge1xuICAgIHN1cGVyLnJlYWR5KCk7XG4gICAgY3JlYXRlQ2hhcnRXcmFwcGVyKHRoaXMuJC5jaGFydGRpdikudGhlbigoY2hhcnRXcmFwcGVyKSA9PiB7XG4gICAgICB0aGlzLl9jaGFydFdyYXBwZXIgPSBjaGFydFdyYXBwZXI7XG4gICAgICB0aGlzLl90eXBlQ2hhbmdlZCgpO1xuICAgICAgZ29vZ2xlLnZpc3VhbGl6YXRpb24uZXZlbnRzLmFkZExpc3RlbmVyKGNoYXJ0V3JhcHBlciwgJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgICB0aGlzLl9zZXREcmF3bih0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgZ29vZ2xlLnZpc3VhbGl6YXRpb24uZXZlbnRzLmFkZExpc3RlbmVyKGNoYXJ0V3JhcHBlciwgJ3NlbGVjdCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSBjaGFydFdyYXBwZXIuZ2V0Q2hhcnQoKS5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fcHJvcGFnYXRlRXZlbnRzKERFRkFVTFRfRVZFTlRTLCBjaGFydFdyYXBwZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIFJlYWN0cyB0byBjaGFydCB0eXBlIGNoYW5nZS4gKi9cbiAgX3R5cGVDaGFuZ2VkKCkge1xuICAgIGlmICh0aGlzLl9jaGFydFdyYXBwZXIgPT0gbnVsbCkgcmV0dXJuO1xuICAgIHRoaXMuX2NoYXJ0V3JhcHBlci5zZXRDaGFydFR5cGUoQ0hBUlRfVFlQRVNbdGhpcy50eXBlXSB8fCB0aGlzLnR5cGUpO1xuICAgIGNvbnN0IGxhc3RDaGFydCA9IHRoaXMuX2NoYXJ0V3JhcHBlci5nZXRDaGFydCgpO1xuICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmV2ZW50cy5hZGRPbmVUaW1lTGlzdGVuZXIodGhpcy5fY2hhcnRXcmFwcGVyLCAncmVhZHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBjaGFydCA9IHRoaXMuX2NoYXJ0V3JhcHBlci5nZXRDaGFydCgpO1xuICAgICAgaWYgKGNoYXJ0ICE9PSBsYXN0Q2hhcnQpIHtcbiAgICAgICAgdGhpcy5fcHJvcGFnYXRlRXZlbnRzKHRoaXMuZXZlbnRzLmZpbHRlcigoZXZlbnROYW1lKSA9PiAhREVGQVVMVF9FVkVOVFMuaW5jbHVkZXMoZXZlbnROYW1lKSksIGNoYXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy4kLnN0eWxlcy5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fbG9jYWxpemVHbG9iYWxTdHlsZXNoZWV0cygpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuX3NldFNlbGVjdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucmVkcmF3KCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBsaXN0ZW5lcnMgdG8gcHJvcGFnYXRlIGV2ZW50cyBmcm9tIHRoZSBjaGFydC5cbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gZXZlbnRzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvcGFnYXRlRXZlbnRzKGV2ZW50cywgZXZlbnRUYXJnZXQpIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50TmFtZSBvZiBldmVudHMpIHtcbiAgICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmV2ZW50cy5hZGRMaXN0ZW5lcihldmVudFRhcmdldCwgZXZlbnROYW1lLCAoZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChgZ29vZ2xlLWNoYXJ0LSR7ZXZlbnROYW1lfWAsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgY2hhcnQ6IHRoaXMuX2NoYXJ0V3JhcHBlci5nZXRDaGFydCgpLFxuICAgICAgICAgICAgZGF0YTogZXZlbnQsXG4gICAgICAgICAgfX0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBTZXRzIHRoZSBzZWxlY3RpdG9uIG9uIHRoZSBjaGFydC4gKi9cbiAgX3NldFNlbGVjdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2hhcnRXcmFwcGVyID09IG51bGwpIHJldHVybjtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuX2NoYXJ0V3JhcHBlci5nZXRDaGFydCgpO1xuICAgIGlmIChjaGFydCA9PSBudWxsKSByZXR1cm47XG4gICAgaWYgKGNoYXJ0LnNldFNlbGVjdGlvbikge1xuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgdGltZWxpbmUgY2hhcnQgd2hpY2ggZW1pdHMgc2VsZWN0IGV2ZW50IG9uIHNldFNlbGVjdGlvbi5cbiAgICAgIC8vIFNlZSBpc3N1ZSAjMjU2LlxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3RpbWVsaW5lJykge1xuICAgICAgICBjb25zdCBvbGRTZWxlY3Rpb24gPSBKU09OLnN0cmluZ2lmeShjaGFydC5nZXRTZWxlY3Rpb24oKSk7XG4gICAgICAgIGNvbnN0IG5ld1NlbGVjdGlvbiA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc2VsZWN0aW9uKTtcbiAgICAgICAgaWYgKG5ld1NlbGVjdGlvbiA9PT0gb2xkU2VsZWN0aW9uKSByZXR1cm47XG4gICAgICB9XG4gICAgICBjaGFydC5zZXRTZWxlY3Rpb24odGhpcy5zZWxlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWRyYXdzIHRoZSBjaGFydC5cbiAgICpcbiAgICogQ2FsbGVkIGF1dG9tYXRpY2FsbHkgd2hlbiBkYXRhL3R5cGUvc2VsZWN0aW9uIGF0dHJpYnV0ZXMgY2hhbmdlLlxuICAgKiBDYWxsIG1hbnVhbGx5IHRvIGhhbmRsZSB2aWV3IHVwZGF0ZXMsIHBhZ2UgcmVzaXplcywgZXRjLlxuICAgKi9cbiAgcmVkcmF3KCkge1xuICAgIGlmICh0aGlzLl9jaGFydFdyYXBwZXIgPT0gbnVsbCB8fCB0aGlzLl9kYXRhID09IG51bGwpIHJldHVybjtcbiAgICB0aGlzLl9jaGFydFdyYXBwZXIuc2V0RGF0YVRhYmxlKHRoaXMuX2RhdGEpO1xuICAgIHRoaXMuX2NoYXJ0V3JhcHBlci5zZXRPcHRpb25zKHRoaXMub3B0aW9ucyB8fCB7fSk7XG5cbiAgICB0aGlzLl9zZXREcmF3bihmYWxzZSk7XG4gICAgdGhpcy5fcmVkcmF3RGVib3VuY2VyID0gRGVib3VuY2VyLmRlYm91bmNlKHRoaXMuX3JlZHJhd0RlYm91bmNlciwgdGltZU91dC5hZnRlcig1KSwgKCkgPT4ge1xuICAgICAgdGhpcy5fY2hhcnRXcmFwcGVyLmRyYXcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjaGFydCBzZXJpYWxpemVkIGFzIGFuIGltYWdlIFVSSS5cbiAgICpcbiAgICogQ2FsbCB0aGlzIGFmdGVyIHRoZSBjaGFydCBpcyBkcmF3biAoZ29vZ2xlLWNoYXJ0LXJlYWR5IGV2ZW50KS5cbiAgICpcbiAgICogQHJldHVybiB7P3N0cmluZ30gUmV0dXJucyBpbWFnZSBVUkkuXG4gICAqL1xuICBnZXQgaW1hZ2VVUkkoKSB7XG4gICAgaWYgKHRoaXMuX2NoYXJ0V3JhcHBlciA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuX2NoYXJ0V3JhcHBlci5nZXRDaGFydCgpO1xuICAgIHJldHVybiBjaGFydCAmJiBjaGFydC5nZXRJbWFnZVVSSSgpO1xuICB9XG5cbiAgLyoqIEhhbmRsZXMgY2hhbmdlcyB0byB0aGUgYHZpZXdgIGF0dHJpYnV0ZS4gKi9cbiAgX3ZpZXdDaGFuZ2VkKCkge1xuICAgIGlmICghdGhpcy52aWV3KSB7IHJldHVybjsgfVxuICAgIHRoaXMuX2RhdGEgPSB0aGlzLnZpZXc7XG4gIH1cblxuICAvKiogSGFuZGxlcyBjaGFuZ2VzIHRvIHRoZSByb3dzICYgY29sdW1ucyBhdHRyaWJ1dGVzLiAqL1xuICBhc3luYyBfcm93c09yQ29sdW1uc0NoYW5nZWQoKSB7XG4gICAgY29uc3Qge3Jvd3MsIGNvbHN9ID0gdGhpcztcbiAgICBpZiAoIXJvd3MgfHwgIWNvbHMpIHJldHVybjtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZHQgPSBhd2FpdCBkYXRhVGFibGUoe2NvbHN9KTtcbiAgICAgIGR0LmFkZFJvd3Mocm93cyk7XG4gICAgICB0aGlzLl9kYXRhID0gZHQ7XG4gICAgfSBjYXRjaCAocmVhc29uKSB7XG4gICAgICB0aGlzLiQuY2hhcnRkaXYudGV4dENvbnRlbnQgPSByZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgY2hhbmdlcyB0byB0aGUgYGRhdGFgIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtcbiAgICogICAgICFnb29nbGUudmlzdWFsaXphdGlvbi5EYXRhVGFibGV8XG4gICAqICAgICAhQXJyYXk8IUFycmF5PnxcbiAgICogICAgIHtjb2xzOiAhQXJyYXksIHJvd3M6ICghQXJyYXk8IUFycmF5Pnx1bmRlZmluZWQpfXxcbiAgICogICAgIHN0cmluZ3xcbiAgICogICAgIHVuZGVmaW5lZH0gZGF0YSBUaGUgbmV3IGRhdGEgdmFsdWVcbiAgICovXG4gIF9kYXRhQ2hhbmdlZChkYXRhKSB7XG4gICAgdmFyIGRhdGFQcm9taXNlO1xuICAgIGlmICghZGF0YSkgeyByZXR1cm47IH1cblxuICAgIHZhciBpc1N0cmluZyA9IGZhbHNlO1xuXG4gICAgLy8gUG9seW1lciAyIHdpbGwgbm90IGNhbGwgb2JzZXJ2ZXIgaWYgdHlwZTpPYmplY3QgaXMgc2V0IGFuZCBmYWlscywgc29cbiAgICAvLyB3ZSBtdXN0IHBhcnNlIHRoZSBzdHJpbmcgb3Vyc2VsdmVzLlxuICAgIHRyeSB7XG4gICAgICAvKipcbiAgICAgICAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gYEpTT04ucGFyc2VgIGV4cGVjdHMgYSBzdHJpbmcgYnV0IGhlcmUgaXQgdHJpZXMgdG8gZGVzZXJpYWxpemVcbiAgICAgICAqIHRoZSB2YWx1ZSBvZiB0aGUgYGRhdGFgIHByb3BlcnR5IHdoaWNoIG1pZ2h0IGJlIGEgc2VyaWFsaXplZCBhcnJheS5cbiAgICAgICAqL1xuICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaXNTdHJpbmcgPSB0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJyB8fCBkYXRhIGluc3RhbmNlb2YgU3RyaW5nO1xuICAgIH1cblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgLy8gTG9hZCBkYXRhIGFzeW5jaHJvbm91c2x5LCBmcm9tIGV4dGVybmFsIFVSTC5cbiAgICAgIGRhdGFQcm9taXNlID0gZmV0Y2goZGF0YSkudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERhdGEgaXMgYWxsIHJlYWR5IHRvIGJlIHByb2Nlc3NlZC5cbiAgICAgIGRhdGFQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgIH1cbiAgICBkYXRhUHJvbWlzZS50aGVuKGRhdGFUYWJsZSkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBnbG9iYWwgZG9jdW1lbnQgaGVhZCBmb3IgZ29vZ2xlIGNoYXJ0cyBsaW5rI2xvYWQtY3NzLSogYW5kIGNsb25lc1xuICAgKiB0aGVtIGludG8gdGhlIGxvY2FsIHJvb3QncyBkaXYjc3R5bGVzIGVsZW1lbnQgZm9yIHNoYWRvdyBkb20gc3VwcG9ydC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9sb2NhbGl6ZUdsb2JhbFN0eWxlc2hlZXRzKCkge1xuICAgIC8vIGdldCBhbGwgZ2NoYXJ0IHN0eWxlc2hlZXRzXG4gICAgdmFyIHN0eWxlc2hlZXRzID0gZG9jdW1lbnQuaGVhZFxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdW3R5cGU9XCJ0ZXh0L2Nzc1wiXScpO1xuXG4gICAgdmFyIHN0eWxlc2hlZXRzQXJyYXkgPSBBcnJheS5mcm9tKHN0eWxlc2hlZXRzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzaGVldHNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0TGlua0VsID0gc3R5bGVzaGVldHNBcnJheVtpXTtcbiAgICAgIHZhciBpc0djaGFydFN0eWxlc2hlZXQgPSBzaGVldExpbmtFbC5pZC5pbmRleE9mKCdsb2FkLWNzcy0nKSA9PSAwO1xuXG4gICAgICBpZiAoaXNHY2hhcnRTdHlsZXNoZWV0KSB7XG4gICAgICAgIC8vIGNsb25lIG5lY2Vzc2FyeSBzdHlsZXNoZWV0IGF0dHJpYnV0ZXNcbiAgICAgICAgdmFyIGNsb25lZExpbmtFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgICAgY2xvbmVkTGlua0VsLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcbiAgICAgICAgY2xvbmVkTGlua0VsLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgICAgICBjbG9uZWRMaW5rRWwuc2V0QXR0cmlidXRlKCdocmVmJywgc2hlZXRMaW5rRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpO1xuXG4gICAgICAgIHRoaXMuJC5zdHlsZXMuYXBwZW5kQ2hpbGQoY2xvbmVkTGlua0VsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdnb29nbGUtY2hhcnQnLCBHb29nbGVDaGFydCk7XG4iLCJpbXBvcnQge2h0bWwsIGRlZmluZSwgcHJvcGVydHl9IGZyb20gJ2h5YnJpZHMnXG5pbXBvcnQgJ0Bnb29nbGUtd2ViLWNvbXBvbmVudHMvZ29vZ2xlLWNoYXJ0J1xuXG5zZXJ2ZXJzID1cbiAgICAnU3QuIExvdWlzJzogJzIxNi4xMTkuMjE0LjIwOSdcbiAgICAnS2Fuc2FzJzogJzIxNi4xMTkuMjEzLjIwOSdcbiAgICAnUHVyY2hhc2UnOiAnMjE2LjExOS4yMTUuMjA5J1xuICAgICdCcnVzc2Vscyc6ICcxODUuOTYuMTM3LjIwOSdcbiAgICAnU2luZ2Fwb3JlJzogJzU4LjE4NS4xNzEuMTc3J1xuICAgICdTeWRuZXknOiAnMTE5LjIyNS4xMTQuMzQnXG5zZXJ2ZXJJbnRlcnZhbCA9IDNcbnNlY29uZHMgPSAxODBcbm9wdGlvbnMgPVxuICAgIHRpdGxlOiBcIk1DIFZQTiBTZXJ2ZXIgU3BlZWQgVGVzdCBieSBTYW11ZWxcXG4gKExvd2VyIGlzIGJldHRlciBpbiBtcylcIlxuICAgIGhBeGlzOiBmb3JtYXQ6ICdoOm06cydcblxuc2VydmVyU3RhdHVzID0geyB9ICNpcDp0aW1lXG5iZXN0U2VydmVyID0gJydcbnNlcnZlclRpbWUgPSAoc2VydmVyKS0+XG4gICAgdCA9IG5ldyBEYXRlKClcbiAgICB0cnlcbiAgICAgICAgYXdhaXQgZmV0Y2ggXCJodHRwczovLyN7c2VydmVyfVwiXG4gICAgY2F0Y2ggZVxuICAgICAgICBlXG4gICAgdCA9IG5ldyBEYXRlKCkgLSB0XG4gICAgaWYgdCA8IE1hdGgubWluKC4uLk9iamVjdC52YWx1ZXMgc2VydmVyU3RhdHVzKVxuICAgICAgICBiZXN0U2VydmVyID0gbmFtZSBmb3IgbmFtZSwgaXAgb2Ygc2VydmVycyB3aGVuIGlwPT1zZXJ2ZXJcbiAgICBzZXJ2ZXJTdGF0dXNbc2VydmVyXSA9IHRcbiAgICBzZXRUaW1lb3V0ICgtPnNlcnZlclRpbWUgc2VydmVyKSwgc2VydmVySW50ZXJ2YWwqMTAwMFxuZm9yIG5hbWUsc2VydmVyIG9mIHNlcnZlcnNcbiAgICBzZXJ2ZXJTdGF0dXNbc2VydmVyXSA9IDBcbiAgICBzZXJ2ZXJUaW1lIHNlcnZlclxuXG5kZWZpbmUgJ21jLXZwbicsIGRvIC0+XG4gICAgZGF0YTogY29ubmVjdDogKGUpLT5cbiAgICAgICAgZGF0YSA9IFsgWycnXS5jb25jYXQoT2JqZWN0LmtleXMoc2VydmVycykpIF1cbiAgICAgICAgcmVkcmF3ID0gLT5cbiAgICAgICAgICAgIHN0YXR1cyA9IFtuZXcgRGF0ZSgpXS5jb25jYXQgT2JqZWN0LnZhbHVlcyhzZXJ2ZXJTdGF0dXMpXG4gICAgICAgICAgICBkYXRhLnNwbGljZSAxLCAxIGlmIGRhdGEubGVuZ3RoID4gc2Vjb25kcy0xXG4gICAgICAgICAgICBkYXRhLnB1c2ggc3RhdHVzXG4gICAgICAgICAgICBlLmRhdGEgPSBkYXRhLnNsaWNlKClcbiAgICAgICAgc2V0SW50ZXJ2YWwgcmVkcmF3LCAxMDAwXG4gICAgcmVuZGVyOiAoZSktPiBodG1sXCJcIlwiXG4gICAgICAgIDxnb29nbGUtY2hhcnQgdHlwZT0nbGluZScgb3B0aW9ucz0nI3tvcHRpb25zfScgZGF0YT0nI3tlLmRhdGF9Jz5cbiAgICAgICAgPC9nb29nbGUtY2hhcnQ+XG4gICAgICAgIDxkaXY+QmVzdCBzZXJ2ZXIgaXM6I3tiZXN0U2VydmVyfTwvZGl2PlxuICAgICAgICA8c3R5bGU+Z29vZ2xlLWNoYXJ0e3dpZHRoOjEwMCV9PC9zdHlsZT5cbiAgICBcIlwiXCJcbiJdLCJuYW1lcyI6WyJfdHlwZW9mIiwiZW1pdHRlci5kaXNwYXRjaCIsImVtaXR0ZXIuc3Vic2NyaWJlIiwiZ2V0IiwiY2FjaGUuZ2V0Iiwic2V0IiwiY2FjaGUuc2V0IiwiY2FjaGUub2JzZXJ2ZSIsImNhY2hlLmludmFsaWRhdGUiLCJyZXNvbHZlU3R5bGVMaXN0IiwicHJvY2VzcyIsImRlZmluZSIsImRlZmluZUVsZW1lbnRzIiwiZGVkdXBlSWQiLCJodG1sIl0sIm1hcHBpbmdzIjoiOzs7OztFQU1BLElBQUksY0FBYyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7RUFDeEIsU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFO0VBQ2pDLEVBQUUsSUFBSSxNQUFNLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QztFQUNBLEVBQUUsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO0VBQzVCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7RUFDbkUsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztFQUNwQyxHQUFHO0FBQ0g7RUFDQSxFQUFFLE9BQU8sTUFBTSxDQUFDO0VB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U0FBUyxDQUFDLG9EQUFvRCxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLFNBQVMsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLEVBQUUsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFO0FBQ2pZO0VBQ0EsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLE1BQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLGdCQUFnQixDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxPQUFPLEtBQUssS0FBSyxVQUFVLEVBQUUsRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLG9EQUFvRCxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFLEVBQUUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLE9BQU8sR0FBRyxFQUFFLE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLGVBQWUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ3Z2QjtFQUNBLFNBQVMsd0JBQXdCLEdBQUcsRUFBRSxJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxLQUFLLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxPQUFPLEtBQUssS0FBSyxVQUFVLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFLEVBQUU7QUFDblU7RUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksd0JBQXdCLEVBQUUsRUFBRSxFQUFFLFVBQVUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsR0FBRyxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUUsZUFBZSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRTtBQUNqYTtFQUNBLFNBQVMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNyRztFQUNBLFNBQVMsZUFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxlQUFlLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUMxSztFQUNBLFNBQVMsZUFBZSxDQUFDLENBQUMsRUFBRSxFQUFFLGVBQWUsR0FBRyxNQUFNLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEdBQUcsU0FBUyxlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFB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QUFHLEVBQUUsRUFBRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFLEVBQUVBLFNBQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRUEsU0FBTyxHQUFHLFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxHQUFHLENBQUMsV0FBVyxLQUFLLE1BQU0sSUFBSSxHQUFHLEtBQUssTUFBTSxDQUFDLFNBQVMsR0FBRyxRQUFRLEdBQUcsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPQSxTQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtBQUMvVjtFQUNBLFNBQVMsY0FBYyxDQUFDLEtBQUssRUFBRTtFQUMvQixFQUFFLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDMUY7RUFDQSxFQUFFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtFQUM1QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxTQUFTLEVBQUU7RUFDdkMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7RUFDaEMsS0FBSyxDQUFDLENBQUM7RUFDUCxHQUFHLE1BQU0sSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJQSxTQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUSxFQUFFO0VBQzVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUU7RUFDOUMsTUFBTSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3hDLEtBQUssQ0FBQyxDQUFDO0VBQ1AsR0FBRyxNQUFNO0VBQ1QsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQ25CLEdBQUc7QUFDSDtFQUNBLEVBQUUsT0FBTyxHQUFHLENBQUM7RUFDYixDQUFDO0FBQ0Q7RUFDQSxJQUFJLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzdCLEVBQWUsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtFQUM5RCxFQUFFLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztFQUN2RCxFQUFFLElBQUksSUFBSSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUNuQyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQzdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFNBQVMsRUFBRTtFQUNwQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0VBQ3BDLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztFQUNuQyxHQUFHLENBQUMsQ0FBQztFQUNMLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLFNBQVMsRUFBRTtFQUM1QyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0VBQ3ZDLEdBQUcsQ0FBQyxDQUFDO0VBQ0wsQ0FBQztFQUNEOztFQ2pDQSxTQUFTQSxTQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRSxFQUFFQSxTQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUVBLFNBQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxNQUFNLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQyxTQUFTLEdBQUcsUUFBUSxHQUFHLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBT0EsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7QUFDL1YsRUFFQSxJQUFJLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzdCLEVBQWUsU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7RUFDMUQsRUFBRSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUlBLFNBQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLEVBQUU7RUFDckQsSUFBSSxNQUFNLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7RUFDdEcsR0FBRztBQUNIO0VBQ0EsRUFBRSxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7RUFDdEQsRUFBRSxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUU7RUFDOUQsSUFBSSxJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDbkMsSUFBSSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEM7RUFDQSxJQUFJLElBQUks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LENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssb0JBQW9CLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUU7QUFDNWdCO0VBQ0EsU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUU7QUFDckU7RUFDQSxTQUFTVCxTQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRSxFQUFFQSxTQUFPLEdBQUcsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUVBLFNBQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksR0FBRyxDQUFDLFdBQVcsS0FBSyxNQUFNLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQyxTQUFTLEdBQUcsUUFBUSxHQUFHLE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBT0EsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7QUFDL1YsRUFLQTtBQUNBO0VBQ0EsSUFBSTtFQUNKLEVBQUVVLFNBQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO0VBQ3ZCLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtFQUNaLEVBQUUsSUFBSUEsU0FBTyxHQUFHO0VBQ2hCLElBQUksR0FBRyxFQUFFO0VBQ1QsTUFBTSxRQUFRLEVBQUUsWUFBWTtFQUM1QixLQUFLO0VBQ0wsR0FBRyxDQUFDO0VBQ0osQ0FBQztBQUNEO0FBQ0E7RUFDQSxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDM0IsRUFBTyxJQUFJLGNBQWMsR0FBRyxTQUFTLGNBQWMsR0FBRztFQUN0RCxFQUFFLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNqRixFQUFFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztFQUN4RCxDQUFDLENBQUM7RUFDRixJQUFJLHVCQUF1QixHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUN2RCxJQUFJLHdCQUF3QixHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNwRixJQUFJLHNCQUFzQixHQUFHLElBQUksTUFBTSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQ3RFLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQy9DLElBQUksV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMvQyxJQUFJLGlCQUFpQixHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7RUFDdEM7QUFDQTtFQUNBLFNBQVMsYUFBYSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUU7RUFDMUMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sUUFBUSxDQUFDO0VBQ2hDLEVBQUUsT0FBTyxRQUFRLENBQUMsVUFBVSxLQUFLLEVBQUU7RUFDbkMsSUFBSSxJQUFJLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUM7RUFDQSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7RUFDZCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0VBQ3RCLE1BQU0saUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMzQyxLQUFLO0FBQ0w7RUFDQSxJQUFJLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakM7RUFDQSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7RUFDaEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztFQUNqRCxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEUsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztFQUM5QixNQUFNLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDM0QsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssRUFBRTtFQUNsRCxRQUFRLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNoRDtFQUNBLFFBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0VBQzNDLFVBQVUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0VBQzFGLFNBQVM7RUFDVCxPQUFPLENBQUMsQ0FBQztFQUNULE1BQU0sS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7RUFDMUQsS0FBSztBQUNMO0VBQ0EsSUFBSSxPQUFPLEtBQUssQ0FBQztFQUNqQixHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7RUFDZixDQUFDO0FBQ0Q7RUFDQSxTQUFTLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0VBQ3hDLEVBQUUsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO0VBQzNELElBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0VBQ3JCLE1BQU0sT0FBTyxJQUFJLENBQUM7RUFDbEIsS0FBSztBQUNMO0VBQ0EsSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxFQUFFO0VBQy9GLE1BQU0sT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDMUYsS0FBSztBQUNMO0VBQ0EsSUFBSSxPQUFPLEdBQUcsR0FBRyxjQUFjLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztFQUNsRCxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDVDtFQUNBLEVBQUUsSUFBSSxNQUFNLEVBQUU7RUFDZCxJQUFJLFNBQVMsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztFQUNqRixHQUFHO0VBQ0g7QUFDQTtBQUNBO0VBQ0EsRUFBRSxJQUFJLEtBQUssRUFBRTtFQUNiLElBQUksT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLG9EQUFvRCxFQUFFLFVBQVUsS0FBSyxFQUFFO0VBQ3BHLE1BQU0sT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUNsRCxLQUFLLENBQUMsQ0FBQztFQUNQLEdBQUc7QUFDSDtFQUNBLEVBQUUsT0FBTyxTQUFTLENBQUM7RUFDbkIsQ0FBQztBQUNEO0VBQ0EsU0FBUyxlQUFlLENBQUMsTUFBTSxFQUFFO0VBQ2pDLEVBQUUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztFQUMvRCxDQUFDO0FBQ0Q7RUFDQSxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUU7RUFDbkMsRUFBRSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0VBQzdGLEVBQUUsSUFBSSxJQUFJLENBQUM7QUFDWDtFQUNBLEVBQUUsT0FBTyxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFFO0VBQ3JDLElBQUksSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO0VBQ3pELE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDcEYsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUN4QyxLQUFLO0VBQ0wsR0FBRztFQUNILENBQUM7QUFDRDtBQUNBLEVBQU8sU0FBUyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7RUFDOUMsRUFBRSxJQUFJLElBQUksQ0FBQztFQUNYLEVBQUUsT0FBTztFQUNULElBQUksSUFBSSxXQUFXLEdBQUc7RUFDdEIsTUFBTSxPQUFPLElBQUksQ0FBQztFQUNsQixLQUFLO0FBQ0w7RUFDQSxJQUFJLFFBQVEsRUFBRSxTQUFTLFFBQVEsR0FBRztFQUNsQyxNQUFNLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtFQUM5QixRQUFRLElBQUksR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3JDLE9BQU8sTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO0VBQ3pDLFFBQVEsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEMsT0FBTyxNQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtFQUNuQyxRQUFRLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0VBQ2hDLE9BQU8sTUFBTTtFQUNiLFFBQVEsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztFQUN6QyxRQUFRLElBQUksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO0FBQ3RDO0VBQ0EsUUFBUSxPQUFPLENBQUMsSUFBSSxJQUFJLFVBQVUsS0FBSyxPQUFPLEVBQUU7RUFDaEQsVUFBVSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQztFQUM3QyxVQUFVLElBQUksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO0VBQ3hDLFNBQVM7RUFDVCxPQUFPO0FBQ1A7RUFDQSxNQUFNLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0wsR0FBRyxDQUFDO0VBQ0osQ0FBQztBQUNEO0VBQ0EsU0FBUyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7RUFDdkMsRUFBRSxPQUFPLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPO0VBQzFDLEVBQUUsVUFBVSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztFQUMvRCxDQUFDO0VBQ0Q7QUFDQTtBQUNBO0VBQ0EsSUFBSSxZQUFZLEdBQUdWLFNBQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO0VBQ2hJLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUMsRUFBTyxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtFQUN6RCxFQUFFLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7RUFDcEQsRUFBRSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7RUFDakIsRUFBRSxJQUFJLFNBQVMsR0FBRyxlQUFlLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3BELEVBQUUsSUFBSSxLQUFLLEVBQUUsU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQzdEO0FBQ0E7RUFDQSxFQUFFLElBQUksS0FBSyxFQUFFO0VBQ2IsSUFBSSxRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztFQUNuQyxHQUFHLE1BQU07RUFDVCxJQUFJLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7RUFDeEUsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2hFLEdBQUc7QUFDSDtFQUNBLEVBQUUsSUFBSSxLQUFLLEVBQUU7RUFDYixJQUFJLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0VBQzlDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDMUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLEVBQUU7RUFDM0QsTUFBTSxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ2hELEtBQUssQ0FBQyxDQUFDO0VBQ1AsR0FBRztBQUNIO0VBQ0EsRUFBRSxlQUFlLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ3BDLEVBQUUsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNyRCxFQUFFLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN2QjtFQUNBLEVBQUUsSUFBSSxLQUFLLEdBQUcsU0FBUyxLQUFLLEdBQUc7RUFDL0IsSUFBSSxJQUFJLElBQUksR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO0FBQ3pDO0VBQ0EsSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtFQUMxQyxNQUFNLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDbEM7RUFDQSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLEVBQUU7RUFDakQsUUFBUSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDekQ7RUFDQSxRQUFRLElBQUksT0FBTyxFQUFFO0VBQ3JCLFVBQVUsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0VBQ2pDLFVBQVUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsRUFBRSxXQUFXLEVBQUU7RUFDckQsWUFBWSxJQUFJLGNBQWMsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztFQUM3RCxnQkFBZ0IsZUFBZSxHQUFHLGNBQWMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0VBQ25FLGdCQUFnQixNQUFNLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUMzQyxnQkFBZ0IsSUFBSSxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQztFQUNBLFlBQVksSUFBSSxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUN6QyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7RUFDbEMsWUFBWSxJQUFJLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3JDLFlBQVksT0FBTyxHQUFHLENBQUM7RUFDdkIsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLEVBQUUsS0FBSyxFQUFFO0VBQ3BELFlBQVksSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0VBQzdCLGNBQWMsV0FBVyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7RUFDN0MsYUFBYSxNQUFNO0VBQ25CLGNBQWMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBQ3hILGFBQWE7RUFDYixXQUFXLENBQUMsQ0FBQztFQUNiLFNBQVM7RUFDVCxPQUFPO0FBQ1A7RUFDQSxNQUFNLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDbkU7RUFDQSxNQUFNLElBQUksS0FBSyxFQUFFO0VBQ2pCO0VBQ0EsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0VBQzFDLFFBQVEsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0VBQ3ZELE9BQU87RUFDUCxLQUFLLE1BQU07RUFDWDtFQUNBO0VBQ0EsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFlBQVksRUFBRTtFQUMvQyxRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksRUFBRTtFQUM1RCxVQUFVLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7RUFDeEM7QUFDQTtFQUNBLFVBQVUsSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQzVFLFVBQVUsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQzVEO0VBQ0EsVUFBVSxJQUFJLEtBQUssRUFBRTtFQUNyQixZQUFZLElBQUksWUFBWSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNuRSxZQUFZLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ3pGLFlBQVksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDNUMsV0FBVyxNQUFNO0VBQ2pCLFlBQVksSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQy9EO0VBQ0EsWUFBWSxJQUFJLFFBQVEsRUFBRTtFQUMxQixjQUFjLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEQ7RUFDQSxjQUFjLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxXQUFXLEVBQUUsS0FBSyxFQUFFO0VBQzdELGdCQUFnQixJQUFJLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7RUFDcEYsb0JBQW9CLG1CQUFtQixHQUFHLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7RUFDL0Usb0JBQW9CLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRDtFQUNBLGdCQUFnQixLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBVSxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRTtFQUM5RSxrQkFBa0IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDckQsa0JBQWtCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRSxTQUFTLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUM1SDtFQUNBLGtCQUFrQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLE1BQU0sRUFBRTtFQUM5RSxvQkFBb0IsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDakUsb0JBQW9CLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxTQUFTLENBQUM7RUFDbEQsbUJBQW1CO0VBQ25CLGlCQUFpQixDQUFDLENBQUM7RUFDbkIsZUFBZSxDQUFDLENBQUM7QUFDakI7RUFDQSxjQUFjLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0VBQzlCO0FBQ0E7RUFDQSxjQUFjLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO0VBQy9DLGdCQUFnQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNoRCxnQkFBZ0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDNUMsZUFBZTtFQUNmLGFBQWE7RUFDYixXQUFXO0VBQ1gsU0FBUyxDQUFDLENBQUM7RUFDWCxPQUFPO0VBQ1AsS0FBSztBQUNMO0VBQ0EsSUFBSSxZQUFZLElBQUksQ0FBQyxDQUFDO0VBQ3RCLEdBQUcsQ0FBQztBQUNKO0VBQ0EsRUFBRSxPQUFPLGFBQWEsQ0FBQyxRQUFRLEVBQUUsRUFBRTtFQUNuQyxJQUFJLEtBQUssRUFBRSxDQUFDO0VBQ1osR0FBRztBQUNIO0VBQ0EsRUFBRSxPQUFPLFNBQVMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7RUFDN0QsSUFBSSxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtFQUNuQyxNQUFNLElBQUksRUFBRSxVQUFVO0VBQ3RCLEtBQUssQ0FBQyxDQUFDO0FBQ1A7RUFDQSxJQUFJLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7RUFDcEMsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUN6RixNQUFNLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0VBQzNCLE1BQU0sSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDOUYsTUFBTSxJQUFJLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDaEQsTUFBTSxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLE1BQU0sSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0VBQzFCLE1BQU0sSUFBSSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO0VBQzVDLE1BQU0sSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0VBQ3ZCLE1BQU0sSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7RUFDL0IsTUFBTSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUM3QjtFQUNBLE1BQU0sT0FBTyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUU7RUFDdEMsUUFBUSxJQUFJLElBQUksR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDO0FBQzVDO0VBQ0EsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtFQUM5QztFQUNBLFVBQVUsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO0VBQy9ELFlBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7RUFDbEMsV0FBVyxNQUFNLElBQUksS0FBSyxFQUFFO0VBQzVCLFlBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDekUsV0FBVztFQUNYLFNBQVMsQUFJQTtBQUNUO0VBQ0EsUUFBUSxPQUFPLFdBQVcsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssV0FBVyxFQUFFO0VBQzlELFVBQVUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQy9DLFVBQVUsV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztFQUM1QyxTQUFTO0FBQ1Q7RUFDQSxRQUFRLFdBQVcsSUFBSSxDQUFDLENBQUM7RUFDekIsT0FBTztBQUNQO0VBQ0EsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtFQUM5QyxRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNoRCxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztFQUMzRSxRQUFRLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQztFQUNuQyxRQUFRLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0M7RUFDQSxRQUFRLE9BQU8sS0FBSyxFQUFFO0VBQ3RCLFVBQVUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztFQUMzRSxVQUFVLGFBQWEsR0FBRyxLQUFLLENBQUM7RUFDaEMsVUFBVSxLQUFLLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN6QyxTQUFTO0VBQ1QsT0FBTyxNQUFNO0VBQ2IsUUFBUSxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQ3JDLE9BQU87RUFDUCxLQUFLO0FBQ0w7RUFDQSxJQUFJLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7RUFDakMsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztBQUN6QjtFQUNBLElBQUksS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUU7RUFDakUsTUFBTSxJQUFJLG1CQUFtQixHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN0RSxVQUFVLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7RUFDeEMsVUFBVSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUM7RUFDQSxNQUFNLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtFQUN4RCxRQUFRLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLE9BQU87RUFDUCxLQUFLO0FBQ0w7RUFDQSxJQUFJLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO0VBQzVDLE1BQU0sUUFBUSxDQUFDLFVBQVUsS0FBSyxFQUFFO0VBQ2hDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0VBQzdCLFVBQVUsSUFBSSxRQUFRLEVBQUU7RUFDeEIsWUFBWSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3JDLFdBQVcsTUFBTTtFQUNqQixZQUFZLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDckMsV0FBVztFQUNYLFNBQVM7RUFDVCxPQUFPLENBQUMsQ0FBQztFQUNULEtBQUs7RUFDTCxHQUFHLENBQUM7RUFDSixDQUFDO0VBQ0Q7O0VDcldBLElBQUksUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDekIsRUFBTyxTQUFTSyxLQUFHLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRTtFQUN6QyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDeEY7RUFDQSxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7RUFDOUIsSUFBSSxPQUFPLFVBQVUsSUFBSSxFQUFFO0VBQzNCLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNqQyxLQUFLLENBQUM7RUFDTixHQUFHO0FBQ0g7RUFDQSxFQUFFLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdEM7RUFDQSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7RUFDWCxJQUFJLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFO0VBQ2pDLE1BQU0sSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztFQUMvQixNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0VBQ3hDLEtBQUssQ0FBQztBQUNOO0VBQ0EsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztFQUNuQyxHQUFHO0FBQ0g7RUFDQSxFQUFFLE9BQU8sRUFBRSxDQUFDO0VBQ1osQ0FBQztFQUNELElBQUksVUFBVSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDL0IsRUFBTyxTQUFTLE9BQU8sQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFO0VBQzlDLEVBQUUsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQ3RGLEVBQUUsT0FBTyxVQUFVLElBQUksRUFBRSxNQUFNLEVBQUU7RUFDakMsSUFBSSxJQUFJLE9BQU8sQ0FBQztBQUNoQjtFQUNBLElBQUksSUFBSSxXQUFXLEVBQUU7RUFDckIsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFlBQVk7RUFDdkMsUUFBUSxPQUFPLEdBQUcsU0FBUyxDQUFDO0VBQzVCLFFBQVEscUJBQXFCLENBQUMsWUFBWTtFQUMxQyxVQUFVLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDcEMsU0FBUyxDQUFDLENBQUM7RUFDWCxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7RUFDaEIsS0FBSztBQUNMO0VBQ0EsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztFQUNwQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxRQUFRLEVBQUU7RUFDckMsTUFBTSxJQUFJLE9BQU8sRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekM7RUFDQSxNQUFNLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxPQUFPLEVBQUU7RUFDOUMsUUFBUSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQy9CLFFBQVEsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDckMsT0FBTztFQUNQLEtBQUssQ0FBQyxDQUFDO0VBQ1AsR0FBRyxDQUFDO0VBQ0osQ0FBQztFQUNEOzs7Ozs7Ozs4bkhBQTRuSCw1bkhDOUM1bkgsSUFBSSxXQUFXLEdBQUcsY0FBYyxFQUFFLENBQUM7RUFDbkMsSUFBSSxlQUFlLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQzVDLElBQUksWUFBWSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7RUFDN0IsSUFBSSxTQUFTLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztFQUM5QixJQUFJLE9BQU8sR0FBRztFQUNkLEVBQUUsTUFBTSxFQUFFLFNBQVNNLFFBQU0sQ0FBQyxRQUFRLEVBQUU7RUFDcEMsSUFBSUMsTUFBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQzdCLElBQUksT0FBTyxJQUFJLENBQUM7RUFDaEIsR0FBRztFQUNILEVBQUUsR0FBRyxFQUFFLFNBQVMsR0FBRyxDQUFDLEVBQUUsRUFBRTtFQUN4QixJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQ2pCLElBQUksT0FBTyxJQUFJLENBQUM7RUFDaEIsR0FBRztFQUNILEVBQUUsS0FBSyxFQUFFLFNBQVMsS0FBSyxHQUFHO0VBQzFCLElBQUksS0FBSyxJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7RUFDL0YsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3JDLEtBQUs7QUFDTDtFQUNBLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDaEMsSUFBSSxPQUFPLElBQUksQ0FBQztFQUNoQixHQUFHO0VBQ0gsQ0FBQyxDQUFDO0FBQ0Y7RUFDQSxTQUFTLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtFQUNwQyxFQUFFLElBQUksY0FBYyxHQUFHLFNBQVMsY0FBYyxDQUFDLElBQUksRUFBRTtFQUNyRCxJQUFJLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztFQUMxRixJQUFJLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7RUFDL0MsSUFBSSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBQ3JDLElBQUksSUFBSSxNQUFNLEVBQUUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7RUFDL0MsSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFLElBQUksZUFBZSxDQUFDO0VBQ3JDLElBQUksSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QztFQUNBLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtFQUNqQixNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztFQUNyRCxNQUFNLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ25DLEtBQUs7QUFDTDtFQUNBLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDL0IsR0FBRyxDQUFDO0FBQ0o7RUFDQSxFQUFFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFDaEQsQ0FBQztBQUNEO0FBQ0EsRUFBTyxTQUFTLElBQUksQ0FBQyxLQUFLLEVBQUU7RUFDNUIsRUFBRSxLQUFLLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7RUFDckgsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUN2QyxHQUFHO0FBQ0g7RUFDQSxFQUFFLE9BQU8sTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztFQUM3QixDQUFDO0FBQ0QsRUFBTyxTQUFTLEdBQUcsQ0FBQyxLQUFLLEVBQUU7RUFDM0IsRUFBRSxLQUFLLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7RUFDckgsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUN2QyxHQUFHO0FBQ0g7RUFDQSxFQUFFLE9BQU8sTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDbkMsQ0FBQztFQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0VBQzVCOztFQzlEQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VB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QUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7RUFDZCxNQUFNLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQzVCLE1BQU0sSUFBSSxLQUFLLHdCQUF3QkEsS0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUM5RCxNQUFNLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDNUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7RUFDNUIsTUFBTSxJQUFJLFNBQVMsRUFBRTtFQUNyQixRQUFRLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ3JFLE9BQU87RUFDUCxNQUFNLE9BQU8sR0FBRyxDQUFDO0VBQ2pCLEtBQUs7QUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEdBQUcsS0FBSyxFQUFFO0VBQy9DLE1BQU0sSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDN0IsTUFBTSxJQUFJLEtBQUssd0JBQXdCQSxLQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzlEO0VBQ0EsTUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7RUFDckIsUUFBUSxLQUFLLEdBQUcsS0FBSyxDQUFD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O0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3JCO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFDN0I7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztBQUMxQjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQzFCO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7QUFDMUI7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7QUFDMUI7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUMvQjtBQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksSUFBSSxDQUFDLEtB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
